<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>牛谱乐的技术博客</title>
  <icon>https://www.gravatar.com/avatar/b181f82763be2ff5f749321f006945ff</icon>
  <subtitle>以梦为码，不负韶华</subtitle>
  <link href="http://www.paulniu.com/atom.xml" rel="self"/>
  
  <link href="http://www.paulniu.com/"/>
  <updated>2021-09-06T12:59:41.434Z</updated>
  <id>http://www.paulniu.com/</id>
  
  <author>
    <name>Paul Niu</name>
    <email>niupuyue@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>源码分析(十三) LinkedList</title>
    <link href="http://www.paulniu.com/2021/09/06/android-source-code-13/"/>
    <id>http://www.paulniu.com/2021/09/06/android-source-code-13/</id>
    <published>2021-09-06T12:09:13.000Z</published>
    <updated>2021-09-06T12:59:41.434Z</updated>
    
    <content type="html"><![CDATA[<p>LinkedList</p><span id="more"></span><p>LinkedList是同时实现了List接口和Deque接口，也就说它既可以看做是一个顺序容器，也可以看做是一个队列，同时也可以看做是一个栈</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> LinkedList&lt;E&gt;</span><br><span class="line">    <span class="keyword">extends</span> AbstractSequentialList&lt;E&gt;</span><br><span class="line">    <span class="keyword">implements</span> List&lt;E&gt;, Deque&lt;E&gt;, Cloneable, java.io.Serializable</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//长度</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> <span class="keyword">size</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//指向头结点</span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line">    <span class="comment">//指向尾结点</span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;E&gt; last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样看来LinkedList几乎无敌，当需要使用栈或队列时，可以考虑用LinkedList，一方面是因为Java官方已经声明了不建议使用Stack类，而且Java中根本就没有衣蛾叫做Queue的类(只有一个接口的名字)</p><p>关于栈或队列 首选是ArrayDeque，他有比LinkedList(当做队列或者栈使用时)更好的性能，LinkedList的实现方式决定了所有跟下面图片相关的操作都是线性时间，而在首段或者末未删除元素还需要常数的时间。为了追求更好的效率，LinkedList没有实现同步(synchronized)，如果需要多个线程并发访问，可以先采用<strong>Collection.synchronizedList</strong>方法对齐进行包装</p><p><img src="/assets/collection/linkedlist_01.png" alt="集合种类"></p><p>基本属性</p><ul><li>transient int size = 0 // LinkedList中存放的元素个数</li><li>transient Node<E> first // 头结点</li><li>transient Node<E> last // 尾结点</li><li>Collection接口：Collection接口是所有集合类的根节点，表示一种规则</li></ul><p>继承的类和实现的接口</p><ul><li>List接口：List是Collection的子接口，他是一个元素有序(按照插入的顺序维护元素顺序),可重复，可以为null的集合</li><li>AbstractCollection类： Collection接口的骨架实现类，最小化实现了Collection接口所需要实现的工作量</li><li>AbstractList类：List接口的骨架实现类，最小化实现了List接口所需要实现的工作量</li><li>Cloneable接口：实现了该接口的类可以显示的调用<strong>Object.Clone</strong>方法，合法的对该对象实例进行字段复制，如果没有实现Cloneable接口的实例上调用了<strong>Object.clone</strong>方法，会抛出<strong>CloneNotSupportException</strong>异常，正常情况下，实现了Cloneable接口的类会以公共方法重写<strong>Object.clone</strong>方法</li><li>Deque接口：定义了一个线性的Collection，支持在两端插入和删除元素，Deque实际上就是双端队列的简称，大多数Deque接口的实现都不会限制元素的数量，但是这个队列支持有容量限制的实现，比如LinkedList就是有容量限制的实现，其最大容量是Interger.MAX_VALUE</li><li>Serialize接口：实现了该接口表示类可以被序列化</li><li>AbstractSequentialList类：提供了List接口的主要实现，最大限度的减少了实现受”连续访问”数据存储(如链表)支持的此接口所需要的工作，对于随机访问数据(如数组),应该优先使用AbstractList</li></ul><p>底层源码分析<br><img src="/assets/collection/linkedlist_02.png" alt="LinkedList底层实现示意图"></p><p>此处省略了LinkedList的源码，可以自己通过AndroidStudio查看</p><p>列出几个比较重要的方法</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入头节点</span></span><br><span class="line"><span class="keyword">private</span> void linkFirst(E e) &#123;</span><br><span class="line">        final Node&lt;E&gt; f = first;  <span class="comment">//将头节点赋值给f节点</span></span><br><span class="line">        <span class="comment">//new 一个新的节点，此节点的data = e , pre = null , next - &gt; f </span></span><br><span class="line">        final Node&lt;E&gt; <span class="keyword">new</span><span class="type">Node</span> = <span class="keyword">new</span> <span class="type">Node</span>&lt;&gt;(<span class="literal">null</span>, e, f);</span><br><span class="line">        first = <span class="keyword">new</span><span class="type">Node</span>; <span class="comment">//将新创建的节点地址复制给first</span></span><br><span class="line">        <span class="keyword">if</span> (f == <span class="literal">null</span>)  <span class="comment">//f == null，表示此时LinkedList为空</span></span><br><span class="line">            last = <span class="keyword">new</span><span class="type">Node</span>;  <span class="comment">//将新创建的节点赋值给last</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            f.prev = <span class="keyword">new</span><span class="type">Node</span>;  <span class="comment">//否则f.前驱指向newNode</span></span><br><span class="line">        size++;</span><br><span class="line">        modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入尾结点</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入尾节点</span></span><br><span class="line"> <span class="keyword">private</span> void linkLast(E e) &#123;</span><br><span class="line">        final Node&lt;E&gt; l = last; </span><br><span class="line">        final Node&lt;E&gt; <span class="keyword">new</span><span class="type">Node</span> = <span class="keyword">new</span> <span class="type">Node</span>&lt;&gt;(l, e, <span class="literal">null</span>);</span><br><span class="line">        last = <span class="keyword">new</span><span class="type">Node</span>;</span><br><span class="line">        <span class="keyword">if</span> (l == <span class="literal">null</span>)</span><br><span class="line">            first = <span class="keyword">new</span><span class="type">Node</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l.next = <span class="keyword">new</span><span class="type">Node</span>;</span><br><span class="line">        size++;</span><br><span class="line">        modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在succ节点前插入e节点，并修改各个节点之间的前驱后继</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> void linkBefore(E e, Node&lt;E&gt; succ) &#123;</span><br><span class="line">        <span class="comment">// assert succ != null;</span></span><br><span class="line">        final Node&lt;E&gt; pred = succ.prev;</span><br><span class="line">        final Node&lt;E&gt; <span class="keyword">new</span><span class="type">Node</span> = <span class="keyword">new</span> <span class="type">Node</span>&lt;&gt;(pred, e, succ);</span><br><span class="line">        succ.prev = <span class="keyword">new</span><span class="type">Node</span>;</span><br><span class="line">        <span class="keyword">if</span> (pred == <span class="literal">null</span>)</span><br><span class="line">            first = <span class="keyword">new</span><span class="type">Node</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pred.next = <span class="keyword">new</span><span class="type">Node</span>;</span><br><span class="line">        size++;</span><br><span class="line">        modCount++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>获取LinkedList中的第一个节点信息</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function">E <span class="title">getFirst</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="keyword">if</span>(f == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f.item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LinkedList没有长度的概念，所以不存在容量不足的问题，因此不需要提供大量初始化大小的构造方法，因此只提供了两个，一个是无参构造，出示一个LinkedList对象，和将制定元素转化为LinkedList的构造方法</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;LinkedList&lt;/p&gt;</summary>
    
    
    
    
    <category term="源码分析" scheme="http://www.paulniu.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>重拾android路(四十一) SurfaceView和TextureView</title>
    <link href="http://www.paulniu.com/2021/08/22/android-41-surface/"/>
    <id>http://www.paulniu.com/2021/08/22/android-41-surface/</id>
    <published>2021-08-22T08:35:51.000Z</published>
    <updated>2021-09-06T10:49:51.026Z</updated>
    
    <content type="html"><![CDATA[<p>SurfaceView和TextureView</p><span id="more"></span><blockquote><p>SurfaceView和TextureView都继承子android.view.View，属于Android提供的控件体系中的一员。与普通的View不同，他们都可以在独立线程中绘制和渲染。所以相比较于普通的ImageView，他们的性能更高，所以会应用到一些对绘制速率要求较高的场景中，用来解决普通View因为绘制耗时而带来的掉帧问题，比如相机预览，视频播放等</p></blockquote><h2 id="Surface"><a href="#Surface" class="headerlink" title="Surface"></a>Surface</h2><blockquote><p>简单理解就是在内存中的一段绘图缓冲区，在SDK文档中，对Surface的描述为”有屏幕显示内容合成器所管理的原生缓冲器句柄“。也就是说：通过Surface可以获取原生缓冲器以及其内容；原生缓冲器是用于保存当前窗口的像素数据</p></blockquote><ul><li>Surface对应了一块屏幕缓冲区，每个Window对应一个Surface，任何View都是画在Surface上的，传统的View铜像一块屏幕缓冲区，所有的绘制都必须在UI线程中进行，不能直接操作Surface示例，要通过SurfaceHolder，在SurfaceView中可以通过**getHolder()**方法获取SurfaceHolder实例</li><li>Surface是一个用来画图形的地方，但是我们的画图都是在一个Canvas对象上进行的，Surface中的Canvas成，是专门提供画图的地方，就像黑板一样，其中的原始缓冲区是用来保存数据的地方</li><li>Surface本上的作用类似一个句柄，得到了这个句柄就可以得到其中的Canvas，原始缓冲区以及其他方面的内容，所以简单来说，Surface是用来管理数据的(句柄)</li></ul><h2 id="SurfaceView应用"><a href="#SurfaceView应用" class="headerlink" title="SurfaceView应用"></a>SurfaceView应用</h2><h4 id="SurfaceView介绍"><a href="#SurfaceView介绍" class="headerlink" title="SurfaceView介绍"></a>SurfaceView介绍</h4><ol><li>SurfaceView就是Surface的View里面嵌套了一个转本用于绘制的Surface，SurfaceView控制这个Surface的格式和尺寸以及绘制位置</li><li>SurfaceView就是在Window上挖一个洞，他就是显示在这个洞里，其他的View是显示在Window上，所以View可以显示在SurfaceView上，我们也可以添加一些层在SurfaceView上</li></ol><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="attr">mWindow</span> == <span class="literal">null</span>) &#123;  </span><br><span class="line">    <span class="attr">mWindow</span> = new MyWindow(this);  </span><br><span class="line">    mLayout.<span class="attr">type</span> = mWindowType;  </span><br><span class="line">    mLayout.<span class="attr">gravity</span> = Gravity.LEFT|Gravity.TOP;  </span><br><span class="line">    mSession.addWithoutInputChannel(mWindow, mWindow.mSeq, mLayout,  </span><br><span class="line">    mVisible ? VISIBLE : GONE, mContentInsets);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个SurfaceVIew创建的时候都会创建一个MyWindow，其中在new这个对象时传递的<strong>this</strong>就是SurfaceView本身，因此将SurfaceView和Window丙丁在一起，而每个Window对应一个Surface<br>所以SurfaceView也就嵌套了一个自己的Surface，可以认为SurfaceView是来控制Surface的位置和尺寸。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;SurfaceView和TextureView&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
    <category term="surface" scheme="http://www.paulniu.com/tags/surface/"/>
    
  </entry>
  
  <entry>
    <title>重拾android路(四十) DataStore</title>
    <link href="http://www.paulniu.com/2021/06/23/android-40-datastore/"/>
    <id>http://www.paulniu.com/2021/06/23/android-40-datastore/</id>
    <published>2021-06-23T13:35:51.000Z</published>
    <updated>2021-07-05T07:19:34.037Z</updated>
    
    <content type="html"><![CDATA[<p>DataStore 是一种新的数据存储方案。DataStore 以异步、一致的事务方式存储数据，克服了 SharedPreferences 的一些缺点。</p><span id="more"></span><h3 id="关于SharedPreference的坑"><a href="#关于SharedPreference的坑" class="headerlink" title="关于SharedPreference的坑"></a>关于SharedPreference的坑</h3><ul><li>通过 getXXX() 方法获取数据，可能会导致主线程阻塞</li><li>SharedPreference 不能保证类型安全</li><li>SharedPreference 加载的数据会一直留在内存中，浪费内存</li><li>apply() 方法虽然是异步的，可能会发生 ANR，在 8.0 之前和 8.0 之后实现各不相同</li><li>apply() 方法无法获取到操作成功或者失败的结果</li></ul><h4 id="getXXX方法可能汇总成主线程的阻塞"><a href="#getXXX方法可能汇总成主线程的阻塞" class="headerlink" title="getXXX方法可能汇总成主线程的阻塞"></a>getXXX方法可能汇总成主线程的阻塞</h4><p>在SP中所有的<strong>getXXX</strong>方法都是同步执行的，在主线程中调用get方法，就必须等待SP加载完成，这会导致线程阻塞，比如我们通过下面这种方式加载数据</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sp = get<span class="constructor">SharedPreference(<span class="string">&quot;test&quot;</span>,Context.MODE_PRIVATE)</span> <span class="comment">// 异步加载sp文件</span></span><br><span class="line">sp.get<span class="constructor">String(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;&quot;</span>)</span> <span class="comment">// 等到sp加载完毕</span></span><br></pre></td></tr></table></figure><p>调用**getSharedPreference()<strong>方法，最终会调用</strong>SharedPreferenceImpl#startLoadFromDisk()**方法开启一个线程异步读取数据，如下所示</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> final <span class="built_in">Object</span> mLock = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">boolean</span> mLoaded = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">void</span> <span class="function"><span class="title">startLoadFromDisk</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    synchronized (mLock) &#123;</span><br><span class="line">        mLoaded = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">new</span> <span class="function"><span class="title">Thread</span>(<span class="params"><span class="string">&quot;SharedPreferencesImpl-load&quot;</span></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            loadFromDisk();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见，开启一个线程异步读取数据，如果数据比较小，问题不大，但如果我们读取一个比较大的数据，还没有读完，直接调用了<strong>getXXX</strong>方法，就会触发如下的内容</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">getString</span>(<span class="params"><span class="built_in">String</span> key, <span class="meta">@Nullable</span> <span class="built_in">String</span> defValue</span>)</span> &#123;</span><br><span class="line">    synchronized (mLock) &#123;</span><br><span class="line">        awaitLoadedLocked();</span><br><span class="line">        <span class="built_in">String</span> v = (<span class="built_in">String</span>)mMap.get(key);</span><br><span class="line">        <span class="keyword">return</span> v != <span class="literal">null</span> ? v : defValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">void</span> <span class="function"><span class="title">awaitLoadedLocked</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">while</span> (!mLoaded) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mLock.wait();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException unused) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在同步方法中由于调用了**wait()<strong>方法，一直等待</strong>getSharedPreferences()**方法开启的线程读取完数据之后才会继续执行</p><h4 id="SP不能保证类型安全"><a href="#SP不能保证类型安全" class="headerlink" title="SP不能保证类型安全"></a>SP不能保证类型安全</h4><p>调用<strong>getXXX</strong>方法的时候，可能会出现<strong>ClassCastException</strong>异常，这是因为在使用了相同的<strong>key</strong>进行操作的时候，<strong>putXXX</strong>方法可以使用不同类型的数据覆盖掉相同的<strong>key</strong>，如下面的代码</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> key = <span class="string">&quot;jitpack&quot;</span></span><br><span class="line"><span class="keyword">val</span> sp = get<span class="constructor">SharedPreferences(<span class="string">&quot;test&quot;</span>,Context.MODE_PRIVATE)</span> <span class="comment">// 异步加载sp文件</span></span><br><span class="line"></span><br><span class="line">sp.edit&#123; put<span class="constructor">Int(<span class="params">key</span>,0)</span> &#125; <span class="comment">// 使用Int类型的数据覆盖相同的key</span></span><br><span class="line">sp.get<span class="constructor">String(<span class="params">key</span>,<span class="string">&quot;&quot;</span>)</span> <span class="comment">// 使用相同的key获取String类型的数据</span></span><br></pre></td></tr></table></figure><p>此时编译时正确，但是运行就会发生异常</p><h4 id="SP加载数据会一直存在内存中"><a href="#SP加载数据会一直存在内存中" class="headerlink" title="SP加载数据会一直存在内存中"></a>SP加载数据会一直存在内存中</h4><p>通过**getSharedPreferences()**方法加载的数据，最后会将数据存储在静态的成员变量中</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用 getSharedPreferences 方法，最后会调用 getSharedPreferencesCacheLocked 方法</span></span><br><span class="line"><span class="keyword">public</span> SharedPreferences getSharedPreferences(<span class="keyword">File</span> <span class="keyword">file</span>, <span class="keyword">int</span> mode) &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">final</span> ArrayMap&lt;<span class="keyword">File</span>, SharedPreferencesImpl&gt; cache = getSharedPreferencesCacheLocked();</span><br><span class="line">    <span class="keyword">return</span> sp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过静态的 ArrayMap 缓存 SP 加载的数据</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ArrayMap&lt;String, ArrayMap&lt;<span class="keyword">File</span>, SharedPreferencesImpl&gt;&gt; sSharedPrefsCache;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将数据保存在 sSharedPrefsCache 中</span></span><br><span class="line"><span class="keyword">private</span> ArrayMap&lt;<span class="keyword">File</span>, SharedPreferencesImpl&gt; getSharedPreferencesCacheLocked() &#123;</span><br><span class="line">    ......</span><br><span class="line">    </span><br><span class="line">    ArrayMap&lt;<span class="keyword">File</span>, SharedPreferencesImpl&gt; packagePrefs = sSharedPrefsCache.get(packageName);</span><br><span class="line">    <span class="keyword">if</span> (packagePrefs == <span class="keyword">null</span>) &#123;</span><br><span class="line">        packagePrefs = <span class="keyword">new</span> ArrayMap&lt;&gt;();</span><br><span class="line">        sSharedPrefsCache.put(packageName, packagePrefs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> packagePrefs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在代码中我们发现<strong>sSharedPrefsCache</strong>是一个静态的<strong>ArrayMap</strong>，这就会导致缓存的每一个SP文件都保存在内存中</p><h4 id="apply-方法是异步的，但是还会存在ANR"><a href="#apply-方法是异步的，但是还会存在ANR" class="headerlink" title="apply()方法是异步的，但是还会存在ANR"></a>apply()方法是异步的，但是还会存在ANR</h4><p><strong>apply()<strong>方法是异步的，但是会阻塞主线程，虽然</strong>apply()<strong>本身是不存在任何问题的，但当生命周期处于</strong>handleStopService()</strong>,<strong>handlePauseActivity()</strong>,**handleStopActivity()<strong>的时候会一直等待</strong>apply()<strong>方法将数据保存成功，否则会一直等待，从而阻塞主线程造成ANR，</strong>apply()**方法的实现如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public void apply<span class="literal">()</span> &#123;</span><br><span class="line">    final long startTime = <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>current<span class="constructor">TimeMillis()</span>;</span><br><span class="line"></span><br><span class="line">    final MemoryCommitResult mcr = commit<span class="constructor">ToMemory()</span>;</span><br><span class="line">    final Runnable awaitCommit = <span class="keyword">new</span> <span class="constructor">Runnable()</span> &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run<span class="literal">()</span> &#123;</span><br><span class="line">                mcr.writtenToDiskLatch.await<span class="literal">()</span>; <span class="comment">// 等待</span></span><br><span class="line">                ......</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    <span class="comment">// 将 awaitCommit 添加到队列 QueuedWork 中</span></span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">QueuedWork</span>.</span></span>add<span class="constructor">Finisher(<span class="params">awaitCommit</span>)</span>;</span><br><span class="line"></span><br><span class="line">    Runnable postWriteRunnable = <span class="keyword">new</span> <span class="constructor">Runnable()</span> &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run<span class="literal">()</span> &#123;</span><br><span class="line">                awaitCommit.run<span class="literal">()</span>;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">QueuedWork</span>.</span></span>remove<span class="constructor">Finisher(<span class="params">awaitCommit</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    <span class="comment">// 8.0 之前加入到一个单线程的线程池中执行</span></span><br><span class="line">    <span class="comment">// 8.0 之后加入 HandlerThread 中执行写入任务</span></span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">SharedPreferencesImpl</span>.</span></span>this.enqueue<span class="constructor">DiskWrite(<span class="params">mcr</span>, <span class="params">postWriteRunnable</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将一个<strong>awaitCommit</strong>的<strong>Runnable</strong>任务添加到队列<strong>QueuedWork</strong>中，在<strong>awaitCommit</strong>中会调用<strong>await()<strong>方法等待，在</strong>handleStopService</strong>,<strong>handleStopActivity</strong>等等生命周期这个作为判断条件，等待任务执行完毕<br>将一个<strong>postWriteRunnable</strong>的<strong>Runnable</strong>写任务，通过<strong>enqueueDiskWrite</strong>方法，将写入任务加入到队列中，而写入任务在一个线程中执行<br>具体的内容可以看这篇博客，写的非常详细 <a href="https://juejin.cn/post/6881442312560803853">[Google] 再见 SharedPreferences 拥抱 Jetpack DataStore</a></p><h3 id="DataStore"><a href="#DataStore" class="headerlink" title="DataStore"></a>DataStore</h3><p>DataStore是经过改进的新版数据存储解决方案，旨在取代SharedPreference。DataStore基于Kotlin协程和流程构建而成，提供了两种不同的实现</p><ul><li>Proto DataStore 可以存储类型化对象</li><li>Preferences DataStore 存储键值对</li></ul><p>Google的目的很明确，就是打算用DataStore取代SharedPreference。这里的源码还没有来得及去看，先看看如何使用的</p><h4 id="DataStore导入"><a href="#DataStore导入" class="headerlink" title="DataStore导入"></a>DataStore导入</h4><p>目前DataStore还处于alpha版本，使用时需要导入下面的依赖</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  <span class="regexp">//</span> Preferences DataStore</span><br><span class="line">  implementation <span class="string">&quot;androidx.datastore:datastore-preferences:1.0.0-alpha02&quot;</span></span><br><span class="line"> </span><br><span class="line">  <span class="regexp">//</span> Proto DataStore</span><br><span class="line">  implementation <span class="string">&quot;androidx.datastore:datastore-core:1.0.0-alpha02&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DataStore的使用"><a href="#DataStore的使用" class="headerlink" title="DataStore的使用"></a>DataStore的使用</h4><p>DataStore的使用分为两种<strong>Preferences DataStore</strong>和<strong>Proto DataStore</strong>，其中<strong>Preferences DataStore</strong>是键值对，是由DataStore和Preferences实现，用于存储简单的键值对到磁盘</p><ul><li><p>Preferences DataStore的创建</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> DATASTORE_PREFERENCE_NAME = <span class="string">&quot;DataStorePreference&quot;</span><span class="comment">//定义 DataStore 的名字</span></span><br><span class="line">mDataStorePre = <span class="keyword">this</span>.createDataStore(</span><br><span class="line">    name = DATASTORE_PREFERENCE_NAME</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>*createDataStore**是Context的扩展方法，源码如下所示</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> Context.<span class="title">createDataStore</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    name: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    corruptionHandler: <span class="type">ReplaceFileCorruptionHandler</span>&lt;<span class="type">Preferences</span>&gt;? = <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    migrations: <span class="type">List</span>&lt;<span class="type">DataMigration</span>&lt;<span class="type">Preferences</span>&gt;&gt; = listOf()</span></span>,</span><br><span class="line">    scope: CoroutineScope = CoroutineScope(Dispatchers.IO + SupervisorJob())</span><br><span class="line">): DataStore&lt;Preferences&gt; =</span><br><span class="line">    PreferenceDataStoreFactory.create(</span><br><span class="line">        produceFile = &#123;</span><br><span class="line">            File(<span class="keyword">this</span>.filesDir, <span class="string">&quot;datastore/<span class="variable">$name</span>.preferences_pb&quot;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        corruptionHandler = corruptionHandler,</span><br><span class="line">        migrations = migrations,</span><br><span class="line">        scope = scope</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></li><li><p>Preferences DataStore 数据的写入和读取</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">savePreInfo</span><span class="params">(value: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> preKey = preferencesKey&lt;String&gt;(PREFERENCE_KEY_NAME)</span><br><span class="line">    mDataStorePre.edit &#123; mutablePreferences -&gt;</span><br><span class="line">        mutablePreferences[preKey] = value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">readPreInfo</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">var</span> preKey = preferencesKey&lt;String&gt;(PREFERENCE_KEY_NAME)</span><br><span class="line">    <span class="keyword">var</span> value = mDataStorePre.<span class="keyword">data</span>.map &#123; preferences -&gt;</span><br><span class="line">        preferences[preKey] ?: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value.first()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>*Preferences DataStore**以键值对的形式存储在本地，首先应该定义一个key</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> preKey = preferencesKey&lt;<span class="built_in">String</span>&gt;(PREFERENCE_KEY_NAME)</span><br></pre></td></tr></table></figure><p>key的类型是**Preferences.Key<T>**，但只支持Int,String,Boolean,Float,Long类型</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;<span class="keyword">reified</span> T : Any&gt;</span> <span class="title">preferencesKey</span><span class="params">(name: <span class="type">String</span>)</span></span>: Preferences.Key&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">when</span> (T::<span class="class"><span class="keyword">class</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">Int</span>::<span class="class"><span class="keyword">class</span> -&gt; </span>&#123;</span><br><span class="line">            Preferences.Key&lt;T&gt;(name)</span><br><span class="line">        &#125;</span><br><span class="line">        String::<span class="class"><span class="keyword">class</span> -&gt; </span>&#123;</span><br><span class="line">            Preferences.Key&lt;T&gt;(name)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Boolean</span>::<span class="class"><span class="keyword">class</span> -&gt; </span>&#123;</span><br><span class="line">            Preferences.Key&lt;T&gt;(name)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Float</span>::<span class="class"><span class="keyword">class</span> -&gt; </span>&#123;</span><br><span class="line">            Preferences.Key&lt;T&gt;(name)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Long</span>::<span class="class"><span class="keyword">class</span> -&gt; </span>&#123;</span><br><span class="line">            Preferences.Key&lt;T&gt;(name)</span><br><span class="line">        &#125;</span><br><span class="line">        Set::<span class="class"><span class="keyword">class</span> -&gt; </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> IllegalArgumentException(<span class="string">&quot;Use `preferencesSetKey` to create keys for Sets.&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">            <span class="keyword">throw</span> IllegalArgumentException(<span class="string">&quot;Type not supported: <span class="subst">$&#123;T::class.java&#125;</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>*Preferences DataStore<strong>中是通过</strong>DataStore.edit()<strong>写入数据，edit方法是一个suspend函数，必须在携程中调用，通过</strong>DataStore.data<strong>去读取数据，返回的是一个</strong>Flow<T>**</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">lifecycleScope.launch</span>&#123;</span><br><span class="line">  <span class="function"><span class="title">savePreInfo</span>(<span class="variable">textPre</span>)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">lifecycleScope.launch</span>&#123;</span><br><span class="line">  <span class="variable">val</span> <span class="variable">value</span> = <span class="function"><span class="title">readPreInfo</span>()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>从SharedPreference迁移数据<br>DataStore的目的是为了取代SharedPreference，对于老项目来说，需要从SharedPreference中进行数据迁移。在createDataStore方法中，我们传递的参数包括了一个这样的参数</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">migrations:</span> List<span class="params">&lt;DataMigration&lt;Preferences&gt;</span>&gt; = listOf()</span><br></pre></td></tr></table></figure><p>那么我们只需要在使用create方法时，将该参数设置即可</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mDataStorePre = <span class="keyword">this</span>.createDataStore(</span><br><span class="line">  name = DATASTORE_PREFERENCE_NAME,</span><br><span class="line">  migrations = listOf(SharedPreferencesMigration(<span class="keyword">this</span>, SP_PREFERENCE_NAME))</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>其中<strong>SP_PREFERENCE_NAME</strong>SP中存储文件的文件名</p></blockquote><p>除了需要存储一些基本类型之外，我们是有时候还要存储对象，之前使用SP时，是将对象序列化或者转换成Json字符串之后存储。但是现在我们可以统一使用<strong>Proto DataStore</strong>来存储</p><ul><li>Proto DataStore</li></ul><p>Proto DataStore存储数据是采用<a href="https://developers.google.cn/protocol-buffers">Protocol Buffers</a>,关于这个东西，只要知道是一种数据描述性语言，类似于XML，能够将结构化数据序列化，可用于数据存储，通信协议等方面，不过通XML相比，Protocol Buffers还是有很多有点的</p><ul><li>更简单</li><li>描述文件只需要原来的1/10至1/3</li><li>解析速度是原来的20至100倍</li><li>减少了二义性</li><li>生成了更容易在编程中使用的数据访问类</li></ul><ul><li><p>Proto DataStore创建<br>在创建Proto DataStore的时候，在AndroidStudio中必须做如下配置，添加依赖</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">classpath</span> &#x27;com.google.protobuf:protobuf-gradle-plugin:<span class="number">0</span>.<span class="number">8</span>.<span class="number">8</span>&#x27;</span><br></pre></td></tr></table></figure><p>在app的build.gradle中，修改的比较多，如下所示</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">&#x27;com.android.application&#x27;</span></span><br><span class="line">apply plugin: <span class="string">&#x27;kotlin-android&#x27;</span></span><br><span class="line">apply plugin: <span class="string">&#x27;kotlin-android-extensions&#x27;</span></span><br><span class="line">apply plugin: <span class="string">&#x27;com.google.protobuf&#x27;</span></span><br><span class="line"> </span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">30</span></span><br><span class="line">    buildToolsVersion <span class="string">&quot;30.0.2&quot;</span></span><br><span class="line"> </span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">&quot;cn.zzw.datastore&quot;</span></span><br><span class="line">        minSdkVersion <span class="number">21</span></span><br><span class="line">        targetSdkVersion <span class="number">30</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">&quot;1.0&quot;</span></span><br><span class="line"> </span><br><span class="line">        testInstrumentationRunner <span class="string">&quot;androidx.test.runner.AndroidJUnitRunner&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled false</span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">&#x27;proguard-android-optimize.txt&#x27;</span>), <span class="string">&#x27;proguard-rules.pro&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    buildFeatures &#123;</span><br><span class="line">        dataBinding true</span><br><span class="line">    &#125;</span><br><span class="line">    kotlinOptions &#123;</span><br><span class="line">        jvmTarget = <span class="string">&quot;1.8&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    sourceSets &#123;</span><br><span class="line">        main &#123;</span><br><span class="line">            proto &#123;</span><br><span class="line">                srcDir <span class="string">&#x27;src/main/proto&#x27;</span></span><br><span class="line">                include <span class="string">&#x27;**/*.proto&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">dependencies &#123;</span><br><span class="line">    <span class="keyword">implementation</span> fileTree(dir: <span class="string">&quot;libs&quot;</span>, include: [<span class="string">&quot;*.jar&quot;</span>])</span><br><span class="line">    <span class="keyword">implementation</span> <span class="string">&quot;org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version&quot;</span></span><br><span class="line">    <span class="keyword">implementation</span> <span class="string">&#x27;androidx.core:core-ktx:1.3.2&#x27;</span></span><br><span class="line">    <span class="keyword">implementation</span> <span class="string">&#x27;androidx.appcompat:appcompat:1.2.0&#x27;</span></span><br><span class="line">    <span class="keyword">implementation</span> <span class="string">&#x27;androidx.constraintlayout:constraintlayout:2.0.2&#x27;</span></span><br><span class="line">    testImplementation <span class="string">&#x27;junit:junit:4.12&#x27;</span></span><br><span class="line">    androidTestImplementation <span class="string">&#x27;androidx.test.ext:junit:1.1.2&#x27;</span></span><br><span class="line">    androidTestImplementation <span class="string">&#x27;androidx.test.espresso:espresso-core:3.3.0&#x27;</span></span><br><span class="line">    <span class="comment">// Preferences DataStore</span></span><br><span class="line">    <span class="keyword">implementation</span> <span class="string">&quot;androidx.datastore:datastore-preferences:1.0.0-alpha02&quot;</span></span><br><span class="line">    <span class="comment">// Proto DataStore</span></span><br><span class="line">    <span class="keyword">implementation</span> <span class="string">&quot;androidx.datastore:datastore-core:1.0.0-alpha02&quot;</span></span><br><span class="line">    <span class="keyword">implementation</span> <span class="string">&quot;androidx.lifecycle:lifecycle-runtime-ktx:2.2.0&quot;</span></span><br><span class="line">    <span class="keyword">implementation</span> <span class="string">&quot;com.google.protobuf:protobuf-javalite:3.10.0&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">protobuf &#123;</span><br><span class="line">    protoc &#123;</span><br><span class="line">        artifact = <span class="string">&quot;com.google.protobuf:protoc:3.10.0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Generates the java Protobuf-lite code for the Protobufs in this project. See</span></span><br><span class="line">    <span class="comment">// https://github.com/google/protobuf-gradle-plugin#customizing-protobuf-compilation</span></span><br><span class="line">    <span class="comment">// for more information.</span></span><br><span class="line">    generateProtoTasks &#123;</span><br><span class="line">        all().each &#123; task -&gt;</span><br><span class="line">            task.builtins &#123;</span><br><span class="line">                java &#123;</span><br><span class="line">                    option <span class="string">&#x27;lite&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着在目录app/src/main/proto创建文件<strong>user_prefs.proto</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">syntax</span> = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="attribute">option</span> java_package = <span class="string">&quot;cn.zzw.datastore&quot;</span>;</span><br><span class="line"><span class="attribute">option</span> java_multiple_files = <span class="literal">true</span>;</span><br><span class="line"> </span><br><span class="line"><span class="attribute">message</span> UserPreferences &#123;</span><br><span class="line">      <span class="attribute">int32</span> id = <span class="number">1</span>;</span><br><span class="line">      <span class="attribute">string</span> name = <span class="number">2</span>;</span><br><span class="line">      <span class="attribute">int32</span> age = <span class="number">3</span>;</span><br><span class="line">      <span class="attribute">string</span> phone = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行rebuild project<br>创建UserPreferencesSerializer</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.paulniu.datastore</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> androidx.datastore.Serializer</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream</span><br><span class="line"> </span><br><span class="line"><span class="keyword">object</span> UserPreferencesSerializer : Serializer&lt;UserPreferences&gt; &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">readFrom</span><span class="params">(input: <span class="type">InputStream</span>)</span></span>: UserPreferences &#123;</span><br><span class="line">        <span class="keyword">return</span> UserPreferences.parseFrom(input)</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">writeTo</span><span class="params">(t: <span class="type">UserPreferences</span>, output: <span class="type">OutputStream</span>)</span></span> = t.writeTo(output)</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后创建Proto DataStore</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mDataStorePro</span> =</span><br><span class="line">    this.createDataStore(</span><br><span class="line">        <span class="attr">fileName</span> = <span class="string">&quot;user_pros.pb&quot;</span>,</span><br><span class="line">        <span class="attr">serializer</span> = UserPreferencesSerializer</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></li><li><p>数据的写入和读取</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">saveProInfo</span><span class="params">(value: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    mDataStorePro.updateData &#123; preferences -&gt;</span><br><span class="line">        preferences.toBuilder().setId(<span class="number">110</span>).setName(value).setAge(<span class="number">39</span>).setPhone(<span class="string">&quot;119120&quot;</span>).build()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">readProInfo</span><span class="params">()</span></span>: String &#123;+</span><br><span class="line">    <span class="keyword">val</span> userPreferencesFlow: Flow&lt;UserPreferences&gt; = mDataStorePro.<span class="keyword">data</span></span><br><span class="line">    <span class="keyword">return</span> userPreferencesFlow.first().toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>调用的时候也需要配合协去执行</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">lifecycleScope.launch</span> &#123;</span><br><span class="line">                    <span class="function"><span class="title">saveProInfo</span>(<span class="variable">textPre</span>)</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">lifecycleScope.launch</span>&#123;</span><br><span class="line">   <span class="variable">var</span> <span class="variable">value</span> = <span class="function"><span class="title">readProInfo</span>()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>目前DataStore还处于alpha版本，目前还不会考虑在项目中使用它，等正式版出来之后，会考虑。所以目前还是使用SapredPreference来存储。</p></blockquote><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://blog.csdn.net/zzw0221/article/details/109274610">Android Jetpack 之 DataStore</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;DataStore 是一种新的数据存储方案。DataStore 以异步、一致的事务方式存储数据，克服了 SharedPreferences 的一些缺点。&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
    <category term="datastore" scheme="http://www.paulniu.com/tags/datastore/"/>
    
  </entry>
  
  <entry>
    <title>重拾android路(三十九) Camera</title>
    <link href="http://www.paulniu.com/2021/06/22/android-39-camera/"/>
    <id>http://www.paulniu.com/2021/06/22/android-39-camera/</id>
    <published>2021-06-22T13:35:51.000Z</published>
    <updated>2021-08-31T07:23:57.847Z</updated>
    
    <content type="html"><![CDATA[<p>Camera拍照预览分为两个部分，分别是Camera1和Camera2</p><span id="more"></span><p>不管是Camera1还是Camera2，都需要申明权限</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-feature</span><br><span class="line">        android:<span class="attribute">name</span>=<span class="string">&quot;android.hardware.camera&quot;</span></span><br><span class="line">        android:<span class="attribute">required</span>=<span class="string">&quot;true&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;uses-permission android:<span class="attribute">name</span>=<span class="string">&quot;android.permission.CAMERA&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p>在Android6.0以上要动态声明权限，这里只做比较简单的demo</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ActivityCompat.<span class="built_in">requestPermissions</span>(<span class="keyword">this</span>, <span class="keyword">new</span> <span class="keyword">String</span>[]&#123;Manifest.permission.CAMERA&#125;,</span><br><span class="line">                    REQUEST_CAMERA_PERMISSION)</span><br></pre></td></tr></table></figure><h2 id="Camera1"><a href="#Camera1" class="headerlink" title="Camera1"></a>Camera1</h2><p>在进行Camera的具体操作之前，我们需要先获取设备中Camera的信息，因为市面上的Android设备千差万别，而对于摄像头，几乎每个设备都会有自己的一套规则</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取当前设备支持的摄像头数量</span></span><br><span class="line"><span class="keyword">val</span> phoneNumbers = <span class="module-access"><span class="module"><span class="identifier">Camera</span>.</span></span>get<span class="constructor">NumberOfCameras()</span></span><br></pre></td></tr></table></figure><p>获取数量信息之后，我们需要根据CameraID获取每一个Camera的基本信息，这些基本信息在我们开启相机预览和保存拍摄图片中是十分重要的，CameraInfo包含下面几个我们需要重点关注的信息</p><ul><li>facing:摄像头的方向，一般我们的摄像头分为前置摄像头和后置摄像头，分别对应的数值是Camera.CameraInfo.CAMERA_FACING_FRONT和Camera.CameraInfo.CAMERA_FACING_BACK</li><li>orientation:表示摄像头按照顺时针旋转多少度后是正常画面</li><li>canDisableShutterSound:表示是否支持静音拍摄，也就是拍照时是否会出现“咔嚓”一声。小日子国因为一些特殊原因，是不支持静音拍摄的</li></ul><p>我们可以通过遍历的方式获取手机中摄像头的具体信息，如下所示</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> var mFrontCameraInfo: Camera.CameraInfo? = null</span><br><span class="line"><span class="keyword">private</span> var mFrontCameraID: Int? = <span class="number">0</span></span><br><span class="line"><span class="keyword">private</span> var mBackCameraInfo: Camera.CameraInfo? = null</span><br><span class="line"><span class="keyword">private</span> var mBackCameraID: Int? = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">fun</span> init<span class="constructor">CameraInfo()</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> phoneNumbers = <span class="module-access"><span class="module"><span class="identifier">Camera</span>.</span></span>get<span class="constructor">NumberOfCameras()</span></span><br><span class="line">    <span class="keyword">for</span> (cameraId <span class="keyword">in</span> <span class="number">0</span> until phoneNumbers) &#123;</span><br><span class="line">        <span class="keyword">val</span> cameraInfo = Camera.<span class="constructor">CameraInfo()</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Camera</span>.</span></span>get<span class="constructor">CameraInfo(<span class="params">cameraId</span>, <span class="params">cameraInfo</span>)</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Log</span>.</span></span>e(<span class="string">&quot;Camera1Helper&quot;</span>, cameraInfo.<span class="keyword">to</span><span class="constructor">String()</span>)</span><br><span class="line">        <span class="keyword">if</span> (cameraInfo.facing<span class="operator"> == </span>Camera.CameraInfo.CAMERA_FACING_FRONT) &#123;</span><br><span class="line">            <span class="comment">// 前置摄像头</span></span><br><span class="line">            mFrontCameraID = cameraId</span><br><span class="line">            mFrontCameraInfo = cameraInfo</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cameraInfo.facing<span class="operator"> == </span>Camera.CameraInfo.CAMERA_FACING_BACK) &#123;</span><br><span class="line">            <span class="comment">// 后置摄像头</span></span><br><span class="line">            mBackCameraID = cameraId</span><br><span class="line">            mBackCameraInfo = cameraInfo</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们通过Camera.getCameraInfo(cameraId,cameraInfo)这个方法获取相机信息，相机的id实际是从0增加到numberOfCameras,一般情况下手机的后置摄像头为0，前置摄像头为1<br>打开相机的方法是使用<strong>open</strong>方法打开摄像头</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">if</span>(<span class="variable">mCamera</span> <span class="variable">!</span>= <span class="variable"><span class="literal">null</span></span>)&#123;</span></span><br><span class="line"><span class="function">  <span class="variable">throw</span> <span class="variable">new</span> <span class="title">RuntimeException</span>(<span class="string">&quot;相机已经被开启，无法同时开启多个相机实例！&quot;</span>)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable"><span class="keyword">try</span></span>&#123;</span><br><span class="line">  <span class="variable">mCamera.open</span>(<span class="variable">mFrontCameraID</span>)</span><br><span class="line">&#125;<span class="function"><span class="title">catch</span>(<span class="variable">e</span>:<span class="variable">Exception</span>)&#123;</span></span><br><span class="line"><span class="function">  <span class="comment">// 打开摄像头失败，释放相机资源</span></span></span><br><span class="line"><span class="function">  <span class="title">releaseCamera</span>()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中我们提到在打开摄像头失败之后，需要释放相机资源。其实相机属于比较耗资源的硬件设备，如果在不使用之后，没有及时释放资源，会导致内存泄漏等一系列的问题。除了在异常捕获时释放相机资源，在Activity的生命周期中也要及时的释放资源</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 释放相机资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">releaseCamera</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mCamera != <span class="literal">null</span>) &#123;</span><br><span class="line">        mCamera?.stopPreview()</span><br><span class="line">        mCamera?.setPreviewCallback(<span class="literal">null</span>)</span><br><span class="line">        mCamera?.release()</span><br><span class="line">        mCamera = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面我们介绍的都是一些比较常用的操作，但我们可能需要的是另外一些操作，比如预览和捕获数据。我们需要认识一下相机中的参数。<br>相机功能的强大取决于手机厂商是否在底层实现了相应的功能，我们在基于手机进行开发之前需要先判断手机相机是否支持相对应的功能。我们通过<strong>Camera.Parameters</strong>来判断是否存在对应的功能。<br><strong>Camera.Parameters</strong>提供了大量类似于<strong>getSupportedXXX</strong>的方法方便我们判断相机是否支持某一个功能。例如通过<strong>getSupportedPreviewSizes()<strong>来判断相机支持的预览尺寸，这些预览尺寸可以帮助我们更好的适配手机的预览尺寸。<br>同样我们可以通过</strong>Camera.Parameters</strong>来获取相机的绝大部分参数，或者通过**Camera.setParameters()**方法重新设置相机参数。</p><ol><li>通过<strong>Camera.getParameters()</strong> 获取<strong>Camera.Parameters</strong>实体对象</li><li>通过<strong>Camera.Parameters.getSupportedXXX</strong>获取某个参数的支持情况</li><li>通过**Camera.Parameters.set()**方法设置参数</li><li>通过**Camera.setParameters()**将参数应用到底层</li></ol><blockquote><p>Camera.getParameters() 是一个比较耗时的操作，实测 20ms 到 100ms不等，所以尽可能地一次性设置所有必要的参数，然后通过 Camera.setParameters() 一次性应用到底层</p></blockquote><p>设置相机的预览尺寸，指的是把相机画面输出到手机屏幕上的尺寸，通常情况下我们希望在不超过手机分辨率的情况下，愈大愈好，当然也有可能会根据业务需要修改尺寸，比如在自定义相机时，我们需要设置特定尺寸的预览以保证预览时不会变形。在设置手机的预览尺寸之前，我们需要先获取尺寸列表,<br>通过**Camera.Parameters.getSupportedPreviewSizes()**方法</p><blockquote><p>预览尺寸的宽是长边，高是短边，例如 1920x1080，而不是 1080x1920</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getFitPreviewOutputSize</span><span class="params">(camera:<span class="type">Camera</span>)</span></span>: Size &#123;</span><br><span class="line">    <span class="keyword">val</span> parameters = camera.parameters</span><br><span class="line">    <span class="keyword">val</span> supportPreviewSize = parameters.supportedPreviewSizes</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取预览尺寸之后，根据实际情况取一个最合适的尺寸作为预览尺寸</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getFitPreviewOutputSize</span><span class="params">(camera:<span class="type">Camera</span>)</span></span>: Size &#123;</span><br><span class="line">    <span class="keyword">val</span> parameters = camera.parameters</span><br><span class="line">    <span class="keyword">val</span> supportPreviewSize = parameters.supportedPreviewSizes</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/assets/camera/camera_01.png" alt="手机支持相机尺寸列表"></p><p>添加预览Surface，相机预览的画面最终是要绘制到Surface上的，Surface 可以来自 SurfaceHolder 或者 SurfaceTexture。一般实现SurfaceHolde的两种方式如下</p><ol><li>通过 Camera.setPreviewDisplay() 方法设置 SurfaceHolder 给相机，通常是在你使用 SurfaceView 作为预览控件时会使用该方法。</li><li>通过 Camera.setPreviewTexture() 方法设置 SurfaceTexture 给相机，通常是在你使用 TextureView 作为预览控件或者自己创建 SurfaceTexture 时使用该方法</li></ol><p>开始相机预览，如下所示</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 开始相机预览</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">fun</span> start<span class="constructor">Preview()</span> &#123;</span><br><span class="line">    mCamera?.<span class="keyword">let</span> &#123;</span><br><span class="line">        it.set<span class="constructor">PreviewDisplay(<span class="params">mSurfaceHolder</span>)</span></span><br><span class="line">        <span class="comment">// 设置相机旋转角度的问题</span></span><br><span class="line">        set<span class="constructor">CameraDisplayOrientation()</span></span><br><span class="line">        <span class="comment">// 开始预览</span></span><br><span class="line">        it.start<span class="constructor">Preview()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码里我们会重新设置一下相机的旋转角度问题，之前我们在说道CameraInfo的时候，说道获取的CameraInfo中就包含了旋转信息。如果我们使用相机进行预览，不作任何处理，则会出现画面是横向展示。这是因为我们手机中的传感器方法不一定是垂直的。这里我们需要了解几个概念</p><ul><li>自然方向：当我们谈论方向的时候，实际上都是相对于某一个 0° 方向的角度，这个 0° 方向被称作自然方向，例如人站立的时候就是自然方向，你总不会认为一个人要倒立的时候才是自然方向吧，而接下来我们要谈论的设备方向就有的自然方向的定义</li><li>设备方向：设备方向指的是硬件设备在空间中的方向与其自然方向的顺时针夹角。这里提到的自然方向指的就是我们手持一个设备的时候最习惯的方向，比如手机我们习惯竖着拿，而平板我们则习惯横着拿，所以通常情况下手机的自然方向就是竖着的时候，平板的自然方向就是横着的时候</li></ul><p>当我们把手机垂直放置且屏幕朝向我们的时候，设备方向为 0°，即设备自然方向<br>当我们把手机向右横放且屏幕朝向我们的时候，设备方向为 90°<br>当我们把手机倒着放置且屏幕朝向我们的时候，设备方向为 180°<br>当我们把手机向左横放且屏幕朝向我们的时候，设备方向为 270°<br>我们可以通过 OrientationEventListener 监听设备的方向，进而判断设备当前是否处于自然方向，当设备的方向发生变化的时候会回调 OrientationEventListener.onOrientationChanged(int) 方法，传给我们一个 0° 到 359° 的方向值，其中 0° 就代表设备处于自然方向</p><ul><li>局部坐标系：所谓的局部坐标系指的是当设备处于自然方向时，相对于设备屏幕的坐标系，该坐标系是固定不变的，不会因为设备方向的变化而改变，下图是基于手机的局部坐标系示意图</li></ul><p><img src="/assets/camera/camera_02.png" alt="局部坐标系指示图"></p><p>x 轴是当手机处于自然方向时，和手机屏幕平行且指向右边的坐标轴。<br>y 轴是当手机处于自然方向时，和手机屏幕平行且指向上方的坐标轴。<br>z 轴是当手机处于自然方向时，和手机屏幕垂直且指向屏幕外面的坐标轴。</p><p>为了进一步解释【坐标系是固定不变的，不会因为设备方向的变化而改变】的概念，这里举个例子，当我们把手机向右横放且屏幕朝向我们的时候，此时设备方向为 90°，局部坐标系相对于手机屏幕是保持不变的，所以 y 轴正方向指向右边，x 轴正方向指向下方，z 轴正方向还是指向屏幕外面，如下图所示</p><p><img src="/asssets/camera/camera_03.png" alt="设备方向90°"></p><ul><li>屏幕方向：屏幕方向指的是屏幕上显示画面与局部坐标系 y 轴的顺时针夹角，注意这里实际上指的是显示的画面，而不是物理硬件上的屏幕，只是我们习惯上称作屏幕方向而已</li><li>摄像头传感器方向：摄像头传感器方向指的是传感器采集到的画面方向经过顺时针旋转多少度之后才能和局部坐标系的 y 轴正方向一致，其实就是Camera.CameraInfo.orientation属性。<br>例如 orientation 为 90° 时，意味我们将摄像头采集到的画面顺时针旋转 90° 之后，画面的方向就和局部坐标系的 y 轴正方向一致，换个说法就是原始画面的方向和 y 轴的夹角是逆时针 90°</li></ul><blockquote><p>考虑一个特殊情况，就是前置摄像头的画面是做了镜像处理的，也就是所谓的前置镜像操作，这个情况下， orientation 的值并不是实际我们要旋转的角度，我们需要取它的镜像值才是我们真正要旋转的角度，例如 orientation 为 270°，实际我们要旋转的角度是 90°</p></blockquote><blockquote><p>摄像头传感器方向在不同的手机上可能不一样，大部分手机都是 90°，也有小部分是 0° 的，所以我们要通过 Camera.CameraInfo.orientation 去判断方向，而不是假设所有设备的摄像头传感器方向都是 90°</p></blockquote><p>矫正的代码如下所示</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 相机旋转角度问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">fun</span> set<span class="constructor">CameraDisplayOrientation()</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> cameraInfo = Camera.<span class="constructor">CameraInfo()</span></span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">Camera</span>.</span></span>get<span class="constructor">CameraInfo(<span class="params">mCameraFacing</span>, <span class="params">cameraInfo</span>)</span></span><br><span class="line">    <span class="comment">// 获取当前相机默认旋转的角度</span></span><br><span class="line">    <span class="keyword">val</span> rotation = mActivity.windowManager.defaultDisplay.rotation</span><br><span class="line">    var screenAngle = <span class="number">0</span></span><br><span class="line">    <span class="keyword">when</span> (rotation) &#123;</span><br><span class="line">        Surface.ROTATION_0 -&gt; screenAngle = <span class="number">0</span></span><br><span class="line">        Surface.ROTATION_90 -&gt; screenAngle = <span class="number">90</span></span><br><span class="line">        Surface.ROTATION_180 -&gt; screenAngle = <span class="number">180</span></span><br><span class="line">        Surface.ROTATION_270 -&gt; screenAngle = <span class="number">270</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cameraInfo.facing<span class="operator"> == </span>Camera.CameraInfo.CAMERA_FACING_FRONT) &#123;</span><br><span class="line">        <span class="comment">// 如果是前置摄像头</span></span><br><span class="line">        mDisplayOrientation = (cameraInfo.orientation + screenAngle) % <span class="number">360</span></span><br><span class="line">        mDisplayOrientation =</span><br><span class="line">            (<span class="number">360</span> - mDisplayOrientation) % <span class="number">360</span>          <span class="comment">// compensate the mirror</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mDisplayOrientation = (cameraInfo.orientation - screenAngle + <span class="number">360</span>) % <span class="number">360</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mCamera?.set<span class="constructor">DisplayOrientation(<span class="params">mDisplayOrientation</span>)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>预览已经可以了，我们接下来看一下如何保存数据<br>在开启相机预览时，我们通过回调的方式获取相机预览的数据，并且可以配置预览数据的数据格式。<br>如果想要设置预览数据的格式，需要先去判断预览的格式是否支持</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断指定的预览格式是否支持。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">private <span class="type">boolean</span> isPreviewFormatSupported(Camera.Parameters parameters, <span class="type">int</span> <span class="keyword">format</span>) &#123;</span><br><span class="line">    List&lt;<span class="type">Integer</span>&gt; supportedPreviewFormats = parameters.getSupportedPreviewFormats();</span><br><span class="line">    <span class="keyword">return</span> supportedPreviewFormats != <span class="keyword">null</span> &amp;&amp; supportedPreviewFormats.contains(<span class="keyword">format</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在确定预览的格式可以被支持之后，我们在通过**setPreviewFormat()**方法来设置预览数据的格式</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> static final <span class="built_in">int</span> PREVIEW_FORMAT = ImageFormat.NV21;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (is<span class="constructor">PreviewFormatSupported(<span class="params">parameters</span>, PREVIEW_FORMAT)</span>) &#123;</span><br><span class="line">    parameters.set<span class="constructor">PreviewFormat(PREVIEW_FORMAT)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于数据的获取，我们通过<strong>Camera.PreviewCallback</strong>实现该接口，并且绑定给相机即可。注册回调的方式有两种</p><ul><li>setPreviewCallback()：注册预览回调</li><li>setPreviewCallbackWithBuffer()：注册预览回调，并且使用已经配置好的缓冲池</li></ul><p>使用 setPreviewCallback() 注册预览回调获取预览数据是最简单的，因为你不需要其他配置流程，直接注册即可，但是出于性能考虑，官方推荐我们使用 setPreviewCallbackWithBuffer()，因为它会使用我们配置好的缓冲对象回调预览数据，避免重复创建内存占用很大的对象。所以接下来我们重点介绍如何根据预览尺寸配置对象池并注册回调，整个步骤如下</p><ol><li>根据需求确定预览尺寸</li><li>根据需求确定预览数据格式</li><li>根据预览尺寸和数据格式计算出每一帧画面要占用的内存大小</li><li>通过 addCallbackBuffer() 方法提前添加若干个创建好的 byte 数组对象作为缓冲对象供回调预览数据使用</li><li>通过 setPreviewCallbackWithBuffer() 注册预览回调</li><li>使用完缓冲对象之后，通过 addCallbackBuffer() 方法回收缓冲对象</li></ol><p>这里我们需要重新设置预览尺寸的大小，在配置预览尺寸的同时根据预览尺寸和数据格式 设置缓存区大小</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">@WorkerThread</span><br><span class="line"><span class="keyword">private</span> void set<span class="constructor">PreviewSize(<span class="params">int</span> <span class="params">shortSide</span>, <span class="params">int</span> <span class="params">longSide</span>)</span> &#123;</span><br><span class="line">    Camera camera = mCamera;</span><br><span class="line">    <span class="keyword">if</span> (camera != null<span class="operator"> &amp;&amp; </span>shortSide != <span class="number">0</span><span class="operator"> &amp;&amp; </span>longSide != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">float</span> aspectRatio = (<span class="built_in">float</span>) longSide<span class="operator"> / </span>shortSide;</span><br><span class="line">        Camera.Parameters parameters = camera.get<span class="constructor">Parameters()</span>;</span><br><span class="line">        List&lt;Camera.Size&gt; supportedPreviewSizes = parameters.get<span class="constructor">SupportedPreviewSizes()</span>;</span><br><span class="line">        <span class="keyword">for</span> (Camera.Size previewSize : supportedPreviewSizes) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="built_in">float</span>) previewSize.width<span class="operator"> / </span>previewSize.height<span class="operator"> == </span>aspectRatio<span class="operator"> &amp;&amp; </span>previewSize.height &lt;= shortSide<span class="operator"> &amp;&amp; </span>previewSize.width &lt;= longSide) &#123;</span><br><span class="line">                parameters.set<span class="constructor">PreviewSize(<span class="params">previewSize</span>.<span class="params">width</span>, <span class="params">previewSize</span>.<span class="params">height</span>)</span>;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">Log</span>.</span></span>d(TAG, <span class="string">&quot;setPreviewSize() called with: width = &quot;</span> + previewSize.width + <span class="string">&quot;; height = &quot;</span> + previewSize.height);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (is<span class="constructor">PreviewFormatSupported(<span class="params">parameters</span>, PREVIEW_FORMAT)</span>) &#123;</span><br><span class="line">                    parameters.set<span class="constructor">PreviewFormat(PREVIEW_FORMAT)</span>;</span><br><span class="line">                    <span class="built_in">int</span> frameWidth = previewSize.width;</span><br><span class="line">                    <span class="built_in">int</span> frameHeight = previewSize.height;</span><br><span class="line">                    <span class="built_in">int</span> previewFormat = parameters.get<span class="constructor">PreviewFormat()</span>;</span><br><span class="line">                    PixelFormat pixelFormat = <span class="keyword">new</span> <span class="constructor">PixelFormat()</span>;</span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">PixelFormat</span>.</span></span>get<span class="constructor">PixelFormatInfo(<span class="params">previewFormat</span>, <span class="params">pixelFormat</span>)</span>;</span><br><span class="line">                    <span class="built_in">int</span> bufferSize = (frameWidth<span class="operator"> * </span>frameHeight<span class="operator"> * </span>pixelFormat.bitsPerPixel)<span class="operator"> / </span><span class="number">8</span>;</span><br><span class="line">                    camera.add<span class="constructor">CallbackBuffer(<span class="params">new</span> <span class="params">byte</span>[<span class="params">bufferSize</span>])</span>;</span><br><span class="line">                    camera.add<span class="constructor">CallbackBuffer(<span class="params">new</span> <span class="params">byte</span>[<span class="params">bufferSize</span>])</span>;</span><br><span class="line">                    camera.add<span class="constructor">CallbackBuffer(<span class="params">new</span> <span class="params">byte</span>[<span class="params">bufferSize</span>])</span>;</span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">Log</span>.</span></span>d(TAG, <span class="string">&quot;Add three callback buffers with size: &quot;</span> + bufferSize);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                camera.set<span class="constructor">Parameters(<span class="params">parameters</span>)</span>;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在预览回调方法里使用完 Buffer 之后，记得一定要调用 addCallbackBuffer() 将 Buffer 重新添加到缓冲池里供相机使用</p></blockquote><p><a href="https://github.com/niupuyue/blog_demo_android/tree/master/CameraDemo">demo地址</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.jianshu.com/p/705d4792e836">Android Camera1 教程</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Camera拍照预览分为两个部分，分别是Camera1和Camera2&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
    <category term="camera" scheme="http://www.paulniu.com/tags/camera/"/>
    
  </entry>
  
  <entry>
    <title>kotlin let,run,with,apply和also的使用</title>
    <link href="http://www.paulniu.com/2021/06/21/kotlin-lession-02/"/>
    <id>http://www.paulniu.com/2021/06/21/kotlin-lession-02/</id>
    <published>2021-06-21T08:14:22.000Z</published>
    <updated>2021-06-21T09:20:24.661Z</updated>
    
    <content type="html"><![CDATA[<p>总结一下kotlin中let，also，apply，with，run的使用方法</p><span id="more"></span><p>作用域函数在kotlin中是非常重要的特点，共分为以下五种：let,run,with,apply和also,这五个函数的工作方式可以说非常相似，但是我们需要了解这五个函数的差异，以便在不同的场景更好的利用它</p><h3 id="Kotlin的作用域函数"><a href="#Kotlin的作用域函数" class="headerlink" title="Kotlin的作用域函数"></a>Kotlin的作用域函数</h3><p>简单来说，作用域函数是为了方便对一个对象进行访问和操作，可以对他们进行空检查或者修改它的属性或者直接返回它的值等操作，具体来说</p><h4 id="let"><a href="#let" class="headerlink" title="let"></a>let</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, R&gt;</span> T.<span class="title">let</span><span class="params">(block: (<span class="type">T</span>) -&gt; <span class="type">R</span>)</span></span>: R</span><br></pre></td></tr></table></figure><p>let函数是参数化类型T的扩展函数，在let块内可以通过it指代该对象，返回值为let块的最后一行或自定return表达式<br>如下所示：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>()&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;《魁拔之书》&quot;</span></span><br><span class="line">    <span class="keyword">var</span> price = <span class="number">60</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">displayInfo</span><span class="params">()</span></span> = print(<span class="string">&quot;书 <span class="variable">$name</span> ,价格是 <span class="variable">$price</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">val <span class="attr">book</span> = Book().<span class="keyword">let</span>&#123;</span><br><span class="line">    it.<span class="attr">name</span> = <span class="string">&quot;魁拔之书&quot;</span></span><br><span class="line">    <span class="string">&quot;这本书是<span class="subst">$&#123;it.name&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">print(book)</span><br></pre></td></tr></table></figure><p>在控制台中输出的结果是</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这本书是魁拔之书</span><br></pre></td></tr></table></figure><p>这里我们对Book对象使用let作用域函数，在函数块的最后一行添加了一行字符串，并且对Book对象进行了打印，我们看到最后输出的结果是字符串。正常的逻辑，打印一个对象，必定输出的是一个对象，但是在使用let函数之后，输出的是最后一行字符串，这就是let函数的特性导致的。在kotlin中，如果let块中的最后一条语句是非赋值语句，则默认情况下它就是返回语句，相应的如果我们把最后一个语句改为赋值语句，则会变成一个对象</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">val book = Book().let&#123;</span><br><span class="line">    it<span class="selector-class">.name</span> = <span class="string">&quot;魁拔之书&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(book)</span></span></span><br></pre></td></tr></table></figure><p>控制台输出结果为</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kotlin.<span class="keyword">Unit</span></span><br></pre></td></tr></table></figure><p>由此可见，let的函数的特点：</p><p>1.let块中最后一条语句如果是非赋值语句，则默认情况下他是返回语句，否则返回的是一个Unit类型</p><p>2.let可以用于空安全检查<br>如果需要对空对象进行操作，可以对其使用安全调用操作符?.，并调用let在lambda表达式中执行操作，如下所示</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name:<span class="built_in">String</span>? = <span class="literal">null</span></span><br><span class="line">val nameLen = names?.<span class="keyword">let</span>&#123;</span><br><span class="line">    <span class="literal">it</span>.lenght</span><br><span class="line">&#125;?: <span class="string">&quot;name为null&quot;</span></span><br></pre></td></tr></table></figure><p>当那么不为null时，会给nameLen赋值为字符串长度，否则会赋值为字符串</p><p>3.let可以对调用链的结果记性操作<br>例如，我们想获取一个数组中字符串长度大于3的字符串，正常的写法应该是这样的</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">val numbers = arrayListOf(<span class="string">&quot;one&quot;</span>,<span class="string">&quot;two&quot;</span>,<span class="string">&quot;three&quot;</span>,<span class="string">&quot;four&quot;</span>,<span class="string">&quot;five&quot;</span>)</span><br><span class="line">val resultList = numbers.<span class="keyword">map</span> &#123; </span><br><span class="line">    <span class="literal">it</span>.length</span><br><span class="line"> &#125;.filter &#123;</span><br><span class="line">     <span class="literal">it</span> &gt; <span class="number">3</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">print</span>(resultList)</span><br></pre></td></tr></table></figure><p>如果想用let操作符进行简化，可以这样写</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">val numbers = arrayListOf(<span class="string">&quot;one&quot;</span>,<span class="string">&quot;two&quot;</span>,<span class="string">&quot;three&quot;</span>,<span class="string">&quot;four&quot;</span>,<span class="string">&quot;five&quot;</span>)</span><br><span class="line">numbers.<span class="keyword">map</span>&#123;</span><br><span class="line">    <span class="literal">it</span>.length</span><br><span class="line">&#125;.filter &#123;</span><br><span class="line">    <span class="literal">it</span> &gt; <span class="number">3</span></span><br><span class="line">&#125;?.<span class="keyword">let</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="literal">it</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用let之后，可以直接对数组列表中长度大于3的字符串进行打印，去掉变量赋值</p><p>4.let可以重命名it为一个刻度的lambda参数</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">val <span class="keyword">book </span>= <span class="keyword">Book().let&#123; </span><span class="keyword">book </span>-&gt; </span><br><span class="line">    <span class="keyword">book.name </span>= <span class="string">&quot;《最后的魁拔》&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>let通过使用关键字it来引用对象的上下文，不过也可以重命名为一个可读的lambda参数</p><h4 id="run"><a href="#run" class="headerlink" title="run"></a>run</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, R&gt;</span> T.<span class="title">run</span><span class="params">(block: <span class="type">T</span>.() -&gt; <span class="type">R</span>)</span></span>: R</span><br></pre></td></tr></table></figure><p>run函数比较简单，以this作为上下文对象，且他的调用方式与let一致</p><p>特点：</p><p>1.当lambda表达式同时包含对象初始化和返回值的计算时，使用run更合适<br>简单来说，在run方法中，我们可以对当前对象同时执行多个操作，如下所示</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">Book</span>().run&#123;</span></span><br><span class="line"><span class="function">    <span class="variable">name</span> = <span class="string">&quot;魁拔之书&quot;</span></span></span><br><span class="line"><span class="function">    <span class="variable">price</span> = <span class="number">35</span></span></span><br><span class="line"><span class="function">    <span class="title">displayInfo</span>()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出结果是</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">书 魁拔之书 ,价格是 35</span><br></pre></td></tr></table></figure><p>我们发现即使我们没有手动执行print方法，但是因为displayInfo方法本身就有打印功能，所以最终还是把信息打印了出来。这里我们可以认为，在run代码块中，每一行代码都会被执行到，就算是一个方法的调用，也会被执行到。<br>如果不适用run函数，则需要这样操作</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">val <span class="keyword">book </span>= <span class="keyword">Book()</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">book.name </span>= <span class="string">&quot;《魁拔之书》&quot;</span></span><br><span class="line"><span class="keyword">book.price </span>= <span class="number">35</span></span><br><span class="line"><span class="keyword">book.displayInfo()</span></span><br></pre></td></tr></table></figure><p>2.除了上面给出的声明方式外，我们还可以写成这样</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">run &#123;</span><br><span class="line">    val <span class="keyword">book </span>= <span class="keyword">Book()</span></span><br><span class="line"><span class="keyword"></span>    <span class="keyword">book.name </span>= <span class="string">&quot;《魁拔之书》&quot;</span></span><br><span class="line">    <span class="keyword">book.price </span>= <span class="number">35</span></span><br><span class="line">    <span class="keyword">book.displayInfo()</span></span><br><span class="line"><span class="keyword"></span>&#125;</span><br></pre></td></tr></table></figure><p>当时这样的声明时，使用的声明方式是如下所示</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;R&gt;</span> <span class="title">run</span><span class="params">(block: () -&gt; <span class="type">R</span>)</span></span>: R</span><br></pre></td></tr></table></figure><h4 id="with"><a href="#with" class="headerlink" title="with"></a>with</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T,R&gt;</span> <span class="title">with</span> <span class="params">(receiver: <span class="type">T</span>, block:<span class="type">T</span>.() -&gt; <span class="type">R</span>)</span></span>:R</span><br></pre></td></tr></table></figure><p>with函数属于非扩展函数，直接输入一个对象receiver，当输入receiver后，便可以改变receiver的属性，同时也与run做了同样的事情</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">val <span class="attr">book</span> = Book()</span><br><span class="line"><span class="keyword">with</span>(book)&#123;</span><br><span class="line">    <span class="attr">name</span> = <span class="string">&quot;魁拔之书&quot;</span></span><br><span class="line">    <span class="attr">price</span> = <span class="number">35</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们使用with时传入了一个参数book，可以直接在with代码块中访问book中的属性和方法。</p><blockquote><p>with使用的是非null对象，当函数块中不需要返回值时，可以使用with</p></blockquote><h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> T.<span class="title">apply</span><span class="params">(block: <span class="type">T</span>() -&gt; <span class="type">Unit</span>)</span></span>: T</span><br></pre></td></tr></table></figure><p>apply是T的扩展函数，这点和run有点类似，它将对象的上下文引用为this而不是it，并且提供了空安全检查，不同的是，apply不接受函数块中的返回值，返回值是自己的T类型对象</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">val</span> <span class="variable">book</span> = <span class="function"><span class="title">Book</span>().apply&#123;</span></span><br><span class="line"><span class="function">    <span class="variable">name</span> = <span class="string">&quot;《魁拔之书》&quot;</span></span></span><br><span class="line"><span class="function">    <span class="variable">price</span> = <span class="number">33</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"><span class="title">print</span>(<span class="variable">book</span>)</span></span><br></pre></td></tr></table></figure><p>此处打印的结果 book是一个第一项，返回内存地址。其实我们不难发现，let，with,run函数返回值都是R，而apply和also返回值是T。比如在let中，没有在函数块中返回具体的值，最终会成为Unit类型。而apply中，最后返回对象本身T时，他就是Book类型</p><h4 id="also"><a href="#also" class="headerlink" title="also"></a>also</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> T.<span class="title">alse</span><span class="params">(block: (<span class="type">T</span>) -&gt; <span class="type">Unit</span>)</span></span>: T</span><br></pre></td></tr></table></figure><p>alse是T的扩展函数，返回值与apply一致，直接返回T。alse函数的用法类似于let函数，将对象的上下文引用为it，并提供空安全检查</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">val book = Book().also&#123;</span><br><span class="line">    it<span class="selector-class">.name</span> = <span class="string">&quot;《魁拔之书》&quot;</span></span><br><span class="line">    it<span class="selector-class">.price</span> = <span class="number">32</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(book)</span></span></span><br></pre></td></tr></table></figure><p>控制台最终输出的结果是book的内存地址</p><h3 id="let-run-with-apply-alse的使用场景"><a href="#let-run-with-apply-alse的使用场景" class="headerlink" title="let,run,with,apply,alse的使用场景"></a>let,run,with,apply,alse的使用场景</h3><p>简单罗列了几个常见的使用场景</p><ul><li>初始化对象/更改对象属性，可使用apply</li><li>如果将数据指派给接收对象的属性之前需要验证对象，使用also</li><li>如果将对象进行空检查并访问或修改其属性，使用let</li><li>如果是非null的对象并且函数块中不需要返回值，可以使用with</li><li>如果想计算某个值，或者限制多个本地变量的范围，使用run</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 显示弹窗时，保证context上下文对象不能为null(空检查)</span></span><br><span class="line">context?.let &#123;</span><br><span class="line">    <span class="keyword">val</span> teacherInfoDialog = AICourseTeacherInfoDialog(it, t.<span class="keyword">data</span>)</span><br><span class="line">    teacherInfoDialog.show()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改对象的属性</span></span><br><span class="line">UserManager.user?.apply &#123;</span><br><span class="line">    <span class="keyword">this</span>.grade = grade</span><br><span class="line">    <span class="keyword">this</span>.edition = edition</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算某个值</span></span><br><span class="line"><span class="keyword">val</span> user = User(<span class="string">&quot;Kotlin&quot;</span>, <span class="number">1</span>, <span class="string">&quot;1111111&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> result = user.run &#123;</span><br><span class="line">    println(<span class="string">&quot;my name is <span class="variable">$name</span>, I am <span class="variable">$age</span> years old, my phone number is <span class="variable">$phoneNum</span>&quot;</span>)</span><br><span class="line">    <span class="number">1000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://juejin.cn/post/6975384870675546126?share_token=d2308375-e0e4-43b8-8679-8b7a8e1155c0">(kotlin篇)差异化分析，let，run，with，apply及also</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;总结一下kotlin中let，also，apply，with，run的使用方法&lt;/p&gt;</summary>
    
    
    
    
    <category term="kotlin" scheme="http://www.paulniu.com/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>android-interview-2020</title>
    <link href="http://www.paulniu.com/2020/03/29/android-interview-2020/"/>
    <id>http://www.paulniu.com/2020/03/29/android-interview-2020/</id>
    <published>2020-03-29T11:16:29.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android基础面试题</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Android基础面试题&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
    <category term="面试" scheme="http://www.paulniu.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>源码分析(十二) AsyncTask源码分析</title>
    <link href="http://www.paulniu.com/2020/03/13/android-source-code-12/"/>
    <id>http://www.paulniu.com/2020/03/13/android-source-code-12/</id>
    <published>2020-03-13T14:09:13.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>AsyncTask源码分析</p><span id="more"></span><p>AsyncTask是一种轻量级的异步任务类，在线程池中执行异步任务，将执行进度和结果传递给主线程，并让主线程更新UI。</p><p>我们使用AsyncTask的方式如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadFilesTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">URL</span>, <span class="title">Integer</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">//准备工作，在主线程。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Long <span class="title">doInBackground</span><span class="params">(URL... urls)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//耗时操作，在子线程。</span></span><br><span class="line">        <span class="keyword">int</span> count = urls.length;</span><br><span class="line">        <span class="keyword">long</span> totalSize = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            totalSize += Downloader.downloadFile(urls[i]);</span><br><span class="line">            publishProgress((<span class="keyword">int</span>) ((i / (<span class="keyword">float</span>) count) * <span class="number">100</span>));</span><br><span class="line">            <span class="comment">// Escape early if cancel() is called</span></span><br><span class="line">            <span class="keyword">if</span> (isCancelled()) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> totalSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Integer... progress)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//显示进度，在主线程</span></span><br><span class="line">        setProgressPercent(progress[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCancelled</span><span class="params">(Float result)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//任务被取消会调用这个方法，不会调用 onPostExecute ，在主线程。</span></span><br><span class="line">        showDialog(<span class="string">&quot;Cancelled &quot;</span> + result + <span class="string">&quot; bytes&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Long result)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//任务完成，没有被取消，调用这个方法，在主线程。</span></span><br><span class="line">        showDialog(<span class="string">&quot;Downloaded &quot;</span> + result + <span class="string">&quot; bytes&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="keyword">new</span> DownloadFilesTask().execute(url1, url2, url3);</span><br></pre></td></tr></table></figure><p>在使用的时候，我们首先创建了一个AsyncTask的对象，所以我们需要先看一下构造方法</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AsyncTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mHandler = callbackLooper == <span class="keyword">null</span> || callbackLooper == Looper.getMainLooper()</span><br><span class="line">            ? getMainHandler()</span><br><span class="line">            : <span class="keyword">new</span> Handler(callbackLooper);</span><br><span class="line"></span><br><span class="line">        mWorker = <span class="keyword">new</span> WorkerRunnable&lt;Params, Result&gt;() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="function">Result <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                mTaskInvoked.set(<span class="keyword">true</span>);</span><br><span class="line">                Result result = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class="line">                    <span class="comment">//noinspection unchecked</span></span><br><span class="line">                    result = doInBackground(mParams);</span><br><span class="line">                    Binder.flushPendingCommands();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable tr) &#123;</span><br><span class="line">                    mCancelled.set(<span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">throw</span> tr;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    postResult(result);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        mFuture = <span class="keyword">new</span> FutureTask&lt;Result&gt;(mWorker) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">done</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    postResultIfNotInvoked(get());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    android.util.Log.w(LOG_TAG, e);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;An error occurred while executing doInBackground()&quot;</span>,</span><br><span class="line">                            e.getCause());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (CancellationException e) &#123;</span><br><span class="line">                    postResultIfNotInvoked(<span class="keyword">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在构造方法中我们我们创建了一个mWorker对象，这个对象是一个WorkerRunnable对象，并且WorkerRunnable类实现了Callable接口，这个接口与Runnable接口类似，不过Callable接口中的call方法(类似于run方法)有返回值，并且需要添加异常捕获。同时我们还创建了一个mFuture对象，这个对象将mWorker作为参数传递，我们Thread类。想一下我们通过Runnable创建子线程时，启动子线程是不是也是类似的方式执行的？<br>在创建完成对象之后，调用execute方法开始执行，而这个方法执行的操作如下所示</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@MainThread</span><br><span class="line"><span class="keyword">public</span> final AsyncTask&lt;<span class="keyword">Params</span>, Progress, Result&gt; execute(<span class="keyword">Params</span><span class="params">...</span> <span class="keyword">params</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> executeOnExecutor(sDefaultExecutor, <span class="keyword">params</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在execute方法中调用了AsyncTask的executeOnExecutor方法，并且传递了两个对象sDefaultExecutor和params，params是我们需要传递的参数，而sDefaultExecutor的实现如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * An &#123;<span class="doctag">@link</span> Executor&#125; that executes tasks one at a time in serial</span></span><br><span class="line"><span class="comment"> * order.  This serialization is global to a particular process.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor SERIAL_EXECUTOR = <span class="keyword">new</span> SerialExecutor();</span><br><span class="line"></span><br><span class="line"><span class="meta">@UnsupportedAppUsage</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Executor sDefaultExecutor = SERIAL_EXECUTOR;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ArrayDeque&lt;Runnable&gt; mTasks = <span class="keyword">new</span> ArrayDeque&lt;Runnable&gt;();</span><br><span class="line">    Runnable mActive;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="keyword">final</span> Runnable r)</span> </span>&#123;</span><br><span class="line">        mTasks.offer(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    r.run();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    scheduleNext();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span> (mActive == <span class="keyword">null</span>) &#123;</span><br><span class="line">            scheduleNext();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">scheduleNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((mActive = mTasks.poll()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            THREAD_POOL_EXECUTOR.execute(mActive);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是第一次看，可能觉得代码很多，无法看懂，但是我们需要抓到关键点，就是synchhronized关键字，有了这个关键字，不管当前在AsyncTask中有多少个子线程，最终执行的时候，只能有一个在执行。其实他就是在模拟单线程。我们会发现通过SerialExector的创建，将SERIAL_EXECTUOR传递给sDefaultExecutor，而SerialExecutor是实现了Executor接口，这个接口中我们需要重写execute方法。并且在这个类中，我们创建了两个对象一个是ArrayDeque的task，另一个是Runnable的active。所有的任务都放在ArrayDeque这个队列中，SERIAL_EXECUTOR执行execute方法就会创建一个任务到队列中，当active==null时说明队列中没有任务，直接执行scheduleNext方法，从队列中poll出一个任务并且执行该任务，执行任务是由TREAD_POOL_EXECUTOR这个线程池执行的。run() 方法中又会执行传进来的那个任务 final Runnable r，执行完后，同样调用 scheduleNext(); 再去取下一个任务，如此循环，直到队列中没有任务为止。<br>关于THREAD_POOL_EXECUTOR的声明如下所示</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CPU_COUNT = <span class="keyword">Runtime</span>.getRuntime().availableProcessors();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CORE_POOL_SIZE = CPU_COUNT + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_POOL_SIZE = CPU_COUNT * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> KEEP_ALIVE = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; sPoolWorkQueue =</span><br><span class="line">        <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class="number">128</span>); </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor THREAD_POOL_EXECUTOR = <span class="keyword">new</span> ThreadPoolExecutor(CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE,</span><br><span class="line">        TimeUnit.SECONDS, sPoolWorkQueue, sThreadFactory);</span><br></pre></td></tr></table></figure><p>既然我们调用AsyncTask是通过execute方法执行的，就像我们上面所说的，最终都会调用到executeOnExecutor方法，主要代码如下</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@MainThread</span><br><span class="line"><span class="function"><span class="keyword">public</span> final AsyncTask&lt;Params, Progress, Result&gt; <span class="title">executeOnExecutor</span>(<span class="params">Executor exec,</span></span></span><br><span class="line"><span class="params"><span class="function">        Params... <span class="keyword">params</span></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mStatus != Status.PENDING) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (mStatus) &#123;</span><br><span class="line">            <span class="keyword">case</span> RUNNING:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Cannot execute task:&quot;</span></span><br><span class="line">                        + <span class="string">&quot; the task is already running.&quot;</span>);</span><br><span class="line">            <span class="keyword">case</span> FINISHED:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Cannot execute task:&quot;</span></span><br><span class="line">                        + <span class="string">&quot; the task has already been executed &quot;</span></span><br><span class="line">                        + <span class="string">&quot;(a task can be executed only once)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mStatus = Status.RUNNING;</span><br><span class="line"></span><br><span class="line">    onPreExecute();</span><br><span class="line"></span><br><span class="line">    mWorker.mParams = <span class="keyword">params</span>;</span><br><span class="line">    exec.execute(mFuture);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个方法中我们首先判断了一下当前的状态mStatus，如果状态是RUNNING或者FINISHED都会抛出异常，然后将状态改成RUNNING的状态，然后在执行onPreExecute方法，这个方法在当前类中是空实现，如果我们重写了该方法，则可以执行一些初始化操作，接着讲params传递给mWorker中的mParams对象，然后执行sDefaultExecutor的execute方法，将mFuture包装成任务放在队列ArrayDeque中，然后执行mFuture中的run方法。<br>既然最后执行的是Future中的run方法，我们看一下Future是如何实现的，他的实现类是FetureTask</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> FutureTask&lt;V&gt; <span class="keyword">implements</span> RunnableFuture&lt;V&gt; &#123;</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</span><br><span class="line">        <span class="keyword">if</span> (state != <span class="keyword">NEW</span> ||</span><br><span class="line">            !U.compareAndSwapObject(<span class="keyword">this</span>, RUNNER, <span class="keyword">null</span>, Thread.currentThread()))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Callable&lt;V&gt; c = callable;</span><br><span class="line">            <span class="keyword">if</span> (c != <span class="keyword">null</span> &amp;&amp; state == <span class="keyword">NEW</span>) &#123;</span><br><span class="line">                V result;</span><br><span class="line">                <span class="keyword">boolean</span> ran;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    result = c.<span class="keyword">call</span>();</span><br><span class="line">                    ran = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                    result = <span class="keyword">null</span>;</span><br><span class="line">                    ran = <span class="keyword">false</span>;</span><br><span class="line">                    setException(ex);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (ran)</span><br><span class="line">                    set(result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// runner must be non-null until state is settled to</span></span><br><span class="line">            <span class="comment">// prevent concurrent calls to run()</span></span><br><span class="line">            runner = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// state must be re-read after nulling runner to prevent</span></span><br><span class="line">            <span class="comment">// leaked interrupts</span></span><br><span class="line">            <span class="keyword">int</span> s = state;</span><br><span class="line">            <span class="keyword">if</span> (s &gt;= INTERRUPTING)</span><br><span class="line">                handlePossibleCancellationInterrupt(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> set(V v) &#123;</span><br><span class="line">        <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, STATE, <span class="keyword">NEW</span>, COMPLETING)) &#123;</span><br><span class="line">            outcome = v;</span><br><span class="line">            U.putOrderedInt(<span class="keyword">this</span>, STATE, NORMAL); <span class="comment">// final state</span></span><br><span class="line">            finishCompletion();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> finishCompletion() &#123;</span><br><span class="line">        <span class="comment">// assert state &gt; COMPLETING;</span></span><br><span class="line">        <span class="keyword">for</span> (WaitNode q; (q = waiters) != <span class="keyword">null</span>;) &#123;</span><br><span class="line">            <span class="keyword">if</span> (U.compareAndSwapObject(<span class="keyword">this</span>, WAITERS, q, <span class="keyword">null</span>)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                    Thread t = q.thread;</span><br><span class="line">                    <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        q.thread = <span class="keyword">null</span>;</span><br><span class="line">                        LockSupport.unpark(t);</span><br><span class="line">                    &#125;</span><br><span class="line">                    WaitNode <span class="keyword">next</span> = q.<span class="keyword">next</span>;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">next</span> == <span class="keyword">null</span>)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    q.<span class="keyword">next</span> = <span class="keyword">null</span>; <span class="comment">// unlink to help gc</span></span><br><span class="line">                    q = <span class="keyword">next</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        done();</span><br><span class="line">    </span><br><span class="line">        callable = <span class="keyword">null</span>;        <span class="comment">// to reduce footprint</span></span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造方法中我们传递了一个Callable对象，也就是我们的AsyncTask的构造方法中传递的mWorker对象，我们通过<code>Callable<V> c = callable; result = c.call();</code>的方式调用了mWorker，然后调用set方法将结果赋值给outcome，并且执行finishComplete方法，最后调用done方法。done方法中调用postResultIfNotInvoked方法保证任务能够被执行，并保证执行postResult方法把结果返回给主线程。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postResultIfNotInvoked</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> wasTaskInvoked = mTaskInvoked.<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">if</span> (!wasTaskInvoked) &#123;</span><br><span class="line">        <span class="built_in">postResult</span>(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在mWorker的创建时，我们的call方法里的代码</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">        mWorker = <span class="keyword">new</span> WorkerRunnable&lt;Params, Result&gt;<span class="literal">()</span> &#123;</span><br><span class="line">            public Result call<span class="literal">()</span> throws Exception &#123;</span><br><span class="line">                mTaskInvoked.set(<span class="literal">true</span>);</span><br><span class="line">                Result result = null;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">Process</span>.</span></span>set<span class="constructor">ThreadPriority(Process.THREAD_PRIORITY_BACKGROUND)</span>;</span><br><span class="line">                    <span class="comment">//noinspection unchecked</span></span><br><span class="line">                    result = <span class="keyword">do</span><span class="constructor">InBackground(<span class="params">mParams</span>)</span>;</span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">Binder</span>.</span></span>flush<span class="constructor">PendingCommands()</span>;</span><br><span class="line">                &#125; catch (Throwable tr) &#123;</span><br><span class="line">                    mCancelled.set(<span class="literal">true</span>);</span><br><span class="line">                    throw tr;</span><br><span class="line">                &#125; finally &#123;</span><br><span class="line">                    post<span class="constructor">Result(<span class="params">result</span>)</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                return result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="comment">// 这里就是AsyncTask的构造方法</span></span><br></pre></td></tr></table></figure><p>首先设置任务被调度的标识为true，设置进程优先级为THREAD_PRIORITY_BACKGROUND，紧接着在调用doInBackGround方法，斌能够且将结果赋值给result，通过postResult方法，将结果返回。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Result postResult(Result result) &#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(<span class="meta-string">&quot;unchecked&quot;</span>)</span></span><br><span class="line">    Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,</span><br><span class="line">            new AsyncTaskResult&lt;Result&gt;(<span class="keyword">this</span>, result));</span><br><span class="line">    message.sendToTarget();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个方法中我们创建了一个Message，并且将MESSAAGE_POST_RESULT作为标志设置到Message中，并且交个handler处理。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Handler <span class="function"><span class="title">getMainHandler</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    synchronized (AsyncTask.class) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sHandler == <span class="literal">null</span>) &#123;</span><br><span class="line">            sHandler = <span class="keyword">new</span> InternalHandler(Looper.getMainLooper());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sHandler;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Handler <span class="function"><span class="title">getHandler</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> mHandler;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的代码调用其实是在AsyncTask的构造方法中已经创建完了，最后就是InternalHandler对象</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">void</span> <span class="function"><span class="title">finish</span>(<span class="params">Result result</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isCancelled()) &#123;</span><br><span class="line">        onCancelled(result);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        onPostExecute(result);</span><br><span class="line">    &#125;</span><br><span class="line">    mStatus = Status.FINISHED;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InternalHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">InternalHandler</span>(<span class="params">Looper looper</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(looper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">&quot;unchecked&quot;</span>, <span class="string">&quot;RawUseOfParameterizedType&quot;</span>&#125;)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">handleMessage</span>(<span class="params">Message msg</span>)</span> &#123;</span><br><span class="line">        AsyncTaskResult&lt;?&gt; result = (AsyncTaskResult&lt;?&gt;) msg.obj;</span><br><span class="line">        <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">            <span class="keyword">case</span> MESSAGE_POST_RESULT:</span><br><span class="line">                <span class="comment">// There is only one result</span></span><br><span class="line">                result.mTask.finish(result.mData[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MESSAGE_POST_PROGRESS:</span><br><span class="line">                result.mTask.onProgressUpdate(result.mData);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>handleMessage 方法中处理收到的消息，如果消息是 MESSAGE_POST_RESULT，调用 finish 方法。 finish 方法中根据任务是否被取消，来执行不同的方法，如果取消则执行 onCancelled(result);，没有取消执行 onPostExecute(result);，此时 AsyncTask 的第四步骤就走完了。整个任务执行完毕。可以看到 onCancelled 和 onPostExecute 只会执行一个。<br>如果是 MESSAGE_POST_PROGRESS 的消息，则执行 onProgressUpdate(result.mData) 方法,这个步骤的消息是如下</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WorkerThread</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="function"><span class="keyword">void</span> <span class="title">publishProgress</span><span class="params">(Progress... values)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isCancelled()) &#123;</span><br><span class="line">        getHandler().obtainMessage(MESSAGE_POST_PROGRESS,</span><br><span class="line">                <span class="keyword">new</span> AsyncTaskResult&lt;Progress&gt;(<span class="keyword">this</span>, values)).sendToTarget();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以在工作线程中调用这个方法，也就是在 doInBackground 中使用。如果任务没有取消，就会创建一个 what 是 MESSAGE_POST_PROGRESS，将进度值封装成一个 AsyncTaskResult 对象做为 obj 的 Message 给 Handler 处理.<br>最后就是cancel方法，这个方法中调用了mFuture中的cancel方法，如果有正在执行的任务则会调用interrupt并且调用finishCompletion方法</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(<span class="keyword">boolean</span> mayInterruptIfRunning)</span> </span>&#123;</span><br><span class="line">    mCancelled.<span class="built_in">set</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> mFuture.<span class="built_in">cancel</span>(mayInterruptIfRunning);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.jianshu.com/p/ff8d9d1ba12b">AsyncTask源码解析</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;AsyncTask源码分析&lt;/p&gt;</summary>
    
    
    
    
    <category term="源码分析" scheme="http://www.paulniu.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>源码分析(十一) OKHttp源码分析</title>
    <link href="http://www.paulniu.com/2020/03/12/android-source-code-11/"/>
    <id>http://www.paulniu.com/2020/03/12/android-source-code-11/</id>
    <published>2020-03-12T14:09:13.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>OKHttp源码分析</p><span id="more"></span><p>首先拉看一下基本使用</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;OKHttp源码分析&lt;/p&gt;</summary>
    
    
    
    
    <category term="源码分析" scheme="http://www.paulniu.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>源码分析(十) EventBus源码分析</title>
    <link href="http://www.paulniu.com/2020/03/11/android-source-code-10/"/>
    <id>http://www.paulniu.com/2020/03/11/android-source-code-10/</id>
    <published>2020-03-11T14:09:13.000Z</published>
    <updated>2021-06-22T06:32:10.875Z</updated>
    
    <content type="html"><![CDATA[<p>EventBus源码分析</p><span id="more"></span><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;EventBus源码分析&lt;/p&gt;</summary>
    
    
    
    
    <category term="源码分析" scheme="http://www.paulniu.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>android奇技淫巧 23 语音播放/录制模块封装</title>
    <link href="http://www.paulniu.com/2020/03/11/android-tools-24/"/>
    <id>http://www.paulniu.com/2020/03/11/android-tools-24/</id>
    <published>2020-03-11T02:38:10.000Z</published>
    <updated>2021-06-21T09:33:34.721Z</updated>
    
    <content type="html"><![CDATA[<p>最近在准备面试的东西，看了自己之前写过的代码，语音播放/录制模块可以进行一下封装操作，所以决定自己做一个轮子。</p><span id="more"></span><p>初步构想，如果需要封装一个语音播放模块需要考虑哪些内容</p><ol><li>采用什么样的设计模式？<br>采用Builder构造者模式，实现链式调用</li><li>支持多个语音播放？(暂定，后面可能不需要)<br>如果需要支持多个语音播放，需要使用到线程池，将需要播放的语音加入队列，按照顺序播放.</li><li>网络请求<br>要实现边下载边播放的功能，并且可以返回下载进度</li><li>缓存方式<br>采用三级缓存：LruCache，弱引用，磁盘缓存</li><li>语音播放和Activity、Fragment生命周期进行绑定<br>仿照Glide创建一个透明的Fragment，与Activity的声明周期进行绑定，并且可以实现一些本身提供的语音录制/播放的UI</li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.jianshu.com/p/1e48b2fbb843">MediaPlayer实现边下边播功能</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在准备面试的东西，看了自己之前写过的代码，语音播放/录制模块可以进行一下封装操作，所以决定自己做一个轮子。&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>源码分析(九) Glide源码分析</title>
    <link href="http://www.paulniu.com/2020/03/10/android-source-code-09/"/>
    <id>http://www.paulniu.com/2020/03/10/android-source-code-09/</id>
    <published>2020-03-10T14:09:13.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Glide源码分析</p><span id="more"></span><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;Glide源码分析&lt;/p&gt;</summary>
    
    
    
    
    <category term="源码分析" scheme="http://www.paulniu.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>源码分析(八) ListView和RecyclerView机制</title>
    <link href="http://www.paulniu.com/2020/03/09/android-source-code-08/"/>
    <id>http://www.paulniu.com/2020/03/09/android-source-code-08/</id>
    <published>2020-03-09T14:09:13.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>ListView和RecyclerView机制分析</p><span id="more"></span><p>RecyclerBin机制<br>这个机制其实就是ListView的缓存复用机制，可以让我们在加载非常多的item时也不会OOM，这个机制主要是通过AbsListView中到的RecyclerBin类完成的，意思也就是说所有的AbsListView的子类都实现了这个机制，他的源码如下(部分内容作了一些删减)</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The RecycleBin facilitates reuse of views across layouts. The RecycleBin</span></span><br><span class="line"><span class="comment"> * has two levels of storage: ActiveViews and ScrapViews. ActiveViews are</span></span><br><span class="line"><span class="comment"> * those views which were onscreen at the start of a layout. By</span></span><br><span class="line"><span class="comment"> * construction, they are displaying current information. At the end of</span></span><br><span class="line"><span class="comment"> * layout, all views in ActiveViews are demoted to ScrapViews. ScrapViews</span></span><br><span class="line"><span class="comment"> * are old views that could potentially be used by the adapter to avoid</span></span><br><span class="line"><span class="comment"> * allocating views unnecessarily.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @see android.widget.AbsListView#setRecyclerListener(android.widget.AbsListView.RecyclerListener)</span></span><br><span class="line"><span class="comment"> * @see android.widget.AbsListView.RecyclerListener</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> RecycleBin &#123;</span><br><span class="line"><span class="keyword">private</span> RecyclerListener mRecyclerListener;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The position of the first view stored in mActiveViews.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mFirstActivePosition;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Views that were on screen at the start of layout. This array is</span></span><br><span class="line"><span class="comment"> * populated at the start of layout, and at the end of layout all view</span></span><br><span class="line"><span class="comment"> * in mActiveViews are moved to mScrapViews. Views in mActiveViews</span></span><br><span class="line"><span class="comment"> * represent a contiguous range of Views, with position of the first</span></span><br><span class="line"><span class="comment"> * view store in mFirstActivePosition.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> View[] mActiveViews = <span class="keyword">new</span> View[<span class="number">0</span>];</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Unsorted views that can be used by the adapter as a convert view.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> ArrayList&lt;View&gt;[] mScrapViews;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mViewTypeCount;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> ArrayList&lt;View&gt; mCurrentScrap;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Fill ActiveViews with all of the children of the AbsListView.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param childCount</span></span><br><span class="line"><span class="comment"> *            The minimum number of views mActiveViews should hold</span></span><br><span class="line"><span class="comment"> * @param firstActivePosition</span></span><br><span class="line"><span class="comment"> *            The position of the first view that will be stored in</span></span><br><span class="line"><span class="comment"> *            mActiveViews</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> fillActiveViews(<span class="keyword">int</span> childCount, <span class="keyword">int</span> firstActivePosition) &#123;</span><br><span class="line"><span class="keyword">if</span> (mActiveViews.length &lt; childCount) &#123;</span><br><span class="line">mActiveViews = <span class="keyword">new</span> View[childCount];</span><br><span class="line">&#125;</span><br><span class="line">mFirstActivePosition = firstActivePosition;</span><br><span class="line"><span class="keyword">final</span> View[] activeViews = mActiveViews;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">View child = getChildAt(i);</span><br><span class="line">AbsListView.LayoutParams lp = (AbsListView.LayoutParams) child.getLayoutParams();</span><br><span class="line"><span class="comment">// Don&#x27;t put header or footer views into the scrap heap</span></span><br><span class="line"><span class="keyword">if</span> (lp != <span class="keyword">null</span> &amp;&amp; lp.viewType != ITEM_VIEW_TYPE_HEADER_OR_FOOTER) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">Note:</span> We do place AdapterView.ITEM_VIEW_TYPE_IGNORE in</span></span><br><span class="line"><span class="comment">// active views.</span></span><br><span class="line"><span class="comment">// However, we will NOT place them into scrap views.</span></span><br><span class="line">activeViews[i] = child;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get the view corresponding to the specified position. The view will</span></span><br><span class="line"><span class="comment"> * be removed from mActiveViews if it is found.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param position</span></span><br><span class="line"><span class="comment"> *            The position to look up in mActiveViews</span></span><br><span class="line"><span class="comment"> * @return The view if it is found, null otherwise</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">View getActiveView(<span class="keyword">int</span> position) &#123;</span><br><span class="line"><span class="keyword">int</span> index = position - mFirstActivePosition;</span><br><span class="line"><span class="keyword">final</span> View[] activeViews = mActiveViews;</span><br><span class="line"><span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; activeViews.length) &#123;</span><br><span class="line"><span class="keyword">final</span> View match = activeViews[index];</span><br><span class="line">activeViews[index] = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">return</span> match;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Put a view into the ScapViews list. These views are unordered.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param scrap</span></span><br><span class="line"><span class="comment"> *            The view to add</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> addScrapView(View scrap) &#123;</span><br><span class="line">AbsListView.LayoutParams lp = (AbsListView.LayoutParams) scrap.getLayoutParams();</span><br><span class="line"><span class="keyword">if</span> (lp == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Don&#x27;t put header or footer views or views that should be ignored</span></span><br><span class="line"><span class="comment">// into the scrap heap</span></span><br><span class="line"><span class="keyword">int</span> viewType = lp.viewType;</span><br><span class="line"><span class="keyword">if</span> (!shouldRecycleViewType(viewType)) &#123;</span><br><span class="line"><span class="keyword">if</span> (viewType != ITEM_VIEW_TYPE_HEADER_OR_FOOTER) &#123;</span><br><span class="line">removeDetachedView(scrap, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (mViewTypeCount == <span class="number">1</span>) &#123;</span><br><span class="line">dispatchFinishTemporaryDetach(scrap);</span><br><span class="line">mCurrentScrap.add(scrap);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">dispatchFinishTemporaryDetach(scrap);</span><br><span class="line">mScrapViews[viewType].add(scrap);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (mRecyclerListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">mRecyclerListener.onMovedToScrapHeap(scrap);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @return A view from the ScrapViews collection. These are unordered.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">View getScrapView(<span class="keyword">int</span> position) &#123;</span><br><span class="line">ArrayList&lt;View&gt; scrapViews;</span><br><span class="line"><span class="keyword">if</span> (mViewTypeCount == <span class="number">1</span>) &#123;</span><br><span class="line">scrapViews = mCurrentScrap;</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">size</span> = scrapViews.<span class="keyword">size</span>();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">size</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> scrapViews.remove(<span class="keyword">size</span> - <span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> whichScrap = mAdapter.getItemViewType(position);</span><br><span class="line"><span class="keyword">if</span> (whichScrap &gt;= <span class="number">0</span> &amp;&amp; whichScrap &lt; mScrapViews.length) &#123;</span><br><span class="line">scrapViews = mScrapViews[whichScrap];</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">size</span> = scrapViews.<span class="keyword">size</span>();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">size</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> scrapViews.remove(<span class="keyword">size</span> - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> setViewTypeCount(<span class="keyword">int</span> viewTypeCount) &#123;</span><br><span class="line"><span class="keyword">if</span> (viewTypeCount &lt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Can&#x27;t have a viewTypeCount &lt; 1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// noinspection unchecked</span></span><br><span class="line">ArrayList&lt;View&gt;[] scrapViews = <span class="keyword">new</span> ArrayList[viewTypeCount];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; viewTypeCount; i++) &#123;</span><br><span class="line">scrapViews[i] = <span class="keyword">new</span> ArrayList&lt;View&gt;();</span><br><span class="line">&#125;</span><br><span class="line">mViewTypeCount = viewTypeCount;</span><br><span class="line">mCurrentScrap = scrapViews[<span class="number">0</span>];</span><br><span class="line">mScrapViews = scrapViews;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>里面的逻辑比较简单，这里只介绍几个比较重要的成员变量和方法</p><ul><li>mFirstActivePosition：第一个在mActiveViews存储的位置，其实可以这样理解，mActveViews表示的是当前可见的ListView的item对象，加入我们有100个数据，每次能够展示10个数据，那么第一次mFirstActivePosition的值就是0，如果我们滑动LstView，那么mFirstActivePosition可以变成1，2，3等数据</li><li>mActiveViews：当前屏幕中可见的item集合，这个集合是从第一个可见的item开始到最后一个可见的item结束</li><li>mScrapViews：从字面意思上来说是废弃的views，其实可以理解为当前不可见的view，需要通过adapter适配到convert view</li><li>fillActiveView()：接受两个参数，第一个参数是可接收view的数量，第二参数表示ListView中第一个可见view的位置position，就像刚才所说，mActiveViews是用来存储当前可见的views，那么通过这个方法我们就会将指定item存储到mActiveViews数组中。</li><li>getActiveView()：这个方法与fillActiveView()方法相呼应，用于从mActiveViews中获取数据，这个方法中会传递过来position参数，在方法中会将其转换成mActiveViews的下标。需要注意的是，一旦从mActiveViews中获取一个item对象，这个item对象就会从数组中移除，所以说mActiveViews不能重复利用</li><li>addScrapView()：用于将一个废弃的view进行缓存，该方法接收一个view参数，当某个view被废除的时候(比如item滚出屏幕)通过该方法将view添加到mScrapViews集合中。</li><li>setViewTypeCount()：我们在使用ListView时通过getViewTypeCout()来获取item的种类，那么在recyclerBin中，我们会为每种类型的数据单独启用一个RecyclerBin缓存机制，</li></ul><h1 id="ListView机制"><a href="#ListView机制" class="headerlink" title="ListView机制"></a>ListView机制</h1><p>不管怎么说，ListView还是继承自View的，所以其绘制流程与View的绘制流程总是有千丝万缕的联系。<br>其实View的绘制主要就是三步走：onMeasure(),onLayout(),onDraw()，其中onMeasure和onDraw这两个方法我们可以不用考虑，主要是看onLayout方法。而onlayout方法主要是设置子view也就是item的位置。所以我们先来看一下ListView中的onLayout方法是如何实现的。可是我们惊奇的发现没有这方法，没事，不慌，ListView没有这个方法，我们就去他的父类AbsListView中查找</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Subclasses should NOT override this method but</span></span><br><span class="line"><span class="comment"> *  &#123;@link #layoutChildren()&#125; instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Override</span><br><span class="line">protected void on<span class="constructor">Layout(<span class="params">boolean</span> <span class="params">changed</span>, <span class="params">int</span> <span class="params">l</span>, <span class="params">int</span> <span class="params">t</span>, <span class="params">int</span> <span class="params">r</span>, <span class="params">int</span> <span class="params">b</span>)</span> &#123;</span><br><span class="line">    super.on<span class="constructor">Layout(<span class="params">changed</span>, <span class="params">l</span>, <span class="params">t</span>, <span class="params">r</span>, <span class="params">b</span>)</span>;</span><br><span class="line"></span><br><span class="line">    mInLayout = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    final <span class="built_in">int</span> childCount = get<span class="constructor">ChildCount()</span>;</span><br><span class="line">    <span class="keyword">if</span> (changed) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">            get<span class="constructor">ChildAt(<span class="params">i</span>)</span>.force<span class="constructor">Layout()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mRecycler.mark<span class="constructor">ChildrenDirty()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    layout<span class="constructor">Children()</span>;</span><br><span class="line"></span><br><span class="line">    mOverscrollMax = (b - t)<span class="operator"> / </span>OVERSCROLL_LIMIT_DIVISOR;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Move somewhere sane. This doesn&#x27;t belong in onLayout().</span></span><br><span class="line">    <span class="keyword">if</span> (mFastScroll != null) &#123;</span><br><span class="line">        mFastScroll.on<span class="constructor">ItemCountChanged(<span class="params">getChildCount</span>()</span>, mItemCount);</span><br><span class="line">    &#125;</span><br><span class="line">    mInLayout = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个方法中，我们发现，主要做的事情就是ListView的大小和位置是否发生了改变，如果发生了改变，那么changed属性就会变成true，然后要求重新绘制所有的子View。除此之外，我们发现这里还调用了layoutChildren()方法，这个方法从字面意思上我们知道，他应该是排版子view的方法，所有我们需要进入到这个方法中看一下，但是这个方法在AbsListView中是空的，那么是不是就说明没有具体的实现呢？肯定不是，我们是在子类中实现的，这里我们看一下ListView中的layoutChildren方法</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> layoutChildren() &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">boolean</span> blockLayoutRequests = mBlockLayoutRequests;</span><br><span class="line">    <span class="keyword">if</span> (!blockLayoutRequests) &#123;</span><br><span class="line">        mBlockLayoutRequests = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.layoutChildren();</span><br><span class="line">        invalidate();</span><br><span class="line">        <span class="keyword">if</span> (mAdapter == <span class="literal">null</span>) &#123;</span><br><span class="line">            resetList();</span><br><span class="line">            invokeOnItemScrollListener();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> childrenTop = mListPadding.top;</span><br><span class="line">        <span class="built_in">int</span> childrenBottom = getBottom() - getTop() - mListPadding.bottom;</span><br><span class="line">        <span class="built_in">int</span> childCount = getChildCount();</span><br><span class="line">        <span class="built_in">int</span> <span class="keyword">index</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> delta = <span class="number">0</span>;</span><br><span class="line">        View sel;</span><br><span class="line">        View oldSel = <span class="literal">null</span>;</span><br><span class="line">        View oldFirst = <span class="literal">null</span>;</span><br><span class="line">        View newSel = <span class="literal">null</span>;</span><br><span class="line">        View focusLayoutRestoreView = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// Remember stuff we will need down below</span></span><br><span class="line">        <span class="keyword">switch</span> (mLayoutMode) &#123;</span><br><span class="line">        <span class="keyword">case</span> LAYOUT_SET_SELECTION:</span><br><span class="line">            <span class="keyword">index</span> = mNextSelectedPosition - mFirstPosition;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">index</span> &gt;= <span class="number">0</span> &amp;&amp; <span class="keyword">index</span> &lt; childCount) &#123;</span><br><span class="line">                newSel = getChildAt(<span class="keyword">index</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LAYOUT_FORCE_TOP:</span><br><span class="line">        <span class="keyword">case</span> LAYOUT_FORCE_BOTTOM:</span><br><span class="line">        <span class="keyword">case</span> LAYOUT_SPECIFIC:</span><br><span class="line">        <span class="keyword">case</span> LAYOUT_SYNC:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LAYOUT_MOVE_SELECTION:</span><br><span class="line">        <span class="literal">default</span>:</span><br><span class="line">            <span class="comment">// Remember the previously selected view</span></span><br><span class="line">            <span class="keyword">index</span> = mSelectedPosition - mFirstPosition;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">index</span> &gt;= <span class="number">0</span> &amp;&amp; <span class="keyword">index</span> &lt; childCount) &#123;</span><br><span class="line">                oldSel = getChildAt(<span class="keyword">index</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Remember the previous first child</span></span><br><span class="line">            oldFirst = getChildAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (mNextSelectedPosition &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                delta = mNextSelectedPosition - mSelectedPosition;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Caution: newSel might be null</span></span><br><span class="line">            newSel = getChildAt(<span class="keyword">index</span> + delta);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">boolean</span> dataChanged = mDataChanged;</span><br><span class="line">        <span class="keyword">if</span> (dataChanged) &#123;</span><br><span class="line">            handleDataChanged();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Handle the empty set by removing all views that are visible</span></span><br><span class="line">        <span class="comment">// and calling it a day</span></span><br><span class="line">        <span class="keyword">if</span> (mItemCount == <span class="number">0</span>) &#123;</span><br><span class="line">            resetList();</span><br><span class="line">            invokeOnItemScrollListener();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mItemCount != mAdapter.getCount()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;The content of the adapter has changed but &quot;</span></span><br><span class="line">                    + <span class="string">&quot;ListView did not receive a notification. Make sure the content of &quot;</span></span><br><span class="line">                    + <span class="string">&quot;your adapter is not modified from a background thread, but only &quot;</span></span><br><span class="line">                    + <span class="string">&quot;from the UI thread. [in ListView(&quot;</span> + getId() + <span class="string">&quot;, &quot;</span> + getClass() </span><br><span class="line">                    + <span class="string">&quot;) with Adapter(&quot;</span> + mAdapter.getClass() + <span class="string">&quot;)]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        setSelectedPositionInt(mNextSelectedPosition);</span><br><span class="line">        <span class="comment">// Pull all children into the RecycleBin.</span></span><br><span class="line">        <span class="comment">// These views will be reused if possible</span></span><br><span class="line">        <span class="keyword">final</span> <span class="built_in">int</span> firstPosition = mFirstPosition;</span><br><span class="line">        <span class="keyword">final</span> RecycleBin recycleBin = mRecycler;</span><br><span class="line">        <span class="comment">// reset the focus restoration</span></span><br><span class="line">        View focusLayoutRestoreDirectChild = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// Don&#x27;t put header or footer views into the Recycler. Those are</span></span><br><span class="line">        <span class="comment">// already cached in mHeaderViews;</span></span><br><span class="line">        <span class="keyword">if</span> (dataChanged) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">                recycleBin.addScrapView(getChildAt(i));</span><br><span class="line">                <span class="keyword">if</span> (ViewDebug.TRACE_RECYCLER) &#123;</span><br><span class="line">                    ViewDebug.trace(getChildAt(i),</span><br><span class="line">                            ViewDebug.RecyclerTraceType.MOVE_TO_SCRAP_HEAP, <span class="keyword">index</span>, i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            recycleBin.fillActiveViews(childCount, firstPosition);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// take focus back to us temporarily to avoid the eventual</span></span><br><span class="line">        <span class="comment">// call to clear focus when removing the focused child below</span></span><br><span class="line">        <span class="comment">// from messing things up when ViewRoot assigns focus back</span></span><br><span class="line">        <span class="comment">// to someone else</span></span><br><span class="line">        <span class="keyword">final</span> View focusedChild = getFocusedChild();</span><br><span class="line">        <span class="keyword">if</span> (focusedChild != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> in some cases focusedChild.getParent() == null</span></span><br><span class="line">            <span class="comment">// we can remember the focused view to restore after relayout if the</span></span><br><span class="line">            <span class="comment">// data hasn&#x27;t changed, or if the focused position is a header or footer</span></span><br><span class="line">            <span class="keyword">if</span> (!dataChanged || isDirectChildHeaderOrFooter(focusedChild)) &#123;</span><br><span class="line">                focusLayoutRestoreDirectChild = focusedChild;</span><br><span class="line">                <span class="comment">// remember the specific view that had focus</span></span><br><span class="line">                focusLayoutRestoreView = findFocus();</span><br><span class="line">                <span class="keyword">if</span> (focusLayoutRestoreView != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// tell it we are going to mess with it</span></span><br><span class="line">                    focusLayoutRestoreView.onStartTemporaryDetach();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            requestFocus();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Clear out old views</span></span><br><span class="line">        detachAllViewsFromParent();</span><br><span class="line">        <span class="keyword">switch</span> (mLayoutMode) &#123;</span><br><span class="line">        <span class="keyword">case</span> LAYOUT_SET_SELECTION:</span><br><span class="line">            <span class="keyword">if</span> (newSel != <span class="literal">null</span>) &#123;</span><br><span class="line">                sel = fillFromSelection(newSel.getTop(), childrenTop, childrenBottom);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sel = fillFromMiddle(childrenTop, childrenBottom);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LAYOUT_SYNC:</span><br><span class="line">            sel = fillSpecific(mSyncPosition, mSpecificTop);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LAYOUT_FORCE_BOTTOM:</span><br><span class="line">            sel = fillUp(mItemCount - <span class="number">1</span>, childrenBottom);</span><br><span class="line">            adjustViewsUpOrDown();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LAYOUT_FORCE_TOP:</span><br><span class="line">            mFirstPosition = <span class="number">0</span>;</span><br><span class="line">            sel = fillFromTop(childrenTop);</span><br><span class="line">            adjustViewsUpOrDown();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LAYOUT_SPECIFIC:</span><br><span class="line">            sel = fillSpecific(reconcileSelectedPosition(), mSpecificTop);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LAYOUT_MOVE_SELECTION:</span><br><span class="line">            sel = moveSelection(oldSel, newSel, delta, childrenTop, childrenBottom);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="literal">default</span>:</span><br><span class="line">            <span class="keyword">if</span> (childCount == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!mStackFromBottom) &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="built_in">int</span> position = lookForSelectablePosition(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">                    setSelectedPositionInt(position);</span><br><span class="line">                    sel = fillFromTop(childrenTop);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="built_in">int</span> position = lookForSelectablePosition(mItemCount - <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line">                    setSelectedPositionInt(position);</span><br><span class="line">                    sel = fillUp(mItemCount - <span class="number">1</span>, childrenBottom);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (mSelectedPosition &gt;= <span class="number">0</span> &amp;&amp; mSelectedPosition &lt; mItemCount) &#123;</span><br><span class="line">                    sel = fillSpecific(mSelectedPosition,</span><br><span class="line">                            oldSel == <span class="literal">null</span> ? childrenTop : oldSel.getTop());</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mFirstPosition &lt; mItemCount) &#123;</span><br><span class="line">                    sel = fillSpecific(mFirstPosition,</span><br><span class="line">                            oldFirst == <span class="literal">null</span> ? childrenTop : oldFirst.getTop());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sel = fillSpecific(<span class="number">0</span>, childrenTop);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Flush any cached views that did not get reused above</span></span><br><span class="line">        recycleBin.scrapActiveViews();</span><br><span class="line">        <span class="keyword">if</span> (sel != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// the current selected item should get focus if items</span></span><br><span class="line">            <span class="comment">// are focusable</span></span><br><span class="line">            <span class="keyword">if</span> (mItemsCanFocus &amp;&amp; hasFocus() &amp;&amp; !sel.hasFocus()) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="built_in">boolean</span> focusWasTaken = (sel == focusLayoutRestoreDirectChild &amp;&amp;</span><br><span class="line">                        focusLayoutRestoreView.requestFocus()) || sel.requestFocus();</span><br><span class="line">                <span class="keyword">if</span> (!focusWasTaken) &#123;</span><br><span class="line">                    <span class="comment">// selected item didn&#x27;t take focus, fine, but still want</span></span><br><span class="line">                    <span class="comment">// to make sure something else outside of the selected view</span></span><br><span class="line">                    <span class="comment">// has focus</span></span><br><span class="line">                    <span class="keyword">final</span> View focused = getFocusedChild();</span><br><span class="line">                    <span class="keyword">if</span> (focused != <span class="literal">null</span>) &#123;</span><br><span class="line">                        focused.clearFocus();</span><br><span class="line">                    &#125;</span><br><span class="line">                    positionSelector(sel);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sel.setSelected(<span class="literal">false</span>);</span><br><span class="line">                    mSelectorRect.setEmpty();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                positionSelector(sel);</span><br><span class="line">            &#125;</span><br><span class="line">            mSelectedTop = sel.getTop();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (mTouchMode &gt; TOUCH_MODE_DOWN &amp;&amp; mTouchMode &lt; TOUCH_MODE_SCROLL) &#123;</span><br><span class="line">                View child = getChildAt(mMotionPosition - mFirstPosition);</span><br><span class="line">                <span class="keyword">if</span> (child != <span class="literal">null</span>) positionSelector(child);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mSelectedTop = <span class="number">0</span>;</span><br><span class="line">                mSelectorRect.setEmpty();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// even if there is not selected position, we may need to restore</span></span><br><span class="line">            <span class="comment">// focus (i.e. something focusable in touch mode)</span></span><br><span class="line">            <span class="keyword">if</span> (hasFocus() &amp;&amp; focusLayoutRestoreView != <span class="literal">null</span>) &#123;</span><br><span class="line">                focusLayoutRestoreView.requestFocus();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// tell focus view we are done mucking with it, if it is still in</span></span><br><span class="line">        <span class="comment">// our view hierarchy.</span></span><br><span class="line">        <span class="keyword">if</span> (focusLayoutRestoreView != <span class="literal">null</span></span><br><span class="line">                &amp;&amp; focusLayoutRestoreView.getWindowToken() != <span class="literal">null</span>) &#123;</span><br><span class="line">            focusLayoutRestoreView.onFinishTemporaryDetach();</span><br><span class="line">        &#125;</span><br><span class="line">        mLayoutMode = LAYOUT_NORMAL;</span><br><span class="line">        mDataChanged = <span class="literal">false</span>;</span><br><span class="line">        mNeedSync = <span class="literal">false</span>;</span><br><span class="line">        setNextSelectedPositionInt(mSelectedPosition);</span><br><span class="line">        updateScrollIndicators();</span><br><span class="line">        <span class="keyword">if</span> (mItemCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            checkSelectionChanged();</span><br><span class="line">        &#125;</span><br><span class="line">        invokeOnItemScrollListener();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!blockLayoutRequests) &#123;</span><br><span class="line">            mBlockLayoutRequests = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码稍微多了一点，我们只看重点，首先我们可以确定的是，在第一次进入该方法的时候，我们的ListView中是没有数据的，为什么没有数据呢？我们可以这两理解，在我们初始化ListView之后，ListView中没有通过adapter设置数据，所以初始状态下ListView的数据是空的，而且刚才我们说到ListView通过adapter设置数据，其实也是通过adapter渲染数据item，所以这时候所对应的getChildCount也是0，后面代码也会运行RecyclerBin中的fillActiveViews方法，由于数据是空的，所以这行代码我们可以认为是没有做任何事情。紧接着我们会通过mLayoutMode设置布局模式，默认情况下是普通模式LAYOUT_NORMAL，然后我们会进入到fillFromTop方法，这个方法的实现如下所示</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Fills the list from top to bottom, starting with mFirstPosition</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param nextTop The location where the top of the first item should be</span></span><br><span class="line"><span class="comment"> *        drawn</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @return The view that is currently selected</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> View fill<span class="constructor">FromTop(<span class="params">int</span> <span class="params">nextTop</span>)</span> &#123;</span><br><span class="line">    mFirstPosition = <span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>min(mFirstPosition, mSelectedPosition);</span><br><span class="line">    mFirstPosition = <span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>min(mFirstPosition, mItemCount - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (mFirstPosition &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        mFirstPosition = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    return fill<span class="constructor">Down(<span class="params">mFirstPosition</span>, <span class="params">nextTop</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从注释中我们知道，他会从mFirstPosition往下的填充ListView，主要就是判断mFirstPosition的合法性，然后通过fillDown方法，填充。由于最终我们返回的是一个View对象，我们可以大概的知道，填充的具体操作，应该是在fillDown方法中执行的。fillDown方法代码如下所示</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Fills the list from pos down to the end of the list view.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param pos The first position to put in the list</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param nextTop The location where the top of the item associated with pos</span></span><br><span class="line"><span class="comment"> *        should be drawn</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @return The view that is currently selected, if it happens to be in the</span></span><br><span class="line"><span class="comment"> *         range that we draw.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> View fill<span class="constructor">Down(<span class="params">int</span> <span class="params">pos</span>, <span class="params">int</span> <span class="params">nextTop</span>)</span> &#123;</span><br><span class="line">    View selectedView = null;</span><br><span class="line">    <span class="built_in">int</span> <span class="keyword">end</span> = (get<span class="constructor">Bottom()</span> - get<span class="constructor">Top()</span>) - mListPadding.bottom;</span><br><span class="line">    <span class="keyword">while</span> (nextTop &lt; <span class="keyword">end</span><span class="operator"> &amp;&amp; </span>pos &lt; mItemCount) &#123;</span><br><span class="line">        <span class="comment">// is this the selected item?</span></span><br><span class="line">        boolean selected = pos<span class="operator"> == </span>mSelectedPosition;</span><br><span class="line">        View child = make<span class="constructor">AndAddView(<span class="params">pos</span>, <span class="params">nextTop</span>, <span class="params">true</span>, <span class="params">mListPadding</span>.<span class="params">left</span>, <span class="params">selected</span>)</span>;</span><br><span class="line">        nextTop = child.get<span class="constructor">Bottom()</span> + mDividerHeight;</span><br><span class="line">        <span class="keyword">if</span> (selected) &#123;</span><br><span class="line">            selectedView = child;</span><br><span class="line">        &#125;</span><br><span class="line">        pos++;</span><br><span class="line">    &#125;</span><br><span class="line">    return selectedView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在fillDown方法中，通过while循环执行重复逻辑，一开始nextTop的值是第一个子元素顶部距离整个ListView顶部的像素值，pos则是刚刚传入的mFirstPosition的值，而end是ListView底部减去顶部所得的像素值，mItemCount则是Adapter中的元素数量。因此一开始的情况下nextTop必定是小于end值的，并且pos也是小于mItemCount值的。那么每执行一次while循环，pos的值都会加1，并且nextTop也会增加，当nextTop大于等于end时，也就是子元素已经超出当前屏幕了，或者pos大于等于mItemCount时，也就是所有Adapter中的元素都被遍历结束了，就会跳出while循环。而在while循环中通过makeAndAddView方法，将view添加到相应的位置</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Obtain the view and add it to our list of children. The view can be made</span></span><br><span class="line"><span class="comment"> * fresh, converted from an unused view, or used as is if it was in the</span></span><br><span class="line"><span class="comment"> * recycle bin.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> position Logical position in the list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> y Top or bottom edge of the view to add</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> flow If flow is true, align top edge to y. If false, align bottom</span></span><br><span class="line"><span class="comment"> *        edge to y.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> childrenLeft Left edge where children should be positioned</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> selected Is this position selected?</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> View that was added</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> View makeAndAddView(<span class="keyword">int</span> position, <span class="keyword">int</span> y, <span class="keyword">boolean</span> flow, <span class="keyword">int</span> childrenLeft,</span><br><span class="line">        <span class="keyword">boolean</span> selected) &#123;</span><br><span class="line">    View child;</span><br><span class="line">    <span class="keyword">if</span> (!mDataChanged) &#123;</span><br><span class="line">        <span class="comment">// Try to use an exsiting view for this position</span></span><br><span class="line">        child = mRecycler.getActiveView(position);</span><br><span class="line">        <span class="keyword">if</span> (child != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Found it -- we&#x27;re using an existing child</span></span><br><span class="line">            <span class="comment">// This just needs to be positioned</span></span><br><span class="line">            setupChild(child, position, y, flow, childrenLeft, selected, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">return</span> child;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Make a new view for this position, or convert an unused view if possible</span></span><br><span class="line">    child = obtainView(position, mIsScrap);</span><br><span class="line">    <span class="comment">// This needs to be positioned and measured</span></span><br><span class="line">    setupChild(child, position, y, flow, childrenLeft, selected, mIsScrap[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> child;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个代码中我们通过RecyclerBin获取了一个activeView，并且通过setupChild方法将view设置到相应的位置，而此时view是null，所以会通过obtaionView方法设置一个view对象，保证child不为空</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get a view and have it show the data associated with the specified</span></span><br><span class="line"><span class="comment"> * position. This is called when we have already discovered that the view is</span></span><br><span class="line"><span class="comment"> * not available for reuse in the recycle bin. The only choices left are</span></span><br><span class="line"><span class="comment"> * converting an old view or making a new one.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param position</span></span><br><span class="line"><span class="comment"> *            The position to display</span></span><br><span class="line"><span class="comment"> * @param isScrap</span></span><br><span class="line"><span class="comment"> *            Array of at least 1 boolean, the first entry will become true</span></span><br><span class="line"><span class="comment"> *            if the returned view was taken from the scrap heap, false if</span></span><br><span class="line"><span class="comment"> *            otherwise.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @return A view displaying the data associated with the specified position</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">View obtain<span class="constructor">View(<span class="params">int</span> <span class="params">position</span>, <span class="params">boolean</span>[] <span class="params">isScrap</span>)</span> &#123;</span><br><span class="line">isScrap<span class="literal">[<span class="number">0</span>]</span> = <span class="literal">false</span>;</span><br><span class="line">View scrapView;</span><br><span class="line">scrapView = mRecycler.get<span class="constructor">ScrapView(<span class="params">position</span>)</span>;</span><br><span class="line">View child;</span><br><span class="line"><span class="keyword">if</span> (scrapView != null) &#123;</span><br><span class="line">child = mAdapter.get<span class="constructor">View(<span class="params">position</span>, <span class="params">scrapView</span>, <span class="params">this</span>)</span>;</span><br><span class="line"><span class="keyword">if</span> (child != scrapView) &#123;</span><br><span class="line">mRecycler.add<span class="constructor">ScrapView(<span class="params">scrapView</span>)</span>;</span><br><span class="line"><span class="keyword">if</span> (mCacheColorHint != <span class="number">0</span>) &#123;</span><br><span class="line">child.set<span class="constructor">DrawingCacheBackgroundColor(<span class="params">mCacheColorHint</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">isScrap<span class="literal">[<span class="number">0</span>]</span> = <span class="literal">true</span>;</span><br><span class="line">dispatch<span class="constructor">FinishTemporaryDetach(<span class="params">child</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">child = mAdapter.get<span class="constructor">View(<span class="params">position</span>, <span class="params">null</span>, <span class="params">this</span>)</span>;</span><br><span class="line"><span class="keyword">if</span> (mCacheColorHint != <span class="number">0</span>) &#123;</span><br><span class="line">child.set<span class="constructor">DrawingCacheBackgroundColor(<span class="params">mCacheColorHint</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return child;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在obtainView方法中我们会发现，通过getScrapView方法尝试获取一个废弃缓存中的view，由于获取不到，getScrapView会返回一个null，这时候在通过mAdapter.getView来获取一个view对象，而这个mAdapter就是与ListView相关联的adapter，而getView方法就是平时我们经常写在自定义Adapter中的getView方法，并且这个方法会返回一个View视图，此时我们的getView中会传递三个参数，对应的也就是adapter中的三个参数，其中scrapView就是convertView，如果这个对象为null，表示当前没有convertView可以利用，然后我们就会通过inflate方法动态加载一个布局，并且返回。由于不管getActiveView还是obtainView，最终都会执行setupChild方法，所以我们来看一下这个内容是如何实现的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Add a view as a child and make sure it is measured (if necessary) and</span></span><br><span class="line"><span class="comment"> * positioned properly.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> child The view to add</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> position The position of this child</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> y The y position relative to which this view will be positioned</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> flowDown If true, align top edge to y. If false, align bottom</span></span><br><span class="line"><span class="comment"> *        edge to y.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> childrenLeft Left edge where children should be positioned</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> selected Is this position selected?</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> recycled Has this view been pulled from the recycle bin? If so it</span></span><br><span class="line"><span class="comment"> *        does not need to be remeasured.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> setupChild(View child, <span class="keyword">int</span> position, <span class="keyword">int</span> y, <span class="keyword">boolean</span> flowDown, <span class="keyword">int</span> childrenLeft,</span><br><span class="line">        <span class="keyword">boolean</span> selected, <span class="keyword">boolean</span> recycled) &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isSelected = selected &amp;&amp; shouldShowSelector();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> updateChildSelected = isSelected != child.isSelected();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> mode = mTouchMode;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isPressed = mode &gt; TOUCH_MODE_DOWN &amp;&amp; mode &lt; TOUCH_MODE_SCROLL &amp;&amp;</span><br><span class="line">            mMotionPosition == position;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> updateChildPressed = isPressed != child.isPressed();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> needToMeasure = !recycled || updateChildSelected || child.isLayoutRequested();</span><br><span class="line">    <span class="comment">// Respect layout params that are already in the view. Otherwise make some up...</span></span><br><span class="line">    <span class="comment">// noinspection unchecked</span></span><br><span class="line">    AbsListView.LayoutParams p = (AbsListView.LayoutParams) child.getLayoutParams();</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">null</span>) &#123;</span><br><span class="line">        p = <span class="keyword">new</span> AbsListView.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,</span><br><span class="line">                ViewGroup.LayoutParams.WRAP_CONTENT, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    p.viewType = mAdapter.getItemViewType(position);</span><br><span class="line">    <span class="keyword">if</span> ((recycled &amp;&amp; !p.forceAdd) || (p.recycledHeaderFooter &amp;&amp;</span><br><span class="line">            p.viewType == AdapterView.ITEM_VIEW_TYPE_HEADER_OR_FOOTER)) &#123;</span><br><span class="line">        attachViewToParent(child, flowDown ? -<span class="number">1</span> : <span class="number">0</span>, p);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        p.forceAdd = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (p.viewType == AdapterView.ITEM_VIEW_TYPE_HEADER_OR_FOOTER) &#123;</span><br><span class="line">            p.recycledHeaderFooter = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        addViewInLayout(child, flowDown ? -<span class="number">1</span> : <span class="number">0</span>, p, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (updateChildSelected) &#123;</span><br><span class="line">        child.setSelected(isSelected);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (updateChildPressed) &#123;</span><br><span class="line">        child.setPressed(isPressed);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (needToMeasure) &#123;</span><br><span class="line">        <span class="keyword">int</span> childWidthSpec = ViewGroup.getChildMeasureSpec(mWidthMeasureSpec,</span><br><span class="line">                mListPadding.left + mListPadding.right, p.width);</span><br><span class="line">        <span class="keyword">int</span> lpHeight = p.height;</span><br><span class="line">        <span class="keyword">int</span> childHeightSpec;</span><br><span class="line">        <span class="keyword">if</span> (lpHeight &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            childHeightSpec = MeasureSpec.makeMeasureSpec(lpHeight, MeasureSpec.EXACTLY);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            childHeightSpec = MeasureSpec.makeMeasureSpec(<span class="number">0</span>, MeasureSpec.UNSPECIFIED);</span><br><span class="line">        &#125;</span><br><span class="line">        child.measure(childWidthSpec, childHeightSpec);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cleanupLayoutState(child);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> w = child.getMeasuredWidth();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> h = child.getMeasuredHeight();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childTop = flowDown ? y : y - h;</span><br><span class="line">    <span class="keyword">if</span> (needToMeasure) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childRight = childrenLeft + w;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childBottom = childTop + h;</span><br><span class="line">        child.layout(childrenLeft, childTop, childRight, childBottom);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        child.offsetLeftAndRight(childrenLeft - child.getLeft());</span><br><span class="line">        child.offsetTopAndBottom(childTop - child.getTop());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mCachingStarted &amp;&amp; !child.isDrawingCacheEnabled()) &#123;</span><br><span class="line">        child.setDrawingCacheEnabled(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个里面，我们将对应的子view–child通过addViewInLayout方法添加到ListView中，并且通过刚才在fillDown方法中的while循环将所有到的view添加进来。<br>到目前为止，第一个layout已经完成，那么还有第二次Layout</p><h1 id="RecyclerView"><a href="#RecyclerView" class="headerlink" title="RecyclerView"></a>RecyclerView</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/guolin_blog/article/details/44996879">ListView工作原理完全解析</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;ListView和RecyclerView机制分析&lt;/p&gt;</summary>
    
    
    
    
    <category term="源码分析" scheme="http://www.paulniu.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>源码分析(七) Android系统服务机制</title>
    <link href="http://www.paulniu.com/2020/03/08/android-source-code-07/"/>
    <id>http://www.paulniu.com/2020/03/08/android-source-code-07/</id>
    <published>2020-03-08T14:09:13.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android系统服务机制</p><span id="more"></span><p>直接分析：<br>通常情况下，我们如果想要获取系统服务，都是通过Context.getSystemService(serviceName)的方式获取的。<br>其实也就是说，我们调用了Context这个类中的getSystemService方法。Context是一个抽象方法，他有两个子类，分别是ContextImpl和ContextWrapper,其中ContextWrapper类中有三个子类，分别是Application，Service和ContextThemeWrapper对象，其中的ContextThemeWrapper对象里面有一个子类就是Activity，所以如果我们想要实现换肤功能，这部分的内容不能不知道。<br>回到刚才所说的内容，ContextImpl是Context的实现类，其中那个大部分Context的方法都是在这个类中具体实现的，我们直接看这个类中的getSystemService方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">Object</span> <span class="function"><span class="title">getSystemService</span>(<span class="params"><span class="built_in">String</span> name</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> SystemServiceRegistry.getSystemService(<span class="built_in">this</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里我们发现该方法直接返回一个SystemServiceRegistry类中的静态方法getSystemService，并且需要传递两个对象，分别是上下文Context和服务名name，那么我们再来看你一下这个SystemServiceRegistry类，在这个类中，我们做的事情就是将所有的系统服务按照我们的需要返回给调用者。并且我们的方法中有一个name属性，所以我们很容易想到，我们在可能是会通过一个Map集合存储系统服务信息。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Gets a system service from a given context.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">public</span> static <span class="keyword">Object</span> getSystemService(ContextImpl ctx, String <span class="type">name</span>) &#123;</span><br><span class="line">    ServiceFetcher&lt;?&gt; fetcher = SYSTEM_SERVICE_FETCHERS.<span class="keyword">get</span>(<span class="type">name</span>);</span><br><span class="line">    <span class="keyword">return</span> fetcher != <span class="keyword">null</span> ? fetcher.getService(ctx) : <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个方法中，我们通过SYSTEM_SERVICE_FETCHERS获取到一个ServiceFetcher对象，其中的SYSTEM_SERVICE_FETCHERS就是一个Map集合，声明如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">static</span> <span class="keyword">final</span> Map&lt;<span class="keyword">String</span>, ServiceFetcher<span class="meta">&lt;?</span>&gt;&gt; SYSTEM_SERVICE_FETCHERS =</span><br><span class="line">        <span class="keyword">new</span> ArrayMap&lt;<span class="keyword">String</span>, ServiceFetcher<span class="meta">&lt;?</span>&gt;&gt;();</span><br></pre></td></tr></table></figure><p>这里我们会有两个疑问，第一个，既然我们是通过get方法拿到的这个系统服务对象，那么肯定有通过put方法填充系统服务对象；第二个，SetviceFetcher是一个什么样的对象？<br>先来看第一个问题，我们调用SYSTEM_SERVICE_FETCER的put方法是在一个registService方法中调用的，而且这个方法是一个私有静态方法，那该方法只会在当前类中调用</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Statically registers a system service with the context.</span></span><br><span class="line"><span class="comment"> * This method must be called during static initialization only.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">registerService</span><span class="params">(<span class="keyword">String</span> serviceName, Class&lt;T&gt; serviceClass,</span></span></span><br><span class="line"><span class="params"><span class="function">        ServiceFetcher&lt;T&gt; serviceFetcher)</span> </span>&#123;</span><br><span class="line">    SYSTEM_SERVICE_NAMES.<span class="built_in">put</span>(serviceClass, serviceName);</span><br><span class="line">    SYSTEM_SERVICE_FETCHERS.<span class="built_in">put</span>(serviceName, serviceFetcher);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个方法的使用我们会发现是在一个静态代码块中调用的，这个静态代码块就是注册系统服务的地方法</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 内容比较多，我只选择平时开发使用比较多的</span></span><br><span class="line">        registerService(Context.ALARM_SERVICE, AlarmManager.class,</span><br><span class="line">                <span class="keyword">new</span> CachedServiceFetcher&lt;AlarmManager&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function">AlarmManager <span class="title">createService</span><span class="params">(ContextImpl ctx)</span> <span class="keyword">throws</span> ServiceNotFoundException </span>&#123;</span><br><span class="line">                IBinder b = ServiceManager.getServiceOrThrow(Context.ALARM_SERVICE);</span><br><span class="line">                IAlarmManager service = IAlarmManager.Stub.asInterface(b);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> AlarmManager(service, ctx);</span><br><span class="line">            &#125;&#125;);</span><br><span class="line">        <span class="comment">// AudioManager</span></span><br><span class="line">        registerService(Context.AUDIO_SERVICE, AudioManager.class,</span><br><span class="line">                <span class="keyword">new</span> CachedServiceFetcher&lt;AudioManager&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function">AudioManager <span class="title">createService</span><span class="params">(ContextImpl ctx)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> AudioManager(ctx);</span><br><span class="line">            &#125;&#125;);</span><br><span class="line">        <span class="comment">// BluetoothManager</span></span><br><span class="line">        registerService(Context.BLUETOOTH_SERVICE, BluetoothManager.class,</span><br><span class="line">                <span class="keyword">new</span> CachedServiceFetcher&lt;BluetoothManager&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function">BluetoothManager <span class="title">createService</span><span class="params">(ContextImpl ctx)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> BluetoothManager(ctx);</span><br><span class="line">            &#125;&#125;);</span><br><span class="line">        <span class="comment">// ClipboardManager</span></span><br><span class="line">        registerService(Context.CLIPBOARD_SERVICE, ClipboardManager.class,</span><br><span class="line">            <span class="keyword">new</span> CachedServiceFetcher&lt;ClipboardManager&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function">ClipboardManager <span class="title">createService</span><span class="params">(ContextImpl ctx)</span> <span class="keyword">throws</span> ServiceNotFoundException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ClipboardManager(ctx.getOuterContext(),</span><br><span class="line">                        ctx.mMainThread.getHandler());</span><br><span class="line">            &#125;&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The clipboard service moved to a new package.  If someone asks for the old</span></span><br><span class="line">        <span class="comment">// interface by class then we want to redirect over to the new interface instead</span></span><br><span class="line">        <span class="comment">// (which extends it).</span></span><br><span class="line">        SYSTEM_SERVICE_NAMES.put(android.text.ClipboardManager.class, Context.CLIPBOARD_SERVICE);</span><br><span class="line">        <span class="comment">// ConnectivityManager</span></span><br><span class="line">        registerService(Context.CONNECTIVITY_SERVICE, ConnectivityManager.class,</span><br><span class="line">                <span class="keyword">new</span> StaticApplicationContextServiceFetcher&lt;ConnectivityManager&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function">ConnectivityManager <span class="title">createService</span><span class="params">(Context context)</span> <span class="keyword">throws</span> ServiceNotFoundException </span>&#123;</span><br><span class="line">                IBinder b = ServiceManager.getServiceOrThrow(Context.CONNECTIVITY_SERVICE);</span><br><span class="line">                IConnectivityManager service = IConnectivityManager.Stub.asInterface(b);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ConnectivityManager(context, service);</span><br><span class="line">            &#125;&#125;);</span><br><span class="line">        <span class="comment">// LocationManager</span></span><br><span class="line">        registerService(Context.LOCATION_SERVICE, LocationManager.class,</span><br><span class="line">                <span class="keyword">new</span> CachedServiceFetcher&lt;LocationManager&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function">LocationManager <span class="title">createService</span><span class="params">(ContextImpl ctx)</span> <span class="keyword">throws</span> ServiceNotFoundException </span>&#123;</span><br><span class="line">                IBinder b = ServiceManager.getServiceOrThrow(Context.LOCATION_SERVICE);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> LocationManager(ctx, ILocationManager.Stub.asInterface(b));</span><br><span class="line">            &#125;&#125;);</span><br><span class="line">        <span class="comment">// PowerManager</span></span><br><span class="line">        registerService(Context.POWER_SERVICE, PowerManager.class,</span><br><span class="line">                <span class="keyword">new</span> CachedServiceFetcher&lt;PowerManager&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function">PowerManager <span class="title">createService</span><span class="params">(ContextImpl ctx)</span> <span class="keyword">throws</span> ServiceNotFoundException </span>&#123;</span><br><span class="line">                IBinder b = ServiceManager.getServiceOrThrow(Context.POWER_SERVICE);</span><br><span class="line">                IPowerManager service = IPowerManager.Stub.asInterface(b);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> PowerManager(ctx.getOuterContext(),</span><br><span class="line">                        service, ctx.mMainThread.getHandler());</span><br><span class="line">            &#125;&#125;);</span><br><span class="line">        <span class="comment">// SensorManager    </span></span><br><span class="line">        registerService(Context.SENSOR_SERVICE, SensorManager.class,</span><br><span class="line">                <span class="keyword">new</span> CachedServiceFetcher&lt;SensorManager&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function">SensorManager <span class="title">createService</span><span class="params">(ContextImpl ctx)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> SystemSensorManager(ctx.getOuterContext(),</span><br><span class="line">                  ctx.mMainThread.getHandler().getLooper());</span><br><span class="line">            &#125;&#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//CHECKSTYLE:ON IndentationCheck</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在这些方法中我们会发现最终都会通过CaceServiceFetcer或者staticServiceFetcer或StaticApplicationContextServiceFetcher的匿名内部类，通过实现createService方法返回一个xxxManager对象。其中这三个类都是继承了ServiceFetcher接口。这也就是刚才所说的第二个问题。</p><p>这里我们以Vibrator为例，我们的注册方法是如下所示</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">registerService(Context.VIBRATOR_SERVICE, Vibrator.class,</span><br><span class="line">                <span class="keyword">new</span> CachedServiceFetcher&lt;Vibrator&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Vibrator <span class="function"><span class="title">createService</span>(<span class="params">ContextImpl ctx</span>)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> SystemVibrator(ctx);</span><br><span class="line">            &#125;&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最终返回的是一个SystemVibrator对象，这个对象就是系统提供的震动管理器对象。在这个类中，我们继承Vibrator抽象类，在Vibrator抽象类中，有我们会使用到的一些方法，比如vibrate()开启震动方法，cancel()取消震动方法，hasVibrator()方法。那么这些方法都是最终在SystemVibrator类中实现的。我们一最简单的hasVibrator()方法为例，看一下，在SystemVibrator中它是如何实现的</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">hasVibrator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mService == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Log.w(TAG, <span class="string">&quot;Failed to vibrate; no vibrator service.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> mService.<span class="title">hasVibrator</span><span class="params">()</span></span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们会发现这里我们通过调用mService中的hasVibrator方法，将数据返回。先来看一下mService是如何声明的</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> final IVibratorService mService;</span><br><span class="line"></span><br><span class="line">@UnsupportedAppUsage</span><br><span class="line">public <span class="constructor">SystemVibrator()</span> &#123;</span><br><span class="line">    mService = <span class="module-access"><span class="module"><span class="identifier">IVibratorService</span>.</span><span class="module"><span class="identifier">Stub</span>.</span></span><span class="keyword">as</span><span class="constructor">Interface(ServiceManager.<span class="params">getService</span>(<span class="string">&quot;vibrator&quot;</span>)</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里我们发现最终使用的是IVibratorService这个接口对象，相信大家看到这个之后都会焕然大悟，其实就是AIDL，通过AIDL实现跨进程通信<br>那么我们很容易就自导IVibratorService是一个接口，我们需要找到实现了该接口的对象，下面就是找IVibratorService的实现类了。这里如何确定，是要根据经验积累的，所以这里我们直接看到他的实现类，也就是VibratorService类。在这个类中我们发现，他继承了IVibratorService.Stub抽象类，所以，IVibratorService中的方法，在VibratorService中是有具体实现的。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="comment">// Binder call</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">hasVibrator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">return</span> <span class="title">doVibratorExists</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">boolean</span> <span class="title">doVibratorExists</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// For now, we choose to ignore the presence of input devices that have vibrators</span></span><br><span class="line">    <span class="comment">// when reporting whether the device has a vibrator.  Applications often use this</span></span><br><span class="line">    <span class="comment">// information to decide whether to enable certain features so they expect the</span></span><br><span class="line">    <span class="comment">// result of hasVibrator() to be constant.  For now, just report whether</span></span><br><span class="line">    <span class="comment">// the device has a built-in vibrator.</span></span><br><span class="line">    <span class="comment">//synchronized (mInputDeviceVibrators) &#123;</span></span><br><span class="line">    <span class="comment">//    return !mInputDeviceVibrators.isEmpty() || vibratorExists();</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="function"><span class="keyword">return</span> <span class="title">vibratorExists</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">native</span> <span class="function"><span class="keyword">boolean</span> <span class="title">vibratorExists</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>上面的三个方法调用是依次执行的，所以最终我们调用的native库中的vibraatorExists方法，并且将返回的数据传递给调用者。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;Android系统服务机制&lt;/p&gt;</summary>
    
    
    
    
    <category term="源码分析" scheme="http://www.paulniu.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>源码分析(六) Java GC</title>
    <link href="http://www.paulniu.com/2020/03/07/android-source-code-06/"/>
    <id>http://www.paulniu.com/2020/03/07/android-source-code-06/</id>
    <published>2020-03-07T14:09:13.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>GC垃圾回收机制</p><span id="more"></span><p>垃圾回收机制，简称GC，是Java语言的核心技术之一，在Java中，程序员不需要关心内存动态分配和垃圾回收问题，这些都有JVM帮我们实现。</p><p>什么是垃圾？<br>简单来说就是只要一个对象没有被引用，该对象就是无用的。</p><p>如何判断这个对象是无用的？<br>两种算法：引用计数法和可达性分析算法。</p><ol><li><p>引用计数法<br>给对象添加一个引用计数器，每当有一个地方引用他，引用计数器就+1，当引用失效，则引用计数器-1，任何时候计数器为0的对象都是不再被引用的对象，可以当做垃圾回收。<br>这种引用计数法有明显的缺点，无法检测出循环引用。优点就是执行效率高，程序受影响小。</p></li><li><p>可达性分析算法<br>其主要的思想就是通过一系列成为”GC roots”对象作为起点，从这个节点开始向下搜索，节点所走过的路径成为引用链，当一个对象到GC Roots没有任何引用链相连，证明此对象是不可用的。</p></li></ol><p>什么对象可以作为GC Roots？</p><ul><li>虚拟机栈中的引用对象</li><li>方法区中到的常量引用对象</li><li>方法区中类静态属性的引用对象</li><li>本地方法栈中的引用对象</li><li>活跃线程的引用对象</li></ul><p>其实在可达性分析算法中被判定为不可用的对象也不是会被立刻回收，至少要经历两次标记过程。在可达性分析算法中不可用对象被第一次标记，并且会执行一次筛选，筛选的条件就是该对象是否有必要执行finalize()方法。对象没有覆盖finalize()方法，或者finalize()方法已经被虚拟机执行过，那么这时候虚拟机将会认为没有必要执行，需要执行的对象才会被放在一个队列中进行第二次标记。</p><p>如何进行垃圾回收？<br>四种垃圾回收算法，标记清楚算法，复制算法，标记整理算法，分代回收算法</p><ol><li><p>记忆清除算法<br>分为标记和清除两个状态，标记阶段的任务是标记出所有需要被回收的对象，清除阶段就是回收所有被标记的对象的内存空间。效率较高，但是也会造成内存中存在很多碎片。</p></li><li><p>复制算法<br>将内存分为大小相等的两块区域，每次在使用的时候只使用其中的一块。当第一块内存使用完后，将第一块内存中所有还在存活的数据拷贝一份到第二块内存中，然后清除第一块内存。</p></li><li><p>标记整理算法<br>标记清除一样，但是在完成标记之后，它不是直接清理可回收对象，而是将存活对象都向一端移动，然后清理掉端边界以外的内存。</p></li><li><p>分代回收算法<br>当前虚拟机的垃圾收集都采用分代收集算法，这种算法就是根据具体的情况选择具体的垃圾回收算法。一般将 java 堆分为新生代和老年代，这样我们就可以根据各个年代的特点选择合适的垃圾收集算法。<br>比如在新生代中，每次收集都会有大量对象死去，所以可以选择复制算法，只需要付出少量对象的复制成本就可以完成每次垃圾收集。而老年代的对象存活几率是比较高的，而且没有额外的空间对它进行分配担保，所以我们必须选择“标记-清除”或“标记-整理”算法进行垃圾收集</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;GC垃圾回收机制&lt;/p&gt;</summary>
    
    
    
    
    <category term="源码分析" scheme="http://www.paulniu.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>源码分析(五) JVM内存模型和Java内存模型</title>
    <link href="http://www.paulniu.com/2020/03/06/android-source-code-05/"/>
    <id>http://www.paulniu.com/2020/03/06/android-source-code-05/</id>
    <published>2020-03-06T14:09:13.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>JVM内存模型和Java内存模型</p><span id="more"></span><p>先来看一下内存模型图，这个图是在网上下载的，基本上可以满足我们需要<br><img src="/assets/sourcecode/jvm_01.jpg" alt="内存结构模型图"></p><p>JVM的内存模型总共分为五个区域，分别是程序计数器，本地方法栈，java虚拟机栈，java堆，方法区</p><ol><li><p>程序计数器<br>为了线程切换能够恢复到正确的执行位置，每条线程都有一个独立的程序计数器，各条线程之间程序计数器不相互影响，独立存储，我们称这块区域为”线程私有“的内存。计数器记录的是正在执行的虚拟机字节码指令的地址</p></li><li><p>本地方法栈：虚拟机执行native方法的服务</p></li><li><p>Java虚拟机栈：方法调用时，与方法相关的数据都会方法虚拟机栈中。每一个方法在执行的时候都会在虚拟机栈中创建一个栈帧，用于存储局部变量表，操作数栈，动态链接(例如多态就要动态链接以确定引用的状态)，方法出口等信息。局部变量表用来存放在编译期可知的基本数据类型(boolean,byte,int,char,float,double,long,short)，对象引用(reference类型，他不等于对象本身，可能是指向对象起始地址的引用指针)，returnAddress类型(指向一个字节码指令的地址)。其中 64 位长度的 long 和 double 类型的数据会占用 2 个局部变量空间（Slot），其余的数据类型只占用 1 个。局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。</p></li><li><p>Java堆：是被所有线程共享的内存区域，在虚拟机启动的时候就会创建Java堆。唯一的目的就是为了存放实例对象，几乎所有的实例对象都会在这里分配内存，Java的垃圾回收机制操作的也就是这块区域。</p></li><li><p>方法区：与Java堆一样也是被所有线程共享的内存区域，用于存储已经被虚拟机加载的类信息，常量，静态变量，即时编译器编译后的代码</p></li></ol><p>一个类中主要有：常量、成员变量、静态变量、局部变量。其中常量与静态变量位于方法区，成员变量位于 Java 堆，局部变量位于 Java 虚拟机栈。<br>  运行时常量池： 是方法区的一部分。Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池（Constant Pool Table），用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。<br>  Java内存模型：每个线程都有一个工作内存，线程只可以修改自己工作内存中的数据，然后再同步回主内存，主内存由多个线程共享。</p><p>Java内存模型<br><img src="/assets/sourcecode/jvm_02.jpg" alt="Java内存模型图"></p><p>Java Memory Model (JAVA 内存模型，JMM）描述线程之间如何通过内存(memory)来进行交互。具体说来，JVM中存在一个主存区（Main Memory或Java Heap Memory），对于所有线程进行共享，而每个线程又有自己的工作内存（Working Memory，实际上是一个虚拟的概念），工作内存中保存的是主存中某些变量的拷贝，线程对所有变量的操作并非发生在主存区，而是发生在工作内存中，而线程之间是不能直接相互访问的，变量在程序中的传递，是依赖主存来完成的</p><p>JMM描述了Java程序中各种变量（线程共享变量）的访问规则，以及在JVM中将变量存储到内存中读取出变量这样的底层细节。<br>所有的变量都存储在主内存中，每个线程都有自己独立的工作内存，里面保存该线程使用到的变量的副本（主内存中变量的一份拷贝）。<br>  JMM的两条规定<br>  1、线程对共享变量的所有操作都必须在自己的工作内存中进行，不能直接从主内存中读写；<br>  2、不同的线程之间无法直接访问其他线程工作内存中的变量，线程变量值的传递需要通过主内存来完成</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;JVM内存模型和Java内存模型&lt;/p&gt;</summary>
    
    
    
    
    <category term="源码分析" scheme="http://www.paulniu.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>源码分析(四) Activity启动流程</title>
    <link href="http://www.paulniu.com/2020/03/05/android-source-code-04/"/>
    <id>http://www.paulniu.com/2020/03/05/android-source-code-04/</id>
    <published>2020-03-05T14:09:13.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Activity启动流程</p><span id="more"></span><h1 id="关键类介绍"><a href="#关键类介绍" class="headerlink" title="关键类介绍"></a>关键类介绍</h1><p>在分析Activity启动流程之前需要有几个关键类是我们需要提前了解的，可能对立面的代码不是非常细致的了解，但是至少知道这几个类是干什么用的</p><ol><li>ActivityManagerService：AMS是Android核心服务之一，主要完成Android四大组件启动，切换，调度以及应用进程管理和调度等工作，其职责与操作系统中的进程管理和调度模块相类似，本身是一个Binder实现类，应用进程通过Binder机制调度系统服务</li><li>ActivityThread：应用程序入口，系统通过调用main函数，开启消息循环队列，ActivityThread所在的线程叫主线程(UI线程)</li><li>Instrumentation：工具类，用来监控应用程序与系统之间的交互，包装了ActivityManagerService的调用，一些插件化方案通过hook该类实现</li><li>ActivityStarter：Activity启动的工具类，处理Activity启动的各种flag</li><li>ActivityStackSupervisor：管理所有应用的Activity栈，其中mFocusedStack就是当前应用的Activity栈</li></ol><p>先来看一张基本流程图，在这张图中我们只是将启动的流程简化，告诉我们基本的启动步骤</p><p><a href="/assets/sourcecode/activity_start_01.png">启动基本流程图(简化)</a></p><p>大致启动步骤可以分为七步，可能在一开始看到这么多启动步骤，会觉的难以接受，但是如果我们能够分开来看，其实也不是特别复杂</p><ol><li>在Launcher中，我们点击应用图标，会通知AMS我们需要启动一个Activity，通知最终会执行到System Service进程中</li><li>在System Service进程中，会告诉Launcher需要进入pause状态</li><li>Launcher收到pause通知后挂起，并通知System Service进程，可以开启新的Activity了</li><li>System Service进程在得知Launcher挂起后，会通过zygote的初试进程fork出一个新的进程(App进程)，这就是我们启动Activity需要使用到的进程，紧接着执行一些初始化操作</li><li>App进程完成初始化操作之后返回告诉System Service进程</li><li>System Service在得知App进程初始化完成之后完成App进程的注册并且启动Activity</li><li>启动App进程后Activity处于运行状态，并且告诉System Service</li></ol><p>其中我们可以把着七个步骤分为两部分，第一部分包括步骤1，2，3，这个三个步骤主要是Launcher和System Service完成的交互，第二部分包括步骤4，5，6，7，这四个步骤主要是完成应用进程的创建，初始化，注册等工作。那么这样分析完成之后我们就很明了了。</p><p>关于Activity启动详细的流程图，在网上有很多，有兴趣的同学可以去网上搜一下，这里我贴出一些别人的图片，供大家参考</p><p><a href="/assets/sourcecode/activity_start_02.png">启动详细流程图</a></p><p>这里我们将启动流程总的来说一遍(如果面试的时候别人问你启动流程，直接按照这个回答应该就是问题不大，不过后面别人肯定也会进一步的问清楚细节)</p><p>当点击桌面的应用图标时，会发起启动远程进程的操作，利用Binder机制发送消息给system_service进程，在system_service进程中会调用ActivityManagerService#startProcessLocked()方法，这个方法内部会调用process.start(android.app.ActivityThread)方法，然后通过socket通信通知zygote进程fork出一个子进程，也就是我们的App进程，在App进程创建之后将ActivityThread加入到App进程中，执行ActivityThread#main()方法；在App进程中，main()方法会初始化ActivityThread，同时创建ApplicationThread，Looper，MessageQueue等对象，调用ActivityThread#attach(false)方法进行Binder通信，在这个方法中调用ActivityManagerService#attachApplication(mAppThread)方法，将thread信息告诉ActivityManagerService，接着开启Looper循环；而在system_service中，ActivityManagerService#attachApplication(mAppThread)方法调用了thread#bindApplication()和mStackSupervisor#attachApplicationLocked()方法。其中thread#bindApplication()方法调用了ActivityThread#sendMessage(H.BIND_APPLICATION,data)方法，最终走到了ActivityThread#handleBindApplication()方法，进而创建Application对象，并调用Application#attach(context)方法，并且绑定context，在完成Application的创建之后，调用mInstrumentation#callApplicationOnce()方法，执行Application#onCreate()方法生命周期；而对于mStackSupervisor#attachApplicationLocked()方法调用了app#thread#scheduleLaunchActivity()方法(其实就是ActivityThread#ApplicationThread#scheduleLaunchActivity()方法)，进而通过ActivityThread#sendMessage(H.LAUNCH_ACTIVITY,r)方法，最终执行到ActivityThread#handleLaunchActivity()方法，进而创建Activity对象，调用Activity#attach()方法，在调用mInstrumentation#callActivityOnCreate()方法，执行Activity#onCreate()的声明周期方法。</p><p>内容比较多，大部分的都是方方的嵌套调用，下面我们依次来分析。</p><blockquote><p>注意：Android不同版本在启动流程中所调用的方法可能有差别，但是基本顺序是不会改变的，我写这篇博客时采用的编译方式是25.0.2，也就是buildToolsVersion “25.0.2”。其他的版本可能略有不同，比如使用buildToolsversion是28以上时，我们不是调用ActivityManagerNative类中的方法而是嗲用ActivityTaskManager中的方法。其他不同的地方，同学们可以自己去查找和对比</p></blockquote><h3 id="step-1"><a href="#step-1" class="headerlink" title="step 1"></a>step 1</h3><p>当用户点击Launcher中的应用图标时，我们执行的是Activity#startActivity()方法。这里可能有同学会问，为什么和Activity跳转的方式是一样的？这里其实Launcher也是一个应用，我们通过Launcher启动别的Activity其实就是传递Intent对象，让AMS帮我们启动目标应用。</p><p>Activity.java文件中代码</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">startActivity</span>(<span class="params">Intent intent</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.startActivity(intent, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 紧接着调用带有bundle对象的startActivity方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">startActivity</span>(<span class="params">Intent intent, <span class="meta">@Nullable</span> Bundle options</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (options != <span class="literal">null</span>) &#123;</span><br><span class="line">        startActivityForResult(intent, -<span class="number">1</span>, options);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Note we want to go through this call for compatibility with</span></span><br><span class="line">        <span class="comment">// applications that may have overridden the method.</span></span><br><span class="line">        startActivityForResult(intent, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 紧接着调用带有返回值的startActivityForResult方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">startActivityForResult</span>(<span class="params"><span class="meta">@RequiresPermission</span> Intent intent, int requestCode,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Nullable</span> Bundle options</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mParent == <span class="literal">null</span>) &#123;</span><br><span class="line">        options = transferSpringboardActivityOptions(options);</span><br><span class="line">        Instrumentation.ActivityResult ar =</span><br><span class="line">            mInstrumentation.execStartActivity(</span><br><span class="line">                <span class="built_in">this</span>, mMainThread.getApplicationThread(), mToken, <span class="built_in">this</span>,</span><br><span class="line">                intent, requestCode, options);</span><br><span class="line">        <span class="keyword">if</span> (ar != <span class="literal">null</span>) &#123;</span><br><span class="line">            mMainThread.sendActivityResult(</span><br><span class="line">                mToken, mEmbeddedID, requestCode, ar.getResultCode(),</span><br><span class="line">                ar.getResultData());</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        cancelInputsAndStartExitTransition(options);</span><br><span class="line">        <span class="comment">// TODO Consider clearing/flushing other event sources and events for child windows.</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在startActivityForResult方法中我们删除了一些我们暂时不研究的代码，这里面关键的内容就是</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Instrumentation.ActivityResult ar = mInstrumentation.execStart()<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>在这个方法中，传递的有多个参数，分别是上下文对象(context),实现了IBinder机制的ApplicationThread对象，token值，当前Activity对象，Intent意图，int类型的requestCode，bundle传递的数据。<br>而在Instrumentation这个类里面，execStartActivity方法如下所示</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function">ActivityResult <span class="title">execStartActivity</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        Context who, IBinder contextThread, IBinder token, Activity <span class="keyword">target</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        Intent intent, <span class="keyword">int</span> requestCode, Bundle options)</span> </span>&#123;</span><br><span class="line">    ... <span class="comment">// 这里主要是对访问Activity的Uri的封装</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        intent.migrateExtraStreamToClipData();</span><br><span class="line">        intent.prepareToLeaveProcess(who);</span><br><span class="line">        <span class="keyword">int</span> result = ActivityManagerNative.getDefault()</span><br><span class="line">            .startActivity(whoThread, who.getBasePackageName(), intent,</span><br><span class="line">                    intent.resolveTypeIfNeeded(who.getContentResolver()),</span><br><span class="line">                    token, <span class="keyword">target</span> != <span class="keyword">null</span> ? <span class="keyword">target</span>.mEmbeddedID : <span class="keyword">null</span>,</span><br><span class="line">                    requestCode, 0, <span class="keyword">null</span>, options);</span><br><span class="line">        checkStartActivityResult(result, intent);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Failure from system&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在execStartActivity()方法中，我们调用了ActivityManagerNative.getDefault().startActivity()方法，我们进入到ActivityManagerNative这个类里面看一下，我们通过代码注释可以了解到，主要是帮我们完成Binder机制的通信功能的，我们暂时先不管这个类里面具体的代码，只看里面的getDefault()方法</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Retrieve the system&#x27;s default/global activity manager.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> IActivityManager <span class="title">getDefault</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> gDefault.<span class="keyword">get</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里我们发现其实我们就是通过IgDefault这个对象通过get方法获取到的一个IActivitykManager对象</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> final <span class="title">Singleton</span>&lt;<span class="title">IActivityManager</span>&gt; gDefault</span> = <span class="keyword">new</span> Singleton&lt;IActivityManager&gt;() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> IActivityManager <span class="title">create</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        IBinder b = ServiceManager.getService(<span class="string">&quot;activity&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">            Log.v(<span class="string">&quot;ActivityManager&quot;</span>, <span class="string">&quot;default service binder = &quot;</span> + b);</span><br><span class="line">        &#125;</span><br><span class="line">        IActivityManager am = asInterface(b);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">            Log.v(<span class="string">&quot;ActivityManager&quot;</span>, <span class="string">&quot;default service = &quot;</span> + am);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> am;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;    </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里我们可以将Singleton当做是一个集合，通过get方法可以从集合中获取一个IActivityManager对象。其中create方法就是我们通过Binder机制从ServiceManager中得到一个IActivityManager对象。刚才在代码中我们是通过ActivityManager.getDefault()的这个对象调用startActivity()方法，其实就是通过ServiceManager这个对象中的startActivity方法。而ServiceManager的实现类就是ActivityManagerService。<br>在ActivityManagerService这个类里面我们首先会发现，他继承自IActivityManager.Stub这个接口，这个接口是AIDL的接口，暂时不用管。在ActivityManagerService这个类中的startActivity方法如下所示</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="built_in">int</span> startActivity(IApplicationThread caller, String callingPackage,</span><br><span class="line">        Intent <span class="built_in">int</span>ent, String resolvedType, IBinder resultTo, String resultWho, <span class="built_in">int</span> requestCode,</span><br><span class="line">        <span class="built_in">int</span> startFlags, ProfilerInfo profilerInfo, Bundle bOptions) &#123;</span><br><span class="line">    <span class="keyword">return</span> startActivityAsUser(caller, callingPackage, <span class="built_in">int</span>ent, resolvedType, resultTo,</span><br><span class="line">            resultWho, requestCode, startFlags, profilerInfo, bOptions,</span><br><span class="line">            UserHandle.getCallingUserId());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="built_in">int</span> startActivity(Intent <span class="built_in">int</span>ent, ActivityStackSupervisor.ActivityContainer container) &#123;</span><br><span class="line">    enforceNotIsolatedCaller(<span class="string">&quot;ActivityContainer.startActivity&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">int</span> userId = mUserController.handleIncomingUser(Binder.getCallingPid(),</span><br><span class="line">            Binder.getCallingUid(), mStackSupervisor.mCurrentUser, <span class="literal">false</span>,</span><br><span class="line">            ActivityManagerService.ALLOW_FULL_ONLY, <span class="string">&quot;ActivityContainer&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Switch to user app stacks here.</span></span><br><span class="line">    String mimeType = <span class="built_in">int</span>ent.getType();</span><br><span class="line">    <span class="keyword">final</span> Uri data = <span class="built_in">int</span>ent.getData();</span><br><span class="line">    <span class="keyword">if</span> (mimeType == <span class="literal">null</span> &amp;&amp; data != <span class="literal">null</span> &amp;&amp; <span class="string">&quot;content&quot;</span>.equals(data.getScheme())) &#123;</span><br><span class="line">        mimeType = getProviderMimeType(data, userId);</span><br><span class="line">    &#125;</span><br><span class="line">    container.checkEmbeddedAllowedInner(userId, <span class="built_in">int</span>ent, mimeType);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span>ent.addFlags(FORCE_NEW_TASK_FLAGS);</span><br><span class="line">    <span class="keyword">return</span> mActivityStarter.startActivityMayWait(<span class="literal">null</span>, <span class="number">-1</span>, <span class="literal">null</span>, <span class="built_in">int</span>ent, mimeType, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>,</span><br><span class="line">            <span class="literal">null</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">false</span>, userId, container, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这两个方法中，我们发现最终调用的是mActivityStarter对象中的startActivityMayWait方法，而ActivityStarter这个类使用解释如何启动Activity的。找到我们对应的startActivityMayWait()方法，这个方法的代码表较多，我们只看比较关键的部分</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">startActivityMayWait</span><span class="params">(IApplicationThread caller, <span class="keyword">int</span> callingUid,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">String</span> callingPackage, Intent intent, <span class="keyword">String</span> resolvedType,</span></span></span><br><span class="line"><span class="params"><span class="function">        IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span></span></span><br><span class="line"><span class="params"><span class="function">        IBinder resultTo, <span class="keyword">String</span> resultWho, <span class="keyword">int</span> requestCode, <span class="keyword">int</span> startFlags,</span></span></span><br><span class="line"><span class="params"><span class="function">        ProfilerInfo profilerInfo, WaitResult outResult,</span></span></span><br><span class="line"><span class="params"><span class="function">        Configuration globalConfig, Bundle bOptions, <span class="keyword">boolean</span> ignoreTargetSecurity, <span class="keyword">int</span> userId,</span></span></span><br><span class="line"><span class="params"><span class="function">        IActivityContainer iContainer, TaskRecord inTask, <span class="keyword">String</span> reason)</span> </span>&#123;</span><br><span class="line">    ···</span><br><span class="line">        <span class="keyword">int</span> res = <span class="built_in">startActivityLocked</span>(caller, intent, ephemeralIntent, resolvedType,</span><br><span class="line">                aInfo, rInfo, voiceSession, voiceInteractor,</span><br><span class="line">                resultTo, resultWho, requestCode, callingPid,</span><br><span class="line">                callingUid, callingPackage, realCallingPid, realCallingUid, startFlags,</span><br><span class="line">                options, ignoreTargetSecurity, componentSpecified, outRecord, container,</span><br><span class="line">                inTask, reason);</span><br><span class="line"></span><br><span class="line">    ···</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">startActivityLocked</span><span class="params">(IApplicationThread caller, Intent intent, Intent ephemeralIntent,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">String</span> resolvedType, ActivityInfo aInfo, ResolveInfo rInfo,</span></span></span><br><span class="line"><span class="params"><span class="function">        IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span></span></span><br><span class="line"><span class="params"><span class="function">        IBinder resultTo, <span class="keyword">String</span> resultWho, <span class="keyword">int</span> requestCode, <span class="keyword">int</span> callingPid, <span class="keyword">int</span> callingUid,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">String</span> callingPackage, <span class="keyword">int</span> realCallingPid, <span class="keyword">int</span> realCallingUid, <span class="keyword">int</span> startFlags,</span></span></span><br><span class="line"><span class="params"><span class="function">        ActivityOptions options, <span class="keyword">boolean</span> ignoreTargetSecurity, <span class="keyword">boolean</span> componentSpecified,</span></span></span><br><span class="line"><span class="params"><span class="function">        ActivityRecord[] outActivity, ActivityStackSupervisor.ActivityContainer container,</span></span></span><br><span class="line"><span class="params"><span class="function">        TaskRecord inTask, <span class="keyword">String</span> reason)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ···</span><br><span class="line"></span><br><span class="line">    mLastStartActivityResult = <span class="built_in">startActivity</span>(caller, intent, ephemeralIntent, resolvedType,</span><br><span class="line">            aInfo, rInfo, voiceSession, voiceInteractor, resultTo, resultWho, requestCode,</span><br><span class="line">            callingPid, callingUid, callingPackage, realCallingPid, realCallingUid, startFlags,</span><br><span class="line">            options, ignoreTargetSecurity, componentSpecified, mLastStartActivityRecord,</span><br><span class="line">            container, inTask);</span><br><span class="line"></span><br><span class="line">   ···</span><br><span class="line">    <span class="keyword">return</span> mLastStartActivityResult;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">startActivity</span><span class="params">(IApplicationThread caller, Intent intent, Intent ephemeralIntent,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">String</span> resolvedType, ActivityInfo aInfo, ResolveInfo rInfo,</span></span></span><br><span class="line"><span class="params"><span class="function">        IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span></span></span><br><span class="line"><span class="params"><span class="function">        IBinder resultTo, <span class="keyword">String</span> resultWho, <span class="keyword">int</span> requestCode, <span class="keyword">int</span> callingPid, <span class="keyword">int</span> callingUid,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">String</span> callingPackage, <span class="keyword">int</span> realCallingPid, <span class="keyword">int</span> realCallingUid, <span class="keyword">int</span> startFlags,</span></span></span><br><span class="line"><span class="params"><span class="function">        ActivityOptions options, <span class="keyword">boolean</span> ignoreTargetSecurity, <span class="keyword">boolean</span> componentSpecified,</span></span></span><br><span class="line"><span class="params"><span class="function">        ActivityRecord[] outActivity, ActivityStackSupervisor.ActivityContainer container,</span></span></span><br><span class="line"><span class="params"><span class="function">        TaskRecord inTask)</span> </span>&#123;</span><br><span class="line">    ···</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">startActivity</span>(r, sourceRecord, voiceSession, voiceInteractor, startFlags, <span class="literal">true</span>,</span><br><span class="line">            options, inTask, outActivity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">startActivity</span><span class="params">(<span class="keyword">final</span> ActivityRecord r, ActivityRecord sourceRecord,</span></span></span><br><span class="line"><span class="params"><span class="function">        IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">int</span> startFlags, <span class="keyword">boolean</span> doResume, ActivityOptions options, TaskRecord inTask,</span></span></span><br><span class="line"><span class="params"><span class="function">        ActivityRecord[] outActivity)</span> </span>&#123;</span><br><span class="line">    ···</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        mService.mWindowManager.<span class="built_in">deferSurfaceLayout</span>();</span><br><span class="line">        result = <span class="built_in">startActivityUnchecked</span>(r, sourceRecord, voiceSession, voiceInteractor,</span><br><span class="line">                startFlags, doResume, options, inTask, outActivity);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">       ···</span><br><span class="line">    &#125;</span><br><span class="line">    ···</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">startActivityUnchecked</span><span class="params">(<span class="keyword">final</span> ActivityRecord r, ActivityRecord sourceRecord,</span></span></span><br><span class="line"><span class="params"><span class="function">        IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">int</span> startFlags, <span class="keyword">boolean</span> doResume, ActivityOptions options, TaskRecord inTask,</span></span></span><br><span class="line"><span class="params"><span class="function">        ActivityRecord[] outActivity)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ···</span><br><span class="line">    <span class="keyword">if</span> (mDoResume) &#123;</span><br><span class="line">        <span class="keyword">final</span> ActivityRecord topTaskActivity =</span><br><span class="line">                mStartActivity.<span class="built_in">getTask</span>().<span class="built_in">topRunningActivityLocked</span>();</span><br><span class="line">        <span class="keyword">if</span> (!mTargetStack.<span class="built_in">isFocusable</span>()</span><br><span class="line">                || (topTaskActivity != null &amp;&amp; topTaskActivity.mTaskOverlay</span><br><span class="line">                &amp;&amp; mStartActivity != topTaskActivity)) &#123;</span><br><span class="line">            ···</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           ···</span><br><span class="line">            mSupervisor.<span class="built_in">resumeFocusedStackTopActivityLocked</span>(mTargetStack, mStartActivity,</span><br><span class="line">                    mOptions);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ···</span><br><span class="line">    &#125;</span><br><span class="line">    ···</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个类中我们发现依次调用了startActivityMayWait(),startActivityLocked(),startActivity(),startActivityUnchecked()等方法，最终调用了mSupervisor中的resumenFocusedStackTopActivityLocked()方法。其中mSupervisor这个变量其实是ActivityStackSupervisor对象。在这个类中我们有三个ActivityStack对象，分别是mHomeStack，mFocusedStack，mLastFocusedStack，这三个Activity栈代表不同的含义，其中mFocusedStack表示的是当前应用的任务栈。mHomeStack是包含Launcher的任务栈，mLastFocusedStack表示上一个应用的任务栈(这个我还没有找到具体的操作，所以展示先这么写，后面可能会修改)。我们找到resumeFocusedStackTopActivityLocked()方法，</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">resumeFocusedStackTopActivityLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">return</span> <span class="title">resumeFocusedStackTopActivityLocked</span><span class="params">(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">resumeFocusedStackTopActivityLocked</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        ActivityStack targetStack, ActivityRecord <span class="keyword">target</span>, ActivityOptions targetOptions)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (targetStack != <span class="keyword">null</span> &amp;&amp; isFocusedStack(targetStack)) &#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> targetStack.<span class="title">resumeTopActivityUncheckedLocked</span><span class="params">(<span class="keyword">target</span>, targetOptions)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> ActivityRecord r = mFocusedStack.topRunningActivityLocked();</span><br><span class="line">    <span class="keyword">if</span> (r == <span class="keyword">null</span> || r.state != RESUMED) &#123;</span><br><span class="line">        mFocusedStack.resumeTopActivityUncheckedLocked(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里我们会发现他又回调了ActivityStack中的resumeTopActivityUncheckedLocked方法，</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> resumeTopActivityUncheckedLocked(ActivityRecord prev, ActivityOptions <span class="keyword">options</span>) &#123;</span><br><span class="line">   ···</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ···</span><br><span class="line">        result = resumeTopActivityInnerLocked(prev, <span class="keyword">options</span>);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        ···</span><br><span class="line">    &#125;</span><br><span class="line">    ···</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> resumeTopActivityInnerLocked(ActivityRecord prev, ActivityOptions <span class="keyword">options</span>) &#123;</span><br><span class="line"> </span><br><span class="line">    ···</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">next</span>.app != <span class="keyword">null</span> &amp;&amp; <span class="keyword">next</span>.app.thread != <span class="keyword">null</span>) &#123;</span><br><span class="line">       ···</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ···</span><br><span class="line">        mStackSupervisor.startSpecificActivityLocked(<span class="keyword">next</span>, <span class="keyword">true</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ···</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在resumeTopActivityInnerLocked方法中我们又执行了StackSupervisor中的startSpecificActivityLocked方法。<br>在ActivityStackSupervisor类中的startSpecificActivityLocked方法中，会判断要启动的App进程是否已经存在，如果存在则通知进程启动，如果没有则先将进程创建出来</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">void</span> <span class="function"><span class="title">startSpecificActivityLocked</span>(<span class="params">ActivityRecord r,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="built_in">boolean</span> andResume, <span class="built_in">boolean</span> checkConfig</span>)</span> &#123;</span><br><span class="line">   ···</span><br><span class="line">    <span class="keyword">if</span> (app != <span class="literal">null</span> &amp;&amp; app.thread != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           ···</span><br><span class="line">            <span class="comment">// 如果进程已存在，则通知进程启动组件</span></span><br><span class="line">            realStartActivityLocked(r, app, andResume, checkConfig);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            ···</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 否则先将进程创建出来</span></span><br><span class="line">    mService.startProcessLocked(r.processName, r.info.applicationInfo, <span class="literal">true</span>, <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;activity&quot;</span>, r.intent.getComponent(), <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里我们直接看进程没有创建的时候的代码，因为在创建完成之后也是会通知进程启动组件的。创建进程我们调用的是mService.startprocessLocked()方法，我们先看一下这个方法的实现，在ActivityManagerService类中，找到startProcessLocked方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> ProcessRecord startProcessLocked(<span class="keyword">String</span> processName,</span><br><span class="line">        ApplicationInfo info, <span class="keyword">boolean</span> knownToBeDead, <span class="keyword">int</span> intentFlags,</span><br><span class="line">        <span class="keyword">String</span> hostingType, ComponentName hostingName, <span class="keyword">boolean</span> allowWhileBooting,</span><br><span class="line">        <span class="keyword">boolean</span> isolated, <span class="keyword">boolean</span> keepIfLarge) &#123;</span><br><span class="line">    <span class="keyword">return</span> startProcessLocked(processName, info, knownToBeDead, intentFlags, hostingType,</span><br><span class="line">            hostingName, allowWhileBooting, isolated, <span class="number">0</span> <span class="comment">/* isolatedUid */</span>, keepIfLarge,</span><br><span class="line">            <span class="literal">null</span> <span class="comment">/* ABI override */</span>, <span class="literal">null</span> <span class="comment">/* entryPoint */</span>, <span class="literal">null</span> <span class="comment">/* entryPointArgs */</span>,</span><br><span class="line">            <span class="literal">null</span> <span class="comment">/* crashHandler */</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> ProcessRecord startProcessLocked(<span class="keyword">String</span> processName, ApplicationInfo info,</span><br><span class="line">        <span class="keyword">boolean</span> knownToBeDead, <span class="keyword">int</span> intentFlags, <span class="keyword">String</span> hostingType, ComponentName hostingName,</span><br><span class="line">        <span class="keyword">boolean</span> allowWhileBooting, <span class="keyword">boolean</span> isolated, <span class="keyword">int</span> isolatedUid, <span class="keyword">boolean</span> keepIfLarge,</span><br><span class="line">        <span class="keyword">String</span> abiOverride, <span class="keyword">String</span> entryPoint, <span class="keyword">String</span>[] entryPointArgs, Runnable crashHandler) &#123;</span><br><span class="line">    ···</span><br><span class="line">    startProcessLocked(</span><br><span class="line">            app, hostingType, hostingNameStr, abiOverride, entryPoint, entryPointArgs);</span><br><span class="line">    ···</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> startProcessLocked(ProcessRecord app, <span class="keyword">String</span> hostingType,</span><br><span class="line">        <span class="keyword">String</span> hostingNameStr, <span class="keyword">String</span> abiOverride, <span class="keyword">String</span> entryPoint, <span class="keyword">String</span>[] entryPointArgs) &#123;</span><br><span class="line">    ···</span><br><span class="line">        <span class="keyword">if</span> (entryPoint == <span class="literal">null</span>) entryPoint = <span class="string">&quot;android.app.ActivityThread&quot;</span>;</span><br><span class="line">        Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">&quot;Start proc: &quot;</span> +</span><br><span class="line">                app.processName);</span><br><span class="line">        checkTime(startTime, <span class="string">&quot;startProcess: asking zygote to start proc&quot;</span>);</span><br><span class="line">        ProcessStartResult startResult;</span><br><span class="line">        <span class="keyword">if</span> (hostingType.equals(<span class="string">&quot;webview_service&quot;</span>)) &#123;</span><br><span class="line">            ···</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            checkTime(startTime, <span class="string">&quot;startProcess: asking zygote to start proc&quot;</span>);</span><br><span class="line">            startResult = Process.start(entryPoint,</span><br><span class="line">                    app.processName, uid, uid, gids, debugFlags, mountExternal,</span><br><span class="line">                    app.info.targetSdkVersion, seInfo, requiredAbi, instructionSet,</span><br><span class="line">                    app.info.dataDir, invokeWith, entryPointArgs);</span><br><span class="line">        &#125;</span><br><span class="line">        ···</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们发现最终启动进程是通过Process.start()方法帮我创建一个进程。<br>进程创建后将 ActivityThread 加载进去，执行  ActivityThread#main() 方法，实例化 ActivityThread，同时创建 ApplicationThread，Looper，Hander 对象，调用 ActivityThread#attach(false) 方法进行 Binder 通信， 接着 Looper 启动循环；</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    Looper.<span class="built_in">prepareMainLooper</span>();</span><br><span class="line"></span><br><span class="line">    ActivityThread thread = <span class="keyword">new</span> <span class="built_in">ActivityThread</span>();</span><br><span class="line">    thread.<span class="built_in">attach</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sMainThreadHandler == null) &#123;</span><br><span class="line">        sMainThreadHandler = thread.<span class="built_in">getHandler</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">        Looper.<span class="built_in">myLooper</span>().<span class="built_in">setMessageLogging</span>(<span class="keyword">new</span></span><br><span class="line">                <span class="built_in">LogPrinter</span>(Log.DEBUG, <span class="string">&quot;ActivityThread&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// End of event ActivityThreadMain.</span></span><br><span class="line">    Trace.<span class="built_in">traceEnd</span>(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">    Looper.<span class="built_in">loop</span>();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(<span class="keyword">boolean</span> system)</span> </span>&#123;</span><br><span class="line">    ···</span><br><span class="line">    <span class="keyword">if</span> (!system) &#123;</span><br><span class="line">        ···</span><br><span class="line">        <span class="keyword">final</span> IActivityManager mgr = ActivityManager.<span class="built_in">getService</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mgr.<span class="built_in">attachApplication</span>(mAppThread);</span><br><span class="line">        &#125; <span class="built_in"><span class="keyword">catch</span></span> (RemoteException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex.<span class="built_in">rethrowFromSystemServer</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        ···</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       ···</span><br><span class="line">    &#125;</span><br><span class="line">    ···</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>回到 system_server 中，ActivityManagerService#attachApplication(mAppThread) 方法内部调用了 thread#bindApplication() 和 mStackSupervisor#attachApplicationLocked()  这两个方法。具体代码如下：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">void</span> <span class="title">attachApplication</span><span class="params">(IApplicationThread thread)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> callingPid = Binder.getCallingPid();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> origId = Binder.clearCallingIdentity();</span><br><span class="line">            attachApplicationLocked(thread, callingPid);</span><br><span class="line">            Binder.restoreCallingIdentity(origId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="function"><span class="keyword">boolean</span> <span class="title">attachApplicationLocked</span><span class="params">(IApplicationThread thread,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">int</span> pid)</span> </span>&#123;</span><br><span class="line">        ···</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ···</span><br><span class="line">            <span class="keyword">if</span> (app.instr != <span class="keyword">null</span>) &#123;</span><br><span class="line">                thread.bindApplication(processName, appInfo, providers,</span><br><span class="line">                        app.instr.mClass,</span><br><span class="line">                        profilerInfo, app.instr.mArguments,</span><br><span class="line">                        app.instr.mWatcher,</span><br><span class="line">                        app.instr.mUiAutomationConnection, testMode,</span><br><span class="line">                        mBinderTransactionTrackingEnabled, enableTrackAllocation,</span><br><span class="line">                        isRestrictedBackupMode || !normalMode, app.persistent,</span><br><span class="line">                        <span class="keyword">new</span> Configuration(getGlobalConfiguration()), app.compat,</span><br><span class="line">                        getCommonServicesLocked(app.isolated),</span><br><span class="line">                        mCoreSettingsObserver.getCoreSettingsLocked(),</span><br><span class="line">                        buildSerial);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                thread.bindApplication(processName, appInfo, providers, <span class="keyword">null</span>, profilerInfo,</span><br><span class="line">                        <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, testMode,</span><br><span class="line">                        mBinderTransactionTrackingEnabled, enableTrackAllocation,</span><br><span class="line">                        isRestrictedBackupMode || !normalMode, app.persistent,</span><br><span class="line">                        <span class="keyword">new</span> Configuration(getGlobalConfiguration()), app.compat,</span><br><span class="line">                        getCommonServicesLocked(app.isolated),</span><br><span class="line">                        mCoreSettingsObserver.getCoreSettingsLocked(),</span><br><span class="line">                        buildSerial);</span><br><span class="line">            &#125;</span><br><span class="line">            ···</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            ···</span><br><span class="line">        &#125;</span><br><span class="line">        ···</span><br><span class="line">        <span class="comment">// See if the top visible activity is waiting to run in this process...</span></span><br><span class="line">        <span class="keyword">if</span> (normalMode) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (mStackSupervisor.attachApplicationLocked(app)) &#123;</span><br><span class="line">                    didSomething = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                ···</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ···</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在ActivityThread中ApplicationThread的bindApplication方法，如下所示</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">bindApplication</span><span class="params">(<span class="keyword">String</span> processName, ApplicationInfo appInfo,</span></span></span><br><span class="line"><span class="params"><span class="function">    ···</span></span></span><br><span class="line"><span class="params"><span class="function">        sendMessage(H.BIND_APPLICATION, data);</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br></pre></td></tr></table></figure><p>紧接着是sendMessage方法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> void send<span class="constructor">Message(<span class="params">int</span> <span class="params">what</span>, Object <span class="params">obj</span>)</span> &#123;</span><br><span class="line">    send<span class="constructor">Message(<span class="params">what</span>, <span class="params">obj</span>, 0, 0, <span class="params">false</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> void send<span class="constructor">Message(<span class="params">int</span> <span class="params">what</span>, Object <span class="params">obj</span>, <span class="params">int</span> <span class="params">arg1</span>, <span class="params">int</span> <span class="params">arg2</span>, <span class="params">boolean</span> <span class="params">async</span>)</span> &#123;</span><br><span class="line">    ···</span><br><span class="line">    mH.send<span class="constructor">Message(<span class="params">msg</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中在第二个方法中我们通过mH执行了sendMessage()方法，mH其实就当做是Handler对象即可，</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public void handle<span class="constructor">Message(Message <span class="params">msg</span>)</span> &#123;</span><br><span class="line">    ···</span><br><span class="line">    switch (msg.what) &#123;</span><br><span class="line">        ···</span><br><span class="line">        <span class="comment">// 此处的种类很多包括LAUNCH_ACTIVITY等，但暂时先考虑一个</span></span><br><span class="line">        case BIND_APPLICATION:</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">Trace</span>.</span></span>trace<span class="constructor">Begin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">&quot;bindApplication&quot;</span>)</span>;</span><br><span class="line">            AppBindData data = (AppBindData)msg.obj;</span><br><span class="line">            handle<span class="constructor">BindApplication(<span class="params">data</span>)</span>;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">Trace</span>.</span></span>trace<span class="constructor">End(Trace.TRACE_TAG_ACTIVITY_MANAGER)</span>;</span><br><span class="line">            break;</span><br><span class="line">        ···</span><br><span class="line">    &#125;</span><br><span class="line">    ···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在BIND_APPLOICATION中我们通过Trace跟踪器开启跟踪，并且在handleBindApplication方法中创建Application对象</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> void handle<span class="constructor">BindApplication(AppBindData <span class="params">data</span>)</span> &#123;</span><br><span class="line">    ···</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 Application 实例</span></span><br><span class="line">        Application app = data.info.make<span class="constructor">Application(<span class="params">data</span>.<span class="params">restrictedBackupMode</span>, <span class="params">null</span>)</span>;</span><br><span class="line">        mInitialApplication = app;</span><br><span class="line">        ···</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mInstrumentation.call<span class="constructor">ApplicationOnCreate(<span class="params">app</span>)</span>;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            ···</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        ···</span><br><span class="line">    &#125;</span><br><span class="line">    ···</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中makeApplication方法中是完成创建Application的具体操作</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Application makeApplication(<span class="keyword">boolean</span> forceDefaultAppClass,</span><br><span class="line">        Instrumentation instrumentation) &#123;</span><br><span class="line">    <span class="keyword">if</span> (mApplication != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> mApplication;</span><br><span class="line">    &#125;</span><br><span class="line">    ···</span><br><span class="line">    Application app = <span class="literal">null</span>;</span><br><span class="line">    ···</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ···</span><br><span class="line">        app = mActivityThread.mInstrumentation.newApplication(</span><br><span class="line">                cl, appClass, appContext);</span><br><span class="line">        ···</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> e) &#123;</span><br><span class="line">        ···</span><br><span class="line">    &#125;</span><br><span class="line">    ···</span><br><span class="line">    <span class="keyword">if</span> (instrumentation != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//执行 Application#onCreate() 生命周期</span></span><br><span class="line">            instrumentation.callApplicationOnCreate(app);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> e) &#123;</span><br><span class="line">            ···</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ···</span><br><span class="line">    <span class="keyword">return</span> app;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过makApplication方法可见，其实也是通过ActivityThread.Instrumentation.newApplication()方法创建的。并且在创建完成之后执行callApplicationOnCreate方法，开始执行我们的生命周期。</p><p>mStackSupervisor#attachApplicationLocked() 方法中调用 app#thread#scheduleLaunchActivity() 即 ActivityThread#ApplicationThread#scheduleLaunchActivity() 方法，进而通过 ActivityThread#sendMessage(H.LAUNCH_ACTIVITY, r) 方法，最终走到了 ActivityThread#handleLaunchActivity() ，进而创建 Activity 对象，然后调用 activity.attach() 方法，再调用 mInstrumentation#callActivityOnCreate() 执行 Activity#onCreate() 生命周期；</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> attachApplicationLocked(ProcessRecord app) <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> displayNdx = mActivityDisplays.<span class="keyword">size</span>() - <span class="number">1</span>; displayNdx &gt;= <span class="number">0</span>; --displayNdx) &#123;</span><br><span class="line">        ···</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> stackNdx = stacks.<span class="keyword">size</span>() - <span class="number">1</span>; stackNdx &gt;= <span class="number">0</span>; --stackNdx) &#123;</span><br><span class="line">            ···</span><br><span class="line">            <span class="keyword">if</span> (hr != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (hr.app == <span class="keyword">null</span> &amp;&amp; app.uid == hr.info.applicationInfo.uid</span><br><span class="line">                        &amp;&amp; processName.equals(hr.processName)) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (realStartActivityLocked(hr, app, <span class="keyword">true</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line">                            didSomething = <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                        ···</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ···</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> realStartActivityLocked(ActivityRecord r, ProcessRecord app,</span><br><span class="line">        <span class="keyword">boolean</span> andResume, <span class="keyword">boolean</span> checkConfig) <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    ···</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ···</span><br><span class="line">        app.thread.scheduleLaunchActivity(<span class="keyword">new</span> Intent(r.intent), r.appToken,</span><br><span class="line">                System.identityHashCode(r), r.info,</span><br><span class="line">                <span class="comment">// <span class="doctag">TODO:</span> Have this take the merged configuration instead of separate global and</span></span><br><span class="line">                <span class="comment">// override configs.</span></span><br><span class="line">                mergedConfiguration.getGlobalConfiguration(),</span><br><span class="line">                mergedConfiguration.getOverrideConfiguration(), r.compat,</span><br><span class="line">                r.launchedFromPackage, <span class="keyword">task</span>.voiceInteractor, app.repProcState, r.icicle,</span><br><span class="line">                r.persistentState, results, newIntents, !andResume,</span><br><span class="line">                mService.isNextTransitionForward(), profilerInfo);</span><br><span class="line">         ···</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        ···</span><br><span class="line">    &#125;</span><br><span class="line">    ···</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在最后一个方法中我们调用了scheduleLaunchActivity方法，这个方法是在ActivityThread的ApplicationThread中</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="built_in">void</span> scheduleLaunchActivity(Intent <span class="built_in">int</span>ent, IBinder token, <span class="built_in">int</span> ident,</span><br><span class="line">        ActivityInfo info, Configuration curConfig, Configuration overrideConfig,</span><br><span class="line">        CompatibilityInfo compatInfo, String <span class="built_in">ref</span>errer, IVoiceInteractor voiceInteractor,</span><br><span class="line">        <span class="built_in">int</span> procState, Bundle state, PersistableBundle persistentState,</span><br><span class="line">        List&lt;ResultInfo&gt; pendingResults, List&lt;ReferrerIntent&gt; pendingNewIntents,</span><br><span class="line">        <span class="built_in">bool</span>ean notResumed, <span class="built_in">bool</span>ean isForward, ProfilerInfo profilerInfo) &#123;</span><br><span class="line">    ···</span><br><span class="line">    sendMessage(H.LAUNCH_ACTIVITY, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里我们发现他也是发送了一个sendMessage方法，其中的变量是LAUNCH_ACTIVITY，剩下的内容其实跟Application基本类似，就不再做叙述了。</p><p>至此，Activity的启动流程完全走完，剩下的就是Activity的生命周期方法了。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://my.oschina.net/u/920274/blog/3064455">Activity启动流程</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Activity启动流程&lt;/p&gt;</summary>
    
    
    
    
    <category term="源码分析" scheme="http://www.paulniu.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>源码分析(三) Handler机制</title>
    <link href="http://www.paulniu.com/2020/03/04/android-source-code-03/"/>
    <id>http://www.paulniu.com/2020/03/04/android-source-code-03/</id>
    <published>2020-03-04T14:09:13.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Handler机制</p><span id="more"></span><p>先来看一张Android消息循环流程图<br><a href="/assets/sourcecode/handler_01.png">Android消息循环流程图</a><br>主要涉及的角色如下所示：</p><ul><li>message：消息。</li><li>MessageQueue：消息队列，负责消息的存储与管理，负责管理由 Handler 发送过来的 Message。读取会自动删除消息，单链表维护，插入和删除上有优势。在其next()方法中会无限循环，不断判断是否有消息，有就返回这条消息并移除。</li><li>Looper：消息循环器，负责关联线程以及消息的分发，在该线程下从 MessageQueue获取 Message，分发给Handler，Looper创建的时候会创建一个 - MessageQueue，调用loop()方法的时候消息循环开始，其中会不断调用messageQueue的next()方法，当有消息就处理，否则阻塞在messageQueue的next()方法中。当Looper的quit()被调用的时候会调用messageQueue的quit()，此时next()会返回null，然后loop()方法也就跟着退出。</li><li>Handler：消息处理器，负责发送并处理消息，面向开发者，提供 API，并隐藏背后实现的细节。</li></ul><p>整个消息的循环流程还是比较清晰的，具体说来：</p><ol><li>Handler通过sendMessage()发送消息Message到消息队列MessageQueue。</li><li>Looper通过loop()不断提取触发条件的Message，并将Message交给对应的target handler来处理。</li><li>target handler调用自身的handleMessage()方法来处理Message。</li></ol><p>OK,废话说话了，下面开始说说实现原理</p><p>我们都知道Android应用的入口函数是在ActivityThread中的main方法，那么我们来看一下main方法帮我们实现了什么内容</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">    Trace.<span class="built_in">traceBegin</span>(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">&quot;ActivityThreadMain&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Install selective syscall interception</span></span><br><span class="line">    AndroidOs.<span class="built_in">install</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// CloseGuard defaults to true and can be quite spammy.  We</span></span><br><span class="line">    <span class="comment">// disable it here, but selectively enable it later (via</span></span><br><span class="line">    <span class="comment">// StrictMode) on debug builds, but using DropBox, not logs.</span></span><br><span class="line">    CloseGuard.<span class="built_in">setEnabled</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    Environment.<span class="built_in">initForCurrentUser</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make sure TrustedCertificateStore looks in the right place for CA certificates</span></span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">File</span> configDir = Environment.<span class="built_in">getUserConfigDirectory</span>(UserHandle.<span class="built_in">myUserId</span>());</span><br><span class="line">    TrustedCertificateStore.<span class="built_in">setDefaultUserDirectory</span>(configDir);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Process</span>.<span class="built_in">setArgV0</span>(<span class="string">&quot;&lt;pre-initialized&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Looper.<span class="built_in">prepareMainLooper</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Find the value for &#123;@link #PROC_START_SEQ_IDENT&#125; if provided on the command line.</span></span><br><span class="line">    <span class="comment">// It will be in the format &quot;seq=114&quot;</span></span><br><span class="line">    <span class="keyword">long</span> startSeq = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (args != null) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = args.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (args[i] != null &amp;&amp; args[i].<span class="built_in">startsWith</span>(PROC_START_SEQ_IDENT)) &#123;</span><br><span class="line">                startSeq = Long.<span class="built_in">parseLong</span>(</span><br><span class="line">                        args[i].<span class="built_in">substring</span>(PROC_START_SEQ_IDENT.<span class="built_in">length</span>()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ActivityThread thread = <span class="keyword">new</span> <span class="built_in">ActivityThread</span>();</span><br><span class="line">    thread.<span class="built_in">attach</span>(<span class="literal">false</span>, startSeq);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sMainThreadHandler == null) &#123;</span><br><span class="line">        sMainThreadHandler = thread.<span class="built_in">getHandler</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">        Looper.<span class="built_in">myLooper</span>().<span class="built_in">setMessageLogging</span>(<span class="keyword">new</span></span><br><span class="line">                <span class="built_in">LogPrinter</span>(Log.DEBUG, <span class="string">&quot;ActivityThread&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// End of event ActivityThreadMain.</span></span><br><span class="line">    Trace.<span class="built_in">traceEnd</span>(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">    Looper.<span class="built_in">loop</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RuntimeException</span>(<span class="string">&quot;Main thread loop unexpectedly exited&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>main方法中有两个比较关键的代码，①Looper.prepareMainLooper()和②Looper.loop()。这两个方法的调用，帮我们完成了Handler机制的初始化操作。<br>首先来看Looper.prepareMainLooper()帮我们作了什么内容</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize the current thread as a looper, marking it as an</span></span><br><span class="line"><span class="comment"> * application&#x27;s main looper. The main looper for your application</span></span><br><span class="line"><span class="comment"> * is created by the Android environment, so you should never need</span></span><br><span class="line"><span class="comment"> * to call this function yourself.  See also: &#123;@link #prepare()&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> prepareMainLooper() &#123;</span><br><span class="line">    prepare(<span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">synchronized</span> (Looper.<span class="keyword">class</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sMainLooper != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;The main Looper has already been prepared.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sMainLooper = myLooper();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个方法中我们首先执行了prepare(false)方法，这个方法主要是帮我们创建一个Looper对象，并且将Looper对象设置到ThreadLocal中，代码如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Initialize the current thread as a looper.</span></span><br><span class="line"><span class="comment">  * This gives you a chance to create handlers that then reference</span></span><br><span class="line"><span class="comment">  * this looper, before actually starting the loop. Be sure to call</span></span><br><span class="line"><span class="comment">  * &#123;<span class="doctag">@link </span>#loop()&#125; after calling this method, and end it by calling</span></span><br><span class="line"><span class="comment">  * &#123;<span class="doctag">@link </span>#quit()&#125;.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">prepare</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    prepare(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">prepare</span>(<span class="params"><span class="built_in">boolean</span> quitAllowed</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (sThreadLocal.get() != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Only one Looper may be created per thread&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里有一个ThreadLocal对象，他不是线程而是一个线程内部的数据存储类，通过他可以在指定线程中存储数据，存储之后只有在指定进程中可以获取到存储数据，对于其他线程来说无法获取到该数据。例如Handler创建的时候回采用当前线程的Looper来构造消息循环系统，那么Handler内部获取Looper对象就是通过ThreadLocal。在日常开发中我们可能使用到的并不是非常多，但是在一切特殊情况下，通过ThreadLocal可以实现比较复杂的功能。使用场景一般来说，某些数据以线程为作用域并且不同线程有不同的副本，就可以用ThreadLocal。比如对于Handler来说，它需要获取当前线程的Looper，很显然Looper的作用域就是线程并且不同线程具有不同的Looper，这个时候通过ThreadLocal就可以轻松实现Looper在线程中的存取，如果不采用ThreadLocal，那么系统就必须提供一个全局的哈希表供Handler查找指定线程的Looper，这样一来就必须提供一个类似于LooperManager的类了，但是系统并没有这么做而是选择了ThreadLocal，这就是ThreadLocal的好处。看一个例子，如下所示</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mBooleanThreadLocal.<span class="built_in">set</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">Log</span>.d(<span class="built_in">TAG</span>, <span class="string">&quot;[Thread#main]mBooleanThreadLocal=&quot;</span> + mBooleanThreadLocal.get());</span><br><span class="line"> </span><br><span class="line"><span class="literal">new</span> <span class="keyword">Thread</span>(<span class="string">&quot;Thread#1&quot;</span>) &#123;</span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="literal">void</span> run() &#123;</span><br><span class="line">mBooleanThreadLocal.<span class="built_in">set</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">Log</span>.d(<span class="built_in">TAG</span>, <span class="string">&quot;[Thread#1]mBooleanThreadLocal=&quot;</span> + mBooleanThreadLocal.get());</span><br><span class="line">&#125;;</span><br><span class="line">&#125;.start();</span><br><span class="line"> </span><br><span class="line"><span class="literal">new</span> <span class="keyword">Thread</span>(<span class="string">&quot;Thread#2&quot;</span>) &#123;</span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="literal">void</span> run() &#123;</span><br><span class="line"><span class="keyword">Log</span>.d(<span class="built_in">TAG</span>, <span class="string">&quot;[Thread#2]mBooleanThreadLocal=&quot;</span> + mBooleanThreadLocal.get());</span><br><span class="line">&#125;;</span><br><span class="line">&#125;.start();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码中，在主线程中设置mBooleanThreadLocal的值为true，在子线程1中设置mBooleanThreadLocal的值为false，在子线程2中不设置mBooleanThreadLocal的值，然后分别在3个线程中通过get方法去mBooleanThreadLocal的值，根据前面对ThreadLocal的描述，这个时候，主线程中应该是true，子线程1中应该是false，而子线程2中由于没有设置值，所以应该是null。</p><p>回到我们的prepare方法中，我们在sThreadLocal.set()方法中创建了一个Looper对象。然后在prepareMainLooper()方法中我们将当前线程中的Looper对象赋值给了sMainLooper对象，这个对象是主线程的Looper对象。到目前为止我们的主线程中Looper对象已经初始化完成了。有同学可能会说：“什么？你啥也没说啊，这就结束了？”额，好吧，确实没说完。因为刚才我们说在sThreadLocal.set()方法中创建了一个Looper对象，但是这个Looper对象是如何创建的，我们还没有说呢。我们来看一下，如何创建Looper对象。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="constructor">Looper(<span class="params">boolean</span> <span class="params">quitAllowed</span>)</span> &#123;</span><br><span class="line">    mQueue = <span class="keyword">new</span> <span class="constructor">MessageQueue(<span class="params">quitAllowed</span>)</span>;</span><br><span class="line">    mThread = <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在Looper的构造方法中，我们就执行了两句话，第一句话是创建了一个MessageQueue对象，这是一个有单链表实现的队列，第二句话是创建了一个mThread对象，而这个mThread对象就是当前对象。我们需要注意的是在创建MessageQueue时，我们完成了一些初始化操作，不过这个对于我们现在来说还用不上，暂时先不考虑</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="constructor">MessageQueue(<span class="params">boolean</span> <span class="params">quitAllowed</span>)</span> &#123;</span><br><span class="line">        mQuitAllowed = quitAllowed;</span><br><span class="line">        mPtr = native<span class="constructor">Init()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 其中nativeInit()方法是本地方法</span></span><br></pre></td></tr></table></figure><p>当目前为止我们的Looper.prepareMainLooper()就算分析完了，我们这里主要做的就是创建一个Looper对象，创建一个MessageQueue对象，这两个对象在当前线程中是唯一的。</p><p>在AactivityThread中第二句话Looper.loop()方法是我们的重点，我们一起来看一下，我会在代码中添加注释</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the Looper object associated with the current thread.  Returns</span></span><br><span class="line"><span class="comment"> * null if the calling thread is not associated with a Looper.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="meta">@Nullable</span> <span class="function">Looper <span class="title">myLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">return</span> sThreadLocal.<span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Run the message queue in this thread. Be sure to call</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #quit()&#125; to end the loop.</span></span><br><span class="line"><span class="comment"> * 在当前线程中运行MessageQueue，当停止当前loop对象时必须调用quit方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前线程的Looper对象</span></span><br><span class="line">    <span class="keyword">final</span> Looper me = myLooper();</span><br><span class="line">    <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果当前线程Looper对象为空，则表示没有初始化Looper对象，抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;No Looper; Looper.prepare() wasn&#x27;t called on this thread.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将当前线程中的Looper对象的MessageQueue对象拿到</span></span><br><span class="line">    <span class="keyword">final</span> MessageQueue queue = me.mQueue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make sure the identity of this thread is that of the local process,</span></span><br><span class="line">    <span class="comment">// and keep track of what that identity token actually is.</span></span><br><span class="line">    Binder.clearCallingIdentity();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allow overriding a threshold with a system prop. e.g.</span></span><br><span class="line">    <span class="comment">// adb shell &#x27;setprop log.looper.1000.main.slow 1 &amp;&amp; stop &amp;&amp; start&#x27;</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> thresholdOverride =</span><br><span class="line">            SystemProperties.getInt(<span class="string">&quot;log.looper.&quot;</span></span><br><span class="line">                    + Process.myUid() + <span class="string">&quot;.&quot;</span></span><br><span class="line">                    + Thread.currentThread().getName()</span><br><span class="line">                    + <span class="string">&quot;.slow&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> slowDeliveryDetected = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启死循环换检测(其实就是Looper循环从MessageQueue中获取Message对象)</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="comment">// 获取MessageQueue中队列的第一个数据</span></span><br><span class="line">        Message msg = queue.next(); <span class="comment">// might block</span></span><br><span class="line">        <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 这里如果获取到的msg==null，代表Looper已经执行了quit方法，所有的操作都必须停止，MessageQueue中没有数据，但是Message不是null,这里为什么不是null，等一会在说到延迟消息的时候会说到 todo</span></span><br><span class="line">            <span class="comment">// No message indicates that the message queue is quitting.</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// This must be in a local variable, in case a UI event sets the logger</span></span><br><span class="line">        <span class="keyword">final</span> Printer logging = me.mLogging;</span><br><span class="line">        <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</span><br><span class="line">            logging.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt; Dispatching to &quot;</span> + msg.<span class="keyword">target</span> + <span class="string">&quot; &quot;</span> +</span><br><span class="line">                    msg.callback + <span class="string">&quot;: &quot;</span> + msg.what);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Make sure the observer won&#x27;t change while processing a transaction.</span></span><br><span class="line">        <span class="keyword">final</span> Observer observer = sObserver;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> traceTag = me.mTraceTag;</span><br><span class="line">        <span class="keyword">long</span> slowDispatchThresholdMs = me.mSlowDispatchThresholdMs;</span><br><span class="line">        <span class="keyword">long</span> slowDeliveryThresholdMs = me.mSlowDeliveryThresholdMs;</span><br><span class="line">        <span class="keyword">if</span> (thresholdOverride &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            slowDispatchThresholdMs = thresholdOverride;</span><br><span class="line">            slowDeliveryThresholdMs = thresholdOverride;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> logSlowDelivery = (slowDeliveryThresholdMs &gt; <span class="number">0</span>) &amp;&amp; (msg.when &gt; <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> logSlowDispatch = (slowDispatchThresholdMs &gt; <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> needStartTime = logSlowDelivery || logSlowDispatch;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> needEndTime = logSlowDispatch;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (traceTag != <span class="number">0</span> &amp;&amp; Trace.isTagEnabled(traceTag)) &#123;</span><br><span class="line">            Trace.traceBegin(traceTag, msg.<span class="keyword">target</span>.getTraceName(msg));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> dispatchStart = needStartTime ? SystemClock.uptimeMillis() : 0;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> dispatchEnd;</span><br><span class="line">        Object token = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (observer != <span class="keyword">null</span>) &#123;</span><br><span class="line">            token = observer.messageDispatchStarting();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> origWorkSource = ThreadLocalWorkSource.setUid(msg.workSourceUid);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 通过msg.target调用dispatchMessage方法，实现消息的转发，这里我们可以知道target其实就是handler对象</span></span><br><span class="line">            msg.<span class="keyword">target</span>.dispatchMessage(msg);</span><br><span class="line">            <span class="keyword">if</span> (observer != <span class="keyword">null</span>) &#123;</span><br><span class="line">                observer.messageDispatched(token, msg);</span><br><span class="line">            &#125;</span><br><span class="line">            dispatchEnd = needEndTime ? SystemClock.uptimeMillis() : 0;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">            <span class="keyword">if</span> (observer != <span class="keyword">null</span>) &#123;</span><br><span class="line">                observer.dispatchingThrewException(token, msg, exception);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> exception;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ThreadLocalWorkSource.restore(origWorkSource);</span><br><span class="line">            <span class="keyword">if</span> (traceTag != <span class="number">0</span>) &#123;</span><br><span class="line">                Trace.traceEnd(traceTag);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (logSlowDelivery) &#123;</span><br><span class="line">            <span class="keyword">if</span> (slowDeliveryDetected) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((dispatchStart - msg.when) &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">                    Slog.w(TAG, <span class="string">&quot;Drained&quot;</span>);</span><br><span class="line">                    slowDeliveryDetected = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (showSlowLog(slowDeliveryThresholdMs, msg.when, dispatchStart, <span class="string">&quot;delivery&quot;</span>,</span><br><span class="line">                        msg)) &#123;</span><br><span class="line">                    <span class="comment">// Once we write a slow delivery log, suppress until the queue drains.</span></span><br><span class="line">                    slowDeliveryDetected = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (logSlowDispatch) &#123;</span><br><span class="line">            showSlowLog(slowDispatchThresholdMs, dispatchStart, dispatchEnd, <span class="string">&quot;dispatch&quot;</span>, msg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</span><br><span class="line">            logging.println(<span class="string">&quot;&lt;&lt;&lt;&lt;&lt; Finished to &quot;</span> + msg.<span class="keyword">target</span> + <span class="string">&quot; &quot;</span> + msg.callback);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Make sure that during the course of dispatching the</span></span><br><span class="line">        <span class="comment">// identity of the thread wasn&#x27;t corrupted.</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> newIdent = Binder.clearCallingIdentity();</span><br><span class="line">        <span class="keyword">if</span> (ident != newIdent) &#123;</span><br><span class="line">            Log.wtf(TAG, <span class="string">&quot;Thread identity changed from 0x&quot;</span></span><br><span class="line">                    + Long.toHexString(ident) + <span class="string">&quot; to 0x&quot;</span></span><br><span class="line">                    + Long.toHexString(newIdent) + <span class="string">&quot; while dispatching to &quot;</span></span><br><span class="line">                    + msg.<span class="keyword">target</span>.getClass().getName() + <span class="string">&quot; &quot;</span></span><br><span class="line">                    + msg.callback + <span class="string">&quot; what=&quot;</span> + msg.what);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        msg.recycleUnchecked();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;Handler机制&lt;/p&gt;</summary>
    
    
    
    
    <category term="源码分析" scheme="http://www.paulniu.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>源码分析(二) HashMap</title>
    <link href="http://www.paulniu.com/2020/03/03/android-source-code-02/"/>
    <id>http://www.paulniu.com/2020/03/03/android-source-code-02/</id>
    <published>2020-03-03T14:09:13.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>HashMap源码分析</p><span id="more"></span><p>HashMap是位于java.util包下的工具类，帮我们实现了继承自Map接口的数据集。HashMap直接继承自AbstractMap，并且实现了Cloneable和Serializable接口，所以我们可以将HashMap执行深复制/浅复制和序列化等操作。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">HashMap</span>&lt;<span class="symbol">K,<span class="symbol">V</span></span>&gt;</span><br><span class="line">    <span class="symbol">extends</span> <span class="symbol">AbstractMap</span>&lt;<span class="symbol">K,<span class="symbol">V</span></span>&gt;</span><br><span class="line">    <span class="symbol">implements</span> <span class="symbol">Map</span>&lt;<span class="symbol">K,<span class="symbol">V</span></span>&gt;, <span class="symbol">Cloneable, <span class="symbol">Serializable</span></span></span><br></pre></td></tr></table></figure><p>在HashMap中有一些变量需要我们注意</p><ol><li>DEFAULT_INITIAL_CAPACITY<br>这个变量表示HashMap初始值大小，后面我们会说HashMap其实也是跟数组有关的，既然是数组那就必须有一个初始值，HashMap的初始值就是4<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The default initial capacity - MUST be a power of two.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">4</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>EMPTY_TABLE<br>这个表示在数据没有执行初始化的时候，默认的数组<figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * An empty table<span class="built_in"> instance </span>to share when the table is<span class="built_in"> not </span>inflated.</span><br><span class="line"> */<span class="keyword"></span></span><br><span class="line"><span class="keyword">static</span><span class="keyword"> final</span> HashMapEntry&lt;?,?&gt;[] EMPTY_TAB<span class="class">LE = &#123;&#125;;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>table<br>这个就是HashMap实际存储数据的数组，默认情况下使用EMPTY_TABLE进行初始化<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The table, resized as necessary. Length MUST Always be a power of two.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">transient HashMapEntry<span class="params">&lt;K,V&gt;</span>[] table = (HashMapEntry<span class="params">&lt;K,V&gt;</span>[]) EMPTY_TABLE;</span><br><span class="line"></span><br></pre></td></tr></table></figure>其中HashMapEntry是一个实体，表示的就是键值对。我们可以看一下HashMapEntry的类实体<figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMapEntry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    V value;</span><br><span class="line">    HashMapEntry&lt;K,V&gt; <span class="keyword">next</span>;</span><br><span class="line">    <span class="built_in">int</span> hash;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>在这个类中有四个成员变量，key，value，next，hash。其中next也是一个HashMapEntry对象，由此我们可以知道，HashMapEntry其实就是一个单链表<br>所以通过上面的代码我们知道，我们是将需要存入的key-value作为一个对象进行封装，装成entry之后，将entry作为数组的数据存入。我们可以这样说：HashMap是以数组为存储结构的数组-链表集合。</li></ol><p>HashMap的构造方法有多个，但是最终都会调用到一个传入了初始化大小和增长因子的构造方法中，如下所示</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal initial capacity: &quot;</span> +</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY) &#123;</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(initialCapacity &lt; DEFAULT_INITIAL_CAPACITY)</span> </span>&#123;</span><br><span class="line">        initialCapacity = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                           loadFactor);</span><br><span class="line">    <span class="comment">// Android-Note: We always use the default load factor of 0.75f.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// This might appear wrong but it&#x27;s just awkward design. We always call</span></span><br><span class="line">    <span class="comment">// inflateTable() when table == EMPTY_TABLE. That method will take &quot;threshold&quot;</span></span><br><span class="line">    <span class="comment">// to mean &quot;capacity&quot; and then replace it with the real threshold (i.e, multiplied with</span></span><br><span class="line">    <span class="comment">// the load factor).</span></span><br><span class="line">    threshold = initialCapacity;</span><br><span class="line">    init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>两个参数，第一个参数initialCapacity就是初始化数据大小，第二个参数loadFactor是增长因子。里面关于这两个变量的赋值改变等操作我们不用去看，只看最后一个init()方法的调用。这个init方法默认HashMap是不帮我们实现的，如果我们想要对HashMap有一个初始化的操作，可以重写该方法。</p><p>同其他集合也是一样，我们使用集合就是为了存放数据，获取数据，修改数据，删除数据等操作的，所以先看第一个方法put方法。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public V put(K key, V value) &#123;</span><br><span class="line">    <span class="keyword">if</span> (table<span class="operator"> == </span>EMPTY_TABLE) &#123;</span><br><span class="line">        inflate<span class="constructor">Table(<span class="params">threshold</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key<span class="operator"> == </span>null)</span><br><span class="line">        return put<span class="constructor">ForNullKey(<span class="params">value</span>)</span>;</span><br><span class="line">    <span class="built_in">int</span> hash = sun.misc.<span class="module-access"><span class="module"><span class="identifier">Hashing</span>.</span></span>single<span class="constructor">WordWangJenkinsHash(<span class="params">key</span>)</span>;</span><br><span class="line">    <span class="built_in">int</span> i = index<span class="constructor">For(<span class="params">hash</span>, <span class="params">table</span>.<span class="params">length</span>)</span>;</span><br><span class="line">    <span class="keyword">for</span> (HashMapEntry&lt;K,V&gt; e = table<span class="literal">[<span class="identifier">i</span>]</span>; e != null; e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash<span class="operator"> == </span>hash<span class="operator"> &amp;&amp; </span>((k = e.key)<span class="operator"> == </span>key<span class="operator"> || </span>key.equals(k))) &#123;</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.record<span class="constructor">Access(<span class="params">this</span>)</span>;</span><br><span class="line">            return oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    add<span class="constructor">Entry(<span class="params">hash</span>, <span class="params">key</span>, <span class="params">value</span>, <span class="params">i</span>)</span>;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在执行put方法时，我们会先检测当前table是否为空，如果为空，则会执行inflateTable这个方法。这个方法很简单就是说如果HashMap为空的话，则初始化HashMap的长度。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Inflates the table.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> void inflate<span class="constructor">Table(<span class="params">int</span> <span class="params">toSize</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// Find a power of 2 &gt;= toSize</span></span><br><span class="line">    <span class="built_in">int</span> capacity = round<span class="constructor">UpToPowerOf2(<span class="params">toSize</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Android-changed: Replace usage of Math.min() here because this method is</span></span><br><span class="line">    <span class="comment">// called from the &lt;clinit&gt; of runtime, at which point the native libraries</span></span><br><span class="line">    <span class="comment">// needed by Float.* might not be loaded.</span></span><br><span class="line">    <span class="built_in">float</span> thresholdFloat = capacity<span class="operator"> * </span>loadFactor;</span><br><span class="line">    <span class="keyword">if</span> (thresholdFloat &gt; MAXIMUM_CAPACITY + <span class="number">1</span>) &#123;</span><br><span class="line">        thresholdFloat = MAXIMUM_CAPACITY + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    threshold = (<span class="built_in">int</span>) thresholdFloat;</span><br><span class="line">    table = <span class="keyword">new</span> HashMapEntry<span class="literal">[<span class="identifier">capacity</span>]</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还是put方法，紧接着我们判断key是否为空，如果为空则调用putForNullKey()方法。这个方法其实就是保证HashMap中只有一个key=null。说明HashMap允许key=null。<br>如果key不为空，则时候我们调用了一个方法singleWordWangJenkinsHash(),这个方法在我的代码里无法直接访问到，但是我在网上查找了一下，其实这个方法就是将key的值转换成hash值。我们知道hash值跟我们的数据是有关系的，如果两个对象的值相同，那么hash值也一定是相同的。在拿到hash值之后根据hash值判断当前的hash值在数组中的下标，返回值是i，通过for循环，从数组中获取HashMapEntry对象，并且比较Entry对象和需要添加的key，value值是否相等，这里需要注意我们for循环的判断条件是next(),其实就是说遍历i下标的数组对象(链表中)是否存在key-value相等的对象。如果存在，则返回旧的数据，如果不存在，则执行完for循环之后执行addEntry方法。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void add<span class="constructor">Entry(<span class="params">int</span> <span class="params">hash</span>, K <span class="params">key</span>, V <span class="params">value</span>, <span class="params">int</span> <span class="params">bucketIndex</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((size &gt;= threshold)<span class="operator"> &amp;&amp; </span>(null != table<span class="literal">[<span class="identifier">bucketIndex</span>]</span>)) &#123;</span><br><span class="line">        resize(<span class="number">2</span><span class="operator"> * </span>table.length);</span><br><span class="line">        hash = (null != key) ? sun.misc.<span class="module-access"><span class="module"><span class="identifier">Hashing</span>.</span></span>single<span class="constructor">WordWangJenkinsHash(<span class="params">key</span>)</span> : <span class="number">0</span>;</span><br><span class="line">        bucketIndex = index<span class="constructor">For(<span class="params">hash</span>, <span class="params">table</span>.<span class="params">length</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    create<span class="constructor">Entry(<span class="params">hash</span>, <span class="params">key</span>, <span class="params">value</span>, <span class="params">bucketIndex</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>addEntry方法需要传递的数据包括hash值，这个值是添加数据时在数组中的标志，key和value值，bucketIndex。然后在createEntry方法的具体内容如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void create<span class="constructor">Entry(<span class="params">int</span> <span class="params">hash</span>, K <span class="params">key</span>, V <span class="params">value</span>, <span class="params">int</span> <span class="params">bucketIndex</span>)</span> &#123;</span><br><span class="line">    HashMapEntry&lt;K,V&gt; e = table<span class="literal">[<span class="identifier">bucketIndex</span>]</span>;</span><br><span class="line">    table<span class="literal">[<span class="identifier">bucketIndex</span>]</span> = <span class="keyword">new</span> HashMapEntry&lt;&gt;(hash, key, value, e);</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是直接将hash值在数组中对应的对象拿过来作为参数传递到HashMapEntry的构造方法中，在构造方法中其实就是将需要新创建的对象放在链表的头部。这样就是新的数据放在链表的前面，以前的对象放在链表的最后。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor">HashMapEntry(<span class="params">int</span> <span class="params">h</span>, K <span class="params">k</span>, V <span class="params">v</span>, HashMapEntry&lt;K,V&gt; <span class="params">n</span>)</span> &#123;</span><br><span class="line">    value = v;</span><br><span class="line">    next = n;</span><br><span class="line">    key = k;</span><br><span class="line">    hash = h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关于剩下的删除，获取等方法，这里就不一一介绍，主要还是添加方法的逻辑。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;HashMap源码分析&lt;/p&gt;</summary>
    
    
    
    
    <category term="源码分析" scheme="http://www.paulniu.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>源码分析(一) ArrayList</title>
    <link href="http://www.paulniu.com/2020/03/02/android-source-code-01/"/>
    <id>http://www.paulniu.com/2020/03/02/android-source-code-01/</id>
    <published>2020-03-02T14:09:13.000Z</published>
    <updated>2021-06-19T13:00:51.517Z</updated>
    
    <content type="html"><![CDATA[<p>ArrayList源码分析</p><span id="more"></span><p>ArrayList在实际开发中使用到的机会特别多，但是如果我们对其底层实现机制不是很了解的话，可能会给我们的程序带来很多负面的影响。例如，当我们需要放在集合中的数据，面临大量的删除，增加等操作的时候，如果依然使用ArrayList，就会暂用大量的系统资源，因为ArrayList底层是通过数组实现的。</p><p>如上所说，ArrayList底层是通过数组实现的，我们可以通过源码查找到我们需要的内容。</p><p>ArrayList是在java.util包下面的类，继承自AbstractList类，而在这个类里面主要是帮我们声明了一些List集合需要使用到的方法，比如get，add方法等，AbstractList是一个抽象类，大部分的方法都是抽象方法。同时ArrayList还实现了Cloneable，Serialable接口，那就意味着我们的ArrayList可以执行浅复制/深复制，和序列化操作。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ArrayList&lt;E&gt;</span> <span class="keyword">extends</span> <span class="title">AbstractList&lt;E&gt;</span></span></span><br><span class="line">        implements <span class="type">List</span>&lt;<span class="type">E</span>&gt;, <span class="type">RandomAccess</span>, <span class="type">Cloneable</span>, java.io.<span class="type">Serializable</span></span><br></pre></td></tr></table></figure><p>在ArrayList类里面，我们声明了几个变量，我们只说几个比较重要的</p><ol><li>DEFAULT_CAPACITY</li></ol><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Default initial capacity.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>这个变量表示我们当前ArrayList的初始大小是10个，因为ArrayList的底层是通过数组实现的，而数组在声明的时候的初始大小就是10个</p><ol start="2"><li><p>EMPTY_ELEMENTDATA</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Shared empty<span class="built_in"> array </span>instance used for empty instances.</span><br><span class="line"> */<span class="keyword"></span></span><br><span class="line"><span class="keyword">private</span><span class="keyword"> static</span><span class="keyword"> final</span> Object[] EMPTY_E<span class="class">LEMENTDATA = &#123;&#125;;</span></span><br></pre></td></tr></table></figure><p>这是一个数组，使我们声明的默认空数组，如果ArrayList在声明的时候没有指明ArrayList的大小，则默认讲这个数组指定为我们底层数组的赋值对象（在构造方法里我们可以看到）</p></li><li><p>elementData</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * The<span class="built_in"> array </span>buffer into which the elements of the ArrayList are stored.</span><br><span class="line"> * The capacity of the ArrayList is the length of this<span class="built_in"> array </span>buffer. Any</span><br><span class="line"> * empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span><br><span class="line"> * will be expanded to DEFAULT_CAPACITY when the first element is added.</span><br><span class="line"> */</span><br><span class="line">// Android-note: Also accessed from java.util.Collections<span class="keyword"></span></span><br><span class="line"><span class="keyword">transient</span> Object[] elementData; // non-private to simplify nested class access</span><br></pre></td></tr></table></figure><p>这个数组就是我们实际需要操作的底层数据，这里我们使用一个transient的关键字，他表示在我们执行序列化操作时，被transient修饰的变量不参与序列化的操作，具体可以参考这篇文章<a href="https://blog.csdn.net/u010188178/article/details/83581506">transient关键字</a></p></li></ol><p>分析了这几个变量，我们来看一下构造方法，我们一般情况下使用ArrayList的方式无非就这么几种，如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ArrayList<span class="tag">&lt;<span class="name">Object</span>&gt;</span> objects = new ArrayList<span class="tag">&lt;&gt;</span>();</span><br><span class="line">ArrayList<span class="tag">&lt;<span class="name">Object</span>&gt;</span> objects = new ArrayList<span class="tag">&lt;&gt;</span>(5);</span><br><span class="line">ArrayList<span class="tag">&lt;<span class="name">Object</span>&gt;</span> objects = new ArrayList<span class="tag">&lt;&gt;</span>(Collection);</span><br></pre></td></tr></table></figure><p>这三个方法分别对应着三个不同的构造方法，大致的操作都是相同的，如下所示</p><ol><li><p>无参构造</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs an empty list with an initial capacity of ten.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 其中DEFAULTCAPACITY_EMPTY_ELEMENTDATA也是一个为空的数组，主要是为了在构造方法中区分如何初始化数组对象的</span></span><br></pre></td></tr></table></figure></li><li><p>传递个数的构造方法</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs an empty list with the specified initial capacity.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  initialCapacity  the initial capacity of the list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if the specified initial capacity</span></span><br><span class="line"><span class="comment"> *         is negative</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">    &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(initialCapacity == <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里我们发现，在执行构造方法时，如果传递的数量大于0，则我们创建一个Object类型的数组，长度就是传递过来的数值，如果传递的大小为0，则将空的数组赋值给elementData对象</p></li><li><p>传递一个Collection集合的构造方法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs a list containing the elements of the specified</span></span><br><span class="line"><span class="comment"> * collection, in the order they are returned by the collection&#x27;s</span></span><br><span class="line"><span class="comment"> * iterator.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param c the collection whose elements are to be placed into this list</span></span><br><span class="line"><span class="comment"> * @throws NullPointerException if the specified collection is null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public <span class="constructor">ArrayList(Collection&lt;? <span class="params">extends</span> E&gt; <span class="params">c</span>)</span> &#123;</span><br><span class="line">    elementData = c.<span class="keyword">to</span><span class="constructor">Array()</span>;</span><br><span class="line">    <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">        <span class="keyword">if</span> (elementData.get<span class="constructor">Class()</span> != Object<span class="literal">[]</span>.<span class="keyword">class</span>)</span><br><span class="line">            elementData = <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>copy<span class="constructor">Of(<span class="params">elementData</span>, <span class="params">size</span>, Object[].<span class="params">class</span>)</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// replace with empty array.</span></span><br><span class="line">        this.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个构造方法里面，我们抽象需要将当前的传递的Collection转换成byte()数组，如果数组长度为0，则初始化一个空的elementData，如果数组的长度不为空，则执行Arrays中的copyof方法，这个方法会返回给当前的elementData数组。</p><blockquote><p>注意，这里需要进行类型的判定，可能数据会出错，注释中也给出了解答</p></blockquote></li></ol><p>在初始化完成之后，我们就要来看一下我们常用的一些方法具体是如何实现的</p><ol><li>add()<br>add()方法是往集合中添加数据<figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  * Appends the specified element <span class="keyword">to</span> the <span class="keyword">end</span> of this list.</span><br><span class="line">  *</span><br><span class="line">  * <span class="title">@param</span> e element <span class="keyword">to</span> be appended <span class="keyword">to</span> this list</span><br><span class="line">  * <span class="title">@return</span> &lt;tt&gt;<span class="keyword">true</span>&lt;/tt&gt; (as specified by &#123;<span class="title">@link</span> Collection#<span class="keyword">add</span>&#125;)</span><br><span class="line">  */</span><br><span class="line"> public boolean <span class="keyword">add</span>(E e) &#123;</span><br><span class="line">     ensureCapacityInternal(size + <span class="number">1</span>)<span class="comment">;  // Increments modCount!!</span></span><br><span class="line">     elementData[size++] <span class="operator">=</span> e<span class="comment">;</span></span><br><span class="line">     return <span class="keyword">true</span><span class="comment">;</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>在add方法中，我们需要执行两步操作，第一步是执行ensureCapacityIntrnal方法，第二步是执行数组的赋值操作。那么细心的同学可能会说，如果一开始我们声明的数组长度是10，而我这时候添加第11个元素，这样数组不就越界了吗？嗯，理论上来说是这样的，但是如果这时候我们的数组长度改变了呢？对，其实这里如果我再添加数据之后的数组长度大于目前的数组长度，就需要将数组扩容，那么判断其实就是通过ensureCapacityInternal方法执行的。并且细心的同学会发现，我们在调用这个方法的时候，传递的数据就是(size+1)看一下这个方法</li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> void ensure<span class="constructor">CapacityInternal(<span class="params">int</span> <span class="params">minCapacity</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData<span class="operator"> == </span>DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        minCapacity = <span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ensure<span class="constructor">ExplicitCapacity(<span class="params">minCapacity</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个方法中我们会看到，首先判断当前elementdata是否等于空，如果等于空，则将10和传递数据的最大值赋值给minCapacity，并且继续调用ensureExplicitCapacity()方法。这里我们分析三种情况，①如果我们是第一次添加数据，这时候minCapacity=10，②我们是第二次添加数据，也就是说添加之后的数量不超过默认值，这时候minCapacity=10，③添加之后的数量大于默认值，则返回传递过来的数据，我们假设minCapacity=11。紧接着我们看一下ensureExplicitCapacity方法是如何实现的</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">grow</span>(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法中，我们首先将modCount++，这个变量表示我们当前ArrayList更新了的次数，暂时先不考虑；紧接着我们有一个if语句判断传递过来的mincapacity减去elementdata的长度是否大于0，如果大于零则执行grow方法，如果小于/等于0，则不需要执行任何操作。如果不需要执行任何操作就会执行执行elementData[size++] = e这个语句。我们来看一下，在前一个方法中我们分析了，可能传递过来的数据minCapacity有两种情况：10或者11，如果是10的话，当前的elementData的长度也是10，就不会执行grow方法，只有当前传递过来的数据是11的时候，才会大于10，所以我们可以得出结论：如果需要添加的数据之后的数组长度小于等于当前数组长度，则直接赋值即可，如果大于则需要执行grow方法。而这个grow方法就是扩容方法。我们来看一下grow方法是如何实现的</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> void grow(int minCapacity) &#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    int oldCapacity = elementData.length;</span><br><span class="line">    int <span class="keyword">new</span><span class="type">Capacity</span> = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span><span class="type">Capacity</span> - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">new</span><span class="type">Capacity</span> = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span><span class="type">Capacity</span> - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">new</span><span class="type">Capacity</span> = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, <span class="keyword">new</span><span class="type">Capacity</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在grow方法中我们传递过来的是minCapacity是扩容之后的长度，这个我们需要知道；首先我们先得到目前的elementData的长度，也就是oldCapacity = 10，紧接着我们执行了下面这句话</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="keyword">new</span> Capacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>这句话是计算在扩容之后的数组长度，想一下我们现在数组长度是10，新增加一个元素，如果只把数组长度增加到11的话，那么后面每次增加我们都需要再次扩容，这样很消耗资源，所以我们就按照一定的方法扩容一定的长度。至于具体扩容多少，需要牵扯到我们的位运算，其实就是将数组的长度扩容了原来的一般，如果之前的长度是10，那么第一次扩容之后的长度是15，第二次扩容之后的长度是23，以此类推。紧接着就是判断的操作，这个判断操作没什么好说的，直接看最后一行</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">elementData</span> = Arrays.copyof(elementData,newCapacity)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>这句是干啥呢？其实就是将elementData数组扩容到newCapacity的长度，那原来的数据呢？会通过赋值的形式重新传递给我们的elementData。<br>这样就完成了添加扩容的操作。<br>我们会发现，在我们执行添加操作的时候，不牵扯到扩容还好，牵扯到扩容之后，竟然需要把之前的数据拷贝一遍在赋值给新的数组，这样是很消耗资源的的，所以这个扩容的过程会很慢(虽然CPU运行会很快，但是他确实很消耗资源)。</p><blockquote><p>这里可能有同学会说，我们可以声明一个非常大的数组，这样就不会有扩容的问题了。话是这么说的，但是我们知道数组在内存中是一个堤内地址连续的存储空间，申请一个比较大的数组就决定了我们需要一块很大的内存，这个对于内存来说，完完全全是负担。</p></blockquote><p>关于get，set方法这里都是对数组执行的操作，没什么好说的。我们再来看一下remove方法。我们在执行remove方法的时候，一般会传递一个下标或者直接传递集合对象，我们先看一下实现</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E remove(<span class="built_in">int</span> <span class="keyword">index</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">index</span> &gt;= size)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(<span class="keyword">index</span>));</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    E oldValue = (E) elementData[<span class="keyword">index</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> numMoved = size - <span class="keyword">index</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, <span class="keyword">index</span>+<span class="number">1</span>, elementData, <span class="keyword">index</span>,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = <span class="literal">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下标的删除比较简单，主要就是将数组中对应下标的内容设置为null，即可。但是我们需要注意的是，我们设置了为null，但是并不代表数据所占用的资源会被立刻设防，所以说我们的数组的长度之后的数据是不变的。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="type">boolean</span> remove(<span class="keyword">Object</span> o) &#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="keyword">index</span> = <span class="number">0</span>; <span class="keyword">index</span> &lt; size; <span class="keyword">index</span>++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[<span class="keyword">index</span>] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                fastRemove(<span class="keyword">index</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="keyword">index</span> = <span class="number">0</span>; <span class="keyword">index</span> &lt; size; <span class="keyword">index</span>++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[<span class="keyword">index</span>])) &#123;</span><br><span class="line">                fastRemove(<span class="keyword">index</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象的删除方式就是通过for循环找到相应的对象，然后通过fastRemove方法达到删除的效果。至于fastRemove方法其实和下表删除基本一致</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> fastRemove(<span class="built_in">int</span> <span class="keyword">index</span>) &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="built_in">int</span> numMoved = size - <span class="keyword">index</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, <span class="keyword">index</span>+<span class="number">1</span>, elementData, <span class="keyword">index</span>,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = <span class="literal">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;ArrayList源码分析&lt;/p&gt;</summary>
    
    
    
    
    <category term="源码分析" scheme="http://www.paulniu.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>重拾android路(三十八) JNI</title>
    <link href="http://www.paulniu.com/2020/03/02/android-38-jni/"/>
    <id>http://www.paulniu.com/2020/03/02/android-38-jni/</id>
    <published>2020-03-02T13:35:51.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android开发中JNI的基本使用</p><span id="more"></span><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><h1 id="引入项目-创建Android-NDK项目"><a href="#引入项目-创建Android-NDK项目" class="headerlink" title="引入项目(创建Android NDK项目)"></a>引入项目(创建Android NDK项目)</h1><h1 id="Hello-NDK"><a href="#Hello-NDK" class="headerlink" title="Hello NDK"></a>Hello NDK</h1><h1 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;Android开发中JNI的基本使用&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
    <category term="JNI" scheme="http://www.paulniu.com/tags/JNI/"/>
    
  </entry>
  
  <entry>
    <title>重拾android路(三十七) webView</title>
    <link href="http://www.paulniu.com/2020/02/28/android-37-webview/"/>
    <id>http://www.paulniu.com/2020/02/28/android-37-webview/</id>
    <published>2020-02-28T13:35:51.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>WebView</p><span id="more"></span><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;WebView&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
    <category term="WebView" scheme="http://www.paulniu.com/tags/WebView/"/>
    
  </entry>
  
  <entry>
    <title>重拾android路(三十六) AIDL</title>
    <link href="http://www.paulniu.com/2020/02/24/android-36-aidl/"/>
    <id>http://www.paulniu.com/2020/02/24/android-36-aidl/</id>
    <published>2020-02-24T13:35:51.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android跨进程通信</p><span id="more"></span><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;Android跨进程通信&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
    <category term="AIDL" scheme="http://www.paulniu.com/tags/AIDL/"/>
    
  </entry>
  
  <entry>
    <title>重拾android路(三十五) MQTT</title>
    <link href="http://www.paulniu.com/2019/12/24/android-35-mqtt/"/>
    <id>http://www.paulniu.com/2019/12/24/android-35-mqtt/</id>
    <published>2019-12-24T13:35:51.000Z</published>
    <updated>2021-06-21T09:31:19.945Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于MQTT"><a href="#关于MQTT" class="headerlink" title="关于MQTT"></a>关于MQTT</h1><span id="more"></span><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>MQTT，消息队列遥测传输，是IBM开发的一个即时通信协议。它是一种发布/订阅，极其简单和轻量级的消息传递协议，专门为受限设备和低带宽，高延迟或不可靠的网络而设计。它的设计思想是轻巧，开放，简单，规范，易于实现。这些特点使得他对很多场景来说都是很好的选择。特别是一些受限环境如机器与机器的通信(M2M)以及物联网环境，相对于XMPP，MQTT更加轻量级，并且占用的宽带低。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li>使用发布/订阅消息模式。提供一对多的消息发布，解除应用程序耦合</li><li>对敷在内容屏蔽的消息传输模式</li><li>使用TCP/IP提供网络连接</li><li>有三种消息发布服务质量<ul><li>qos为0:”至多1次”，消息发布完全依赖底层TCP/IP网络。会发生消息丢失或重复，这一级别可用于如下情况：环境传感器数据，丢失一次几路无所谓，因为不久之后还有第二次发送</li><li>qos为1:”至少1次”，确保消息到达，但消息重复可能会发生，这一级别可用于如下情况：你需要获取每条消息，并且消息重复发送对我们来说无影响</li><li>qos为2::”只有1次”，确保消息到达一次，这一级别可用于如下情况，在计费系统中，消息重复或丢失导致不正确的结果</li></ul></li><li>小型传输，开销很小(固定长度的头部是2字节)。协议交换最小化，以降低网络流量。使用Last Will和Testament特性通知有关各方客户端异常中断的机制</li></ol><h2 id="MQTT体系结构"><a href="#MQTT体系结构" class="headerlink" title="MQTT体系结构"></a>MQTT体系结构</h2><p>如下图所示<br><img src="/assets/android/mqtt01.png" alt="MQTT体系结构"></p><p>我们可以这样理解，我们去一个景区玩，进入景区配置一台闸机设备作为发布者(publisher),当闸机设备监控到有游客进入的时候，会发布一个带有主体(topic)的消息(例如主题为：welcome)给服务器(MQTT-Broker),当服务器收到发不过来的消息后，进行基于主题的过滤，将消息转发给鼎娱乐该主题的订阅者。而景区的大屏幕作为定于这(Subscriber),订阅的主题也是welcome,这样就能接收到服务器转发过来的消息，收到消息后在大屏幕上显示我们需要的内容</p><p>在该结构图中，闸机设备和大屏幕都是客户端，都可以进行发布和订阅。</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="发布-订阅模式"><a href="#发布-订阅模式" class="headerlink" title="发布/订阅模式"></a>发布/订阅模式</h2><p>发布/订阅模式解耦了发布消息的客户端(发布者)和订阅消息的客户端(订阅者)之间的关系，这意味着发布者和订阅者之间不需要直接建立联系。就比如，打电话给朋友，我们需要等到朋友接通电话才能交流，这就是一种典型的同步请求/回答的场景；而给一个好友发送邮件就不一样了，发送的邮件之后，我们可以去做别的事，朋友有时间去看邮件就好了。这就是一个典型的异步发布/订阅的场景。</p><blockquote><p>发布者与订阅者不需要彼此了解，只需要认识同一个消息代理即可；发布者和订阅者不需要交互，发布者无需等待订阅者确认而导致锁定；发布者和订阅者不需要同时在线，可以自由选择时间消费消息</p></blockquote><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>MQTT是通过主题对消息进行分类的，本质上就是一个UTF-8的字符串，不过可以通过反斜杠表示多个层级关系，主题不需要创建，直接使用即可<br>主题还可以通过通配符进行过滤，其中+可以过滤一个层级，*只能出现在主题最后表示过滤任意级别的层级</p><blockquote><p>building-b/floor-5:表示B楼5层的设置；+/floor-5:表示任何一个楼里的5层的设置；building-b/*:表示B楼中的所有设配</p></blockquote><h2 id="服务质量"><a href="#服务质量" class="headerlink" title="服务质量"></a>服务质量</h2><p>为了满足不同的场景，MQTT支持三种不同级别的服务质量QoS，为不同的场景提供消息的可靠性</p><ol><li>级别0：尽力而为，消息发送者会想尽办法将消息发送出去，但如遇意外，并不会重新发送</li><li>级别1：至少一次，消息接受者如果没有知会或者知会本身丢失，消息发送者再次发送该消息，以确保消息能够被接收到，这种情况，可能会造成消息的重复</li><li>级别2：恰好一次，保证这种语义肯定会减少并发或增加延迟，不过丢失或者重复消息是不可被接受的。</li></ol><p>服务质量是一个老话题，级别2所提供的的不重复不丢失很多情况下是最理想的，不过往返多次的确认，一定会对并发和延迟带来影响；级别1提供至少一次语义在日志处理这种场景下是没问题的，所以像Kafka这类的系统利用这个特点减少确认从而提高高并发；级别0适合几个数据场景，但是并不是特别多，姑且不表；</p><h2 id="消息类型"><a href="#消息类型" class="headerlink" title="消息类型"></a>消息类型</h2><ol><li>CONNECT：客户端连接到MQTT代理</li><li>CONNACK：连接确认</li><li>PUBLISH：新发布消息</li><li>PUBACK：新发布消息确认，是QoS 1给PUBLISH消息的回复</li><li>PUBREC：QoS 2消息流的第一部分，表示消息发布已记录</li><li>PUBREL：QoS 2消息流的第二部分，表示消息发布已释放</li><li>PUBCOMP：QoS 2消息流的第三部分，表示消息发布完成</li><li>SUBSCRIBE：客户端订阅某个主题</li><li>SUBACK：对于SUBSCRIBE消息的确认</li><li>UNSUBSCRIBE：客户端终止订阅的消息</li><li>UNSUBACK：对于UNSUBSCRIBE消息的确认</li><li>PINGREQ：心跳</li><li>PINGRESP：确认心跳</li><li>DISCONNECT：客户端终止连接前优雅地通知MQTT代理</li></ol><h1 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h1><p><a href="https://blog.csdn.net/qq_17250009/article/details/52774472">android App必备高级功能，消息推送之MQTT</a><br><a href="https://www.jianshu.com/p/73436a5cf855">Android消息推送MQTT实战</a><br><a href="https://www.hivemq.com/blog/how-to-get-started-with-mqtt/">Getting started with MQTT</a><br><a href="https://blog.csdn.net/github_33304260/article/details/73555475">MQTT入门知识</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;关于MQTT&quot;&gt;&lt;a href=&quot;#关于MQTT&quot; class=&quot;headerlink&quot; title=&quot;关于MQTT&quot;&gt;&lt;/a&gt;关于MQTT&lt;/h1&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
    <category term="mqtt" scheme="http://www.paulniu.com/tags/mqtt/"/>
    
  </entry>
  
  <entry>
    <title>重拾android路(三十四) room</title>
    <link href="http://www.paulniu.com/2019/12/20/android-34-room/"/>
    <id>http://www.paulniu.com/2019/12/20/android-34-room/</id>
    <published>2019-12-20T14:35:51.000Z</published>
    <updated>2021-06-21T09:31:14.696Z</updated>
    
    <content type="html"><![CDATA[<p>关于数据库的部分，之前有写过一篇博客，当时使用的数据库是realm数据库。但是在使用了一段时间之后，发现他的使用比较复杂，而且在我们执行数据库语言的时候，总是不够智能化(难道说我用的是一个假的数据库？)，所以经过深思熟虑，决定使用room数据库作为项目的主要数据库框架。</p><span id="more"></span><p>关于room数据库，网上有很多这样那样的教程，这里不做过多叙述，关键是如何使用，已经如何在项目中以比较灵活多变的形式使用room</p><h2 id="room数据库的引入"><a href="#room数据库的引入" class="headerlink" title="room数据库的引入"></a>room数据库的引入</h2><p>引入比较简单，只需要在gradle文件中添加如下依赖即可</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> room</span><br><span class="line">    compile <span class="string">&quot;android.arch.persistence.room:runtime:1.1.1&quot;</span></span><br><span class="line">    annotationProcessor <span class="string">&quot;android.arch.persistence.room:compiler:1.1.1&quot;</span></span><br></pre></td></tr></table></figure><p>目前好像room数据库有针对androidX进行更新，不过目前项目中并没有用到，所以也没有过多深入，后面如果有时间，再去学习吧。</p><p>引入完成之后，我们这里创建一个类名为AppDataBase的文件。</p><p>代码如下：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">package com.paulniu.iyingmusic.db;</span><br><span class="line"></span><br><span class="line">import android.content.Context;</span><br><span class="line"></span><br><span class="line">import androidx.annotation.NonNull;</span><br><span class="line">import androidx.room.Database;</span><br><span class="line">import androidx.room.Room;</span><br><span class="line">import androidx.room.RoomDatabase;</span><br><span class="line">import androidx.room.TypeConverters;</span><br><span class="line">import androidx.room.migration.Migration;</span><br><span class="line">import androidx.sqlite.db.SupportSQLiteDatabase;</span><br><span class="line"></span><br><span class="line">import com.paulniu.iyingmusic.Constant;</span><br><span class="line">import com.paulniu.iyingmusic.db.dao.MusicInfoDao;</span><br><span class="line">import com.paulniu.iyingmusic.model.MusicInfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Coder: niupuyue (牛谱乐)</span></span><br><span class="line"><span class="comment"> * Date: 2020-01-05</span></span><br><span class="line"><span class="comment"> * Time: 21:53</span></span><br><span class="line"><span class="comment"> * Desc: 数据库操作</span></span><br><span class="line"><span class="comment"> * Version:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Database(entities = &#123;MusicInfo.class&#125;, version = 1)</span><br><span class="line">@TypeConverters(&#123;&#125;)</span><br><span class="line">public abstract class AppDataBase extends RoomDatabase &#123;</span><br><span class="line"></span><br><span class="line">    private static AppDataBase INSTANCE = null;</span><br><span class="line"></span><br><span class="line">    public abstract MusicInfoDao getMusicInfoDao();</span><br><span class="line"></span><br><span class="line">    public static final Migration mirgration_1_2 = new Migration(1, 2) &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void migrate(@NonNull SupportSQLiteDatabase database) &#123;</span><br><span class="line">            // 删除本地歌曲表</span><br><span class="line">            database.execSQL(&quot;<span class="keyword">DROP</span> TABLE <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="symbol">`MusicInfo`</span><span class="string">&quot;);</span></span><br><span class="line"><span class="string">            // 创建本地歌曲表</span></span><br><span class="line"><span class="string">            database.execSQL(&quot;</span><span class="keyword">CREATE</span> TABLE <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="symbol">`MusicInfo`</span> (<span class="symbol">`_id`</span> INTEGER <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> AUTOINCREMENT <span class="keyword">NOT</span> <span class="literal">NULL</span>, <span class="symbol">`songId`</span> INTEGER <span class="keyword">NOT</span> <span class="literal">NULL</span>, <span class="symbol">`albumId`</span> INTEGER <span class="keyword">NOT</span> <span class="literal">NULL</span>, <span class="symbol">`duration`</span> INTEGER <span class="keyword">NOT</span> <span class="literal">NULL</span>, <span class="symbol">`musicName`</span> TEXT, <span class="symbol">`artist`</span> TEXT, <span class="symbol">`data`</span> TEXT, <span class="symbol">`folder`</span> TEXT, <span class="symbol">`musicNameKey`</span> TEXT, <span class="symbol">`artistKey`</span> TEXT, <span class="symbol">`favorite`</span> INTEGER <span class="keyword">NOT</span> <span class="literal">NULL</span>)<span class="string">&quot;);</span></span><br><span class="line"><span class="string">            // 创建本地歌曲索引</span></span><br><span class="line"><span class="string">            database.execSQL(&quot;</span><span class="keyword">CREATE</span>  <span class="keyword">INDEX</span> <span class="symbol">`index_MusicInfo__id_songId_albumId`</span> <span class="keyword">ON</span> <span class="symbol">`$&#123;TABLE_NAME&#125;`</span> (<span class="symbol">`_id`</span>, <span class="symbol">`songId`</span>, <span class="symbol">`albumId`</span>)<span class="string">&quot;);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    public static AppDataBase getInstance(Context context) &#123;</span></span><br><span class="line"><span class="string">        synchronized (AppDataBase.class) &#123;</span></span><br><span class="line"><span class="string">            if (null == INSTANCE) &#123;</span></span><br><span class="line"><span class="string">                INSTANCE = Room.databaseBuilder(context.getApplicationContext(), AppDataBase.class, Constant.DATABASE_NAME)</span></span><br><span class="line"><span class="string">                        .setJournalMode(JournalMode.TRUNCATE)</span></span><br><span class="line"><span class="string">                        .allowMainThreadQueries()</span></span><br><span class="line"><span class="string">                        .addMigrations(mirgration_1_2)</span></span><br><span class="line"><span class="string">                        .build();</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            return INSTANCE;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>在这个方法中，首先我们需要将当前类是抽象类，让room数据库帮我们自动创建实现类，因为这个内容是自动创建的，代码不用过于看重，只需要能看懂即可</p><p><img src="/assets/room/room01.png" alt="Database实现类"></p><p>我们需要使用注解(@Database)的方法来设置当前类是数据库操作引入类，其中在这里我们需要声明数据库的实体类entities = {MusicInfo.class}<br>我们通过注解的方式完成数据库中类型比较复杂的样式，比如，我们需要存储List集合，或者其他的自定义对象，我们就可以通过这样的的方法实现类型的转换，后面会对这一块进一步阐述，@TypeConverters({})<br>我们需要让当前类继承RoomDatabase，并且将该类声明成抽象类<br>为了防止多个数据库对象同时操作数据库，我们使用单例模式，生成当前类对象，这样就保证了唯一性<br>在单例模式中，我们创建数据库操作的实体对象</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;关于数据库的部分，之前有写过一篇博客，当时使用的数据库是realm数据库。但是在使用了一段时间之后，发现他的使用比较复杂，而且在我们执行数据库语言的时候，总是不够智能化(难道说我用的是一个假的数据库？)，所以经过深思熟虑，决定使用room数据库作为项目的主要数据库框架。&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
    <category term="room" scheme="http://www.paulniu.com/tags/room/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE 13 SSH整合</title>
    <link href="http://www.paulniu.com/2019/12/01/JavaEE-13-SSH/"/>
    <id>http://www.paulniu.com/2019/12/01/JavaEE-13-SSH/</id>
    <published>2019-12-01T06:37:03.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    
    
    
    
    <category term="JavaEE" scheme="http://www.paulniu.com/tags/JavaEE/"/>
    
    <category term="SSH" scheme="http://www.paulniu.com/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE 12 Maven高级操作</title>
    <link href="http://www.paulniu.com/2019/11/30/JavaEE-12-Maven/"/>
    <id>http://www.paulniu.com/2019/11/30/JavaEE-12-Maven/</id>
    <published>2019-11-30T14:37:03.000Z</published>
    <updated>2020-11-27T07:05:10.000Z</updated>
    
    
    
    
    
    <category term="JavaEE" scheme="http://www.paulniu.com/tags/JavaEE/"/>
    
    <category term="Maven" scheme="http://www.paulniu.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE 11 SpringMVC</title>
    <link href="http://www.paulniu.com/2019/11/30/JavaEE-11-SpringMVC/"/>
    <id>http://www.paulniu.com/2019/11/30/JavaEE-11-SpringMVC/</id>
    <published>2019-11-30T02:37:03.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>SpringMVC</p><span id="more"></span><p>题外话</p><h2 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h2><p>我们的开发架构一般都是基于两种形式，一种是C/S框架，也就是客户端/服务器，另一种是B/S架构，也就是浏览器/服务器。在JavaEE开发中，几乎全部都是基于B/S架构的开发，那么在B/S架构中，系统标准的三层架构包括:表现层，业务层，</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;SpringMVC&lt;/p&gt;</summary>
    
    
    
    
    <category term="JavaEE" scheme="http://www.paulniu.com/tags/JavaEE/"/>
    
    <category term="SpringMVC" scheme="http://www.paulniu.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE 10 Spring</title>
    <link href="http://www.paulniu.com/2019/11/29/JavaEE-10-Spring/"/>
    <id>http://www.paulniu.com/2019/11/29/JavaEE-10-Spring/</id>
    <published>2019-11-29T14:37:03.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Spring框架</p><span id="more"></span><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote><p>网上很多教程都是将这个部分当做了解内容，但是前提是你对Spring有所了解，像我这样的什么都不知道的，还是要好好地学习一下的</p></blockquote><p>Spring是分层的JavaEE应用full-stack轻量级开源框架，以IoC和AOP为内核，提供了展现层SpringMVC和持久层SpringJDBC以及业务层事务管理等众多的企业级应用技术，还能整合开源世界诸多的著名第三方框架</p><h3 id="Spring优势"><a href="#Spring优势" class="headerlink" title="Spring优势"></a>Spring优势</h3><p>方便解耦，简化开发：<br>通过Spring提供的Ioc容器，可以将对象间的依赖关系交给Spring进行控制，避免硬解码造成过度程序耦合，用户也不必再为单例模式，属性文件解析等这些很底层的需求编写代码，更加关注于上层应用</p><p>AOP编程的支持：<br>通过Spring的AOP功能，方便进行面选项切面的编程，许多不容易用传统OOP实现的功能，可以使用AOP轻松应付</p><p>声明式事务的支持：<br>可以将我们从单调烦躁的事务管理代码中解脱出来，通过声明式方式零落的进行事务管理，提供开发效率和质量</p><p>方便程序的测试：<br>可以用废容器依赖的编程方式进行几乎所有的测试工作，测试不再是昂贵的操作</p><p>方便集成各种优秀框架：<br>Spring可以降低各种框架的使用难度，提供了对各种优秀框架(Struts,Hibernate,Hessian)的直接支持</p><p>降低JavaEE API的使用难度：</p><p>Java源码是经典学习范例：</p><h2 id="Spring体系结构"><a href="#Spring体系结构" class="headerlink" title="Spring体系结构"></a>Spring体系结构</h2><p><img src="/assets/JavaEE/spring-01.png" alt="Spring体系结构"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Spring框架&lt;/p&gt;</summary>
    
    
    
    
    <category term="JavaEE" scheme="http://www.paulniu.com/tags/JavaEE/"/>
    
    <category term="Spring" scheme="http://www.paulniu.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE 09 MyBatis</title>
    <link href="http://www.paulniu.com/2019/11/26/JavaEE-09-Mybatis/"/>
    <id>http://www.paulniu.com/2019/11/26/JavaEE-09-Mybatis/</id>
    <published>2019-11-25T21:08:22.000Z</published>
    <updated>2021-06-21T09:16:34.314Z</updated>
    
    <content type="html"><![CDATA[<p>MyBatis是一个优秀的基于java的持久层框架，它内部封装了JDBC，使开发者只需要关注sql语句本身，不需要花费精力去处理加载驱动，创建连接，创建statement等繁杂的过程。</p><span id="more"></span><p>Mybatis通过xml或者注解的方式将要执行的各种statement配置起来，并通过java对象和statement中sql的动态参数进行映射生成最终执行的sql语句，最后由Mybatis框架执行sql并将结果映射为java对象并返回<br>采用ORM思想解决了实体和数据库映射问题，对JDBC进行封装，屏蔽了JDBC API底层访问细节，是我们不用与JDBC API打交道，就可以完成对数据库持久化操作</p><blockquote><p>关于JDBC的操作我们都很熟悉了，这里就不再介绍</p></blockquote><h2 id="Mybatis框架开发准备工作"><a href="#Mybatis框架开发准备工作" class="headerlink" title="Mybatis框架开发准备工作"></a>Mybatis框架开发准备工作</h2><p>首先我们需要通过Idea创建一个Maven工程，并在Maven工程中添加MyBatis的坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.paulniu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis01<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>紧接着我们编写一个User的实体类，并且让这个实体类实现Serializable接口</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">package com.paulniu.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="title">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> username;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> sex;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">Date</span> birthday;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> address;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="function"><span class="title">getId</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setId</span>(<span class="params">Integer id</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">getUsername</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setUsername</span>(<span class="params"><span class="built_in">String</span> username</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">getSex</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setSex</span>(<span class="params"><span class="built_in">String</span> sex</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">Date</span> <span class="function"><span class="title">getBirthday</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setBirthday</span>(<span class="params"><span class="built_in">Date</span> birthday</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">getAddress</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setAddress</span>(<span class="params"><span class="built_in">String</span> address</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, birthday=&quot;</span> + birthday +</span><br><span class="line">                <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写持久层接口IUserDao，在这个接口中我们只需要穿件一个方法findAll</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.paulniu.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.paulniu.domain.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>紧接着我们需要创建一个持久层接口的映射文件IUserDao.xml<br>这里需要注意，我们创建的改文件的位置必须和IUserDao在同样的包名中，并且名称必须和持久层接口文件的命名相同，具体的结构如下所示<br><img src="/assets/JavaEE/mybatis-01.png" alt="创建持久层接口映射文件"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.paulniu.dao.IUserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.paulniu.domain.User&quot;</span> &gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写SQLMapConfig.xml配置文件，这个配置文件相当于是配置Mybatis的配置文件，包括了数据库连接的属性，线程池，以及映射关系等</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis主配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 配置连接基本信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis_db&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定映射配置文件位置，映射配置文件指的是每个独立到的配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/paulniu/dao/IUserDao.xml&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样我们的Mybatis的最基础的使用方法已经完成，我们这里写一个方法测试一下</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> MyBatisTest &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) throws IOException &#123;</span><br><span class="line">        InputStream <span class="keyword">is</span> = Resources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;);</span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="built_in">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(<span class="keyword">is</span>);</span><br><span class="line">        SqlSession sqlSession = factory.openSession();</span><br><span class="line">        IUserDao userDao = sqlSession.getMapper(IUserDao.<span class="keyword">class</span>);</span><br><span class="line">        List&lt;<span class="keyword">User</span>&gt; users = userDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">User</span> <span class="keyword">user</span> : users) &#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">user</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.<span class="keyword">close</span>();</span><br><span class="line">        <span class="keyword">is</span>.<span class="keyword">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行之后的结果如图</p><p><img src="/assets/JavaEE/mybatis-02.png" alt="运行结果"></p><h3 id="Mybatis的增删改查"><a href="#Mybatis的增删改查" class="headerlink" title="Mybatis的增删改查"></a>Mybatis的增删改查</h3><p>IUserDao接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.paulniu.mybatis_01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.paulniu.domain.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">saveUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IUserDao.xml</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span></span><br><span class="line"><span class="meta"><span class="xml">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span></span><br><span class="line"><span class="meta"><span class="xml">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.paulniu.mybatis_01.IUserDao&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.paulniu.domain.User&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        select * from user</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.paulniu.domain.User&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        select * from user where id = #</span><span class="template-variable">&#123;uid&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;saveUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.paulniu.domain.User&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        insert into user (username,birthday,sex,address) values (#</span><span class="template-variable">&#123;username&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;birthday&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;sex&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;address&#125;</span><span class="xml">)</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.paulniu.domain.User&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        update user set username = #</span><span class="template-variable">&#123;username&#125;</span><span class="xml"> ,birthday=#</span><span class="template-variable">&#123;birthday&#125;</span><span class="xml">,sex=#</span><span class="template-variable">&#123;sex&#125;</span><span class="xml">,address=#</span><span class="template-variable">&#123;address&#125;</span><span class="xml"> where id = #</span><span class="template-variable">&#123;id&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Integer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        delete from user where id = #</span><span class="template-variable">&#123;id&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>测试文件</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Test &#123;</span><br><span class="line">    private static InputStream <span class="keyword">is</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) throws IOException &#123;</span><br><span class="line">        <span class="keyword">is</span> = Resources.getResourceAsStream(&quot;SQLMapConfig.xml&quot;);</span><br><span class="line">        deleteUser();</span><br><span class="line">        <span class="keyword">is</span>.<span class="keyword">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> findAll() &#123;</span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="built_in">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(<span class="keyword">is</span>);</span><br><span class="line">        SqlSession <span class="keyword">session</span> = factory.openSession();</span><br><span class="line">        IUserDao userDao = <span class="keyword">session</span>.getMapper(IUserDao.<span class="keyword">class</span>);</span><br><span class="line">        List&lt;<span class="keyword">User</span>&gt; users = userDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">User</span> <span class="keyword">user</span> : users) &#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;user = &quot; + <span class="keyword">user</span>.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> findById()&#123;</span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="built_in">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(<span class="keyword">is</span>);</span><br><span class="line">        SqlSession <span class="keyword">session</span> = factory.openSession();</span><br><span class="line">        IUserDao userDao = <span class="keyword">session</span>.getMapper(IUserDao.<span class="keyword">class</span>);</span><br><span class="line">        <span class="keyword">User</span> <span class="keyword">user</span> = userDao.findById(<span class="number">41</span>);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">user</span>);</span><br><span class="line">        <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存新用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> saveUser()&#123;</span><br><span class="line">        <span class="keyword">User</span> <span class="keyword">user</span> = <span class="built_in">new</span> <span class="keyword">User</span>();</span><br><span class="line">        <span class="keyword">user</span>.setUsername(&quot;哈哈&quot;);</span><br><span class="line">        <span class="keyword">user</span>.setSex(&quot;男&quot;);</span><br><span class="line">        <span class="keyword">user</span>.setBirthday(<span class="built_in">new</span> <span class="type">Date</span>());</span><br><span class="line">        <span class="keyword">user</span>.setAddress(&quot;北京丰台&quot;);</span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="built_in">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(<span class="keyword">is</span>);</span><br><span class="line">        SqlSession <span class="keyword">session</span> = factory.openSession();</span><br><span class="line">        IUserDao userDao = <span class="keyword">session</span>.getMapper(IUserDao.<span class="keyword">class</span>);</span><br><span class="line">        <span class="type">int</span> count = userDao.saveUser(<span class="keyword">user</span>);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(count);</span><br><span class="line">        <span class="keyword">session</span>.<span class="keyword">commit</span>();</span><br><span class="line">        <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> updateUser()&#123;</span><br><span class="line">        <span class="keyword">User</span> <span class="keyword">user</span> = <span class="built_in">new</span> <span class="keyword">User</span>();</span><br><span class="line">        <span class="keyword">user</span>.setUsername(&quot;哈哈&quot;);</span><br><span class="line">        <span class="keyword">user</span>.setSex(&quot;男&quot;);</span><br><span class="line">        <span class="keyword">user</span>.setBirthday(<span class="built_in">new</span> <span class="type">Date</span>());</span><br><span class="line">        <span class="keyword">user</span>.setAddress(&quot;北京丰台&quot;);</span><br><span class="line">        <span class="keyword">user</span>.setId(<span class="number">42</span>);</span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="built_in">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(<span class="keyword">is</span>);</span><br><span class="line">        SqlSession <span class="keyword">session</span> = factory.openSession();</span><br><span class="line">        IUserDao userDao = <span class="keyword">session</span>.getMapper(IUserDao.<span class="keyword">class</span>);</span><br><span class="line">        <span class="type">int</span> count = userDao.updateUser(<span class="keyword">user</span>);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(count);</span><br><span class="line">        <span class="keyword">session</span>.<span class="keyword">commit</span>();</span><br><span class="line">        <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> deleteUser()&#123;</span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="built_in">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(<span class="keyword">is</span>);</span><br><span class="line">        SqlSession <span class="keyword">session</span> = factory.openSession();</span><br><span class="line">        IUserDao userDao = <span class="keyword">session</span>.getMapper(IUserDao.<span class="keyword">class</span>);</span><br><span class="line">        <span class="type">int</span> count = userDao.deleteUser(<span class="number">52</span>);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(count);</span><br><span class="line">        <span class="keyword">session</span>.<span class="keyword">commit</span>();</span><br><span class="line">        <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果在写入数据时出现乱码问题，则需要设置编码格式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis主配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 配置连接基本信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis_db?characterEncoding=utf8&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定映射配置文件位置，映射配置文件指的是每个独立到的配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/paulniu/mybatis_01/IUserDao.xml&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/assets/JavaEE/mybatis-03.png" alt="增加数据运行结果"><br><img src="/assets/JavaEE/mybatis-04.png" alt="删除数据运行结果"><br><img src="/assets/JavaEE/mybatis-05.png" alt="修改数据运行结果"></p><h3 id="查询使用聚合函数"><a href="#查询使用聚合函数" class="headerlink" title="查询使用聚合函数"></a>查询使用聚合函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="keyword">select</span> id<span class="operator">=</span>&quot;findTotal&quot; resultType<span class="operator">=</span>&quot;Integer&quot;<span class="operator">&gt;</span></span><br><span class="line">       <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line">   <span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">select</span><span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 查询数据总数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="built_in">public</span> static <span class="type">void</span> findTotal()&#123;</span><br><span class="line">       SqlSessionFactoryBuilder builder = <span class="built_in">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">       SqlSessionFactory factory = builder.build(<span class="keyword">is</span>);</span><br><span class="line">       SqlSession <span class="keyword">session</span> = factory.openSession();</span><br><span class="line">       IUserDao userDao = <span class="keyword">session</span>.getMapper(IUserDao.<span class="keyword">class</span>);</span><br><span class="line">       <span class="type">int</span> count = userDao.findTotal();</span><br><span class="line">       <span class="keyword">System</span>.<span class="keyword">out</span>.println(count);</span><br><span class="line">       <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="/assets/JavaEE/mybatis-06.png" alt="聚合函数查询结果"></p><h3 id="Mybatis封装"><a href="#Mybatis封装" class="headerlink" title="Mybatis封装"></a>Mybatis封装</h3><h4 id="结果的封装"><a href="#结果的封装" class="headerlink" title="结果的封装"></a>结果的封装</h4><p>resultType配置类型结果<br>resultType属性可以指定结果集类型，它支持基本类型和试题类型</p><p>resultMap结果集<br>resultMap标签可以创建查询的列名和实体类的属性名称不一致时创建映射关系。在select标签中使用resultMap属性指定引用即可。同时resultMap属性可以实现将查询结果映射为复杂类的pojo。比如在查询结果映射对象中包括pojo和list实现实现一对一或一对多查询。</p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>parameterType配置参数，我们在使用SQL语句传参时，使用标签parameterType属性来设定。该属性的取值可以是基本类型，引用类型，还可以是实体类类型(POJO类)。同时也可以使用实体类的包装类</p><blockquote><p>注意：基本类型和String类型我们可以直接写类型名称，也可以使用包名.类名的方式。实体类类型只能使用全限定类名</p></blockquote><p>传递POJO包装对象<br>开发中使用POJO传递查询条件，查询条件是综合的查询条件，不仅包括用户查询条件，还包括其他的查询条件(比如将用户购买商品信息也作为查询条件)，这是可以声依永包装对象输入参数</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.paulniu.<span class="keyword">domain</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.<span class="keyword">Serializable</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> QueryVo implements <span class="keyword">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">User</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> <span class="keyword">User</span> getUser() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">user</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> setUser(<span class="keyword">User</span> <span class="keyword">user</span>) &#123;</span><br><span class="line">        this.<span class="keyword">user</span> = <span class="keyword">user</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口类</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据QueryVo条件查询</span></span><br><span class="line">   List&lt;User&gt; find<span class="constructor">ByVo(QueryVo <span class="params">queryVo</span>)</span>;</span><br></pre></td></tr></table></figure><p>映射</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">select</span> id=<span class="string">&quot;findByVo&quot;</span> parameterType=<span class="string">&quot;com.paulniu.domain.QueryVo&quot;</span> resultType=<span class="string">&quot;com.paulniu.domain.User&quot;</span> &gt;</span><br><span class="line">        <span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username <span class="keyword">like</span> #&#123;<span class="keyword">user</span>.username&#125;</span><br><span class="line">    &lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 使用pojo封装类</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="built_in">public</span> static <span class="type">void</span> findByVo()&#123;</span><br><span class="line">       SqlSessionFactoryBuilder builder = <span class="built_in">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">       SqlSessionFactory factory = builder.build(<span class="keyword">is</span>);</span><br><span class="line">       SqlSession <span class="keyword">session</span> = factory.openSession();</span><br><span class="line">       IUserDao userDao = <span class="keyword">session</span>.getMapper(IUserDao.<span class="keyword">class</span>);</span><br><span class="line">       QueryVo vo = <span class="built_in">new</span> QueryVo();</span><br><span class="line">       <span class="keyword">User</span> <span class="keyword">user</span> = <span class="built_in">new</span> <span class="keyword">User</span>();</span><br><span class="line">       <span class="keyword">user</span>.setUsername(&quot;%小%&quot;);</span><br><span class="line">       vo.setUser(<span class="keyword">user</span>);</span><br><span class="line">       List&lt;<span class="keyword">User</span>&gt; users = userDao.findByVo(vo);</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">User</span> uu:users)&#123;</span><br><span class="line">           <span class="keyword">System</span>.<span class="keyword">out</span>.println(uu.toString());</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="/assets/JavaEE/mybatis-07.png" alt="POJO封装运行结果"></p><h3 id="SqlMapConfig-xml配置文件"><a href="#SqlMapConfig-xml配置文件" class="headerlink" title="SqlMapConfig.xml配置文件"></a>SqlMapConfig.xml配置文件</h3><p>配置文件的额内容和顺序</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-<span class="function"><span class="title">properties</span>(属性)</span></span><br><span class="line">    --<span class="variable">property</span></span><br><span class="line">-<span class="function"><span class="title">settings</span>(全局配置参数)</span></span><br><span class="line">    --<span class="variable">setting</span></span><br><span class="line">-<span class="function"><span class="title">typeAliases</span>(类型别名)</span></span><br><span class="line">    --<span class="variable">typeAliase</span></span><br><span class="line">    --<span class="variable">package</span></span><br><span class="line">-<span class="function"><span class="title">typeHandlers</span>(类型处理器)</span></span><br><span class="line">-<span class="function"><span class="title">objectFactory</span>(对象工厂)</span></span><br><span class="line">-<span class="function"><span class="title">plugins</span>(插件)</span></span><br><span class="line">-<span class="function"><span class="title">environments</span>(环境集合属性对象)</span></span><br><span class="line">    --<span class="function"><span class="title">environment</span>(环境子属性对象)</span></span><br><span class="line">        ---<span class="function"><span class="title">transactionManager</span>(事务管理)</span></span><br><span class="line">        ---<span class="function"><span class="title">dataSource</span>(数据源)</span></span><br><span class="line">-<span class="function"><span class="title">mappers</span>(映射器)</span></span><br><span class="line">    --<span class="variable">mapper</span></span><br><span class="line">    --<span class="variable">package</span>                    </span><br></pre></td></tr></table></figure><p>properties(属性)</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">&quot;jdbc.driver&quot;</span> value=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span><br><span class="line">    &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">&quot;jdbc.url&quot;</span> value=<span class="string">&quot;jdbc:mysql://localhost:3306/eesy&quot;</span> /&gt;</span><br><span class="line">    &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">&quot;jdbc.username&quot;</span> value=<span class="string">&quot;root&quot;</span> /&gt;</span><br><span class="line">    &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">&quot;jdbc.password&quot;</span> value=<span class="string">&quot;123456&quot;</span>&gt;</span><br><span class="line">&lt;/properties&gt;</span><br></pre></td></tr></table></figure><blockquote><p>除了上面这样的方式之外我们可以定义db.properties文件</p></blockquote><p>我们使用DataSource标签完成数据库的配置工作</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis主配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 配置连接基本信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis_db?characterEncoding=utf8&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定映射配置文件位置，映射配置文件指的是每个独立到的配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/paulniu/mybatis_01/IUserDao.xml&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Mybatis连接池和事务"><a href="#Mybatis连接池和事务" class="headerlink" title="Mybatis连接池和事务"></a>Mybatis连接池和事务</h2><p>在我们之前的代码中，我们会发现如果我们执行插入操作需要调用SqlSession.commit()方法，其实这个就是将事务操作。</p><h3 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h3><p>Mybatis中连接池分为三类，分别是UNPOOLED，POLLED，JNDI<br>配置操作如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 配置连接基本信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis_db?characterEncoding=utf8&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>UNPOOLED:表示Mybatis会创建UnpooledDataSource实例</li><li>POOLED:表示Mybatis会创建PooledDataSource实例</li><li>JNDI:表示Mybatis会从JNDI服务上查找DataSource实例，然后返回使用</li></ol><p>这三种数据源中我们一般采用POOLED数据源(就是我们所说的连接池技术)</p><p>Mybatis是通过工厂模式来创建数据源DataSource对象的，Mybatis定义了抽象的工厂接口:DataSourceFactory,通过getDataSource()方法返回数据源DataSource。在创建DataSource实例后，会将其放在Configuration对象的Environment对象中，供以后使用。</p><h3 id="事务控制"><a href="#事务控制" class="headerlink" title="事务控制"></a>事务控制</h3><p>在JDBC中农我们可以通过手动方式将事务的提交改为手动方式，通过setAutoCommit()方法就可以调整，因为Mybatis是对JDBC的封装，所以Mybatis框架的事务控制方式本身就是JDBC的setAutoCommit()方法来设置事务提交方式的。</p><p>其实我们在执行创建，更新，删除等Sql操作必须使用sqlSession.commit()提交事务，因为在连接池中获取连接，都会调用connection.setAutoCommit(false)方法，这样我们必须调用sqlSession.commit()方法。我们可以不进行手动提交，一样实现更新，删除，创建等操作<br><img src="/assets/JavaEE/mybatis-08.png" alt="自定提交事务设置"></p><h3 id="Mybatis的动态Sql语句"><a href="#Mybatis的动态Sql语句" class="headerlink" title="Mybatis的动态Sql语句"></a>Mybatis的动态Sql语句</h3><p>我们根据实体类的不同取值，使用不同的SQL语句进行查询，例如在id如果不为空的情况下根据id查询， 如果username不为空还要加上用户名作为条件</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List<span class="tag">&lt;User&gt;</span> findByUser(<span class="keyword">User</span> <span class="title">user</span>);</span><br></pre></td></tr></table></figure><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">select</span> id=<span class="string">&quot;findByUser&quot;</span> resultType=<span class="string">&quot;com.paulniu.domain.User&quot;</span> parameterType=<span class="string">&quot;com.paulniu.domain.User&quot;</span>&gt;</span><br><span class="line">        <span class="keyword">select</span> * <span class="keyword">from</span> user <span class="keyword">where</span> <span class="number">1</span> = <span class="number">1</span></span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;username!=null and username != &#x27; &#x27;.toString()&quot;</span>&gt;</span><br><span class="line">            and username <span class="keyword">like</span> <span class="meta">#&#123;username&#125;</span></span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;address != null&quot;</span>&gt;</span><br><span class="line">            and address <span class="keyword">like</span> <span class="meta">#&#123;address&#125;</span></span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">public</span> static <span class="type">void</span> findByUser() &#123;</span><br><span class="line">    <span class="keyword">User</span> <span class="keyword">user</span> = <span class="built_in">new</span> <span class="keyword">User</span>();</span><br><span class="line">    <span class="keyword">user</span>.setUsername(&quot;%小%&quot;);</span><br><span class="line">    <span class="keyword">user</span>.setAddress(&quot;%门头沟%&quot;);</span><br><span class="line">    SqlSessionFactoryBuilder builder = <span class="built_in">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">    SqlSessionFactory factory = builder.build(<span class="keyword">is</span>);</span><br><span class="line">    SqlSession <span class="keyword">session</span> = factory.openSession(<span class="keyword">true</span>);</span><br><span class="line">    IUserDao dao = <span class="keyword">session</span>.getMapper(IUserDao.<span class="keyword">class</span>);</span><br><span class="line">    List&lt;<span class="keyword">User</span>&gt; users = dao.findByUser(<span class="keyword">user</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">User</span> uu : users) &#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(uu.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="/assets/JavaEE/mybatis-09.png" alt="if语句动态查询结果"></p><p>使用foreach标签<br>传入多个id查询用户信息，使用如下两个sql实现</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> users <span class="keyword">where</span> username <span class="keyword">like</span> <span class="string">&#x27;%张%&#x27;</span> and (id = <span class="number">10</span> or id =<span class="number">89</span> or id = <span class="number">16</span>)</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> users <span class="keyword">where</span> username <span class="keyword">like</span> <span class="string">&#x27;%张%&#x27;</span> and id <span class="keyword">in</span> (<span class="number">10</span>,<span class="number">89</span>,<span class="number">16</span>)</span><br></pre></td></tr></table></figure><p>这样我们在进行范围查询时，就将集合中的值作为参数动态添加进来</p><p>我们可以使用QueryVo加入一个List集合用于封装参数<br>创建一个新的类QueryVo2</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryVo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; ids;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="function"><span class="title">getIds</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ids;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setIds</span>(<span class="params">List&lt;Integer&gt; ids</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.ids = ids;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加接口</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; find<span class="constructor">InIds(QueryVo2 <span class="params">queryVo</span>)</span>;</span><br></pre></td></tr></table></figure><p>修改IUserDao.xml文件</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findInIds&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.paulniu.domain.User&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.paulniu.domain.QueryVo2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;defaultUser&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ids != null and ids.size() &gt; 0&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">open</span>=<span class="string">&quot;and id in ( &quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">item</span>=<span class="string">&quot;uid&quot;</span>  <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    #</span><span class="template-variable">&#123;uid&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>此处为了避免重复写太多的代码，我们写了一个include标签，标签的内容如下</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">sql</span> id=&quot;defaultUser&quot;&gt;</span><br><span class="line">        <span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span></span><br><span class="line">    &lt;/<span class="keyword">sql</span>&gt;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">public</span> static <span class="type">void</span> findInIds() &#123;</span><br><span class="line">    QueryVo2 queryVo2 = <span class="built_in">new</span> QueryVo2();</span><br><span class="line">    List&lt;<span class="type">Integer</span>&gt; ids = <span class="built_in">new</span> ArrayList&lt;<span class="type">Integer</span>&gt;();</span><br><span class="line">    ids.<span class="keyword">add</span>(<span class="number">40</span>);</span><br><span class="line">    ids.<span class="keyword">add</span>(<span class="number">42</span>);</span><br><span class="line">    ids.<span class="keyword">add</span>(<span class="number">47</span>);</span><br><span class="line">    queryVo2.setIds(ids);</span><br><span class="line">    SqlSessionFactoryBuilder builder = <span class="built_in">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">    SqlSessionFactory factory = builder.build(<span class="keyword">is</span>);</span><br><span class="line">    SqlSession <span class="keyword">session</span> = factory.openSession(<span class="keyword">true</span>);</span><br><span class="line">    IUserDao userDao = <span class="keyword">session</span>.getMapper(IUserDao.<span class="keyword">class</span>);</span><br><span class="line">    List&lt;<span class="keyword">User</span>&gt; users = userDao.findInIds(queryVo2);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">User</span> <span class="keyword">user</span> : users) &#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">user</span>.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：<br><img src="/assets/JavaEE/mybatis-10.png" alt="测试结果"></p><h4 id="多表查询一对多"><a href="#多表查询一对多" class="headerlink" title="多表查询一对多"></a>多表查询一对多</h4><p>我们使用的例子比较简单，就是用户和账户的模型来分析MyBatis中多表关系，用户为User表，账户为Account表，一个用户可以拥有多个账户。我们将查询所有账户信息，关联查询下单用户信息</p><blockquote><p>注意，因为一个账户信息只能提供给某个用户使用，所以从查询账户信息出发关联查询用户信息是一对一查询，如果从用户信息出发查询用户下的账户信息为一对多查询</p></blockquote><p>先编写Account.class类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="title">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">Account</span>(<span class="params">Integer id, Integer uid, Double money</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.uid = uid;</span><br><span class="line">        <span class="built_in">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">Account</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="function"><span class="title">getId</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setId</span>(<span class="params">Integer id</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="function"><span class="title">getUid</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setUid</span>(<span class="params">Integer uid</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.uid = uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="function"><span class="title">getMoney</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setMoney</span>(<span class="params">Double money</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Account&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, uid=&quot;</span> + uid +</span><br><span class="line">                <span class="string">&quot;, money=&quot;</span> + money +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正常情况下Sql语句应该是这样的</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> account.*,<span class="keyword">user</span>.name,<span class="keyword">user</span>.address <span class="keyword">from</span> account,<span class="keyword">user</span> <span class="keyword">where</span> account.uid = <span class="keyword">user</span>.id;</span><br></pre></td></tr></table></figure><p>查询结果如下所示<br><img src="/assets/JavaEE/mybatis-11.png" alt="多表查询"></p><p>为了能够多表查询，我们创建一个新的类AccountUser类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountUser</span> <span class="keyword">extends</span> <span class="title">Account</span> <span class="title">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> username;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">getUsername</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setUsername</span>(<span class="params"><span class="built_in">String</span> username</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">getAddress</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setAddress</span>(<span class="params"><span class="built_in">String</span> address</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建一个接口IAccountUserDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountUserDao</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;AccountUser&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建IAccountUserDao.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.paulniu.mybatis_01.IAccountUserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.paulniu.domain.AccountUser&quot;</span>&gt;</span></span><br><span class="line">        select account.*,user.username,user.address from account,user where account.uid = user.id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static void find<span class="constructor">All2()</span>&#123;</span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> <span class="constructor">SqlSessionFactoryBuilder()</span>;</span><br><span class="line">        SqlSessionFactory factory = builder.build(is);</span><br><span class="line">        SqlSession session = factory.<span class="keyword">open</span><span class="constructor">Session(<span class="params">true</span>)</span>;</span><br><span class="line">        IAccountUserDao dao = session.get<span class="constructor">Mapper(IAccountUserDao.<span class="params">class</span>)</span>;</span><br><span class="line">        List&lt;AccountUser&gt; accountUsers = dao.find<span class="constructor">All()</span>;</span><br><span class="line">        <span class="keyword">for</span> (AccountUser user : accountUsers)&#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(user.<span class="keyword">to</span><span class="constructor">String()</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>SQLMapConfig.xml文件中添加mapper标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定映射配置文件位置，映射配置文件指的是每个独立到的配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/paulniu/mybatis_01/IUserDao.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/paulniu/mybatis_01/IAccountUserDao.xml&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行结果<br><img src="/assets/JavaEE/mybatis-12.png" alt="运行结果"></p><blockquote><p>作为21世纪祖国的花朵，我们岂能用这种方法，也太麻烦了，毕竟每次当我们执行一个新的多表查询的时候，都要创建一个新类，这样未免有些麻烦，所以我们还有另一种方法</p></blockquote><p>我们需要做的就是在刚才创建的Account类中添加一个对象，叫做User，如果所示</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="title">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User <span class="function"><span class="title">getUser</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setUser</span>(<span class="params">User user</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">Account</span>(<span class="params">Integer id, Integer uid, Double money</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.uid = uid;</span><br><span class="line">        <span class="built_in">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">Account</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="function"><span class="title">getId</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setId</span>(<span class="params">Integer id</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="function"><span class="title">getUid</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setUid</span>(<span class="params">Integer uid</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.uid = uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="function"><span class="title">getMoney</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setMoney</span>(<span class="params">Double money</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Account&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, uid=&quot;</span> + uid +</span><br><span class="line">                <span class="string">&quot;, money=&quot;</span> + money +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在IAccountUserDao接口文件中添加如下代码</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;AccountUser&gt; findAll2()<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>在IAccountUserDao.xml文件中添加如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.paulniu.mybatis_01.IAccountUserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--简历对应关系--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;accountMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.paulniu.domain.Account&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;aid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;money&quot;</span> <span class="attr">property</span>=<span class="string">&quot;money&quot;</span>/&gt;</span>   <span class="comment">&lt;!-- 它是用于指定从表方的引用实体属性的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;user&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.paulniu.domain.User&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.paulniu.domain.AccountUser&quot;</span>&gt;</span></span><br><span class="line">        select account.*,user.username,user.address from account,user where account.uid = user.id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll2&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.paulniu.domain.Account&quot;</span>&gt;</span></span><br><span class="line">        select u.*,a.id as aid,a.uid,a.money from account a,user u where a.uid =u.id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Mybatis延迟加载策略"><a href="#Mybatis延迟加载策略" class="headerlink" title="Mybatis延迟加载策略"></a>Mybatis延迟加载策略</h2><blockquote><p>延迟加载：在需要使用到数据的时候才会进行加载，不需要使用到数据时不加载数据;<br>好处：先从表单查询，需要时再关联表去关联查询，大大提高数据库性能，因为查询表单需要比关联查询多张标速度款<br>坏处：因为只有当需要用到数据时才会进行数据库查询，这样在大量数据批量次查询时，因为查询工作也会消耗时间，所以可能造成用户等待时间变长</p></blockquote><p>我们可以做一个例子：查询账户信息，并且关联查询用户信息。</p><h2 id="Mybatis缓存"><a href="#Mybatis缓存" class="headerlink" title="Mybatis缓存"></a>Mybatis缓存</h2><p>像大多数持久层框架一样，Mybatis也提供了缓存策略，通过缓存策略来减少数据库查询次数，从而提高性能<br>Mybatis中缓存分为一级缓存，二级缓存</p><blockquote><p>以及缓存是SqlSession级别的缓存，只要SqlSession没有flush或者close，他就一直存在</p></blockquote><p>一级缓存是SqlSession范围的缓存，当调用SqlSession的修改，添加，删除，commit，close等方法时，就会清空一级缓存</p><p>二级缓存是mapper映射级别的缓存，多个SqlSession去操作同一个Mapper映射的sql语句，多个SqlSession可以共用二级缓存，二级缓存是跨SqlSession的</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;MyBatis是一个优秀的基于java的持久层框架，它内部封装了JDBC，使开发者只需要关注sql语句本身，不需要花费精力去处理加载驱动，创建连接，创建statement等繁杂的过程。&lt;/p&gt;</summary>
    
    
    
    
    <category term="JavaEE" scheme="http://www.paulniu.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>android奇技淫巧 23 SpannableStringBuilder</title>
    <link href="http://www.paulniu.com/2019/11/20/android-tools-23/"/>
    <id>http://www.paulniu.com/2019/11/20/android-tools-23/</id>
    <published>2019-11-20T12:38:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近一段时间一直在做聊天部分的内容，这部分中，让我对SpannableStringBuilder这个类有了一些新的认识，自己也总结了一下他的用法，记录下来，方便以后查阅</p><span id="more"></span><blockquote><p>SpannableString和SpannableStringBuilder的关系类似于String和StringBuilder。前者不可变，后者可变</p></blockquote><p>功能在于给遗传普通的字符串加上颜色，大小，背景等样式，以及一些点击事件<br><img src="/assets/tools/tools-span-01.png" alt="SpannableStringBuilder的例子"></p><p>这里我们会发现其实就是一个简单的TextView.那么我们其实可以使用Html.fromHtml()的方法设置颜色，背景等样式。但是如果我们查看了Html.formHtml()方法的源码，就会发现，其实它的里面还是用SpannableStringBuilder实现的,如下</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public Spanned convert<span class="literal">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        mReader.set<span class="constructor">ContentHandler(<span class="params">this</span>)</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mReader.parse(<span class="keyword">new</span> <span class="constructor">InputSource(<span class="params">new</span> StringReader(<span class="params">mSource</span>)</span>));</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            <span class="comment">// We are reading from a string. There should not be IO problems.</span></span><br><span class="line">            throw <span class="keyword">new</span> <span class="constructor">RuntimeException(<span class="params">e</span>)</span>;</span><br><span class="line">        &#125; catch (SAXException e) &#123;</span><br><span class="line">            <span class="comment">// TagSoup doesn&#x27;t throw parse exceptions.</span></span><br><span class="line">            throw <span class="keyword">new</span> <span class="constructor">RuntimeException(<span class="params">e</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Fix flags and range for paragraph-type markup.</span></span><br><span class="line">        Object<span class="literal">[]</span> obj = mSpannableStringBuilder.get<span class="constructor">Spans(0, <span class="params">mSpannableStringBuilder</span>.<span class="params">length</span>()</span>, <span class="module-access"><span class="module"><span class="identifier">ParagraphStyle</span>.</span></span><span class="keyword">class</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; obj.length; i++) &#123;</span><br><span class="line">            <span class="built_in">int</span> start = mSpannableStringBuilder.get<span class="constructor">SpanStart(<span class="params">obj</span>[<span class="params">i</span>])</span>;</span><br><span class="line">            <span class="built_in">int</span> <span class="keyword">end</span> = mSpannableStringBuilder.get<span class="constructor">SpanEnd(<span class="params">obj</span>[<span class="params">i</span>])</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If the last line of the range is blank, back off by one.</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">end</span> - <span class="number">2</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mSpannableStringBuilder.<span class="built_in">char</span><span class="constructor">At(<span class="params">end</span> - 1)</span><span class="operator"> == </span><span class="character">&#x27;\n&#x27;</span><span class="operator"> &amp;&amp;</span></span><br><span class="line"><span class="operator">                    </span>mSpannableStringBuilder.<span class="built_in">char</span><span class="constructor">At(<span class="params">end</span> - 2)</span><span class="operator"> == </span><span class="character">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">end</span>--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">end</span><span class="operator"> == </span>start) &#123;</span><br><span class="line">                mSpannableStringBuilder.remove<span class="constructor">Span(<span class="params">obj</span>[<span class="params">i</span>])</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mSpannableStringBuilder.set<span class="constructor">Span(<span class="params">obj</span>[<span class="params">i</span>], <span class="params">start</span>, <span class="params">end</span>, Spannable.SPAN_PARAGRAPH)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return mSpannableStringBuilder;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上面是截取的Html类中关于数据解析的方法源码，这里我们会发现，我们频繁的使用了mSpannableStringBuilder这个对象，其实这个对象就是SpannableStringBuilder对象。所以说我们还是需要将SpannableStringBuilder和SpannableStringBuilder详细学习的。</p><h2 id="SpannableString"><a href="#SpannableString" class="headerlink" title="SpannableString"></a>SpannableString</h2><p>这里先看一个小例子</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SpannableString ss = <span class="keyword">new</span> <span class="constructor">SpannableString(<span class="string">&quot;这是测试内容简单的文字&quot;</span>)</span>;</span><br><span class="line">ForegroundColorSpan colorSpan = <span class="keyword">new</span> <span class="constructor">ForegroundColorSpan(Color.RED)</span>;</span><br><span class="line">ss.set<span class="constructor">Span(<span class="params">colorSpan</span>,0,5,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)</span>;</span><br><span class="line">tv.set<span class="constructor">Text(<span class="params">ss</span>)</span>;</span><br></pre></td></tr></table></figure><p>这个方法和SpannableStringBuilder类似，只做简单介绍，不做过多解释</p><h2 id="SpannableStringBuilder"><a href="#SpannableStringBuilder" class="headerlink" title="SpannableStringBuilder"></a>SpannableStringBuilder</h2><p>我们先来看一下SpannableStringBuilder的类的声明</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This is the class for text whose content and markup can both be changed.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">SpannableStringBuilder</span> <span class="symbol">implements</span> <span class="symbol">CharSequence, <span class="symbol">GetChars</span>, <span class="symbol">Spannable</span>, <span class="symbol">Editable</span>,</span></span><br><span class="line"><span class="symbol">        <span class="symbol">Appendable</span>, <span class="symbol">GraphicsOperations</span></span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> static String TAG = <span class="string">&quot;SpannableStringBuilder&quot;</span>;</span><br></pre></td></tr></table></figure><p>这里需要注意，CharSequence和Spannable，继承自Spannable，赋予了它给文本设置样式的基础功能，实现接口CharSequence则代表他能在很多地方使用，比如TextView的setText方法</p><p>在源码中有两个比较重要的方法</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 该方法将文本添加到SpannableStringBuilder中，和StringBuild的append方法类似</span><br><span class="line"><span class="built_in">public</span> SpannableStringBuilder append(Charsequence <span class="type">text</span>)</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> setSpan(<span class="keyword">Object</span> what,<span class="type">int</span> <span class="keyword">start</span>,<span class="type">int</span> <span class="keyword">end</span>,<span class="type">int</span> flags)</span><br></pre></td></tr></table></figure><p>关键是setSpan方法，这个方法的参数如下</p><ol><li>what:各种span，不同的Span对应不同的样式，具体如下<ul><li>ForegroundColorSpan：设置文本前景色(文本颜色)</li><li>BackgroundColorSpan:设置文本背景色</li><li>AbsoluteSizeSpan:设置绝对的文字大小，px为单位</li><li>ClickableSpan:为文字添加点击事件(类似于微信朋友圈评论用户中的用户昵称或者@用户,在小例子中会介绍@的方式)</li><li>ImageSpan:文本添加图片，最近一段时间一直是在做跟这个相关的</li><li>RelativeSizeSpan：设置相对文字的大小，为倍数，相对于其他文字的大小</li><li>StrikethroughSpan：设置添加删除线</li><li>SubscriptSpan:设置下标文字</li><li>SuperscriptSpan：设置上标文字</li><li>URLSpan：文字设置超链接</li><li>UnderlineSpan：设置下划线</li></ul></li><li>start：样式开始生效的实际位置，包括该位置</li><li>end:样式结束的位置，不包括该位置</li><li>flags：这个常量传入标志，一般有四个值<ul><li>Spannable.SPAN_EXCLUSIVE_INCLUSIVE：在Span前面输入的字符不应用Span的效果，在后面输入的字符应用Span的效果</li><li>Spannable.SPAN_INCLUSIVE_EXCLUSIVE：在Span前面输入的字符应用Span效果，在后面输入的字符不应用Span效果</li><li>Spannable.SPAN_INCUJSIVE_INCLUSIVE:在Span前后输入的字符都要应用Span的效果</li><li>Spannable.SPAN_EXCLUSIVE_EXCLUSIVE:在Span前后输入的字符都不应用Span效果</li></ul></li></ol><p>文字叙述比较难理解，我们来看一下图，这里只针对输入框<br><img src="/assets/tools/tools-spanstring-01.png" alt="原始样式"></p><h2 id="ForegroundColorSpan"><a href="#ForegroundColorSpan" class="headerlink" title="ForegroundColorSpan"></a>ForegroundColorSpan</h2><p>使用的方式如下</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> ForgegroundColorActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void on<span class="constructor">Create(@Nullable Bundle <span class="params">savedInstanceState</span>)</span> &#123;</span><br><span class="line">        super.on<span class="constructor">Create(<span class="params">savedInstanceState</span>)</span>;</span><br><span class="line">        set<span class="constructor">ContentView(R.<span class="params">layout</span>.<span class="params">activity_foreground_color</span>)</span>;</span><br><span class="line"></span><br><span class="line">        TextView tvColor = find<span class="constructor">ViewById(R.<span class="params">id</span>.<span class="params">tvColor</span>)</span>;</span><br><span class="line">        SpannableStringBuilder sb = <span class="keyword">new</span> <span class="constructor">SpannableStringBuilder()</span>;</span><br><span class="line">        sb.append(<span class="string">&quot;测试字体颜色&quot;</span>);</span><br><span class="line">        ForegroundColorSpan redSpan = <span class="keyword">new</span> <span class="constructor">ForegroundColorSpan(Color.RED)</span>;</span><br><span class="line">        sb.set<span class="constructor">Span(<span class="params">redSpan</span>,0,2, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)</span>;</span><br><span class="line"></span><br><span class="line">        ForegroundColorSpan greenSpan = <span class="keyword">new</span> <span class="constructor">ForegroundColorSpan(Color.GREEN)</span>;</span><br><span class="line">        sb.set<span class="constructor">Span(<span class="params">greenSpan</span>,2,4,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)</span>;</span><br><span class="line"></span><br><span class="line">        ForegroundColorSpan blueSpan = <span class="keyword">new</span> <span class="constructor">ForegroundColorSpan(Color.BLUE)</span>;</span><br><span class="line">        sb.set<span class="constructor">Span(<span class="params">blueSpan</span>,4,6,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)</span>;</span><br><span class="line"></span><br><span class="line">        tvColor.set<span class="constructor">Text(<span class="params">sb</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下所示：<br><img src="/assets/tools/tools-spanstring-03.png" alt="颜色字体"></p><h2 id="ImageSpan"><a href="#ImageSpan" class="headerlink" title="ImageSpan"></a>ImageSpan</h2><p>文字添加一个图片。我们都知道可以在TextView中通过drawableLeft等操作添加一个图片，但是这样的图片有时候不符合我们的要求，比如我们希望将图片放在文字的末尾(注意是文字的末尾)<br>看一下例子</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> ImageSpanActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void on<span class="constructor">Create(@Nullable Bundle <span class="params">savedInstanceState</span>)</span> &#123;</span><br><span class="line">        super.on<span class="constructor">Create(<span class="params">savedInstanceState</span>)</span>;</span><br><span class="line">        set<span class="constructor">ContentView(R.<span class="params">layout</span>.<span class="params">activity_imagespan</span>)</span>;</span><br><span class="line">        TextView tvImage = find<span class="constructor">ViewById(R.<span class="params">id</span>.<span class="params">tvImage</span>)</span>;</span><br><span class="line"></span><br><span class="line">        SpannableStringBuilder sb = <span class="keyword">new</span> <span class="constructor">SpannableStringBuilder()</span>;</span><br><span class="line">        String ss = <span class="string">&quot;这是测试文字a&quot;</span>;</span><br><span class="line">        sb.append(ss);</span><br><span class="line">        ImageSpan span = <span class="keyword">new</span> <span class="constructor">ImageSpan(<span class="params">this</span>, R.<span class="params">drawable</span>.<span class="params">aliwx_s001</span>)</span>;</span><br><span class="line">        sb.set<span class="constructor">Span(<span class="params">span</span>, <span class="params">ss</span>.<span class="params">length</span>()</span> - <span class="number">1</span>, ss.length<span class="literal">()</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">        tvImage.set<span class="constructor">Text(<span class="params">sb</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下效果图<br><img src="/assets/tools/tools-spanstring-04.png" alt="图片字体"></p><p>OK,能够显示图片到textview中了，但是目测好像图片的大小比较大，怎么才能够让图片的大小和文字的大小想接近内，好吧，先看一下代码<br>这里我们需要写一个类，继承自ImageSpan类，并且在类中重写getSize方法重新绘制图片大小，重写onDraw方法，重新绘制图片</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResizeImageSpan</span> <span class="title">extends</span> <span class="title">ImageSpan</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResizeImageSpan</span><span class="params">(Context context, <span class="keyword">int</span> res)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(context, res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="function">Override</span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">(Paint paint, CharSequence text, <span class="keyword">int</span> start, <span class="keyword">int</span> end, Paint.FontMetricsInt fm)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取默认的drawable对象</span></span><br><span class="line">            Drawable drawable = <span class="built_in">getDrawable</span>();</span><br><span class="line">            <span class="comment">// 默认drawable所占有的矩形空间</span></span><br><span class="line">            Rect rect = drawable.<span class="built_in">getBounds</span>();</span><br><span class="line">            <span class="comment">// 判断当前尺寸大小</span></span><br><span class="line">            <span class="keyword">if</span> (fm != null) &#123;</span><br><span class="line">                Paint.FontMetricsInt fmPaint = paint.<span class="built_in">getFontMetricsInt</span>();</span><br><span class="line">                <span class="keyword">int</span> fontHeight = fmPaint.bottom - fmPaint.top;</span><br><span class="line">                <span class="keyword">int</span> drHeight = rect.bottom - rect.top;</span><br><span class="line">                <span class="keyword">int</span> top = drHeight / <span class="number">2</span> - fontHeight / <span class="number">4</span>;</span><br><span class="line">                <span class="keyword">int</span> bottom = drHeight / <span class="number">2</span> + fontHeight / <span class="number">4</span>;</span><br><span class="line">                <span class="comment">// 设置尺寸</span></span><br><span class="line">                fm.ascent = -bottom;</span><br><span class="line">                fm.top = -bottom;</span><br><span class="line">                fm.bottom = top;</span><br><span class="line">                fm.descent = top;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> rect.right;</span><br><span class="line">        &#125; <span class="built_in"><span class="keyword">catch</span></span> (Exception ex) &#123;</span><br><span class="line">            ex.<span class="built_in">printStackTrace</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="function">Override</span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas, CharSequence text, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">float</span> x, <span class="keyword">int</span> top, <span class="keyword">int</span> y, <span class="keyword">int</span> bottom, Paint paint)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Drawable b = <span class="built_in">getDrawable</span>();</span><br><span class="line">            Paint.FontMetricsInt fm = paint.<span class="built_in">getFontMetricsInt</span>();</span><br><span class="line">            <span class="keyword">int</span> transY = (y + fm.descent + y + fm.ascent) / <span class="number">2</span> - b.<span class="built_in">getBounds</span>().bottom / <span class="number">2</span>;</span><br><span class="line">            canvas.<span class="built_in">save</span>();</span><br><span class="line">            canvas.<span class="built_in">translate</span>(x, transY);</span><br><span class="line">            b.<span class="built_in">draw</span>(canvas);</span><br><span class="line">            canvas.<span class="built_in">restore</span>();</span><br><span class="line">        &#125; <span class="built_in"><span class="keyword">catch</span></span> (Exception ex) &#123;</span><br><span class="line">            ex.<span class="built_in">printStackTrace</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且当我们调用的时候，不再使用上面的简单调用，而是使用如下的方式</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SpannableStringBuilder sb = <span class="keyword">new</span> <span class="constructor">SpannableStringBuilder()</span>;</span><br><span class="line">        String ss = <span class="string">&quot;这是测试文字a&quot;</span>;</span><br><span class="line">        sb.append(ss);</span><br><span class="line">        Bitmap bitmap = <span class="module-access"><span class="module"><span class="identifier">BitmapFactory</span>.</span></span>decode<span class="constructor">Resource(<span class="params">getResources</span>()</span>,<span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>drawable.aliwx_s001);</span><br><span class="line">        Drawable drawable = <span class="keyword">new</span> <span class="constructor">BitmapDrawable(<span class="params">bitmap</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (drawable != null)&#123;</span><br><span class="line">            drawable.set<span class="constructor">Bounds(0,0,<span class="params">drawable</span>.<span class="params">getIntrinsicWidth</span>()</span>,drawable.get<span class="constructor">IntrinsicHeight()</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ResizeImageSpan span = <span class="keyword">new</span> <span class="constructor">ResizeImageSpan(<span class="params">drawable</span>)</span>;</span><br><span class="line">        sb.set<span class="constructor">Span(<span class="params">span</span>, <span class="params">ss</span>.<span class="params">length</span>()</span> - <span class="number">1</span>, ss.length<span class="literal">()</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">        tvImage.set<span class="constructor">Text(<span class="params">sb</span>)</span>;</span><br></pre></td></tr></table></figure><p>优化图片大小<br><img src="/assets/tools/tools-spanstring-05.png" alt="图片字体"></p><h2 id="ClickableSpan"><a href="#ClickableSpan" class="headerlink" title="ClickableSpan"></a>ClickableSpan</h2><p>可以点击的文字</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> ClickableSpanActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void on<span class="constructor">Create(@Nullable Bundle <span class="params">savedInstanceState</span>)</span> &#123;</span><br><span class="line">        super.on<span class="constructor">Create(<span class="params">savedInstanceState</span>)</span>;</span><br><span class="line">        set<span class="constructor">ContentView(R.<span class="params">layout</span>.<span class="params">activity_clickable</span>)</span>;</span><br><span class="line"></span><br><span class="line">        TextView textView = find<span class="constructor">ViewById(R.<span class="params">id</span>.<span class="params">tvClick</span>)</span>;</span><br><span class="line"></span><br><span class="line">        SpannableStringBuilder sb = <span class="keyword">new</span> <span class="constructor">SpannableStringBuilder()</span>;</span><br><span class="line">        String ss = <span class="string">&quot;这是测试文字&quot;</span>;</span><br><span class="line">        sb.append(ss);</span><br><span class="line">        ClickableSpan span = <span class="keyword">new</span> <span class="constructor">ClickableSpan()</span> &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void on<span class="constructor">Click(View <span class="params">widget</span>)</span> &#123;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">Toast</span>.</span></span>make<span class="constructor">Text(ClickableSpanActivity.<span class="params">this</span>, <span class="string">&quot;点击了文字&quot;</span>, Toast.LENGTH_LONG)</span>.show<span class="literal">()</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        sb.set<span class="constructor">Span(<span class="params">span</span>, <span class="params">sb</span>.<span class="params">length</span>()</span> - <span class="number">2</span>, sb.length<span class="literal">()</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line"></span><br><span class="line">        ForegroundColorSpan colorSpan = <span class="keyword">new</span> <span class="constructor">ForegroundColorSpan(Color.RED)</span>;</span><br><span class="line">        sb.set<span class="constructor">Span(<span class="params">colorSpan</span>, <span class="params">sb</span>.<span class="params">length</span>()</span> - <span class="number">2</span>, sb.length<span class="literal">()</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line"></span><br><span class="line">        textView.set<span class="constructor">Text(<span class="params">sb</span>)</span>;</span><br><span class="line">        textView.set<span class="constructor">MovementMethod(LinkMovementMethod.<span class="params">getInstance</span>()</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下所示<br><img src="/assets/tools/tools-spanstring-06.gif" alt="点击文字"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.jianshu.com/p/f004300c6920">强大的SpannableStringBuilder</a><br><a href="https://juejin.im/post/5b927af16fb9a05d2b6d9918">SpannableString和SpannableStringBuilder的使用</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近一段时间一直在做聊天部分的内容，这部分中，让我对SpannableStringBuilder这个类有了一些新的认识，自己也总结了一下他的用法，记录下来，方便以后查阅&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>android奇技淫巧 22 Viewpager小功能</title>
    <link href="http://www.paulniu.com/2019/11/18/android-tools-22/"/>
    <id>http://www.paulniu.com/2019/11/18/android-tools-22/</id>
    <published>2019-11-18T12:38:10.000Z</published>
    <updated>2021-06-21T09:33:24.820Z</updated>
    
    <content type="html"><![CDATA[<p>最近一段时间，公司在赶项目，各种需求也是层出不穷。自己在实现一个viewpager的作用滑动的时候，有一个功能竟然自己不知道该如何实现。先来看一下UI</p><span id="more"></span><p><img src="/assets/tools/tools-viewpager-01.png" alt="UI图"></p><p>这里面我们会发现，在viewpager的数量较多时，可以实现左右滑动效果，并且，可以有一定的预览功能。其次，如果页面中只有一个，那么就要求宽度和屏幕宽度一致</p><p><img src="/assets/tools/tools-viewpager-02.png" alt="UI图2"></p><p>而且需要注意的是，在右侧，是需要从最右侧屏幕出来的。</p><p>我的实现方法如下所示</p><h4 id="逻辑代码"><a href="#逻辑代码" class="headerlink" title="逻辑代码"></a>逻辑代码</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TODO 设置假数据</span></span><br><span class="line">        final List&lt;String&gt; joinGroups = <span class="keyword">new</span> ArrayList&lt;&gt;<span class="literal">()</span>;</span><br><span class="line">        joinGroups.add(<span class="string">&quot;邀请1&quot;</span>);</span><br><span class="line">        joinGroups.add(<span class="string">&quot;邀请2&quot;</span>);</span><br><span class="line">        vpPubTabMessage.set<span class="constructor">PageMargin(LibUtility.<span class="params">dp2px</span>(10)</span>); <span class="comment">//显示viewpager间距</span></span><br><span class="line">        vpPubTabMessage.set<span class="constructor">Adapter(<span class="params">new</span> PagerAdapter()</span> &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public <span class="built_in">int</span> get<span class="constructor">Count()</span> &#123;</span><br><span class="line">                return joinGroups.size<span class="literal">()</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public boolean is<span class="constructor">ViewFromObject(View <span class="params">view</span>, Object <span class="params">object</span>)</span> &#123;</span><br><span class="line">                return view<span class="operator"> == </span><span class="keyword">object</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public Object instantiate<span class="constructor">Item(ViewGroup <span class="params">container</span>, <span class="params">int</span> <span class="params">position</span>)</span> &#123;</span><br><span class="line">                View childView = <span class="module-access"><span class="module"><span class="identifier">LayoutInflater</span>.</span></span>from(container.get<span class="constructor">Context()</span>).inflate(<span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>layout.view_invite_join_group_item, null, <span class="literal">false</span>);</span><br><span class="line">                RoundedImageView groupHeader = childView.find<span class="constructor">ViewById(R.<span class="params">id</span>.<span class="params">rivInviteJoinGroupHeader</span>)</span>;</span><br><span class="line">                TextView groupName = childView.find<span class="constructor">ViewById(R.<span class="params">id</span>.<span class="params">tvInviteJoinGroupName</span>)</span>;</span><br><span class="line">                TextView groupMsg = childView.find<span class="constructor">ViewById(R.<span class="params">id</span>.<span class="params">tvInviteJoinGroupMsg</span>)</span>;</span><br><span class="line">                TextView groupJoin = childView.find<span class="constructor">ViewById(R.<span class="params">id</span>.<span class="params">tvInviteJoinGroupJoin</span>)</span>;</span><br><span class="line">                View leftView = childView.find<span class="constructor">ViewById(R.<span class="params">id</span>.<span class="params">viewLeft</span>)</span>;</span><br><span class="line">                View rightView = childView.find<span class="constructor">ViewById(R.<span class="params">id</span>.<span class="params">viewRight</span>)</span>;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">UtilitySecurity</span>.</span></span>reset<span class="constructor">Visibility(<span class="params">leftView</span>, <span class="params">position</span> <span class="operator">==</span> 0)</span>;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">UtilitySecurity</span>.</span></span>reset<span class="constructor">Visibility(<span class="params">rightView</span>, <span class="params">position</span> <span class="operator">==</span> <span class="params">getCount</span>()</span> - <span class="number">1</span>);</span><br><span class="line">                <span class="comment">// 设置群头像</span></span><br><span class="line"><span class="comment">//                UtilitySecurity.setBackground(groupHeader, ContextCompat.getDrawable(getActivity(), bgImages[position]));</span></span><br><span class="line">                <span class="comment">// 设置群名称和消息</span></span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">UtilitySecurity</span>.</span></span>set<span class="constructor">Text(<span class="params">groupName</span>, <span class="params">joinGroups</span>.<span class="params">get</span>(<span class="params">position</span>)</span>);</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">UtilitySecurity</span>.</span></span>set<span class="constructor">Text(<span class="params">groupMsg</span>, <span class="params">joinGroups</span>.<span class="params">get</span>(<span class="params">position</span>)</span>);</span><br><span class="line">                childView.set<span class="constructor">OnClickListener(<span class="params">new</span> View.OnClickListener()</span> &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void on<span class="constructor">Click(View <span class="params">v</span>)</span> &#123;</span><br><span class="line">                        <span class="comment">// 设置整个view的点击事件，跳转到群聊待确认页面</span></span><br><span class="line">                        Intent intent = <span class="module-access"><span class="module"><span class="identifier">ChatGroupConfirmActivity</span>.</span></span>get<span class="constructor">Intent(<span class="params">getContext</span>()</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">                        start<span class="constructor">Activity(<span class="params">intent</span>)</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                container.add<span class="constructor">View(<span class="params">childView</span>)</span>;</span><br><span class="line">                return childView;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void destroy<span class="constructor">Item(@NonNull ViewGroup <span class="params">container</span>, <span class="params">int</span> <span class="params">position</span>, @NonNull Object <span class="params">object</span>)</span> &#123;</span><br><span class="line">                container.remove<span class="constructor">View((View)</span> <span class="keyword">object</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public <span class="built_in">float</span> get<span class="constructor">PageWidth(<span class="params">int</span> <span class="params">position</span>)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (get<span class="constructor">Count()</span><span class="operator"> == </span><span class="number">1</span>) &#123;</span><br><span class="line">                    return super.get<span class="constructor">PageWidth(<span class="params">position</span>)</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    return <span class="number">0.84</span>f;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h4 id="布局文件"><a href="#布局文件" class="headerlink" title="布局文件"></a>布局文件</h4><p>view_invite_join_group_item.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;@color/_ebeff2&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/viewLeft&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@drawable/shape_7_white&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:paddingLeft</span>=<span class="string">&quot;8dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:paddingTop</span>=<span class="string">&quot;17dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:paddingRight</span>=<span class="string">&quot;17dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:paddingBottom</span>=<span class="string">&quot;13dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">com.renrui.libraries.widget.RoundedImageView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/rivInviteJoinGroupHeader&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;52dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;52dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_vertical&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:src</span>=<span class="string">&quot;@mipmap/ic_avatar_default&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginStart</span>=<span class="string">&quot;8dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">&quot;@+id/tvInviteJoinGroupName&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_alignParentStart</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_centerVertical</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:text</span>=<span class="string">&quot;开发蹦迪小分队&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textColor</span>=<span class="string">&quot;@color/gray_3333&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textSize</span>=<span class="string">&quot;16sp&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textStyle</span>=<span class="string">&quot;bold&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">&quot;@+id/tvInviteJoinGroupJoin&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_alignParentEnd</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:background</span>=<span class="string">&quot;@drawable/bg_corner_big_border_red&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:paddingLeft</span>=<span class="string">&quot;15dp&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:paddingTop</span>=<span class="string">&quot;4dp&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:paddingRight</span>=<span class="string">&quot;15dp&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:paddingBottom</span>=<span class="string">&quot;4dp&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:text</span>=<span class="string">&quot;进入看看&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textColor</span>=<span class="string">&quot;#f15a5f&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/tvInviteJoinGroupMsg&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;12dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:maxLines</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:singleLine</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;Hi，你来了。这里或许有你未来并肩作战的同事。实名备注，文明用语&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/gray_9999&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;14sp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/viewRight&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中viewpager所在的布局文件如下所示</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.v4.view.ViewPager</span><br><span class="line">        android:<span class="attribute">id</span>=<span class="string">&quot;@+id/vpPubTabMessage&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:<span class="attribute">layout_height</span>=<span class="string">&quot;110dp&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>这个部分的内容比较简单，就不做过多介绍</p><p>其实这些代码我们都会写，但是有时候就是老忘，每次都要重新再去找相关的资料。记录下来，方便自己以后借鉴</p><p>2021年06月21日17:33:13 补充</p><h3 id="Viewpager2的使用"><a href="#Viewpager2的使用" class="headerlink" title="Viewpager2的使用"></a>Viewpager2的使用</h3>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近一段时间，公司在赶项目，各种需求也是层出不穷。自己在实现一个viewpager的作用滑动的时候，有一个功能竟然自己不知道该如何实现。先来看一下UI&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>拥抱Python（十五） 小例子--格式化文件中的字符串</title>
    <link href="http://www.paulniu.com/2019/11/14/python-15/"/>
    <id>http://www.paulniu.com/2019/11/14/python-15/</id>
    <published>2019-11-14T14:06:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>昨天公司的同事问我会不会python语言，帮他写一个脚本，然后可以将文本中的数据转换成另外一种格式，并且生成新的文件。我想自己学习python语言也有一段时间了，但是却从来没有能够应用到实际中，这是一个机会，于是便应承下来了。然后自己发现，不管你觉得你的基础知识学习的如何，在没有应用到实际之前，都不要夸下海口，或者自以为是。因为能够将一个语言，解决实际的问题，这才是我们真正需要做的事情。</p><span id="more"></span><p>下面就将具体需要做的事情做一下总结：<br>需要的是将一个文件夹中所有的文本文件中的字符串，转换成响应的特殊格式<br>原有的数据格式</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="built_in">type</span>:dislikeJob,jobID:ILDivIuNu369Y3Uo,jobName:文职培训岗绝不加班丨无责<span class="number">6.8</span>K丨入职<span class="number">6</span>险一金,<span class="keyword">tag</span><span class="variable">s:</span>薪资不适合,conten<span class="variable">t:</span>测试一下,createTime:<span class="number">1572263526664</span>&#125;</span><br></pre></td></tr></table></figure><p>最终解析的数据结果</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">dislikeJob</span>ILDivIuNu<span class="number">369</span>Y<span class="number">3</span>Uo文职培训岗绝不加班丨无责<span class="number">6</span>.<span class="number">8</span>K丨入职<span class="number">6</span>险一金薪资不适合测试一下<span class="number">157226352666</span></span><br></pre></td></tr></table></figure><p>中间使用tab键</p><p>代码：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"># conding=utf8</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">def formatValue(<span class="built_in">line</span>):</span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    start = <span class="keyword">int</span>(<span class="built_in">line</span>.<span class="keyword">find</span>(<span class="string">&quot;type&quot;</span>) + <span class="number">5</span>)</span><br><span class="line">    end = <span class="keyword">int</span>(<span class="built_in">line</span>.<span class="keyword">find</span>(<span class="string">&quot;jobID&quot;</span>) - <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">type</span> = <span class="built_in">line</span>[<span class="keyword">star</span><span class="variable">t:end</span>]</span><br><span class="line">    start = <span class="keyword">int</span>(<span class="built_in">line</span>.<span class="keyword">find</span>(<span class="string">&quot;jobID&quot;</span>) + <span class="number">6</span>)</span><br><span class="line">    end = <span class="keyword">int</span>(<span class="built_in">line</span>.<span class="keyword">find</span>(<span class="string">&quot;jobName&quot;</span>) - <span class="number">1</span>)</span><br><span class="line">    jobID = <span class="built_in">line</span>[<span class="keyword">star</span><span class="variable">t:end</span>]</span><br><span class="line">    start = <span class="keyword">int</span>(<span class="built_in">line</span>.<span class="keyword">find</span>(<span class="string">&quot;jobName&quot;</span>) + <span class="number">8</span>)</span><br><span class="line">    end = <span class="keyword">int</span>(<span class="built_in">line</span>.<span class="keyword">find</span>(<span class="string">&quot;tags&quot;</span>) - <span class="number">1</span>)</span><br><span class="line">    jobName = <span class="built_in">line</span>[<span class="keyword">star</span><span class="variable">t:end</span>]</span><br><span class="line">    start = <span class="keyword">int</span>(<span class="built_in">line</span>.<span class="keyword">find</span>(<span class="string">&quot;tags&quot;</span>) + <span class="number">5</span>)</span><br><span class="line">    end = <span class="keyword">int</span>(<span class="built_in">line</span>.<span class="keyword">find</span>(<span class="string">&quot;content&quot;</span>) - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">tags</span> = <span class="built_in">line</span>[<span class="keyword">star</span><span class="variable">t:end</span>]</span><br><span class="line">    start = <span class="keyword">int</span>(<span class="built_in">line</span>.<span class="keyword">find</span>(<span class="string">&quot;content&quot;</span>) + <span class="number">8</span>)</span><br><span class="line">    end = <span class="keyword">int</span>(<span class="built_in">line</span>.<span class="keyword">find</span>(<span class="string">&quot;createTime&quot;</span>) - <span class="number">1</span>)</span><br><span class="line">    content = <span class="built_in">line</span>[<span class="keyword">star</span><span class="variable">t:end</span>]</span><br><span class="line">    start = <span class="keyword">int</span>(<span class="built_in">line</span>.<span class="keyword">find</span>(<span class="string">&quot;createTime&quot;</span>) + <span class="number">11</span>)</span><br><span class="line">    end = <span class="keyword">int</span>(<span class="built_in">len</span>(<span class="built_in">line</span>) - <span class="number">2</span>)</span><br><span class="line">    createTime = <span class="built_in">line</span>[<span class="keyword">star</span><span class="variable">t:end</span>]</span><br><span class="line">    result = <span class="built_in">type</span> + <span class="string">&#x27;\t&#x27;</span> + jobID + <span class="string">&#x27;\t&#x27;</span> + jobName + <span class="string">&#x27;\t&#x27;</span> + <span class="keyword">tags</span> + <span class="string">&#x27;\t&#x27;</span> + content + <span class="string">&#x27;\t&#x27;</span> + createTime</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"># 修改需要遍历的文件夹目录</span><br><span class="line">g = os.walk(<span class="string">&quot;D:\\files\\001&quot;</span>)</span><br><span class="line"># 创建一个新目录用来存放输出结果</span><br><span class="line">outRoot = os.path.<span class="built_in">exists</span>(<span class="string">&quot;D:\\outputfiles&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not outRoo<span class="variable">t:</span></span><br><span class="line">    # 如果新目录不存在，则创建新目录</span><br><span class="line">    os.<span class="built_in">mkdir</span>(<span class="string">&quot;D:\\outputfiles&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> path, dir_list, file_list in <span class="variable">g:</span></span><br><span class="line">    <span class="keyword">for</span> file_name in file_lis<span class="variable">t:</span></span><br><span class="line">        # 判断文件夹在目标目录中是否存在</span><br><span class="line">        <span class="keyword">file</span> = <span class="keyword">open</span>(os.path.<span class="keyword">join</span>(path, file_name), encoding=<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line">        <span class="built_in">line</span> = <span class="keyword">file</span>.readline()</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">line</span>:</span><br><span class="line">            # 此处<span class="built_in">line</span>就是每一行所代表的的内容</span><br><span class="line">            # result最后返回的数据，需要写入到新的文件中</span><br><span class="line">            result = formatValue(<span class="built_in">line</span>)</span><br><span class="line">            # 需要数据写入到新的文件中</span><br><span class="line">            # 生成新的文件名称</span><br><span class="line">            outNewFileName = <span class="string">&quot;survery-&quot;</span> + file_name + <span class="string">&quot;.txt&quot;</span></span><br><span class="line">            newFile = <span class="keyword">open</span>(<span class="string">&quot;D:\\outputfiles&quot;</span> + <span class="string">&quot;\\&quot; + outNewFileName, &quot;</span><span class="keyword">a</span><span class="comment">&quot;,encoding=&#x27;utf-8&#x27;)</span></span><br><span class="line">            newFile.writelines(result)</span><br><span class="line">            newFile.<span class="keyword">write</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">            <span class="built_in">line</span> = <span class="keyword">file</span>.readline()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;昨天公司的同事问我会不会python语言，帮他写一个脚本，然后可以将文本中的数据转换成另外一种格式，并且生成新的文件。我想自己学习python语言也有一段时间了，但是却从来没有能够应用到实际中，这是一个机会，于是便应承下来了。然后自己发现，不管你觉得你的基础知识学习的如何，在没有应用到实际之前，都不要夸下海口，或者自以为是。因为能够将一个语言，解决实际的问题，这才是我们真正需要做的事情。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="http://www.paulniu.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE 08 阿里云服务器的搭建</title>
    <link href="http://www.paulniu.com/2019/10/31/JavaEE-08-ALiService/"/>
    <id>http://www.paulniu.com/2019/10/31/JavaEE-08-ALiService/</id>
    <published>2019-10-31T15:01:51.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>趁着马上双十一，阿里云服务器大降价，将自己一直心心向往的与服务器买了回来，不管怎么说，总算是万里长征第一步。先说一下自己的云主机的配置</p><span id="more"></span><ul><li>地域：华北2(北京)</li><li>实例规格:ecs.t5-lc 1m2.small</li><li>CPU:1核</li><li>内存:2G</li><li>操作系统:CentOS 7.3 64位</li><li>当前使用带宽:1Mbps</li><li>实例类型:I/O优化</li></ul><p>买完之后，因为我是要进行java开发的，所以需要完成一些基本的配置，而且我还想把自己的博客系统移植到与服务器上，所以，有必要去做一下这个配置，下面就是我的配置步骤。</p><h1 id="SSH登录"><a href="#SSH登录" class="headerlink" title="SSH登录"></a>SSH登录</h1><p>有了服务器之后，需要登陆，那么如何登录呢？这里我在网上找到一个比较简单的方法</p><h3 id="本地生成SSH公钥"><a href="#本地生成SSH公钥" class="headerlink" title="本地生成SSH公钥"></a>本地生成SSH公钥</h3><p>首先我们需要确认自己是否已经拥有秘钥，默认情况下，用户的SSH秘钥存储在~/.ssh目录下(不管是MacOS还是Windows系统).进入该目录并列出其中的内容，可以快速确认自己是否拥有秘钥</p><p><img src="/assets/JavaEE/ecs_01.png" alt="Windows下判断是否拥有秘钥"></p><p>判断是否有密钥的依据就是寻找一对以id_dsa或id_rsa命名的文件，其中一个带有.pub扩展名。.pub文件就是我们的公钥，另一个则是私钥。如果找不到，或者根本没有.ssh目录，则我们可以运行一下代码完成ssh的创建</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line"><span class="comment"># 输入 enter 键</span></span><br><span class="line">Enter file in which to save the key (/Users/laohan/.ssh/id_rsa):</span><br><span class="line">Created directory &#x27;/Users/laohan/.ssh&#x27;.</span><br><span class="line"><span class="comment"># 两次输入密码</span></span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in /Users/laohan/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /Users/laohan/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:XhI9aeGsVJklGyUTvNu+6ABzOZdZL2+y5aMOVQa+ZvI laohan<span class="meta">@bogon</span></span><br><span class="line">The key&#x27;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|<span class="string">         .O*+    </span>|</span><br><span class="line">|<span class="string">         =+X .   </span>|</span><br><span class="line">|<span class="string">        o O.o o  </span>|</span><br><span class="line">|<span class="string">       . =.= =   </span>|</span><br><span class="line">|<span class="string">      o S *o* .  </span>|</span><br><span class="line">|<span class="string">       = =.*.o   </span>|</span><br><span class="line">|<span class="string">        o ..E +  </span>|</span><br><span class="line">|<span class="string">         . o.*.  </span>|</span><br><span class="line">|<span class="string">         .o.=o.. </span>|</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure><p>首先ssh-keygen会确认密钥的存储位置(默认是.ssh/id_rsa)，然后他会让我们重复输入一个密码两次，如果不想输入，直接点击回车键即可</p><p>查看公钥的代码如下所示</p><p><img src="/assets/JavaEE/ecs_02.png" alt="windows查看公钥的代码"></p><p>这样我们就获取了自己电脑上的公钥。</p><p>接下来我们需要先用默认方法连接服务器，连接完成之后。需要对与服务做一些基本的配置，如下所示</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">cd</span></span><br><span class="line">$ mkdir <span class="string">.ssh</span> &amp;&amp; chmod 700 <span class="string">.ssh</span></span><br><span class="line">$ touch <span class="string">.ssh/authorized_keys</span> &amp;&amp; chmod 600 <span class="string">.ssh/authorized_keys</span></span><br></pre></td></tr></table></figure><p>接下来我们需要将刚才在我们自己电脑上生成的ssh公钥添加到authorized_keys文件中</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="string">.ssh/authorized_keys</span></span><br></pre></td></tr></table></figure><p><img src="/assets/JavaEE/ecs_03.png" alt="阿里云服务器将本地的SSH公钥添加到authorized_keys文件中"></p><p>这样的话我们就完成了配置工作，当我们想要在自己的电脑上再次登录远程服务器的时候，可以直接在终端中输入</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh <span class="symbol">root@</span>ip地址</span><br></pre></td></tr></table></figure><p>这样的方式完成登录远程服务器。</p><h4 id="几个可以优化的部分"><a href="#几个可以优化的部分" class="headerlink" title="几个可以优化的部分"></a>几个可以优化的部分</h4><p>在将本地的ssh公钥添加到服务器的authorized_keys文件中后，本机登录远程服务器报错，信息如下所示</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ ssh root<span class="comment">@47.93.236.188</span></span><br><span class="line"><span class="comment">@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span></span><br><span class="line"><span class="comment">@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @</span></span><br><span class="line"><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@</span></span><br><span class="line"><span class="comment">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</span></span><br><span class="line"><span class="comment">Someone could be eavesdropping on you right now (man-in-the-middle attack)!</span></span><br><span class="line"><span class="comment">It is also possible that a host key has just been changed.</span></span><br><span class="line"><span class="comment">The fingerprint for the ECDSA key sent by the remote host is</span></span><br><span class="line"><span class="comment">SHA256:HDjXJvu0VYXWF+SKMZjSGn4FQmg/+w6eV9ljJvIXpx0.</span></span><br><span class="line"><span class="comment">Please contact your system administrator.</span></span><br><span class="line"><span class="comment">Add correct host key in /Users/wangdong/.ssh/known_hosts to get rid of this message.</span></span><br><span class="line"><span class="comment">Offending ECDSA key in /Users/wangdong/.ssh/known_hosts:46</span></span><br><span class="line"><span class="comment">ECDSA host key for 47.93.236.188 has changed and you have requested strict checking.</span></span><br><span class="line"><span class="comment">Host key verification failed.</span></span><br></pre></td></tr></table></figure><p>如果你也出现了这样的问题，那大致是因为你重置过服务器，不管是重装系统还是格式化磁盘，遇到这样的问题解决也和简单，只需要在自己的本地电脑上运行如下的内容即可</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">ssh</span>-keygen -R <span class="built_in">ip</span>地址</span><br></pre></td></tr></table></figure><p>这样问题就能解决了。</p><blockquote><p>如果想要多台电脑登录，那么我们可以设置在服务端的authorized_keys中添加新电脑的SSH公钥即可</p></blockquote><p>在我们连接远程服务器的时候，会发现我们还是要输入服务器的ip地址，但是这个ip地址有时候并不是很好记，我们可以使用别的方式,也就是别名的方式</p><p>在~/.ssh/文件架下面创建一个新的文件config，名字就叫config，建议创建的时候最好使用git brash的方式，这样更加符合linux的命令方式。如下所示创建了一个config文件</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch ~<span class="regexp">/.ssh/</span>config</span><br></pre></td></tr></table></figure><p>编辑config文件</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~<span class="regexp">/.ssh/</span>config</span><br></pre></td></tr></table></figure><p>编辑的内容如下所示</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host paulniu</span><br><span class="line">HostName <span class="number">47.93</span>.<span class="number">236.188</span></span><br><span class="line">Port <span class="number">22</span></span><br><span class="line">User root</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>每个字段的含义如下所示<br>Host: 是服务器别名，方便记忆。<br>User：服务器用户名，如 root<br>Hostname：服务器 IP 地址<br>Port：服务器端口，如 22<br>IdentityFile：ssh 秘钥文件本地位置</p><p>之后登陆的时候直接使用如下方式即可</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ssh paulniu</span></span><br></pre></td></tr></table></figure><p><img src="/assets/JavaEE/ecs_04.png" alt="windows使用别名登陆成功"></p><p>MacOS的配置方式和Window的配置方式是一样的</p><h1 id="配置JDK"><a href="#配置JDK" class="headerlink" title="配置JDK"></a>配置JDK</h1><p>配置jdk其实就是配置java环境<br>首先我是在自己的windows电脑上下载好了jdk文件，然后通过xftp将jdk文件上传到了服务器的根目录下/root/packages/。</p><p>我的想法是将Java安装到/usr/local/java/这个文件夹中，然后再去配置jdk的环境变量。</p><p>首先我需要将jdk文件复制到/usr/local/java/文件夹中<br><img src="/assets/JavaEE/ecs_05.png" alt="将jdk文件复制到java的文件中"></p><p>将jdk文件解压</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">tar</span> -zxvf jdk-<span class="number">8</span>u<span class="number">231</span>-linux-x<span class="number">64</span>.tar.gz</span><br></pre></td></tr></table></figure><p>配置环境变量<br>通过输入:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>profile</span><br></pre></td></tr></table></figure><p>在其中设置java环境变量</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=<span class="regexp">/usr/</span>local<span class="regexp">/java/</span>jdk1.<span class="number">8.0</span>_231</span><br><span class="line">export JRE_HOME=<span class="regexp">/usr/</span>local<span class="regexp">/java/</span>jdk1.<span class="number">8.0</span>_231/jre</span><br><span class="line">export CLASSPATH=.:<span class="variable">$JAVA_HOME</span><span class="regexp">/lib:$JRE_HOME/</span>lib:<span class="variable">$CLASSPATH</span></span><br><span class="line">export PATH=<span class="variable">$JAVA_HOME</span><span class="regexp">/bin:$JRE_HOME/</span>bin:<span class="variable">$JAVA_HOME</span>:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>设置完成之后保存执行</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">source</span> <span class="regexp">/etc/</span>profile</span><br></pre></td></tr></table></figure><p>之后再终端中输入</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -<span class="built_in">version</span></span><br></pre></td></tr></table></figure><p>输出如下所示内容<br><img src="/assets/JavaEE/ecs_06.png" alt="配置完成java环境"></p><h1 id="Tomcat环境搭建"><a href="#Tomcat环境搭建" class="headerlink" title="Tomcat环境搭建"></a>Tomcat环境搭建</h1><p>将从tomcat官网下载的tomcat文件复制到/usr/local/tomcat文件夹中<br>将压缩包解压到当前文件夹下<br><img src="/assets/JavaEE/ecs_07.png" alt="解压tomcat文件"><br>进入/usr/local/tomcat/apache-tomcat-8.5.47目录下的bin文件夹，写入配置文件</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vim</span> setclasspath.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure><p>在文件的最后写入如下内容</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">export</span> JAVA_HOME=/usr/local/java/jdk<span class="number">1</span>.<span class="number">8</span>.<span class="number">0</span>_<span class="number">231</span></span><br><span class="line"><span class="attribute">export</span> JRE_HOME=/usr/local/java/jdk<span class="number">1</span>.<span class="number">8</span>.<span class="number">0</span>_<span class="number">231</span>/jre</span><br></pre></td></tr></table></figure><p>完成之后推出编辑，执行/usr/local/tomcat/apach-tomcat-8.5.47/bin/.startup.sh，如果出现如下所示的内容，说明tomcat启动成功<br><img src="/assets/JavaEE/ecs_08.png" alt="启动tomcat"></p><p>这时候如果我们在浏览器中输入我们的服务器地址后面加上8080的端口，就能看到如下所示的内容<br><img src="/assets/JavaEE/" alt="启动tomcat成功"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;趁着马上双十一，阿里云服务器大降价，将自己一直心心向往的与服务器买了回来，不管怎么说，总算是万里长征第一步。先说一下自己的云主机的配置&lt;/p&gt;</summary>
    
    
    
    
    <category term="JavaEE" scheme="http://www.paulniu.com/tags/JavaEE/"/>
    
    <category term="阿里云" scheme="http://www.paulniu.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE 07 写一个小项目作为总结</title>
    <link href="http://www.paulniu.com/2019/10/30/JavaEE-07-Summary/"/>
    <id>http://www.paulniu.com/2019/10/30/JavaEE-07-Summary/</id>
    <published>2019-10-30T15:01:51.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>学习有一段时间了，这段时间积攒下来一些东西，希望借助一个JavaWeb的小项目，把之前学习过的内容好好的整理一下，查漏补缺</p><span id="more"></span><p>准备写一个在线二手书买卖平台。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;学习有一段时间了，这段时间积攒下来一些东西，希望借助一个JavaWeb的小项目，把之前学习过的内容好好的整理一下，查漏补缺&lt;/p&gt;</summary>
    
    
    
    
    <category term="JavaEE" scheme="http://www.paulniu.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE 06 Maven</title>
    <link href="http://www.paulniu.com/2019/10/29/JavaEE-06-Maven/"/>
    <id>http://www.paulniu.com/2019/10/29/JavaEE-06-Maven/</id>
    <published>2019-10-29T14:53:06.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Maven依赖</p><span id="more"></span><h1 id="Maven介绍"><a href="#Maven介绍" class="headerlink" title="Maven介绍"></a>Maven介绍</h1><p>Maven是一个项目管理工具，它包含了一个项目对象模型POM，一组标准集合，一个项目生命周期，一个依赖管理系统，和用来运行定义在生命周期阶段中插件目标的逻辑</p><h1 id="项目的一键构建"><a href="#项目的一键构建" class="headerlink" title="项目的一键构建"></a>项目的一键构建</h1><p>我们的项目往往要经历编译，测试，运行，打包，安装，部署等一系列的过程，构建指的是项目从编译，测试，运行，打包，安装，部署整个过程都交给Maven进行管理，这个过程就是构建<br>一键构建其实就是我们使用一个Maven命令就可以完成所有的工作。</p><blockquote><p>关于Maven的安装</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;Maven依赖&lt;/p&gt;</summary>
    
    
    
    
    <category term="JavaEE" scheme="http://www.paulniu.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>android奇技淫巧 21 code review</title>
    <link href="http://www.paulniu.com/2019/10/23/android-tools-21/"/>
    <id>http://www.paulniu.com/2019/10/23/android-tools-21/</id>
    <published>2019-10-23T13:55:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Code Review</p><span id="more"></span><h1 id="什么是Code-Review"><a href="#什么是Code-Review" class="headerlink" title="什么是Code Review"></a>什么是Code Review</h1><p>代码评审是指在软件开发过程中，通过对元代码进行系统检查的过程。通常目的是查找系统缺陷，确保软件总体质量和提升开发者自身水平。Code Review是轻量级代码精神，相对于正式代码评审，轻量级代码评审所需要的各种成本要明显的低，如果流程正确，他可以起到更加积极的效果。</p><h1 id="具体Review事项"><a href="#具体Review事项" class="headerlink" title="具体Review事项"></a>具体Review事项</h1><ul><li>注意命名规范(类名，成员变量，接口等)</li><li>Android Lint检查，借助Android Studio工具未完成</li><li>检查资源文件使用情况，strings.xml,dimen.xml等使用情况，图片资源大小，命名，点9格式使用问题</li><li>代码格式化等问题</li></ul><h1 id="代码Review的好处"><a href="#代码Review的好处" class="headerlink" title="代码Review的好处"></a>代码Review的好处</h1><ol><li>通过代码Review可以提高产品代码的质量</li><li>通过代码Review可以增强团队成员之间的沟通</li><li>通过代码Review能够有效的提前发现代码中存在的缺陷和BUG，降低线上出现事故的概率</li><li>通过代码Review提供团队成员的编程能力，不同成员之间对功能设计思路的重构可以很好的提高团队成员 的跟人专业技能</li></ol><h1 id="代码Review实践"><a href="#代码Review实践" class="headerlink" title="代码Review实践"></a>代码Review实践</h1><h2 id="主要流程"><a href="#主要流程" class="headerlink" title="主要流程"></a>主要流程</h2><ol><li>每个人介绍各自的功能需求，实现的主要逻辑，核心代码</li><li>团队成员提出问题，其他实现思路等</li><li>讨论不同实现思路的方式以及优劣势</li></ol><h1 id="Android代码Lint检查"><a href="#Android代码Lint检查" class="headerlink" title="Android代码Lint检查"></a>Android代码Lint检查</h1><p>除了组员之间的代码review，我们还可以通过Lint检查。<br>通过Android studio编译工具执行Lint检查</p><ol><li><p>执行 android studio –&gt;  Analyze  –&gt; Inspect code操作<br><img src="/assets/tools/tools-review-01.png" alt="打开代码检查框"></p></li><li><p>在代码检查框中选择为整个工程执行lint检查？还是整个module或者是当前的源文件执行lint检查，这里为了简单起见，我们只为当前的源代码文件执行lint检查，然后执行确认即可<br><img src="/assets/tools/tools-review-02.png"></p></li><li><p>接下来就可以在我们的Android studio查看lint检查结果了<br><img src="/assets/tools/tools-review-03.png"></p></li></ol><p>可以发现我们lint检查之后出现了许多检查结果，其中在uuelectricrenter项目下存在着多条检查信息，下面我们就分析一下检测结果。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Code Review&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE 05 JavaWeb基础(MySql)</title>
    <link href="http://www.paulniu.com/2019/10/21/JavaEE-05-Sql/"/>
    <id>http://www.paulniu.com/2019/10/21/JavaEE-05-Sql/</id>
    <published>2019-10-21T13:37:03.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>常用数据库操作语言</p><span id="more"></span><h1 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h1><ol><li><p>创建数据库</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> dbname;</span><br></pre></td></tr></table></figure></li><li><p>创建数据库判断不存在，再创建</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> dbname; </span><br></pre></td></tr></table></figure></li><li><p>创建数据库并制定字符集</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> dbname <span class="keyword">default</span> <span class="type">character</span> <span class="keyword">set</span> gbk;</span><br></pre></td></tr></table></figure></li><li><p>查看所有的数据库</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases<span class="comment">;</span></span><br></pre></td></tr></table></figure></li><li><p>查看某个数据库的定义信息</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">database</span> dbname;</span><br></pre></td></tr></table></figure></li><li><p>修改数据库默认字符集</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> dbname <span class="keyword">default</span> <span class="type">character</span> <span class="keyword">set</span> gbk;</span><br></pre></td></tr></table></figure></li><li><p>删除数据库</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> dbname;</span><br></pre></td></tr></table></figure></li><li><p>查看正在使用的数据库</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">select</span> <span class="title">database</span>(<span class="params"></span>)</span>;</span><br></pre></td></tr></table></figure></li><li><p>使用/切换数据库</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use dbname<span class="comment">;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h1><p>常用数据类型</p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>int</td><td>整型</td></tr><tr><td>double</td><td>浮点型</td></tr><tr><td>varchar</td><td>字符串型</td></tr><tr><td>date</td><td>日期类型，格式为yyyy-MM-dd，只有年月日，没有时分秒</td></tr></tbody></table><ol><li><p>创建表</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student&#123;</span><br><span class="line">    id <span class="type">int</span>,<span class="comment">---整数</span></span><br><span class="line">    <span class="type">name</span> <span class="type">varchar</span>(<span class="number">20</span>),<span class="comment">---字符串</span></span><br><span class="line">    birthday <span class="type">date</span>,<span class="comment">---生日，日期</span></span><br><span class="line">    insert_time <span class="type">timestamp</span> <span class="comment">--插入时间，如果没有给他赋值则为null，默认使用当前系统时间来填充</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查询某个数据库中所有表</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure></li><li><p>查看表结构</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc student<span class="comment">;</span></span><br></pre></td></tr></table></figure></li><li><p>查看创建表的SQL语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> student;</span><br></pre></td></tr></table></figure></li><li><p>删除表</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="built_in">table</span> student;</span><br></pre></td></tr></table></figure></li><li><p>判断表是否存在，如果存在则删除表</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> table <span class="keyword">if</span> <span class="keyword">exists</span> <span class="symbol">`student`</span>;</span><br></pre></td></tr></table></figure></li><li><p>添加表列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">add</span> age <span class="type">int</span>;</span><br></pre></td></tr></table></figure></li><li><p>修改列类型</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student modify <span class="type">name</span> <span class="type">varchar</span>(<span class="number">100</span>);</span><br></pre></td></tr></table></figure></li><li><p>修改列名</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student change <span class="type">name</span> stuName <span class="type">varchar</span>(<span class="number">50</span>);</span><br></pre></td></tr></table></figure></li><li><p>删除列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">drop</span> stuName;</span><br></pre></td></tr></table></figure></li><li><p>修改表名</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">rename</span> <span class="keyword">table</span> student <span class="keyword">to</span> students;</span><br></pre></td></tr></table></figure></li><li><p>修改字符集</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students <span class="type">character</span> <span class="keyword">set</span> utf8;</span><br></pre></td></tr></table></figure></li></ol><h1 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h1><ol><li>插入数据<br>所有字段名都写出来<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students (id,stuName,age,birthday,create_time) <span class="keyword">values</span> (<span class="number">1001</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="number">18</span>,生日,<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>不写字段名<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students <span class="keyword">values</span> (<span class="number">1002</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="number">18</span>,生日,<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>插入部分数据<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students (id,stuName,age) <span class="keyword">values</span> (<span class="number">1001</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="number">18</span>);</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>insert注意事项<br>插入数据应与字段的数据类型相同<br>数据的大小应在列的规定范围内，如不能讲一个长度为80的字符创加入到长度是40的列中<br>在values中列出数据位置必须与被加入的列的排列位置相对应。<br>字符和日期类型数据窨井盖该包含在单引号中，MySql也可以使用双引号作为分隔符<br>不指定列或使用null，表示插入空值</p></blockquote><ol start="2"><li><p>更新表数据<br>不带条件的修改数据</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update students <span class="builtin-name">set</span> <span class="attribute">name</span>=<span class="string">&#x27;无名氏&#x27;</span>;</span><br></pre></td></tr></table></figure><p>带条件修改数据</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> students <span class="keyword">set</span> <span class="type">name</span>=<span class="string">&#x27;王五&#x27;</span> <span class="keyword">where</span> id = <span class="number">1001</span>;</span><br></pre></td></tr></table></figure></li><li><p>删除表数据<br>不带条件的删除</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> students;</span><br></pre></td></tr></table></figure><p>带条件的删除</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete <span class="keyword">from</span> students <span class="keyword">where</span> <span class="built_in">id</span>=<span class="number">1002</span>;</span><br></pre></td></tr></table></figure><p>使用truncate删除表记录(相当于将当前表删除， 然后在创建一个新表)</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> students;</span><br></pre></td></tr></table></figure></li></ol><h1 id="查询表数据"><a href="#查询表数据" class="headerlink" title="查询表数据"></a>查询表数据</h1><p>语法：<br>        select<br>            字段列表<br>        from<br>            表名列表<br>        where<br>            条件列表<br>        group by<br>            分组字段<br>        having<br>            分组之后的条件<br>        order by<br>            排序<br>        limit<br>            分页限定</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;常用数据库操作语言&lt;/p&gt;</summary>
    
    
    
    
    <category term="JavaEE" scheme="http://www.paulniu.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE 04 JavaWeb基础(JSP)</title>
    <link href="http://www.paulniu.com/2019/10/16/JavaEE-04-JSP/"/>
    <id>http://www.paulniu.com/2019/10/16/JavaEE-04-JSP/</id>
    <published>2019-10-16T13:37:03.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>JSP 全称Java Server Page，是一种动态网页开发技术。它是用JSP标签在HTML网页中插入Java代码，标签通常是以&lt;%开头以%&gt;结束</p><span id="more"></span><p>JSP是一种JavaServlet，主要用于实现JavaWeb应用程序的用户界面部分。我们可以通过HTML，XHTML，XML和嵌入的Java代码操作和命令完成JSP代码的书写。<br>JSP通过网页表单获取用户输入的信息，访问数据库和其他资源，然后动态的创建网页<br>JSP标签有多种功能，比如访问数据库，记录用户选择信息，访问JavaBean组件，还可以在不同网页之间传递数据和共享信息</p><h2 id="JSP结构"><a href="#JSP结构" class="headerlink" title="JSP结构"></a>JSP结构</h2><p>网络服务器需要一个JSP引擎，也就是容器来处理JSP，容器负责截获对JSP的请求<br>JSP 容器与 Web 服务器协同合作，为JSP的正常运行提供必要的运行环境和其他服务，并且能够正确识别专属于 JSP 网页的特殊元素。</p><p>下图显示了 JSP 容器和 JSP 文件在 Web 应用中所处的位置。</p><p><img src="/assets/JavaEE/javaweb_18.jpg" alt="JSP结构示意图"></p><h3 id="JSP处理"><a href="#JSP处理" class="headerlink" title="JSP处理"></a>JSP处理</h3><p>以下步骤表明了Web服务器如何通过JSP创建网页</p><ol><li>像往常一下，浏览器发送一个HTTP请求给服务器</li><li>Web服务器辨别出这是一个对JSP页面的请求，并且将该请求传递给JSP引擎，通过使用的URL或者.jsp文件来完成</li><li>JSP引擎从磁盘中载入JSP文件，然后将它转换成Servlet，这种转换只是简单的将所有模板文本改成println()语句输出，并且将所有的JSP元素转化成Java代码</li><li>JSP引擎将Servlet转换成可执行类，并将原始请求传递给Servlet引擎</li><li>Web服务器的某些组件将调用Servlet引擎，并将可执行类载入，执行过程中，Servlet产生HTML格式的输出，并将其内嵌入HTTP response中交给Web服务器</li><li>Web服务器以静态HTML的形式将HTTP response返回到浏览器中</li><li>最终浏览器处理HTTP请求，动态产生HTML</li></ol><h2 id="JSP语法"><a href="#JSP语法" class="headerlink" title="JSP语法"></a>JSP语法</h2><h3 id="脚本程序"><a href="#脚本程序" class="headerlink" title="脚本程序"></a>脚本程序</h3><p>脚本程序可以包含任意量的Java语句，变量，方法或表达式，只要他们在脚本中是有效的。<br>形式可以如下</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="meta">%</span> 代码片段 <span class="meta">%</span>&gt;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">jsp:scriptlet</span>&gt;</span></span><br><span class="line">  代码片段</span><br><span class="line"><span class="tag">&lt;/<span class="name">jsp:scriptlet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>任何文本，HTML标签，JSP元素必须卸载脚本程序的外面</p><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">Hello World!<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="vbscript">&lt;%</span></span><br><span class="line"><span class="vbscript">out.println(<span class="string">&quot;Your IP address is &quot;</span> + <span class="built_in">request</span>.getRemoteAddr());</span></span><br><span class="line"><span class="vbscript">%&gt;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>在使用JSP页面的时候，会出现中文编码的问题，如果我们想要显示中文，可以在JSP文件头部添加如下代码</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@<span class="built_in"> page </span><span class="attribute">language</span>=<span class="string">&quot;java&quot;</span> <span class="attribute">contentType</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> <span class="attribute">pageEncoding</span>=<span class="string">&quot;UTF-8&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><p>JSP的声明<br>一个声明语句可以声明一个或多个变量，方法，供后面的Java代码使用。在JSP文件中，我们必须先声明这些变量和方法，然后才能使用</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%! <span class="keyword">int</span> i = <span class="number">0</span>; %&gt; </span><br><span class="line">&lt;%! <span class="keyword">int</span> a, b, c; %&gt; </span><br><span class="line">&lt;%! Circle a = new Circle(<span class="number">2.0</span>); %&gt; </span><br></pre></td></tr></table></figure><p>JSP表达式<br>一个JSP表达式中包含的脚本语言表达式，先被转换成String，然后插入到表达时出现的地方。<br>由于表达式的值会被转换成String，所我们可以在一个文本杭中使用表达式而不用管它是否是HTML标签<br>表达式元素中可以包含任何符合Java语言规范的表达式，但是不能用分号结束表达式</p><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="vbscript">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span></span><br><span class="line"><span class="vbscript">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">   今天的日期是: </span><span class="vbscript">&lt;%= (<span class="keyword">new</span> java.util.<span class="built_in">Date</span>()).toLocale<span class="built_in">String</span>()%&gt;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span> </span></span><br></pre></td></tr></table></figure><p>JSP注释分为以下几种</p><table><thead><tr><th>语法</th><th>描述</th></tr></thead><tbody><tr><td>&lt;%– 注释内容 –%&gt;</td><td>JSp注释，注释内容不会被发送到浏览器甚至不会被编译</td></tr></tbody></table><p>JSP指令<br>JSP指令用来设置与整个JSP页面相关的属性<br>这里有三种指令标签</p><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>&lt;%@ page … %&gt;</td><td>定义页面中的依赖属性，比如脚本语言，error页面，缓存需求等</td></tr><tr><td>&lt;%@ include … %&gt;</td><td>包好其他文件</td></tr><tr><td>&lt;%@ taglib … %&gt;</td><td>引入标签库的定义，可以是自定义标签</td></tr></tbody></table><p>JSP行为<br>JSP行为标签使用XML语法结构来控制Servlet引擎，它能够懂她插入一个文件，重用JavaBean组件，引导用户去另一个页面，为Jav插件产生英冠的HTML等<br>应为标签只有一种语法格式，而且必须严格遵守XML标准</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">jsp:action_name</span> <span class="attr">attribute</span>=<span class="string">&quot;value&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>行为标签基本上是一些预先定义好的函数，下面是一些可用的JSP行为标签</p><table><thead><tr><th>语法</th><th>描述</th></tr></thead><tbody><tr><td>jsp:include</td><td>用于在当前页面中包含鼎泰或动态资源</td></tr><tr><td>jsp:useBean</td><td>寻找和初始化一个JavaBean组件</td></tr><tr><td>jsp:setProperty</td><td>设置JavaBean组件的值</td></tr><tr><td>jsp:getProperty</td><td>将JavaBean组件的值插入到output中</td></tr><tr><td>jsp:forward</td><td>从一个JSP文件向另一个文件传递一个包含用户请求的request对象</td></tr><tr><td>jsp:plugin</td><td>用于在生成的HTML页面中包含Applet和JavaBean对象</td></tr><tr><td>jsp:element</td><td>动态创建一个XML元素</td></tr><tr><td>jsp:attribute</td><td>定义动态创建的XML元素属性</td></tr><tr><td>jsp:body</td><td>定义动态创建的XML元素的主体</td></tr><tr><td>jsp:text</td><td>用于封装模板数据</td></tr></tbody></table><p>JSP隐含对象<br>JSP支持九个自动定义的变量，如下表所示</p><table><thead><tr><th>对象名称</th><th>描述</th></tr></thead><tbody><tr><td>request</td><td>HttpServletRequest类实例</td></tr><tr><td>response</td><td>HttpServletResponse类实例</td></tr><tr><td>out</td><td>PrintWriter类实例，用于把结果输出至网页上</td></tr><tr><td>session</td><td>HttpSession类实例</td></tr><tr><td>application</td><td>ServletContext类实例，与应用上下文有关</td></tr><tr><td>config</td><td>ServletConfig类实例</td></tr><tr><td>pageContext</td><td>PageContext类实例，提供对JSP页面所有对象以及命名空间的访问</td></tr><tr><td>page</td><td>类似于Java中的this关键字</td></tr><tr><td>Exception</td><td>Exception类对象，代表发生错误的JSP页面中对应的异常对象</td></tr></tbody></table><p>JSP字面量</p><ul><li>布尔值：boolean</li><li>整型：int</li><li>浮点型：float</li><li>字符串：String</li><li>Null：null</li></ul><h3 id="JSP的控制流语句"><a href="#JSP的控制流语句" class="headerlink" title="JSP的控制流语句"></a>JSP的控制流语句</h3><h4 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h4><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">&lt;%</span><span class="perl">@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span></span><br><span class="line"><span class="perl">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span></span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml">&lt;%</span><span class="perl">! <span class="keyword">int</span> day = <span class="number">3</span>; </span><span class="xml">%&gt; </span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>判断语句<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>IF...ELSE 实例<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="perl"> <span class="keyword">if</span> (day == <span class="number">1</span> | day == <span class="number">7</span>) &#123; </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>今天是周末<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="perl"> &#125; <span class="keyword">else</span> &#123; </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>今天不是周末<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="perl"> &#125; </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>switch…case语句</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">&lt;%</span><span class="ruby">@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span></span><br><span class="line"><span class="ruby">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span></span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby">! int day = <span class="number">3</span>; </span><span class="xml">%&gt; </span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>判断语句<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>SWITCH...CASE 实例<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby"> </span></span><br><span class="line"><span class="ruby">switch(day) &#123;</span></span><br><span class="line"><span class="ruby"><span class="keyword">case</span> <span class="number">0</span>:</span></span><br><span class="line"><span class="ruby">   out.println(<span class="string">&quot;星期天&quot;</span>);</span></span><br><span class="line"><span class="ruby">   <span class="keyword">break</span>;</span></span><br><span class="line"><span class="ruby"><span class="keyword">case</span> <span class="number">1</span>:</span></span><br><span class="line"><span class="ruby">   out.println(<span class="string">&quot;星期一&quot;</span>);</span></span><br><span class="line"><span class="ruby">   <span class="keyword">break</span>;</span></span><br><span class="line"><span class="ruby"><span class="keyword">case</span> <span class="number">2</span>:</span></span><br><span class="line"><span class="ruby">   out.println(<span class="string">&quot;星期二&quot;</span>);</span></span><br><span class="line"><span class="ruby">   <span class="keyword">break</span>;</span></span><br><span class="line"><span class="ruby"><span class="keyword">case</span> <span class="number">3</span>:</span></span><br><span class="line"><span class="ruby">   out.println(<span class="string">&quot;星期三&quot;</span>);</span></span><br><span class="line"><span class="ruby">   <span class="keyword">break</span>;</span></span><br><span class="line"><span class="ruby"><span class="keyword">case</span> <span class="number">4</span>:</span></span><br><span class="line"><span class="ruby">   out.println(<span class="string">&quot;星期四&quot;</span>);</span></span><br><span class="line"><span class="ruby">   <span class="keyword">break</span>;</span></span><br><span class="line"><span class="ruby"><span class="keyword">case</span> <span class="number">5</span>:</span></span><br><span class="line"><span class="ruby">   out.println(<span class="string">&quot;星期五&quot;</span>);</span></span><br><span class="line"><span class="ruby">   <span class="keyword">break</span>;</span></span><br><span class="line"><span class="ruby"><span class="symbol">default:</span></span></span><br><span class="line"><span class="ruby">   out.println(<span class="string">&quot;星期六&quot;</span>);</span></span><br><span class="line"><span class="ruby">&#125;</span></span><br><span class="line"><span class="ruby"></span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span> </span></span><br></pre></td></tr></table></figure><h4 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h4> <figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">&lt;%</span><span class="perl">@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span></span><br><span class="line"><span class="perl">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span></span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml">&lt;%</span><span class="perl">! <span class="keyword">int</span> fontSize; </span><span class="xml">%&gt; </span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>循环语句<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>For 循环实例<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="perl"><span class="keyword">for</span> ( fontSize = <span class="number">1</span>; fontSize &lt;= <span class="number">3</span>; fontSize++)&#123; </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;green&quot;</span> <span class="attr">size</span>=<span class="string">&quot;&lt;%=</span></span></span><span class="perl"> fontSize </span><span class="xml"><span class="tag"><span class="string">%&gt;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    循环语句测试</span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="perl">&#125;</span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span> </span></span><br></pre></td></tr></table></figure><h1 id="JSP指令"><a href="#JSP指令" class="headerlink" title="JSP指令"></a>JSP指令</h1><p> JSP指令用来设置整个页面相关的属性，比如网页的编码格式和脚本语言等<br> 语法格式如下：<br> <figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="meta">%</span>@ directive attribute=<span class="string">&quot;value&quot;</span> <span class="meta">%</span>&gt;</span><br></pre></td></tr></table></figure><br> 指令可以有多个属性，他们以键值对的形式存在，并用逗号隔开</p><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>&lt;%@ page …%&gt;</td><td>定义网页依赖属性，比如脚本语言，error页面，缓存请求等</td></tr><tr><td>&lt;%@ include …%&gt;</td><td>包含其它文件</td></tr><tr><td>&lt;%@ taglib …%&gt;</td><td>引入标签库的定义</td></tr></tbody></table><h2 id="Page指令"><a href="#Page指令" class="headerlink" title="Page指令"></a>Page指令</h2><p> Page指令为容器提供当前页面的使用说明，一个JSP页面可以包含多个page指令<br> 属性包括以下内容</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>buffer</td><td>指定out对象使用缓冲区的大小</td></tr><tr><td>autoFlush</td><td>控制out对象的缓冲区</td></tr><tr><td>contentType</td><td>指定当前JSP页面的MIME类型和字符编码</td></tr><tr><td>errorPage</td><td>指定当前JSP页面发生异常时需要转向的错误处理页面</td></tr><tr><td>isErrorPage</td><td>指定当前页面是否可以作为另一个JSP的错误处理页面</td></tr><tr><td>extends</td><td>指定servlet从哪一个类继承</td></tr><tr><td>import</td><td>导入要使用的java类</td></tr><tr><td>info</td><td>定义JSP页面的描述信息</td></tr><tr><td>isThreadSafe</td><td>指定对JSP页面的访问是否为线程安全</td></tr><tr><td>language</td><td>定义JSP页面所使用的脚本语言，默认是Java</td></tr><tr><td>session</td><td>指定JSP页面是否使用session</td></tr><tr><td>isELlgnored</td><td>指定是否执行EL表达式</td></tr><tr><td>isScriptingEnabled</td><td>确定脚本元素能否被使用</td></tr></tbody></table><h2 id="include指令"><a href="#include指令" class="headerlink" title="include指令"></a>include指令</h2><p> JSP可以通过include指令来包含其它文件，被包含的文件可以是JSP页面，HTML页面或者文本文件，包含的文件就好像是JSP文件的一部分，会被同时编译执行</p><h2 id="Tablib指令"><a href="#Tablib指令" class="headerlink" title="Tablib指令"></a>Tablib指令</h2><p> JSP API允许用户自定义标签，一个自定义标签库就是自定义便签的集合<br> Tablib指令引入一个自定义便签合集的定义，包括库路径，自定义标签<br> <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:directive.taglib <span class="attribute">uri</span>=<span class="string">&quot;uri&quot;</span> <span class="attribute">prefix</span>=<span class="string">&quot;prefixOfTag&quot;</span> /&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;JSP 全称Java Server Page，是一种动态网页开发技术。它是用JSP标签在HTML网页中插入Java代码，标签通常是以&amp;lt;%开头以%&amp;gt;结束&lt;/p&gt;</summary>
    
    
    
    
    <category term="JavaEE" scheme="http://www.paulniu.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>android奇技淫巧 20 ProgressBar的使用</title>
    <link href="http://www.paulniu.com/2019/10/14/android-tools-20/"/>
    <id>http://www.paulniu.com/2019/10/14/android-tools-20/</id>
    <published>2019-10-14T13:55:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>android中ProgressBar的使用</p><span id="more"></span><p>ProgressBar是Android下的进度条，也是为数不多的直接继承自View类的空间，直接子类有AbsSeekBar和ContentLoadingProgressBar，其中AbsSeekBar的子类有SeekBar和RatingBar</p><h2 id="ProgressBar的注意"><a href="#ProgressBar的注意" class="headerlink" title="ProgressBar的注意"></a>ProgressBar的注意</h2><ol><li>ProgressBar有两个进度，一个是android:progress,另一个是android:secondaryProgress.后者主要是用来为缓存需要所涉及的，例如我们在播放视频时会有一个缓存的进度条和一个播放进度条。</li><li>ProgressBar分为确定的和不确定的，上面说的播放进度，缓存等就是确定的，相反，不确定的就是不清楚，不确定一个操作需要多长时间来完成，这个时候就需要用的不确定的ProgressBar。这个是由android:indeterminate来控制的，如果设置为true，那么ProgressBar就可能是圆形的滚动条或者水平滚动条，默认情况下，如果是水平进度条，那么就是确定的</li></ol><h3 id="ProgressBar的样式"><a href="#ProgressBar的样式" class="headerlink" title="ProgressBar的样式"></a>ProgressBar的样式</h3><ul><li>Widget.ProgressBar.Horizontal</li><li>Widget.ProgressBar.Small</li><li>Widget.ProgressBar.Large</li><li>Widget.ProgressBar.Inverse</li><li>Widget.ProgressBar.Small.Inverse</li><li>Widget.ProgressBar.Large.Inverse</li></ul><p>使用的时候可以这样</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">style</span>=<span class="string">&quot;@android:style/Widget.ProgressBar.Small&quot;</span></span><br></pre></td></tr></table></figure><p>同样我们可以使用系统的attr的方式</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">style</span>=<span class="string">&quot;?android:attr/progressBarStyle&quot;</span></span><br><span class="line"><span class="attr">style</span>=<span class="string">&quot;?android:attr/progressBarStyleHorizontal&quot;</span></span><br><span class="line"><span class="attr">style</span>=<span class="string">&quot;?android:attr/progressBarStyleInverse&quot;</span></span><br><span class="line"><span class="attr">style</span>=<span class="string">&quot;?android:attr/progressBarStyleLarge&quot;</span></span><br><span class="line"><span class="attr">style</span>=<span class="string">&quot;?android:attr/progressBarStyleLargeInverse&quot;</span></span><br><span class="line"><span class="attr">style</span>=<span class="string">&quot;?android:attr/progressBarStyleSmall&quot;</span></span><br><span class="line"><span class="attr">style</span>=<span class="string">&quot;?android:attr/progressBarStyleSmallInverse&quot;</span></span><br><span class="line"><span class="attr">style</span>=<span class="string">&quot;?android:attr/progressBarStyleSmallTitle&quot;</span></span><br></pre></td></tr></table></figure><h2 id="常见的几种样式"><a href="#常见的几种样式" class="headerlink" title="常见的几种样式"></a>常见的几种样式</h2><p>在布局中设置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">android:progress=<span class="string">&quot;50&quot;</span> <span class="regexp">//</span> 设置第一显示进度</span><br><span class="line">android:secondaryProgress=<span class="string">&quot;80&quot;</span> <span class="regexp">//</span> 设置第二现实进度</span><br><span class="line">androi:indeterminate=<span class="string">&quot;true&quot;</span> <span class="regexp">//</span> 设置是否精确显示，true表示不精确显示进度，false表示精确显示进度</span><br></pre></td></tr></table></figure><p>使用Java代码设置</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setProgress</span><span class="params">(int)</span></span> <span class="comment">// 设置第一进度</span></span><br><span class="line"><span class="function"><span class="title">setSecondaryProgress</span><span class="params">(int)</span></span> <span class="comment">// 设置第二进度</span></span><br><span class="line"><span class="function"><span class="title">getProgress</span><span class="params">()</span></span> <span class="comment">// 获取第一进度</span></span><br><span class="line"><span class="function"><span class="title">getSecondaryProgress</span><span class="params">()</span></span> <span class="comment">// 获取第二进度</span></span><br><span class="line"><span class="function"><span class="title">incrementProgressBy</span><span class="params">(int)</span></span> <span class="comment">// 增加或减少第一进度</span></span><br><span class="line"><span class="function"><span class="title">incrementSecondaryProgressBy</span><span class="params">(int)</span></span> <span class="comment">// 增加或减少第二进度</span></span><br><span class="line"><span class="function"><span class="title">getMax</span><span class="params">()</span></span> <span class="comment">// 获取最大进度</span></span><br></pre></td></tr></table></figure><h4 id="横向progressBarStyleHorizontal"><a href="#横向progressBarStyleHorizontal" class="headerlink" title="横向progressBarStyleHorizontal"></a>横向progressBarStyleHorizontal</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Progress</span><br><span class="line">  <span class="attribute">style</span>=<span class="string">&quot;?android:attr/progressBarStyleHorizontal&quot;</span></span><br><span class="line">  android:<span class="attribute">layout_width</span>=<span class="string">&quot;240dp&quot;</span></span><br><span class="line">  android:<span class="attribute">layout_hegith</span>=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">  android:<span class="attribute">layout_margin_top</span>=<span class="string">&quot;10dp&quot;</span></span><br><span class="line">  android:<span class="attribute">max</span>=<span class="string">&quot;100&quot;</span></span><br><span class="line">  android:<span class="attribute">progress</span>=<span class="string">&quot;50&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p><img src="/assets/tools/progressbar_01.png" alt="横向效果图"></p><h4 id="横向Widget-ProgressBar-Horizontal"><a href="#横向Widget-ProgressBar-Horizontal" class="headerlink" title="横向Widget.ProgressBar.Horizontal"></a>横向Widget.ProgressBar.Horizontal</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;ProgressBar </span><br><span class="line">  <span class="attribute">style</span>=<span class="string">&quot;@android:style/Widget.ProgressBar.Horizontal&quot;</span></span><br><span class="line">  android:<span class="attribute">layout_width</span>=<span class="string">&quot;240&quot;</span></span><br><span class="line">  android:<span class="attribute">layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">  android:<span class="attribute">layout_gravity</span>=<span class="string">&quot;center_horizontal&quot;</span></span><br><span class="line">  android:<span class="attribute">layout_marginTop</span>=<span class="string">&quot;10dp&quot;</span></span><br><span class="line">  android:<span class="attribute">max</span>=<span class="string">&quot;100&quot;</span></span><br><span class="line">  android:<span class="attribute">progress</span>=<span class="string">&quot;50&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p><img src="/assets/tools/progressbar_02.png" alt="横向效果图"></p><h4 id="圆形progressBarStyleLarge"><a href="#圆形progressBarStyleLarge" class="headerlink" title="圆形progressBarStyleLarge"></a>圆形progressBarStyleLarge</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ProgressBar</span><br><span class="line">  android:<span class="attribute">layout_gravity</span>=<span class="string">&quot;center_horizontal&quot;</span></span><br><span class="line">  android:<span class="attribute">layout_marginTop</span>=<span class="string">&quot;10dp&quot;</span></span><br><span class="line">  android:<span class="attribute">id</span>=<span class="string">&quot;@+id/progressBar1&quot;</span></span><br><span class="line">  <span class="attribute">style</span>=<span class="string">&quot;?android:attr/progressBarStyleLarge&quot;</span></span><br><span class="line">  android:<span class="attribute">layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">  android:<span class="attribute">layout_height</span>=<span class="string">&quot;wrap_content&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p><img src="/assets/tools/progressbar_03.png" alt="圆形效果图"></p><h4 id="圆形普通"><a href="#圆形普通" class="headerlink" title="圆形普通"></a>圆形普通</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ProgressBar</span><br><span class="line">  android:<span class="attribute">layout_marginTop</span>=<span class="string">&quot;10dp&quot;</span></span><br><span class="line">  android:<span class="attribute">id</span>=<span class="string">&quot;@+id/progressBar02&quot;</span></span><br><span class="line">  android:<span class="attribute">layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">  android:<span class="attribute">layout_height</span>=<span class="string">&quot;wrap_content&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p><img src="/assets/tools/progressbar_04.png" alt="圆形普通效果图"></p><h4 id="圆形小型"><a href="#圆形小型" class="headerlink" title="圆形小型"></a>圆形小型</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ProgressBar</span><br><span class="line">  android:<span class="attribute">layout_marginTop</span>=<span class="string">&quot;10dp&quot;</span></span><br><span class="line">  android:<span class="attribute">layout_gravity</span>=<span class="string">&quot;center_horizontal&quot;</span></span><br><span class="line">  android:<span class="attribute">id</span>=<span class="string">&quot;@+id/progressBar3&quot;</span></span><br><span class="line">  android:<span class="attribute">layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">  android:<span class="attribute">layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">  <span class="attribute">style</span>=<span class="string">&quot;?android:attr/progressBarStyleSmall&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p><img src="/assets/tools/progressbar_05.png" alt="圆形小型效果图"></p><h2 id="自定义进度条修改进度颜色"><a href="#自定义进度条修改进度颜色" class="headerlink" title="自定义进度条修改进度颜色"></a>自定义进度条修改进度颜色</h2><p>在布局文件中的style属性就是设置进度条样式的</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ProgressBar</span><br><span class="line">  <span class="attribute">style</span>=<span class="string">&quot;?android:attr/progressBarStyleHorizontal&quot;</span></span><br><span class="line">  android:<span class="attribute">layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">  android:<span class="attribute">layout_height</span>=<span class="string">&quot;wrap_content&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p>实际上面的背景文件是位于@android:style/Widget.ProgressBar.Horizontal,即上面的布局可以写成</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ProgressBar</span><br><span class="line">  <span class="attribute">style</span>=<span class="string">&quot;@android:style/Widget.ProgressBar.Horizontal&quot;</span></span><br><span class="line">  android:<span class="attribute">layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">  android:<span class="attribute">layout_height</span>=<span class="string">&quot;wrap_content&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p>两种方式的写法效果是一样的<br>查看系统中的水平进度条风格文件</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;style <span class="built_in">name</span>=<span class="string">&quot;Widget.ProgressBar.Horizontal&quot;</span>&gt;</span><br><span class="line">    &lt;<span class="built_in">item</span> <span class="built_in">name</span>=<span class="string">&quot;indeterminateOnly&quot;</span>&gt;<span class="literal">false</span>&lt;/<span class="built_in">item</span>&gt;</span><br><span class="line">    &lt;<span class="built_in">item</span> <span class="built_in">name</span>=<span class="string">&quot;progressDrawable&quot;</span>&gt;@drawable/progress_horizontal&lt;/<span class="built_in">item</span>&gt;</span><br><span class="line">    &lt;<span class="built_in">item</span> <span class="built_in">name</span>=<span class="string">&quot;indeterminateDrawable&quot;</span>&gt;@drawable/progress_indeterminate_horizontal&lt;/<span class="built_in">item</span>&gt;</span><br><span class="line">    &lt;<span class="built_in">item</span> <span class="built_in">name</span>=<span class="string">&quot;minHeight&quot;</span>&gt;<span class="number">20</span>dip&lt;/<span class="built_in">item</span>&gt;</span><br><span class="line">    &lt;<span class="built_in">item</span> <span class="built_in">name</span>=<span class="string">&quot;maxHeight&quot;</span>&gt;<span class="number">20</span>dip&lt;/<span class="built_in">item</span>&gt;</span><br><span class="line">    &lt;<span class="built_in">item</span> <span class="built_in">name</span>=<span class="string">&quot;mirrorForRtl&quot;</span>&gt;<span class="literal">true</span>&lt;/<span class="built_in">item</span>&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>我们会发现在android:progressDrawable属性是设置进度条背景的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Copyright (C) 2008 The Android Open Source Project</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">     you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">     You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">          http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">     distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">     See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">     limitations under the License.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">layer-list</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">&quot;@android:id/background&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shape</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">&quot;5dip&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">gradient</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:startColor</span>=<span class="string">&quot;#ff9d9e9d&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:centerColor</span>=<span class="string">&quot;#ff5a5d5a&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:centerY</span>=<span class="string">&quot;0.75&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:endColor</span>=<span class="string">&quot;#ff747674&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:angle</span>=<span class="string">&quot;270&quot;</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">&quot;@android:id/secondaryProgress&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">clip</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">shape</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">&quot;5dip&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">gradient</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:startColor</span>=<span class="string">&quot;#80ffd300&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:centerColor</span>=<span class="string">&quot;#80ffb600&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:centerY</span>=<span class="string">&quot;0.75&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:endColor</span>=<span class="string">&quot;#a0ffcb00&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:angle</span>=<span class="string">&quot;270&quot;</span></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">clip</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">&quot;@android:id/progress&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">clip</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">shape</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">&quot;5dip&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">gradient</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:startColor</span>=<span class="string">&quot;#ffffd300&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:centerColor</span>=<span class="string">&quot;#ffffb600&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:centerY</span>=<span class="string">&quot;0.75&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:endColor</span>=<span class="string">&quot;#ffffcb00&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:angle</span>=<span class="string">&quot;270&quot;</span></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">clip</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">layer-list</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里面有三个item标签，分别是进度条，第二进度条，第一进度条背景色。这里我们可以直接将内容复制下来，然后新建一个xml文件，然后修改背景颜色等属性即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">layer-list</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">&quot;@android:id/background&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shape</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">&quot;5dip&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">gradient</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:startColor</span>=<span class="string">&quot;#ffffffff&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:centerColor</span>=<span class="string">&quot;#ffffffff&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:centerY</span>=<span class="string">&quot;0.75&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:endColor</span>=<span class="string">&quot;#ffffffff&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:angle</span>=<span class="string">&quot;270&quot;</span></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">&quot;@android:id/progress&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">clip</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">shape</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">&quot;5dip&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">gradient</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:startColor</span>=<span class="string">&quot;#fff15358&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:centerColor</span>=<span class="string">&quot;#fff15358&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:centerY</span>=<span class="string">&quot;0.75&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:endColor</span>=<span class="string">&quot;#fff15358&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:angle</span>=<span class="string">&quot;270&quot;</span></span></span><br><span class="line"><span class="tag">                    /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">clip</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">layer-list</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用的如下所示</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">&quot;center_horizontal&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ProgressBar</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;@android:style/Widget.ProgressBar.Horizontal&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;200dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_margin_top</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@drawable/bg_progress_color&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:max</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:progress</span>=<span class="string">&quot;50&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;修改背景颜色/进度颜色&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下所示<br><img src="/assets/tools/progressbar_06.png" alt="改变进度条颜色"></p><p>做一个颜色可以渐变的样式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">layer-list</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">&quot;@android:id/background&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shape</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">&quot;360dp&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">&quot;#e7e7e7&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">&quot;@android:id/secondaryProgress&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scale</span> <span class="attr">android:scaleWidth</span>=<span class="string">&quot;100%&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">shape</span> <span class="attr">android:shape</span>=<span class="string">&quot;rectangle&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">&quot;360dp&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">gradient</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:centerColor</span>=<span class="string">&quot;#f9630c&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:endColor</span>=<span class="string">&quot;#f04d52&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:startColor</span>=<span class="string">&quot;#ffa902&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">scale</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layer-list</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用进度条</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">&quot;center_horizontal&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ProgressBar</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;@android:style/Widget.Holo.ProgressBar.Horizontal&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;200dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;20dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_margin_top</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:max</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:progress</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:progressDrawable</span>=<span class="string">&quot;@drawable/bg_progress_colors&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;一个比较好看的样式&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/assets/tools/progressbar_07.png" alt="渐变效果样式"></p><p><a href="https://github.com/niupuyue/blog_demo_android/tree/master/ProgressBarDemo">Github例子</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;android中ProgressBar的使用&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>使用Vultr搭建SSR梯子</title>
    <link href="http://www.paulniu.com/2019/10/08/mytools-01/"/>
    <id>http://www.paulniu.com/2019/10/08/mytools-01/</id>
    <published>2019-10-08T07:17:58.000Z</published>
    <updated>2021-05-18T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近一段时间，因为各种原因导致我的“梯子”暂时无法访问外面的世界。外面的世界很精彩，外面的世界很无奈，没办法，只有将之前的购买的服务器删除掉，然后重写搞一个。这次我就学聪明了，在购买服务器之前，我先在网上找了一下各个云服务器的价格。</p><span id="more"></span><p>其实可供我们选择的服务器还是挺多的，比如阿里云，百度云，腾讯云，京东云等等。反正各个公司提供的服务器由国内的，也有国外的，提供的服务大致相同，不过价格就千差万别。这里给出一张图，这张图也是我借鉴别人的，这里是出处<a href="https://blog.csdn.net/ithomer/article/details/77825664">各大厂商云服务器对比</a><br><img src="/assets/skill/skill_vpn_01.png" alt="云服务器各大厂商价格对比"><br>可能仁者见仁，智者见智。我觉得对于国内的开发者而言，最好还是选择腾讯云，不管是价格上，还是方便服务上，都是最佳之选，好像现在小程序的后台可以直接放在腾讯云服务器上的，棒棒哒。像我就很惨，因为我之前买了阿里的域名，后面如果想买腾讯云服务器，可能会比较麻烦。</p><p>好了好了，跑远了，其实除了上面介绍的几种云服务器之外，我使用的是另外一种<a href="http://www.vultr.com/">vultr</a>。相比较其他的云服务器而言，这个服务器的好处时计时收费，也就是说如果我最近一段时间不需要使用，则可以将服务器停掉，而不会扣钱。对国内外用户都很友好，而且ip地址还行吧，至少在这个时间段，我还能找到一个可用的IP地址，难道是我运气好？相面就将如何利用Vultr搭建SSR的教程记录下来</p><h2 id="创建账号"><a href="#创建账号" class="headerlink" title="创建账号"></a>创建账号</h2><p>首先登陆vultr的<a href="http://www.vultr.com/">官方网站</a>，如下图所示，点击注册按钮</p><p><img src="/assets/skill/skill_vpn_02.png" alt="官方网站注册账号"></p><p>进入到注册账号页面，这里我们需要添加自己的邮箱和密码</p><p><img src="/assets/skill/skill_vpn_03.png" alt="添加邮箱和密码"></p><p>创建完成之后，会向我们注册的邮箱发送一个激活链接，我们登录邮箱，点击链接激活即可。</p><p>这里我们需要充钱了，关于充钱的这一块比较敏感，为了不引起歧义，我就不说如何充钱了，反正充就完了，不充钱肯定没法用。</p><h2 id="创建服务器"><a href="#创建服务器" class="headerlink" title="创建服务器"></a>创建服务器</h2><p>创建完成账号之后，进入到如下的页面<br><img src="/assets/skill/skill_vpn_04.png" alt="首页"></p><p>点击添加服务器按钮，开始添加服务器</p><p>最上面是服务器类型，这里我直接选择默认的类型即可</p><p><img src="/assets/skill/skill_vpn_05.png" alt="选择服务器类型"></p><p>下面是服务器的地址，目前我选择的是芝加哥，其他区域的有一些可以用，有一些用不了，可根据个人喜好，自由选择</p><p><img src="/assets/skill/skill_vpn_06.png" alt="选择服务器地址"></p><p>选择服务器类型，一般都是选择centOS系统，但是这里有一个地方需要注意，网上很多教程中使用的命令都是针对CentOS6的，如果选择了其他的版本，不能保证安装一定成功，反正我一开始使用的是CentOS8，然后自己鼓捣了很长时间都没有完全解决兼容问题，这里建议大家使用CentOS6，那么下面的内容也是根据CentOS6写的</p><p><img src="/assets/skill/skill_vpn_07.png" alt="选择服务器操作系统"></p><p>选择服务器存储，一般情况下，如果不是作为大中型网站后台，直接使用最低版本即可，反正也就是云服务，后面最多会再去使用作为个人博客后台，所以对性能要求没有这么大</p><p><img src="/assets/skill/skill_vpn_08.png" alt="选择服务器存储性能"></p><p>下面的一些操作可有可无，如果感兴趣的，可以去官网查看，这里我直接点击部署按钮</p><p><img src="/assets/skill/skill_vpn_09.png" alt="部署服务器"></p><p>部署完成之后，如果操作正确，就会出现如下的内容，注意，ip地址必须是正确的，如果出现乱码，那么你需要将服务器删除掉重新部署一个，部署的步骤和上面的一样</p><p><img src="/assets/skill/skill_vpn_10.png" alt="部署完成"></p><p>例如：如果出现这样的情况，说明服务器部署不正确，或者说你的电脑不支持ipv6，所以，你要重新创建</p><p><img src="/assets/skill/skill_vpn_11.png" alt="当前电脑不支持ipv6"></p><p>部署完成之后，需要在命令行中测试一下这个服务器是否可用，如果出现下面内容表示服务器部署正常，否则需要删除服务器重新创建</p><p><img src="/assets/skill/skill_vpn_12.png" alt="ping当前服务器地址"></p><h2 id="配置服务器"><a href="#配置服务器" class="headerlink" title="配置服务器"></a>配置服务器</h2><p>我们的服务器部署完成之后，并不代表着我们可以直接使用，如果我们想要使用SSR，那么需要在服务器中安装相应的软件，如何配置服务器？这里我们需要使用特殊的软件，我将软件上传到了百度云盘<br><a href="https://pan.baidu.com/s/1--d8fvDY-fESt8oWolvP_A">辅助工具</a></p><p>这里因为写博客的电脑是windows，只能以XShell为例。将下载好的软件解压之后，找到windows软件，直接双击运行安装即可。安装完成之后，双击图标打开<br>打开之后的内容如下所示，当然如果你是第一次使用，肯定是没有这么多东西的</p><p><img src="/assets/skill/skill_vpn_13.png" alt="XShell初始化页面"></p><p>我们点击新建一个连接</p><p><img src="/assets/skill/skill_vpn_14.png" alt="XShell新建连接"></p><p>这里我们先完成基本配置，如下所示</p><p><img src="/assets/skill/skill_vpn_15.png" alt="XShell新建连接的基本配置"></p><p>选择用户身份验证，添加用户名和密码</p><p><img src="/assets/skill/skill_vpn_16.png" alt="XShell配置用户名和密码"></p><p>用户名一般都是root，密码需要我们登录vultr中的服务器详情页面，去复制</p><p><img src="/assets/skill/skill_vpn_17.png" alt="获取服务器密码"></p><p>填写好用户名和密码之后直接点击”链接”按钮</p><p>在连接成功之后会出现如图所示的弹窗，这个弹窗表示的是我们使用SSH登录的验证信息，直接接受并保存即可</p><p><img src="/assets/skill/skill_vpn_18.png" alt="XShell链接成功1"></p><p>之后如果出现如下所示的内容表示已经连接上远程服务器</p><p><img src="/assets/skill/skill_vpn_19.png" alt="XShell链接成功2"></p><p>紧接着，将下面的代码复制到命令行中，并且执行</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https:<span class="regexp">//</span>freed.ga<span class="regexp">/github/</span>shadowsocksR.sh; bash shadowsocksR.sh</span><br></pre></td></tr></table></figure><p>如果运行报错，可能是没有安装相应的软件，根据提示安装即可</p><p>如果没有报错，则会出现如下所示的内容.表示需要我们填写当我们使用SS连接时候的密码</p><p><img src="/assets/skill/skill_vpn_20.png" alt="XShell设置SS连接密码"></p><p>点击回车键，出现如下所示内容，表示我们需要填写使用哪个端口作为SSR的输出</p><p><img src="/assets/skill/skill_vpn_21.png" alt="XShell设置端口"></p><p>点击回车键，出现如下所示内容,之后点击任意按键开始安装</p><p><img src="/assets/skill/skill_vpn_22.png" alt="XShell开始安装"></p><p>后面的安装过程大概持续十分钟左右，如果在这个过程中没有出现任何错误，表示我们的配置已经完成了，并且会出现如下图所示的内容</p><p><img src="/assets/skill/skill_vpn_23.png" alt="XShell安装完成"></p><p>这里我们使用的方式是别人写好的脚本，后面如果有机会我也会写一个自己的脚本，尽量兼容更多的版本</p><p>到目前为止，基本配置已经完成，我们可以开开心心的打开SS开始外面的世界了。但是这时候的网速会比较差，因为我们没有对SSR进行优化，优化的操作其实就是安装锐速的过程</p><h2 id="安装锐速"><a href="#安装锐速" class="headerlink" title="安装锐速"></a>安装锐速</h2><p>锐速的安装并不是每个服务器都能安装的，像CentOS8好像就不能安装。至于能不能安装，我们需要自己动手检查一下</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">uname -r</span></span><br></pre></td></tr></table></figure><p>回车后输出当前系统内核版本。主要分三种情况：</p><p>1、结果以 2 开头，例如 2.6.32-696.18.7.el6.x86_64。</p><p>这种输出结果说明我们的服务器为 CentOS6 x64 系统。</p><p>2、结果以 3 开头，例如 3.10.0-693.11.6.el7.x86_64。</p><p>这种输出结果说明我们的服务器为 CentOS7 x64 系统。</p><p>3、结果以 4 开头，例如 4.12.10-1.el7.elrepo.x86_64。</p><p>这种输出结果说明我们的服务器已经安装 Google BBR 拥塞控制算法，此时已经无法继续安装锐速。</p><h4 id="CentOS6-安装锐速"><a href="#CentOS6-安装锐速" class="headerlink" title="CentOS6 安装锐速"></a>CentOS6 安装锐速</h4><p>使用这段话</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">wget</span> --no-check-certificate -O appex.sh https://raw.githubusercontent.com/hombo<span class="number">125</span>/doubi/master/appex.sh &amp;&amp; bash appex.sh install &#x27;<span class="number">2</span>.<span class="number">6</span>.<span class="number">32</span>-<span class="number">642</span>.el<span class="number">6</span>.x<span class="number">86</span>_<span class="number">64</span>&#x27;</span><br></pre></td></tr></table></figure><p>点击回车键，出现如下所示内容<br><img src="/assets/skill/skill_vpn_24.png" alt="锐速准备开始安装"></p><p>之后会要求我们赋予权限，如图中红色方框的内容</p><p><img src="/assets/skill/skill_vpn_25.png" alt="锐速权限赋予"></p><p>完成之后如果出现如下所示图片，表名安装成功</p><p><img src="/assets/skill/skill_vpn_26.png" alt="锐速按钮成功"></p><h4 id="CentOS7-安装锐速"><a href="#CentOS7-安装锐速" class="headerlink" title="CentOS7 安装锐速"></a>CentOS7 安装锐速</h4><p>若确定服务器为 CentOS7 x64 系统则看这一步。</p><p>按照下图提示，我们继续复制下列命令：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -O rskernel.sh https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/hombo125/</span>doubi<span class="regexp">/master/</span>rskernel.sh &amp;&amp; bash rskernel.sh</span><br></pre></td></tr></table></figure><p><img src="/assets/skill/skill_vpn_27.png"></p><p>等待内核更换完毕后系统会自动重启并断开连接。然后重新连接，执行下面命令。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install net-tools -y &amp;&amp; wget --no-check-certificate -O appex.sh https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/0oVicero0/</span>serverSpeeder_Install<span class="regexp">/master/</span>appex.sh &amp;&amp; bash appex.sh install</span><br></pre></td></tr></table></figure><p>回车<br><img src="/assets/skill/skill_vpn_28.png"></p><p>按回车键继续，系统会自动安装锐速，同时会先后要求我们设置锐速的三项信息。按照下图提示，我们每次都直接回车继续即可。</p><p><img src="/assets/skill/skill_vpn_29.png"></p><p>出现下面信息，就说明锐速安装成功了</p><p><img src="/assets/skill/skill_vpn_30.png"></p><h2 id="影梭配置"><a href="#影梭配置" class="headerlink" title="影梭配置"></a>影梭配置</h2><h3 id="android手机"><a href="#android手机" class="headerlink" title="android手机"></a>android手机</h3><p><img src="/assets/skill/skill_vpn_31.png" alt="android手机配置影梭"></p><h3 id="Windows电脑"><a href="#Windows电脑" class="headerlink" title="Windows电脑"></a>Windows电脑</h3><p><img src="/assets/skill/skill_vpn_32.png" alt="Windows电脑配置"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.baishitou.cn/1524.html">用VPS搭建SSR服务</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近一段时间，因为各种原因导致我的“梯子”暂时无法访问外面的世界。外面的世界很精彩，外面的世界很无奈，没办法，只有将之前的购买的服务器删除掉，然后重写搞一个。这次我就学聪明了，在购买服务器之前，我先在网上找了一下各个云服务器的价格。&lt;/p&gt;</summary>
    
    
    
    
    <category term="SSR" scheme="http://www.paulniu.com/tags/SSR/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE 03 JavaWeb基础(Servlet)</title>
    <link href="http://www.paulniu.com/2019/10/01/JavaEE-03-Servlet/"/>
    <id>http://www.paulniu.com/2019/10/01/JavaEE-03-Servlet/</id>
    <published>2019-10-01T13:37:03.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>内容可能较多，包括Servlet，Jsp，Maven，html，Js等内容</p><span id="more"></span><h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Servlet是运行在web服务器或者是应用服务器上的应用程序。它是作为web浏览器或者其他Http客户端请求和Http服务器上数据库或应用程序之间的中间件。<br>Servlet的架构图如下所示：<br><img src="/assets/JavaEE/javaweb_01.png" alt="Servlet架构图"></p><p>Servlet的任务主要包括以下几个内容：</p><ol><li>读取客户端发送的显式数据，包括网页上的表单，或者是applet或自定义Http客户端程序的表单</li><li>读取客户端发送的隐式数据，包括cookie，媒体类型，浏览器能理解的压缩格式</li><li>处理数据并产生结果，这个过程可能要访问数据库，执行RMI或CORBA调用，调用web服务，或直接计算出对应的响应。</li><li>发送显式数据(即文档)到客户端，该文档的样式是多样性的，可以是文本文件(HTML,XML),二进制文件(git图像)，Excel</li><li>发送隐式HTTP响应到客户端，包括返回的文档类型，设置cookie和缓存参数，以及其他类似任务。</li></ol><p>实现Servlet的方式有三种</p><h4 id="实现Serlvet接口"><a href="#实现Serlvet接口" class="headerlink" title="实现Serlvet接口"></a>实现Serlvet接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Servlet的生命周期:从Servlet被创建到Servlet被销毁的过程</span></span><br><span class="line"><span class="comment">//一次创建，到处服务</span></span><br><span class="line"><span class="comment">//一个Servlet只会有一个对象，服务所有的请求</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1.实例化（使用构造方法创建对象）</span></span><br><span class="line"><span class="comment"> * 2.初始化  执行init方法</span></span><br><span class="line"><span class="comment"> * 3.服务     执行service方法</span></span><br><span class="line"><span class="comment"> * 4.销毁    执行destroy方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo1</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//public ServletDemo1()&#123;&#125;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">//生命周期方法:当Servlet第一次被创建对象时执行该方法,该方法在整个生命周期中只执行一次</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig arg0)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;=======init=========&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生命周期方法:对客户端响应的方法,该方法会被执行多次，每次请求该servlet都会执行该方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest arg0, ServletResponse arg1)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hehe&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生命周期方法:当Servlet被销毁时执行该方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;******destroy**********&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//当停止tomcat时也就销毁的servlet。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="继承GenericServlet抽象类"><a href="#继承GenericServlet抽象类" class="headerlink" title="继承GenericServlet抽象类"></a>继承GenericServlet抽象类</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo2</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void service(<span class="type">ServletRequest</span> arg0, <span class="type">ServletResponse</span> arg1)</span><br><span class="line">            <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">&quot;heihei&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="继承HttpServlet抽象类"><a href="#继承HttpServlet抽象类" class="headerlink" title="继承HttpServlet抽象类"></a>继承HttpServlet抽象类</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo3</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void doGet(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp)</span><br><span class="line">            <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void doPost(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp)</span><br><span class="line">            <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">&quot;ee&quot;</span>);</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般情况下我们使用第三种方式的情况比较多</p><h4 id="三者之间的关系"><a href="#三者之间的关系" class="headerlink" title="三者之间的关系"></a>三者之间的关系</h4><p>关于 HttpServlet、GenericServlet 和 Servlet 的关系<br>对于一个 Servlet 类，我们日常最常用的方法是继承自 HttpServlet 类，提供了 Http 相关的方法，HttpServlet 扩展了 GenericServlet 类，而 GenericServlet 类又实现了 Servlet 类和 ServletConfig 类。</p><p>Servlet</p><p>Servlet 类提供了五个方法，其中三个生命周期方法和两个普通方法，关于 Servlet 类的方法，不再赘述，我主要补充一下另外两个类的实现思路。</p><p>GenericServlet</p><p>GenericServlet 是一个抽象类，实现了 Servlet 接口，并且对其中的 init() 和 destroy() 和 service() 提供了默认实现。在 GenericServlet 中，主要完成了以下任务：</p><ul><li>将 init() 中的 ServletConfig 赋给一个类级变量，可以由 getServletConfig 获得；</li><li>为 Servlet 所有方法提供默认实现；</li><li>可以直接调用 ServletConfig 中的方法；</li></ul><p>基本结构如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span>,<span class="title">ServletConfig</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//GenericServlet通过将ServletConfig赋给类级变量</span></span><br><span class="line">   <span class="keyword">private</span> trServletConfig servletConfig;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.servletConfig=servletConfig;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*自定义init()的原因是：如果子类要初始化必须覆盖父类的init() 而使它无效 这样</span></span><br><span class="line"><span class="comment">       this.servletConfig=servletConfig不起作用 这样就会导致空指针异常 这样如果子类要初始化，</span></span><br><span class="line"><span class="comment">       可以直接覆盖不带参数的init()方法 */</span></span><br><span class="line">      <span class="keyword">this</span>.init();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//自定义的init()方法，可以由子类覆盖  </span></span><br><span class="line">   <span class="comment">//init()不是生命周期方法</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//实现service()空方法，并且声明为抽象方法，强制子类必须实现service()方法 </span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest request,ServletResponse response)</span> </span></span><br><span class="line"><span class="function">     <span class="keyword">throws</span> ServletException,java.io.IOException</span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//实现空的destroy方法</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HttpServlet</p><p>HttpServlet 也是一个抽象类，它进一步继承并封装了 GenericServlet，使得使用更加简单方便，由于是扩展了 Http 的内容，所以还需要使用 HttpServletRequest 和 HttpServletResponse，这两个类分别是 ServletRequest 和 ServletResponse 的子类。代码如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//HttpServlet中的service()</span></span><br><span class="line">   <span class="keyword">protected</span> void service(<span class="type">HttpServletRequest</span> httpServletRequest,</span><br><span class="line">                       <span class="type">HttpServletResponse</span> httpServletResponse)&#123;</span><br><span class="line">        <span class="comment">//该方法通过httpServletRequest.getMethod()判断请求类型调用doGet() doPost()</span></span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//必须实现父类的service()方法</span></span><br><span class="line">   public void service(<span class="type">ServletRequest</span> servletRequest,<span class="type">ServletResponse</span> servletResponse)&#123;</span><br><span class="line">      <span class="type">HttpServletRequest</span> request;</span><br><span class="line">      <span class="type">HttpServletResponse</span> response;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">         request=(<span class="type">HttpServletRequest</span>)servletRequest;</span><br><span class="line">         response=(<span class="type">HttpServletResponse</span>)servletResponse;</span><br><span class="line">      &#125;<span class="keyword">catch</span>(<span class="type">ClassCastException</span>)&#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">ServletException</span>(<span class="string">&quot;non-http request or response&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//调用service()方法</span></span><br><span class="line">      <span class="keyword">this</span>.service(request,response);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，HttpServlet 中对原始的 Servlet 中的方法都进行了默认的操作，不需要显式的销毁初始化以及 service()，在 HttpServlet 中，自定义了一个新的 service() 方法，其中通过 getMethod() 方法判断请求的类型，从而调用 doGet() 或者 doPost() 处理 get,post 请求，使用者只需要继承 HttpServlet，然后重写 doPost() 或者 doGet() 方法处理请求即可。</p><p>我们一般都使用继承 HttpServlet 的方式来定义一个 servlet。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>Servlet是服务HTTP请求并实现了Servlet接口的类，Web 应用程序开发人员通常编写 Servlet 来扩展 javax.servlet.http.HttpServlet，并实现 Servlet 接口的抽象类专门用来处理 HTTP 请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.paulniu.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * author:niupuyue</span></span><br><span class="line"><span class="comment"> * date: 2019/10/9</span></span><br><span class="line"><span class="comment"> * time: 22:51</span></span><br><span class="line"><span class="comment"> * version:</span></span><br><span class="line"><span class="comment"> * desc:</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        message = <span class="string">&quot;初始化FirstServlet&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 设置响应内容</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        out.write(<span class="string">&quot;&lt;h1&gt; &quot;</span> + message + <span class="string">&quot; &lt;/h1&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下map</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>FirstServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.paulniu.dao.FirstServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>FirstServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/first<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>补充说明：<br>destory方法被调用后，servlet被销毁，但是并没有立即回收，再次请求时，并没有重新初始化</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    message = <span class="string">&quot;Hello World , Nect To Meet You: &quot;</span> + System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;servlet初始化……&quot;</span>);</span><br><span class="line">    <span class="keyword">super</span>.init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">    PrintWriter writer = response.getWriter();</span><br><span class="line">    writer.write(<span class="string">&quot;&lt;h1&gt;&quot;</span> + message + <span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line">    destroy();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;servlet销毁！&quot;</span>);</span><br><span class="line">    <span class="keyword">super</span>.destroy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Log日志打印：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">servlet初始化……</span><br><span class="line">servlet销毁！</span><br><span class="line"><span class="number">2017</span>-<span class="number">7</span>-<span class="number">6</span> <span class="number">19</span>:<span class="number">48</span>:<span class="number">52</span> org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.core</span><span class="selector-class">.StandardContext</span> reload</span><br><span class="line">信息: Reloading Context with name <span class="selector-attr">[/myServlet]</span> has started</span><br><span class="line">servlet销毁！</span><br><span class="line"><span class="number">2017</span>-<span class="number">7</span>-<span class="number">6</span> <span class="number">19</span>:<span class="number">48</span>:<span class="number">52</span> org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.core</span><span class="selector-class">.StandardContext</span> reload</span><br><span class="line">信息: Reloading Context with name <span class="selector-attr">[/myServlet]</span> is completed</span><br><span class="line">servlet初始化……</span><br><span class="line">servlet销毁！</span><br><span class="line">servlet销毁！</span><br><span class="line">servlet销毁！</span><br><span class="line">servlet销毁！</span><br><span class="line">servlet销毁！</span><br><span class="line">servlet销毁！</span><br><span class="line">servlet销毁！</span><br></pre></td></tr></table></figure><p>Servlet浏览器访问路径配置的小问题<br>有两种方式配置路径</p><ul><li>java 类里的注解 —— @WebServlet(“/HelloServlet”) 对应浏览器路径<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span>localhost:<span class="number">8080</span><span class="regexp">/TomcatTest/</span>HelloServlet</span><br></pre></td></tr></table></figure></li><li>配置文件（web.xml）里对应的浏览器访问路径：<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span>localhost:<span class="number">8080</span><span class="regexp">/TomcatTest/</span>TomcatTest/HelloServlet</span><br></pre></td></tr></table></figure>两种配置使用一种即可，不然路径重名反而会让tomcat启动不了</li></ul><h2 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h2><p>Servlet生命周期可被定义为冲创建知道毁灭的过程，遵循以下过程</p><ol><li>Servlet通过调用init()方法进行初始化</li><li>Servlet调用service()方法来处理客户端请求</li><li>Servlet通过调用destory()方法终止(结束)</li><li>最后Servlet是由JVM的垃圾回收器进行垃圾回收的</li></ol><h3 id="init-方法"><a href="#init-方法" class="headerlink" title="init()方法"></a>init()方法</h3><p>init方法被设计成只调用一次，在第一次创建该Servlet时被调用，在后续每次用户请求时不再调用，因此它是用一次性初始化<br>Servlet创建于用户第一次调用欧冠对象与该Servlet的URL时，但是我们也可以指定Servlet在服务器第一次启动时被加载。当用户调用Servlet时，创建一个Servlet实例，每一个用户请求都会产生新的线程，适当的时候交给doGet或者doPost方法。init方法简单的创建或加载一些数据，这些数据将被用于Servlet的整个生命周期<br>init方法的定义如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> void <span class="function"><span class="keyword">init</span>()</span> <span class="keyword">throws</span> <span class="type">ServletException</span>&#123;</span><br><span class="line">    <span class="comment">// 初始化代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="service-方法"><a href="#service-方法" class="headerlink" title="service()方法"></a>service()方法</h3><p>service()方法是执行实际任务的主要方法.Servlet容器(即Web服务器)调用service()方法来处理来自客户端浏览器的请求，并把格式化的响应写回给客户端<br>每次服务器接收到一个Servlet请求时，服务器会产生一个新的线程并调用服务。service()方法检查HTTP请求类型(GET,POST,PUT,DELETE等)，并在适当的时候调用相应的方法</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest request, </span></span></span><br><span class="line"><span class="params"><span class="function">                    ServletResponse response)</span> </span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> ServletException, IOException</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service()方法由容器调用，service方法在适当的时侯调用doGet,doPost,doPut,doDelete等方法，所以，不用对service()方法做任何动作，只需要根据来自客户端的请求类型重写相应的方法即可<br>doGet和doPost方法是每次服务请求中最常用的方法，</p><h4 id="doGet-方法"><a href="#doGet-方法" class="headerlink" title="doGet()方法"></a>doGet()方法</h4><p>GET 请求来自于一个 URL 的正常请求，或者来自于一个未指定 METHOD 的 HTML 表单，它由 doGet() 方法处理。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="params"><span class="function">                  HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">// Servlet 代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="doPost-方法"><a href="#doPost-方法" class="headerlink" title="doPost()方法"></a>doPost()方法</h4><p>POST 请求来自于一个特别指定了 METHOD 为 POST 的 HTML 表单，它由 doPost() 方法处理。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="params"><span class="function">                   HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">// Servlet 代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="destory-方法"><a href="#destory-方法" class="headerlink" title="destory()方法"></a>destory()方法</h3><p>destroy() 方法只会被调用一次，在 Servlet 生命周期结束时被调用。destroy() 方法可以让您的 Servlet 关闭数据库连接、停止后台线程、把 Cookie 列表或点击计数器写入到磁盘，并执行其他类似的清理活动。</p><p>在调用 destroy() 方法之后，servlet 对象被标记为垃圾回收。destroy 方法定义如下所示：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">destroy</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="comment">// 终止化代码...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h3><p><img src="/assets/JavaEE/javaweb_02.png" alt="Servlet生命周期架构图">  </p><h2 id="表单数据"><a href="#表单数据" class="headerlink" title="表单数据"></a>表单数据</h2><p>在我们的开发过程中表单是非常常用的一个组件，不管是登录也好，还是搜索，等等。浏览器使用两种方法可将表单信息传递给web服务器，分别是GET和POST<br>GET方法是默认的从浏览器向web服务器传递信息的方法，它会产生一个很长的字符串，并且出现在浏览器的地址栏中。如果我们想要传递一些比较敏感的信息，不要使用GET方法，并且GET方法对字符串大小也有限制，请求字符串中最多只能有1024个字符<br>POST方法是向后台传递信息比较可靠的方法。POST方法打包信息的方式与GET方法基本相同。但是POST方法不是吧信息直接放在URL的文本字符串发送，而是将这些信息作为一个单独的消息进行传递。消息以标准输出的形式传到后台程序。</p><p>使用Servlet读取表单数据，这些数据会根据不同的情况使用不同的方法自动解析：</p><ol><li>getParameter():可以调用request.getParameter()方法来获取表单参数的值</li><li>getParameterValues():如果参数出现一次以上，则调用该方法，并且返回多个值，比如复选框</li><li>getParameterNames():如果想要得到当前请求中的所有参数的完整列表，则调用该方法</li></ol><p>一个例子：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class LoginServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> doGet(HttpServletRequest req, HttpServletResponse resp) <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        PrintWriter out = resp.getWriter();</span><br><span class="line">        <span class="keyword">String</span> title = <span class="string">&quot;使用get方法读取表单内容&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">String</span> name = req.getParameter(<span class="string">&quot;inputEmail&quot;</span>);</span><br><span class="line">        System.out.<span class="built_in">println</span>(name);</span><br><span class="line">        System.out.<span class="built_in">println</span>(req.getParameter(<span class="string">&quot;inputEmail&quot;</span>));</span><br><span class="line">        <span class="keyword">String</span> password = req.getParameter(<span class="string">&quot;inputPassword&quot;</span>);</span><br><span class="line">        <span class="keyword">String</span> remember = req.getParameter(<span class="string">&quot;remember&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">String</span> docType = <span class="string">&quot;&lt;!DOCTYPE html&gt; \n&quot;</span>;</span><br><span class="line">        out.<span class="built_in">println</span>(docType +</span><br><span class="line">                <span class="string">&quot;&lt;html&gt; \n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;head&gt;&lt;title&gt;&quot;</span> + title + <span class="string">&quot;&lt;/title&gt;&lt;/head&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;body bgcolor=\&quot;#f0f0f0\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;h1 align=\&quot;center\&quot;&gt;&quot;</span> + title + <span class="string">&quot;&lt;/h1&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;ul&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;li&gt;&lt;b&gt;姓名&lt;/b&gt;：&quot;</span></span><br><span class="line">                + name + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;li&gt;&lt;b&gt;密码&lt;/b&gt;：&quot;</span></span><br><span class="line">                + password + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;li&gt;&lt;b&gt;是否选择记住我&lt;/b&gt;: &quot;</span></span><br><span class="line">                + remember + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;/ul&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">        System.out.<span class="built_in">println</span>(getAllParameter(req));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> doPost(HttpServletRequest req, HttpServletResponse resp) <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        PrintWriter out = resp.getWriter();</span><br><span class="line">        <span class="keyword">String</span> title = <span class="string">&quot;使用post方法读取表单内容&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">String</span> name = <span class="keyword">new</span> <span class="keyword">String</span>(req.getParameter(<span class="string">&quot;inputName&quot;</span>).getBytes(<span class="string">&quot;ISO8859-1&quot;</span>), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="keyword">String</span> password = req.getParameter(<span class="string">&quot;inputPassword&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">String</span> docType = <span class="string">&quot;&lt;!DOCTYPE html&gt; \n&quot;</span>;</span><br><span class="line">        out.<span class="built_in">println</span>(docType +</span><br><span class="line">                <span class="string">&quot;&lt;html&gt; \n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;head&gt;&lt;title&gt;&quot;</span> + title + <span class="string">&quot;&lt;/title&gt;&lt;/head&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;body bgcolor=\&quot;#f0f0f0\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;h1 align=\&quot;center\&quot;&gt;&quot;</span> + title + <span class="string">&quot;&lt;/h1&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;ul&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;li&gt;&lt;b&gt;姓名&lt;/b&gt;：&quot;</span></span><br><span class="line">                + name + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;li&gt;&lt;b&gt;密码&lt;/b&gt;：&quot;</span></span><br><span class="line">                + password + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;/ul&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有的参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; getAllParameter(HttpServletRequest request) &#123;</span><br><span class="line">        <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; result = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (request == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        Enumeration paramNames = request.getParameterNames();</span><br><span class="line">        <span class="keyword">while</span> (paramNames.hasMoreElements()) &#123;</span><br><span class="line">            <span class="keyword">String</span> paramName = (<span class="keyword">String</span>) paramNames.nextElement();</span><br><span class="line">            <span class="keyword">String</span>[] paramValues = request.getParameterValues(paramName);</span><br><span class="line">            <span class="keyword">if</span> (paramValues.length == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 只有一个数据，就去当前值</span></span><br><span class="line">                <span class="keyword">String</span> paramValue = paramValues[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (paramValue.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 没有数据，不用执行</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 有数据，将key/value值写入到Map中</span></span><br><span class="line">                    result.put(paramName, paramValue);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 读取到了多个值</span></span><br><span class="line">                <span class="keyword">String</span> paramVlue = paramValues[paramValues.length - <span class="number">1</span>];</span><br><span class="line">                result.put(paramName, paramVlue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>网页代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;bootstrap/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;bootstrap/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表单<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-horizontal&quot;</span> <span class="attr">action</span>=<span class="string">&quot;login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;control-group&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;control-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;inputEmail&quot;</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;controls&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;inputEmail&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inputEmail&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入邮箱&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;control-group&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;control-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;inputPassword&quot;</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;controls&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;inputPassword&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inputPassword&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;control-group&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;controls&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;remember&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span> 记住我</span><br><span class="line">                <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="客户端HTTP请求"><a href="#客户端HTTP请求" class="headerlink" title="客户端HTTP请求"></a>客户端HTTP请求</h2><p>这里主要介绍在浏览器向后台发送HTTP请求的时候发送的是哪些参数<br>浏览器端重要的头信息：</p><table><thead><tr><th>头信息</th><th>描述</th></tr></thead><tbody><tr><td>Accept</td><td>这个头信息指定浏览器或其他客户端可以处理的 MIME 类型。值 image/png 或 image/jpeg 是最常见的两种可能值</td></tr><tr><td>Accept-Charset</td><td>这个头信息指定浏览器可以用来显示信息的字符集。例如 ISO-8859-1。</td></tr><tr><td>Accept-Encoding</td><td>这个头信息指定浏览器知道如何处理的编码类型。值 gzip 或 compress 是最常见的两种可能值。</td></tr><tr><td>Accept-Language</td><td>这个头信息指定客户端的首选语言，在这种情况下，Servlet 会产生多种语言的结果。例如，en、en-us、ru 等。</td></tr><tr><td>Authorization</td><td>这个头信息用于客户端在访问受密码保护的网页时识别自己的身份。</td></tr><tr><td>Connection</td><td>这个头信息指示客户端是否可以处理持久 HTTP 连接。持久连接允许客户端或其他浏览器通过单个请求来检索多个文件。值 Keep-Alive 意味着使用了持续连接。</td></tr><tr><td>Content-Length</td><td>这个头信息只适用于 POST 请求，并给出 POST 数据的大小（以字节为单位）。</td></tr><tr><td>Cookie</td><td>这个头信息把之前发送到浏览器的 cookies 返回到服务器。</td></tr><tr><td>Host</td><td>这个头信息指定原始的 URL 中的主机和端口。</td></tr><tr><td>If-Modified-Since</td><td>这个头信息表示只有当页面在指定的日期后已更改时，客户端想要的页面。如果没有新的结果可以使用，服务器会发送一个 304 代码，表示 Not Modified 头信息。</td></tr><tr><td>If-Unmodified-Since</td><td>这个头信息是 If-Modified-Since 的对立面，它指定只有当文档早于指定日期时，操作才会成功。</td></tr><tr><td>Referer</td><td>这个头信息指示所指向的 Web 页的 URL。例如，如果您在网页 1，点击一个链接到网页 2，当浏览器请求网页 2 时，网页 1 的 URL 就会包含在 Referer 头信息中。</td></tr><tr><td>User-Agent</td><td>这个头信息识别发出请求的浏览器或其他客户端，并可以向不同类型的浏览器返回不同的内容。</td></tr></tbody></table><p>读取HTTP头的方法</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Cookie[] getCookies()</td><td>返回一个数组，包含客户端发送该请求的所有Cookie对象</td></tr><tr><td>Enumeration getAttributeNames()</td><td>返回一个枚举，包含提供给该请求可用的属性名称</td></tr><tr><td>Enumeration getHeaderNames()</td><td>返回一个枚举，包含在该请求中包含的所有的头名</td></tr><tr><td>Enumeration getParameterNames()</td><td>返回一个String对象的枚举，包含在该请求中包含的参数的名称</td></tr><tr><td>HttpSession getSession()</td><td>返回与该请求相关联的当前session会话，如果没有请求session会话，则会创建一个</td></tr><tr><td>HttpSession getSession(boolean create)</td><td>返回与该请求相关的当前HttpSession，或者如果没有当前会话，且创建时真的，则返回新建的session会话</td></tr><tr><td>Locale getLocale()</td><td>基于Accept-Language头，返回客户端接收内容的首选的区域设置</td></tr><tr><td>Object getAttribute(String name)</td><td>一对象形式返回已命名属性的值，如果没有给定名称的属性存在，则返回null</td></tr><tr><td>ServletInputStream getIputStream()</td><td>使用ServletInputStream，以二进制数形式检索请求的主体</td></tr><tr><td>String getAuthType()</td><td>返回用于保护Servlet的身份验证方案的名称，如”BASIC”或”SSL”，如果JSP没有收到保护则返回null</td></tr><tr><td>String getCharacterEncoding()</td><td>返回请求主体中使用的字符编码的名称</td></tr><tr><td>String getContentType()</td><td>返回请求主体MIME类型，如果不知道类型则返回null</td></tr><tr><td>String getContextPath()</td><td>返回指示请求上下文的请求URI部分</td></tr><tr><td>String getHeader(String name)</td><td>以字符串形式返回指定的请求头的值</td></tr><tr><td>String getMethod()</td><td>返回请求的HTTP方法额名称，例如GET，POST，PUT</td></tr><tr><td>String getParameter(String name)</td><td>以字符串形式返回请求参数的值，或者如果参数不存在则返回null</td></tr><tr><td>String getPathInfo()</td><td>当请求发出时，返回与客户端发送的URL相关的任何额外的路径信息</td></tr><tr><td>String getProtocol()</td><td>返回请求协议的名称和版本</td></tr><tr><td>String getQueryString()</td><td>返回包含在路径后的请求URL中查询字符串</td></tr><tr><td>String getRemoteAddr()</td><td>返回发送请求的客户端的互联网协议(IP)地址</td></tr><tr><td>String getRemoteHost()</td><td>返回发送请求的客户端的完全限定名称</td></tr><tr><td>String getRemoteUser()</td><td>如果用户已通过身份验证，则返回发出请求的登录用户，或者如果用户未通过身份验证，则返回null</td></tr><tr><td>String getRequestURI()</td><td>从协议名称知道HTTP请求的第一行的查询字符串中，返回该请求的URL的一部分</td></tr><tr><td>String getRequestedSessionId()</td><td>返回有客户端指定的session会话id</td></tr><tr><td>String getSevletPath()</td><td>返回调用JSP的请求的URL的一部分</td></tr><tr><td>String[] getParameterValues(String name)</td><td>返回一个字符串对象的数组，包含所有给定的请求参数的值，如果参数不存在则返回null</td></tr><tr><td>boolean isSecure()</td><td>返回一个布尔值，指示请求是否使用安全通道，如HTTPS</td></tr><tr><td>int getCountentLength()</td><td>以字节为单位返回请求主体的长度，并提供输入流，如果长度位置则返回-1</td></tr><tr><td>int getIntHeader(String name)</td><td>返回指定的请求头的值为一个int值</td></tr><tr><td>int getServerPort()</td><td>返回接收到这个请求的端口号</td></tr><tr><td>int getParameterMap()</td><td>将参数封装成Map类型</td></tr></tbody></table><p>例子：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HTTPServlet</span> <span class="title">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    protected void doGet(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response) <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line"><span class="comment">// 设置响应内容类型</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">PrintWriter</span> out <span class="operator">=</span> response.getWriter();</span><br><span class="line">        <span class="type">String</span> title <span class="operator">=</span> <span class="string">&quot;HTTP Header 请求实例 &quot;</span>;</span><br><span class="line">        <span class="type">String</span> docType <span class="operator">=</span></span><br><span class="line">                <span class="string">&quot;&lt;!DOCTYPE html&gt; <span class="subst">\n</span>&quot;</span>;</span><br><span class="line">        out.println(docType <span class="operator">+</span></span><br><span class="line">                <span class="string">&quot;&lt;html&gt;<span class="subst">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line">                <span class="string">&quot;&lt;head&gt;&lt;meta charset=<span class="subst">\&quot;</span>utf-8<span class="subst">\&quot;</span>&gt;&lt;title&gt;&quot;</span> <span class="operator">+</span> title <span class="operator">+</span> <span class="string">&quot;&lt;/title&gt;&lt;/head&gt;<span class="subst">\n</span>&quot;</span><span class="operator">+</span></span><br><span class="line">                <span class="string">&quot;&lt;body bgcolor=<span class="subst">\&quot;</span>#f0f0f0<span class="subst">\&quot;</span>&gt;<span class="subst">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line">                <span class="string">&quot;&lt;h1 align=<span class="subst">\&quot;</span>center<span class="subst">\&quot;</span>&gt;&quot;</span> <span class="operator">+</span> title <span class="operator">+</span> <span class="string">&quot;&lt;/h1&gt;<span class="subst">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line">                <span class="string">&quot;&lt;table width=<span class="subst">\&quot;</span>100%<span class="subst">\&quot;</span> border=<span class="subst">\&quot;</span>1<span class="subst">\&quot;</span> align=<span class="subst">\&quot;</span>center<span class="subst">\&quot;</span>&gt;<span class="subst">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line">                <span class="string">&quot;&lt;tr bgcolor=<span class="subst">\&quot;</span>#949494<span class="subst">\&quot;</span>&gt;<span class="subst">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line">                <span class="string">&quot;&lt;th&gt;Header 名称&lt;/th&gt;&lt;th&gt;Header 值&lt;/th&gt;<span class="subst">\n</span>&quot;</span><span class="operator">+</span></span><br><span class="line">                <span class="string">&quot;&lt;/tr&gt;<span class="subst">\n</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Enumeration</span> headerNames <span class="operator">=</span> request.getHeaderNames();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(headerNames.hasMoreElements()) &#123;</span><br><span class="line">            <span class="type">String</span> paramName <span class="operator">=</span> (<span class="type">String</span>)headerNames.nextElement();</span><br><span class="line">            out.print(<span class="string">&quot;&lt;tr&gt;&lt;td&gt;&quot;</span> <span class="operator">+</span> paramName <span class="operator">+</span> <span class="string">&quot;&lt;/td&gt;<span class="subst">\n</span>&quot;</span>);</span><br><span class="line">            <span class="type">String</span> paramValue <span class="operator">=</span> request.getHeader(paramName);</span><br><span class="line">            out.println(<span class="string">&quot;&lt;td&gt; &quot;</span> <span class="operator">+</span> paramValue <span class="operator">+</span> <span class="string">&quot;&lt;/td&gt;&lt;/tr&gt;<span class="subst">\n</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/table&gt;<span class="subst">\n</span>&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    protected void doPost(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp) <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>网页代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;bootstrap/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;bootstrap/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-danger&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http&quot;</span>&gt;</span>发送请求<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/assets/JavaEE/javaweb_03.png" alt="Http请求header"></p><h2 id="客户端HTTP响应"><a href="#客户端HTTP响应" class="headerlink" title="客户端HTTP响应"></a>客户端HTTP响应</h2><p>和前面的你饿哦让一样，当一个web服务器响应一个HTTP请求时，响应通常包括一个状态行，一些响应报头，一个空行和文档。典型的如下所示</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Header2: ...</span><br><span class="line">...</span><br><span class="line">HeaderN: ...</span><br><span class="line">  (Blank Line)</span><br><span class="line"><span class="meta">&lt;!doctype ...&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>...<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>状态行包括HTTP版本(HTTP/1.1)，一个状态码(200)和一个对应于状态码的短消息(OK)</p><p>下表总结了从Web服务器端返回到浏览器的最有用的HTTP1.1响应报头，我们可能会在开发中频繁使用:</p><table><thead><tr><th>头信息</th><th>描述</th></tr></thead><tbody><tr><td>Allow</td><td>这个头信息指定服务器支持的请求方法（GET、POST 等）。</td></tr><tr><td>Cache-Control</td><td>这个头信息指定响应文档在何种情况下可以安全地缓存。可能的值有：public、private 或 no-cache 等。Public 意味着文档是可缓存，Private 意味着文档是单个用户私用文档，且只能存储在私有（非共享）缓存中，no-cache 意味着文档不应被缓存。</td></tr><tr><td>Connection</td><td>这个头信息指示浏览器是否使用持久 HTTP 连接。值 close 指示浏览器不使用持久 HTTP 连接，值 keep-alive 意味着使用持久连接。</td></tr><tr><td>Content-Disposition</td><td>这个头信息可以让您请求浏览器要求用户以给定名称的文件把响应保存到磁盘。</td></tr><tr><td>Content-Encoding</td><td>在传输过程中，这个头信息指定页面的编码方式。</td></tr><tr><td>Content-Language</td><td>这个头信息表示文档编写所使用的语言。例如，en、en-us、ru 等。</td></tr><tr><td>Content-Length</td><td>这个头信息指示响应中的字节数。只有当浏览器使用持久（keep-alive）HTTP 连接时才需要这些信息。</td></tr><tr><td>Content-Type</td><td>这个头信息提供了响应文档的 MIME（Multipurpose Internet Mail Extension）类型。</td></tr><tr><td>Expires</td><td>这个头信息指定内容过期的时间，在这之后内容不再被缓存。</td></tr><tr><td>Last-Modified</td><td>这个头信息指示文档的最后修改时间。然后，客户端可以缓存文件，并在以后的请求中通过 If-Modified-Since 请求头信息提供一个日期。</td></tr><tr><td>Location</td><td>这个头信息应被包含在所有的带有状态码的响应中。在 300s 内，这会通知浏览器文档的地址。浏览器会自动重新连接到这个位置，并获取新的文档。</td></tr><tr><td>Refresh</td><td>这个头信息指定浏览器应该如何尽快请求更新的页面。您可以指定页面刷新的秒数。</td></tr><tr><td>Retry-After</td><td>这个头信息可以与 503（Service Unavailable 服务不可用）响应配合使用，这会告诉客户端多久就可以重复它的请求。</td></tr><tr><td>Set-Cookie</td><td>这个头信息指定一个与页面关联的 cookie。</td></tr></tbody></table><p>设置HTTP响应报头的方法<br>这些方法可用于在Servlet程序中设置HTTP响应报头，通过HttpServletResponse对象可用</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>String encodeRedorectURL(String url)</td><td>为sendRedirect方法中使用的指定的URL进行编码，或者如果编码不是必须的，则返回URL未改变</td></tr><tr><td>String encodeURL(String url)</td><td>对包含session会话ID的指定URL编码，或者如果编码不是必须的，则返回URL未改变</td></tr><tr><td>boolean containsHeader(String name)</td><td>返回一个布尔值，指示是否已经设置已命名的相应报头</td></tr><tr><td>boolean isCommitted()</td><td>返回一个布尔值，指示响应是否已经提交</td></tr><tr><td>void addCookie(Cookie coookie)</td><td>把置顶的cookie添加到响应</td></tr><tr><td>void addHeader(String name,String value)</td><td>添加一个带有给定的名称和值的响应报头</td></tr><tr><td>void addDateHeader(String name,long date)</td><td>添加一个带有给定名称和日期值的响应报头</td></tr><tr><td>void addIntHeader(String name,int value)</td><td>添加一个带有给定名称和整数值的响应报头</td></tr><tr><td>void flushBuffer()</td><td>强制任何在缓冲区中的内容被写入到客户端</td></tr><tr><td>void reset()</td><td>清除缓冲区中存在的任何数据，包括状态码和头</td></tr><tr><td>void resetBuffer()</td><td>清除响应中基础缓存区的内容，不清除状态码和头</td></tr><tr><td>void sendError(int sc)</td><td>使用指定的状态码发送错误响应到客户端，并清除缓冲区</td></tr><tr><td>void sendError(int sc,String msg)</td><td>使用指定的状态发送错误响应到客户端</td></tr><tr><td>void sendRedirect(String location)</td><td>使用指定的重定向位置URL发送临时重定向响应到客户端</td></tr><tr><td>void setBufferSize(int size)</td><td>为响应主体设置首选的缓冲区大小</td></tr><tr><td>void setCharacterEncoding(String charset)</td><td>设置被发送到客户端的响应的字符编码(MIME字符集),例如UTF-8</td></tr><tr><td>void setContentLength(int len)</td><td>设置在HTTPServlet响应中内容主体的长度，该方法设置HTTP content-Length头</td></tr><tr><td>void setContentType(String type)</td><td>如果响应还未被提交，设置被发送到客户端的响应内容的类型</td></tr><tr><td>void setDateHeader(String name,long date)</td><td>设置一个带有给定名称和日期值的响应报头</td></tr><tr><td>void setHeader(String name,String value)</td><td>设置一个带有给定名称和值的响应报头</td></tr><tr><td>void setIntHeader(String name,int value)</td><td>设置一个带有给定的名称和整数值的响应报头</td></tr><tr><td>void setLocale(Locale loc)</td><td>如果响应还未被提交，设置响应的区域</td></tr><tr><td>void setStatus(int sc)</td><td>为该响应设置状态码</td></tr></tbody></table><p>一个例子：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Refresh</span> <span class="title">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理 GET 方法请求的方法</span></span><br><span class="line">      <span class="keyword">public</span> void doGet(<span class="type">HttpServletRequest</span> request,</span><br><span class="line">                        <span class="type">HttpServletResponse</span> response)</span><br><span class="line">                <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="comment">// 设置刷新自动加载时间为 5 秒</span></span><br><span class="line">          response.setIntHeader(<span class="string">&quot;Refresh&quot;</span>, <span class="number">5</span>);</span><br><span class="line">          <span class="comment">// 设置响应内容类型</span></span><br><span class="line">          response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">         </span><br><span class="line">          <span class="comment">//使用默认时区和语言环境获得一个日历  </span></span><br><span class="line">          <span class="type">Calendar</span> cale <span class="operator">=</span> <span class="type">Calendar</span>.getInstance();  </span><br><span class="line">          <span class="comment">//将Calendar类型转换成Date类型  </span></span><br><span class="line">          <span class="type">Date</span> tasktime<span class="operator">=</span>cale.getTime();  </span><br><span class="line">          <span class="comment">//设置日期输出的格式  </span></span><br><span class="line">          <span class="type">SimpleDateFormat</span> df<span class="operator">=</span>new <span class="type">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);  </span><br><span class="line">          <span class="comment">//格式化输出  </span></span><br><span class="line">          <span class="type">String</span> nowTime <span class="operator">=</span> df.format(tasktime);</span><br><span class="line">          <span class="type">PrintWriter</span> out <span class="operator">=</span> response.getWriter();</span><br><span class="line">          <span class="type">String</span> title <span class="operator">=</span> <span class="string">&quot;自动刷新 Header 设置 - 菜鸟教程实例&quot;</span>;</span><br><span class="line">          <span class="type">String</span> docType <span class="operator">=</span></span><br><span class="line">          <span class="string">&quot;&lt;!DOCTYPE html&gt;<span class="subst">\n</span>&quot;</span>;</span><br><span class="line">          out.println(docType <span class="operator">+</span></span><br><span class="line">            <span class="string">&quot;&lt;html&gt;<span class="subst">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line">            <span class="string">&quot;&lt;head&gt;&lt;title&gt;&quot;</span> <span class="operator">+</span> title <span class="operator">+</span> <span class="string">&quot;&lt;/title&gt;&lt;/head&gt;<span class="subst">\n</span>&quot;</span><span class="operator">+</span></span><br><span class="line">            <span class="string">&quot;&lt;body bgcolor=<span class="subst">\&quot;</span>#f0f0f0<span class="subst">\&quot;</span>&gt;<span class="subst">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line">            <span class="string">&quot;&lt;h1 align=<span class="subst">\&quot;</span>center<span class="subst">\&quot;</span>&gt;&quot;</span> <span class="operator">+</span> title <span class="operator">+</span> <span class="string">&quot;&lt;/h1&gt;<span class="subst">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line">            <span class="string">&quot;&lt;p&gt;当前时间是：&quot;</span> <span class="operator">+</span> nowTime <span class="operator">+</span> <span class="string">&quot;&lt;/p&gt;<span class="subst">\n</span>&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 处理 POST 方法请求的方法</span></span><br><span class="line">      <span class="keyword">public</span> void doPost(<span class="type">HttpServletRequest</span> request,</span><br><span class="line">                         <span class="type">HttpServletResponse</span> response)</span><br><span class="line">          <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line">         doGet(request, response);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>Servlet可以动态的拦截请求和响应，用于变化和使用包含在其中的信息<br>Servlet过滤器是可以用于Servlet编程的Java类，主要目的有以下几个</p><ul><li>客户端的请求访问资源之前，拦截这些请求</li><li>服务器的响应范送给客户端之前，处理这些响应</li></ul><p>Servlet过滤器的作用：</p><ol><li>查询请求并作出相应的行为</li><li>阻塞请求-响应对，使其不能进一步传递</li><li>修改请求头部和数据，用户可以提供自定义请求</li><li>修改响应的头部和数据，用户可以通过提供定制的响应版本来实现</li><li>与外部资源进行交互</li></ol><p>根据规范建议的各类型过滤器：</p><ol><li>身份验证过滤器（Authentication Filters）。</li><li>数据压缩过滤器（Data compression Filters）。</li><li>加密过滤器（Encryption Filters）。</li><li>触发资源访问事件过滤器。</li><li>图像转换过滤器（Image Conversion Filters）。</li><li>日志记录和审核过滤器（Logging and Auditing Filters）。</li><li>MIME-TYPE 链过滤器（MIME-TYPE Chain Filters）。</li><li>标记化过滤器（Tokenizing Filters）。</li><li>XSL/T 过滤器（XSL/T Filters），转换 XML 内容</li></ol><p>过滤器通过web部署文件(web.xml)中的XML标签，然后映射到应用程序的部署描述符中的 Servlet 名称或 URL 模式<br>当web容器启动web应用程序时，他会在部署描述符中声明的每一个过滤器创建一个实例。<br>Filter执行的顺序鱼仔web.xml文件中声明的顺序是一致的。一般我们将Filter的声明放在Servlet之前</p><p>Filter的常用方法如下：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>public void doFilter(ServletRequest request,ServletResponse response)</td><td>该方法完成实际的过滤操作，当客户端请求方法和过滤器设置的URL匹配时，Servlet容器会优先调用过滤器中的doFilter方法，FilterChain用户访问后续过滤器</td></tr><tr><td>public void init(FilterConfig config)</td><td>web应用程序启动时，web服务器将创建Filter对象实例，并调用init方法，读取web.xml中的配置信息，完成对象初始化。filter对象只会创建一次，init方法也只会执行一次，开发人员通过init方法获取参数，可获取当前代表filter配置信息的FilterConfig对象</td></tr><tr><td>public void destory()</td><td>Servlet在销毁过滤器实例之前调用的方法，在该方法中释放资源</td></tr></tbody></table><p>Servlet过滤器创建的步骤：</p><ol><li>实现Filter接口</li><li>实现init方法，读取过滤器初始化参数</li><li>实现doFilter方法，完成对请求或过滤的响应</li><li>调用FilterChain接口对象的doFilter方法，向后续过滤器传递请求或响应</li><li>销毁过滤器</li></ol><p>例子：<br>web.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--请求url日志记录过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>logfilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.paulniu.filter.LogFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>logfilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--编码过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingfilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.paulniu.filter.EncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingfilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--测试Servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DemoServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.paulniu.servlet.DemoServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DemoServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>日志过滤器</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> LogFilter implements Filter &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FilterConfig config;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;paulniu:start do the logging filter&quot;</span>);</span><br><span class="line">        this.config = config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void <span class="keyword">do</span><span class="constructor">Filter(ServletRequest <span class="params">servletRequest</span>, ServletResponse <span class="params">servletResponse</span>, FilterChain <span class="params">filterChain</span>)</span> throws IOException, ServletException &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;paulniu:before the log filter&quot;</span>);</span><br><span class="line">        <span class="comment">// 将请求转换成HttpServletRequest</span></span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="comment">// 将响应转换成HttpServletResponse</span></span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) servletResponse;</span><br><span class="line">        <span class="comment">// 记录日志</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;Log Filter 已经截取到用户请求的地址=&quot;</span> + request.get<span class="constructor">ServletPath()</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Filter 只链式处理，请求依然转发到目的地址</span></span><br><span class="line">            filterChain.<span class="keyword">do</span><span class="constructor">Filter(<span class="params">request</span>, <span class="params">response</span>)</span>;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;paulniu:after the log filter&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销毁日志过滤器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    public void destroy<span class="literal">()</span> &#123;</span><br><span class="line">        this.config = null;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;paulniu:end do the logging filter&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编码过滤器</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> EncodingFilter implements Filter &#123;</span><br><span class="line">    <span class="keyword">private</span> String encoding;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String, String&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class="line">        <span class="comment">// 项目开始时就已经进行读取</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;paulniu:before do the encoding filter&quot;</span>);</span><br><span class="line">        encoding = filterConfig.get<span class="constructor">InitParameter(<span class="string">&quot;encoding&quot;</span>)</span>;</span><br><span class="line">        <span class="keyword">for</span> (Enumeration&lt;?&gt; e = filterConfig.get<span class="constructor">InitParameterNames()</span>; e.has<span class="constructor">MoreElements()</span>; ) &#123;</span><br><span class="line">            String name = (String) e.next<span class="constructor">Element()</span>;</span><br><span class="line">            String value = filterConfig.get<span class="constructor">InitParameter(<span class="params">name</span>)</span>;</span><br><span class="line">            params.put(name, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void <span class="keyword">do</span><span class="constructor">Filter(ServletRequest <span class="params">servletRequest</span>, ServletResponse <span class="params">servletResponse</span>, FilterChain <span class="params">filterChain</span>)</span> throws IOException, ServletException &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;paulniu:before encoding &quot;</span> + encoding + <span class="string">&quot; filter!&quot;</span>);</span><br><span class="line">        servletRequest.set<span class="constructor">CharacterEncoding(<span class="params">encoding</span>)</span>;</span><br><span class="line">        filterChain.<span class="keyword">do</span><span class="constructor">Filter(<span class="params">servletRequest</span>, <span class="params">servletResponse</span>)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;after encoding &quot;</span> + encoding + <span class="string">&quot; filter！&quot;</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>err.println(<span class="string">&quot;----------------------------------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void destroy<span class="literal">()</span> &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;paulniu:end do the encoding filter&quot;</span>);</span><br><span class="line">        params = null;</span><br><span class="line">        encoding = null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Servlet测试</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(name = <span class="string">&quot;DemoServlet&quot;</span>)</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">DemoServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> void doPost(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response) <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> void doGet(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response) <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：<br><img src="/assets/JavaEE/javaweb_04.png" alt="过滤器demo"></p><h3 id="Servlet监听器"><a href="#Servlet监听器" class="headerlink" title="Servlet监听器"></a>Servlet监听器</h3><p>Servlet监听器用于监听一些重要的事情发生，监听器对象可以在事情发生前，发生后做一些必要的处理</p><p>ServletContextListener：用于监听web应用的启动和销毁事件，监听器类需要实现ServletContextListener接口</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class QuartzListener implements ServletContextListener &#123;  </span><br><span class="line">  </span><br><span class="line">    private Logger logger = LoggerFactory.getLogger(QuartzListener.class);  </span><br><span class="line">  </span><br><span class="line">    public void contextInitialized(ServletContextEvent <span class="keyword">sce) </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     *在服务器停止运行的时候停止所有的定时任务 </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    @SuppressWarnings(<span class="string">&quot;unchecked&quot;</span>)  </span><br><span class="line">    public void contextDestroyed(ServletContextEvent arg0) &#123;  </span><br><span class="line">        try &#123;  </span><br><span class="line">            <span class="keyword">Scheduler </span><span class="keyword">scheduler </span>= StdSchedulerFactory.getDefaultScheduler();  </span><br><span class="line">            List&lt;<span class="keyword">JobExecutionContext&gt; </span><span class="keyword">jobList </span>= <span class="keyword">scheduler.getCurrentlyExecutingJobs(); </span> </span><br><span class="line">            for (<span class="keyword">JobExecutionContext </span><span class="keyword">jobContext </span>: <span class="keyword">jobList) </span>&#123;  </span><br><span class="line">                <span class="keyword">Job </span><span class="keyword">job </span>= <span class="keyword">jobContext.getJobInstance(); </span> </span><br><span class="line">                if (<span class="keyword">job </span><span class="keyword">instanceof </span>InterruptableJob) &#123;  </span><br><span class="line">                    ((InterruptableJob) <span class="keyword">job).interrupt(); </span> </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">scheduler.shutdown(); </span> </span><br><span class="line">        &#125; catch (<span class="keyword">SchedulerException </span>e) &#123;  </span><br><span class="line">            logger.error(<span class="string">&quot;shut down scheduler happened error&quot;</span>, e);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ServletContextAttributeListener:用于监听Web应用属性改变的事件，包括增加属性，删除属性，修改属性，监听器类需要实现ServletContextAttributeListener接口</p><p>HttpSessionListener：用于监听Session对象的创建和销毁，监听器类需要实现HttpSessionListener接口或者HttpSessionActivationListener接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent arg0)</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent event)</span> </span>&#123;  </span><br><span class="line">        HttpSession session = event.getSession();  </span><br><span class="line">        User user = (BrsSession) session.getAttribute(<span class="string">&quot;currUser&quot;</span>);  </span><br><span class="line">        <span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123;  </span><br><span class="line">            <span class="comment">//TODO something  </span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>HttpSessionActivationListener:用于监听Session对象的钝化/活化事件，监听器类需要实现javax.servlet.http.HttpSessionListener接口或者javax.servlet.http.HttpSessionActivationListener接口，或者两个都实现。</p><p>HttpSessionAttributeListener：用于监听Session对象属性的改变事件，监听类需要实现</p><p>部署：监听器的部署在web.xml文件中配置，在配置文件中，它的位置应该在过滤器的后面Servlet的前面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Quartz监听器 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>  </span><br><span class="line">        com.flyer.lisenter.QuartzListener  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span> </span><br></pre></td></tr></table></figure><h2 id="Servlet异常处理"><a href="#Servlet异常处理" class="headerlink" title="Servlet异常处理"></a>Servlet异常处理</h2><p>当一个Servlet抛出一个异常，Web容器通过exception-type元素的web.xml中搜索和抛出异常类型相匹配的设置<br>必须在 web.xml 中使用 error-page 元素来指定对特定异常 或 HTTP 状态码 作出相应的 Servlet 调用</p><p>web.xml配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--请求url日志记录过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>logfilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.paulniu.filter.LogFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>logfilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--编码过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingfilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.paulniu.filter.EncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingfilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--error-code相关页面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">location</span>&gt;</span>/ErrorHandler<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>403<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">location</span>&gt;</span>/ErrorHandler<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--exception-type相关页面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exception-type</span>&gt;</span>javax.servlet.ServletException<span class="tag">&lt;/<span class="name">exception-type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">location</span>&gt;</span>/ErrorHandler<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exception-type</span>&gt;</span>java.io.IOException<span class="tag">&lt;/<span class="name">exception-type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">location</span>&gt;</span>/ErrorHandler<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--测试Servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DemoServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.paulniu.servlet.DemoServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DemoServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--错误处理Servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ErrorHandler<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.paulniu.servlet.ErrorHandler<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ErrorHandler<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/ErrorHandler<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>异常处理页面：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">public class ErrorHandler extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        Throwable throwable = (Throwable)</span><br><span class="line">                request.getAttribute(<span class="string">&quot;javax.servlet.error.exception&quot;</span>);</span><br><span class="line">        Integer statusCode = (Integer)</span><br><span class="line">                request.getAttribute(<span class="string">&quot;javax.servlet.error.status_code&quot;</span>);</span><br><span class="line">        String servletName = (String)</span><br><span class="line">                request.getAttribute(<span class="string">&quot;javax.servlet.error.servlet_name&quot;</span>);</span><br><span class="line">        <span class="meta">if</span> (servletName == <span class="meta">null</span>) &#123;</span><br><span class="line">            servletName = <span class="string">&quot;Unknown&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String requestUri = (String)</span><br><span class="line">                request.getAttribute(<span class="string">&quot;javax.servlet.error.request_uri&quot;</span>);</span><br><span class="line">        <span class="meta">if</span> (requestUri == <span class="meta">null</span>) &#123;</span><br><span class="line">            requestUri = <span class="string">&quot;Unknown&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        // 设置响应内容类型</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        PrintWriter <span class="meta">out</span> = response.getWriter();</span><br><span class="line">        String <span class="meta">title</span> = <span class="string">&quot;JavaWeb Error/Exception 信息&quot;</span>;</span><br><span class="line"></span><br><span class="line">        String docType = <span class="string">&quot;&lt;!DOCTYPE html&gt;\n&quot;</span>;</span><br><span class="line">        <span class="meta">out</span>.print<span class="meta">ln(</span>docType +</span><br><span class="line">                <span class="string">&quot;&lt;html&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;head&gt;&lt;title&gt;&quot;</span> + <span class="meta">title</span> + <span class="string">&quot;&lt;/title&gt;&lt;/head&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;body bgcolor=\&quot;#f0f0f0\&quot;&gt;\n&quot;</span>);</span><br><span class="line">        <span class="meta">out</span>.print<span class="meta">ln(</span><span class="string">&quot;&lt;h1&gt;JavaWeb异常信息实例演示&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        <span class="meta">if</span> (throwable == <span class="meta">null</span> <span class="variable">&amp;&amp;</span> statusCode == <span class="meta">null</span>) &#123;</span><br><span class="line">            <span class="meta">out</span>.print<span class="meta">ln(</span><span class="string">&quot;&lt;h2&gt;错误信息丢失&lt;/h2&gt;&quot;</span>);</span><br><span class="line">            <span class="meta">out</span>.print<span class="meta">ln(</span><span class="string">&quot;请返回 &lt;a href=\&quot;&quot;</span> +</span><br><span class="line">                    response.encodeURL(<span class="string">&quot;http://localhost:8080/&quot;</span>) +</span><br><span class="line">                    <span class="string">&quot;\&quot;&gt;主页&lt;/a&gt;。&quot;</span>);</span><br><span class="line">        &#125; <span class="meta">else</span> <span class="meta">if</span> (statusCode != <span class="meta">null</span>) &#123;</span><br><span class="line">            <span class="meta">out</span>.print<span class="meta">ln(</span><span class="string">&quot;错误代码 : &quot;</span> + statusCode);</span><br><span class="line">        &#125; <span class="meta">else</span> &#123;</span><br><span class="line">            <span class="meta">out</span>.print<span class="meta">ln(</span><span class="string">&quot;&lt;h2&gt;错误信息&lt;/h2&gt;&quot;</span>);</span><br><span class="line">            <span class="meta">out</span>.print<span class="meta">ln(</span><span class="string">&quot;Servlet Name : &quot;</span> + servletName +</span><br><span class="line">                    <span class="string">&quot;&lt;/br&gt;&lt;/br&gt;&quot;</span>);</span><br><span class="line">            <span class="meta">out</span>.print<span class="meta">ln(</span><span class="string">&quot;异常类型 : &quot;</span> +</span><br><span class="line">                    throwable.getClass().getName() +</span><br><span class="line">                    <span class="string">&quot;&lt;/br&gt;&lt;/br&gt;&quot;</span>);</span><br><span class="line">            <span class="meta">out</span>.print<span class="meta">ln(</span><span class="string">&quot;请求 URI: &quot;</span> + requestUri +</span><br><span class="line">                    <span class="string">&quot;&lt;br&gt;&lt;br&gt;&quot;</span>);</span><br><span class="line">            <span class="meta">out</span>.print<span class="meta">ln(</span><span class="string">&quot;异常信息: &quot;</span> +</span><br><span class="line">                    throwable.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">out</span>.print<span class="meta">ln(</span><span class="string">&quot;&lt;/body&gt;&quot;</span>);</span><br><span class="line">        <span class="meta">out</span>.print<span class="meta">ln(</span><span class="string">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：<br>在浏览器中输入错误的地址<br><img src="/assets/JavaEE/javaweb_05.png" alt="Servlet异常"></p><h2 id="Servlet-Cookie处理"><a href="#Servlet-Cookie处理" class="headerlink" title="Servlet Cookie处理"></a>Servlet Cookie处理</h2><p>Cookie是存储在客户端上的文本文件，由服务器生成，发送给User-Agent，浏览器会将Cookie的key/value保存到某个目录下的文本文件内，下次请求同一网站时，发送该Cookie给服务器。Cookie的key和value都是由服务器自己规定的，对于JSP而言可以直接写入JSESSIONID用于标记一个回话的Session，这样服务器可以知道该用户是否为合法用户或是否需要重新登录，服务器可以设置和读取Cookie中的信息，借此维护用户在服务器中的状态</p><p>Cookie的原理：</p><ol><li>首先浏览器想服务器发送请求</li><li>服务器会根据需求生成一个Cookie对象，并且把数据保存在该对象中</li><li>然后把Cookie对象放在响应头中，并发送会给浏览器</li><li>浏览器收到服务器响应之后，提出该Cookie保存在浏览器端</li><li>当浏览器再次访问那个服务器，会把这个Cookie放在请求头并发送给服务器</li><li>服务器从请求头中提取Cookie，判别数据执行相应的操作</li></ol><h3 id="Cookie剖析"><a href="#Cookie剖析" class="headerlink" title="Cookie剖析"></a>Cookie剖析</h3><p>Cookie通常设置在HTTP头信息中(虽然JavaScript也可以直接在浏览器设置一个Cookie)。设置Cookie的Servlet会发送如下的头信息<br><img src="/assets/JavaEE/javaweb_06.png" alt="图片是我拷贝的"></p><p>如图所示，Set-Cookie头包含了一个名称值对，一个GMT日期，一个路径和一个域。名称和值会被URL编码。expires字段是一个指令，告诉浏览器在给定的时间和日期之后忘记Cookie<br>如果浏览器被配置为存储Cookie，他将会保留此信息直到到期日期。如果用户的浏览器指向任何匹配该Cookie的路径和域的页面，他会重新发送Cookie到服务器，浏览器的头信息可能如下：<br><img src="/assets/JavaEE/javaweb_07.png" alt="图片是我拷贝的"></p><p>Cookie方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>public void setDomain(String pattern)</td><td>该方法设置cookie使用的域</td></tr><tr><td>public String getDomain()</td><td>该方法获取cookie适用的域</td></tr><tr><td>public void setMaxAge(int expiry)</td><td>设置cookie过期的时间，以秒为单位，如果不设置，则cookie会在当前Session会话中持续有效</td></tr><tr><td>public int getMaxAge()</td><td>该方法返回cookie的最大生存周期，以秒为单位，默认情况下为-1，表示cookie会持续下去，知道浏览器关闭</td></tr><tr><td>public String getName()</td><td>该方法返回cookie名称，名称在创建后不能改变</td></tr><tr><td>public void setValue(String newValue)</td><td>该方法设置与cookie关联的值</td></tr><tr><td>public String getValue()</td><td>方法获取与cookie相关联的值</td></tr><tr><td>public void setPath(String uri)</td><td>该方法设置cookie使用的路径，如果不指定路径，与当前页面相同目录下的(包括子目录)所有URL都会返回cookie</td></tr><tr><td>public String getPath()</td><td>该方法获取Cookie使用的路径</td></tr><tr><td>public void setSecure(boolean flag)</td><td>该方法设置布尔值，表示cookie是否应该只在加密的(即SSL)连接上发送</td></tr><tr><td>public void setComment(String purpose)</td><td>设置cookie的注解，该注解在浏览器向用户呈现cookie时非常有用</td></tr><tr><td>public String getComment()</td><td>获取cookie的注释，如果cookie没有注释则返回null</td></tr></tbody></table><h3 id="Cookie的使用"><a href="#Cookie的使用" class="headerlink" title="Cookie的使用"></a>Cookie的使用</h3><p>创建一个Cookie</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> CookieServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void <span class="keyword">do</span><span class="constructor">Post(HttpServletRequest <span class="params">req</span>, HttpServletResponse <span class="params">resp</span>)</span> throws ServletException, IOException &#123;</span><br><span class="line">        <span class="keyword">do</span><span class="constructor">Get(<span class="params">req</span>, <span class="params">resp</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void <span class="keyword">do</span><span class="constructor">Get(HttpServletRequest <span class="params">req</span>, HttpServletResponse <span class="params">resp</span>)</span> throws ServletException, IOException &#123;</span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> <span class="constructor">Cookie(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;value&quot;</span>)</span>;</span><br><span class="line">        resp.add<span class="constructor">Cookie(<span class="params">cookie</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到浏览器传递的cookie数据</span></span><br><span class="line">        Cookie<span class="literal">[]</span> cookies = req.get<span class="constructor">Cookies()</span>;</span><br><span class="line">        <span class="keyword">if</span> (cookies != null) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie c : cookies) &#123;</span><br><span class="line">                String name = c.get<span class="constructor">Name()</span>;</span><br><span class="line">                String value = c.get<span class="constructor">Value()</span>;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(name + <span class="string">&quot;=&quot;</span> + value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;没有Cookie信息！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="/assets/JavaEE/javaweb_08.png" alt="Cookie使用"></p><p>这里我们可以模拟一个登陆的例子，因为里面需要使用到Session的内容，所以我们等Session的内容完成之后一块写一个例子</p><h2 id="Servlet中的Session"><a href="#Servlet中的Session" class="headerlink" title="Servlet中的Session"></a>Servlet中的Session</h2><p>HTTP是一种无状态的协议，这意味着每次客户端检索网页时，客户端打开一个单独的链接到服务器，服务器会自动不保留之前客户端的任何请求记录。但是仍然以下面三种方式维持客户端和服务器之间的session回话</p><ul><li>Cookie:一个web服务器可以分配一个唯一的SessionID作为每一个客户端的Cookie，对于客户端的后续请求，可以使用接收到的Cookie来识别。(但是很多浏览器可能不支持Cookie，所以这个并不是最优的解决方案)</li><li>隐藏的表单字段：一个Web服务器可以发送一个隐藏的HTML表单字段，以及唯一的一个Session回话ID，如<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="attribute">type</span>=<span class="string">&quot;hide&quot;</span> <span class="attribute">name</span>=<span class="string">&quot;sessionid&quot;</span> <span class="attribute">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><br></pre></td></tr></table></figure>,这意味着当表单被提交的时候，指定的名称和值会自动包含在GET和POST请求中。每当浏览器发送请求时，session_id值可以可以用于保持不同浏览器的追踪。这个方式相对而言比较合理，但是对于一些超链接标签，我们没有发送网络请求，所以不会提交表单，所以也不是非常好的解决办法</li><li>URL重定向：我们可以为每一个URL的末尾追加一些额外的数据来标识session会话。服务器会将传递过来session标识和已存储的相关session会话数据相关联，如：<a href="http://www.paulniu.com/login.jsp;sessionid=123456">http://www.paulniu.com/login.jsp;sessionid=123456</a> URL重定向是一种更好的方式来维持Session会话，他在浏览器不支持Cookie时可以很好的完成维持Session会话的工作，缺点是会动态的生成每个URL来为页面分配一个sessionid，即使是很简单的静态页面也是如此。</li></ul><p>除了上面的三种方式，Servlet还提供了HttpSession接口，该接口提供了一种跨多个页面请求或访问网站时识别用户以及存储用户相关信息的方法。<br>Servlet 容器使用这个接口来创建一个 HTTP 客户端和 HTTP 服务器之间的 session 会话。会话持续一个指定的时间段，跨多个连接或页面请求。<br>我们会通过调用 HttpServletRequest 的公共方法 getSession() 来获取 HttpSession 对象</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpSession session = request.getSession()<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>Session常用方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>public Object getAttribute(String name)</td><td>该方法返回在该Session会话中具有指定名称的对象，如果没有指定名称的对象，返回null</td></tr><tr><td>public Enumeration getAttributeNames()</td><td>该方法返回String类型对象的枚举，String对象包含所有绑定到该Session会话的对象的名称</td></tr><tr><td>public long getCreationTime()</td><td>该方法返回Session会话被创建的时间,以毫秒为单位</td></tr><tr><td>public String getId()</td><td>该方法返回一个包含Session会话唯一标识符的字符串</td></tr><tr><td>public long getLastAccessedTime()</td><td>该方法返回客户端最后一次发送与Session会话相关的请求的时间，以毫秒为单位</td></tr><tr><td>public int getMaxInactiveInterval()</td><td>该方法返回Servlet容器在客户端访问时保持session会话打开的最大时间间隔，以秒为单位</td></tr><tr><td>public void invalindate()</td><td>指示该Session会话无效，并解除绑定到它上面的任何对象</td></tr><tr><td>public boolean isNew()</td><td>如果客户端还不知道该Session会话，或者客户端选择不参与该Session会话，返回true</td></tr><tr><td>public void removeAttribute(String name)</td><td>从Session会话中移除指定名称对象</td></tr><tr><td>public void setAttribute(String name,Object value)</td><td>该方法使用指定的名称绑定一个对象到该Session会话</td></tr><tr><td>public void setMaxInactiveInterval(int interval)</td><td>该方法在Servlet中指示该Session会话无效之前，指定客户端请求之前的时间，以秒为单位</td></tr></tbody></table><p>Session追踪实例：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> SessionTrackServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> static final long serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void <span class="keyword">do</span><span class="constructor">Post(HttpServletRequest <span class="params">req</span>, HttpServletResponse <span class="params">resp</span>)</span> throws ServletException, IOException &#123;</span><br><span class="line">        <span class="keyword">do</span><span class="constructor">Get(<span class="params">req</span>, <span class="params">resp</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void <span class="keyword">do</span><span class="constructor">Get(HttpServletRequest <span class="params">req</span>, HttpServletResponse <span class="params">response</span>)</span> throws ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 如果不存在Session会话，则创建一个Session会话</span></span><br><span class="line">        HttpSession session = req.get<span class="constructor">Session(<span class="params">true</span>)</span>;</span><br><span class="line">        <span class="comment">// 获取Session创建的时间</span></span><br><span class="line">        Date createTime = <span class="keyword">new</span> <span class="constructor">Date(<span class="params">session</span>.<span class="params">getCreationTime</span>()</span>);</span><br><span class="line">        <span class="comment">// 获取该网页最后一次访问的时间</span></span><br><span class="line">        Date lastAccessTime = <span class="keyword">new</span> <span class="constructor">Date(<span class="params">session</span>.<span class="params">getLastAccessedTime</span>()</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置日期输出格式</span></span><br><span class="line">        SimpleDateFormat df = <span class="keyword">new</span> <span class="constructor">SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)</span>;</span><br><span class="line"></span><br><span class="line">        String title = <span class="string">&quot;Servlet session 实例&quot;</span>;</span><br><span class="line">        Integer visitCount = <span class="keyword">new</span> <span class="constructor">Integer(0)</span>;</span><br><span class="line">        String visitCountKey = <span class="keyword">new</span> <span class="constructor">String(<span class="string">&quot;visitCount&quot;</span>)</span>;</span><br><span class="line">        String userIDKey = <span class="keyword">new</span> <span class="constructor">String(<span class="string">&quot;userID&quot;</span>)</span>;</span><br><span class="line">        String userID = <span class="keyword">new</span> <span class="constructor">String(<span class="string">&quot;paulniu&quot;</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (session.get<span class="constructor">Attribute(<span class="params">visitCountKey</span>)</span><span class="operator"> == </span>null) &#123;</span><br><span class="line">            session.set<span class="constructor">Attribute(<span class="params">visitCountKey</span>, <span class="params">new</span> Integer(0)</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查网页上是否有新的访问者</span></span><br><span class="line">        <span class="keyword">if</span> (session.is<span class="constructor">New()</span>) &#123;</span><br><span class="line">            title = <span class="string">&quot;Servlet Session 实例&quot;</span>;</span><br><span class="line">            session.set<span class="constructor">Attribute(<span class="params">userIDKey</span>, <span class="params">userID</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            visitCount = (Integer) session.get<span class="constructor">Attribute(<span class="params">visitCountKey</span>)</span>;</span><br><span class="line">            visitCount = visitCount + <span class="number">1</span>;</span><br><span class="line">            userID = (String) session.get<span class="constructor">Attribute(<span class="params">userIDKey</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        session.set<span class="constructor">Attribute(<span class="params">visitCountKey</span>, <span class="params">visitCount</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置响应内容类型</span></span><br><span class="line">        response.set<span class="constructor">ContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>)</span>;</span><br><span class="line">        PrintWriter out = response.get<span class="constructor">Writer()</span>;</span><br><span class="line"></span><br><span class="line">        String docType = <span class="string">&quot;&lt;!DOCTYPE html&gt;\n&quot;</span>;</span><br><span class="line">        out.println(docType +</span><br><span class="line">                <span class="string">&quot;&lt;html&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;head&gt;&lt;title&gt;&quot;</span> + title + <span class="string">&quot;&lt;/title&gt;&lt;/head&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;body bgcolor=\&quot;#f0f0f0\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;h1 align=\&quot;center\&quot;&gt;&quot;</span> + title + <span class="string">&quot;&lt;/h1&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;h2 align=\&quot;center\&quot;&gt;Session 信息&lt;/h2&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;table border=\&quot;1\&quot; align=\&quot;center\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;tr bgcolor=\&quot;#949494\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;th&gt;Session 信息&lt;/th&gt;&lt;th&gt;值&lt;/th&gt;&lt;/tr&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;tr&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;td&gt;id&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;td&gt;&quot;</span> + session.get<span class="constructor">Id()</span> + <span class="string">&quot;&lt;/td&gt;&lt;/tr&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;tr&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;td&gt;创建时间&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;td&gt;&quot;</span> + df.format(createTime) +</span><br><span class="line">                <span class="string">&quot;  &lt;/td&gt;&lt;/tr&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;tr&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;td&gt;最后访问时间&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;td&gt;&quot;</span> + df.format(lastAccessTime) +</span><br><span class="line">                <span class="string">&quot;  &lt;/td&gt;&lt;/tr&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;tr&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;td&gt;用户 ID&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;td&gt;&quot;</span> + userID +</span><br><span class="line">                <span class="string">&quot;  &lt;/td&gt;&lt;/tr&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;tr&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;td&gt;访问统计：&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;td&gt;&quot;</span> + visitCount + <span class="string">&quot;&lt;/td&gt;&lt;/tr&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;/table&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理结果：<br><img src="/assets/JavaEE/javaweb_09.png" alt="session追踪"></p><h2 id="登录demo"><a href="#登录demo" class="headerlink" title="登录demo"></a>登录demo</h2><p>使用Cookie登录</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> LoginCookieServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> static final long serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    public <span class="constructor">LoginCookieServlet()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected void <span class="keyword">do</span><span class="constructor">Post(HttpServletRequest <span class="params">request</span>, HttpServletResponse <span class="params">response</span>)</span> throws ServletException, IOException &#123;</span><br><span class="line">        <span class="keyword">do</span><span class="constructor">Get(<span class="params">request</span>,<span class="params">response</span>)</span>;</span><br><span class="line">        <span class="comment">// 获取表达中的username和password</span></span><br><span class="line">        String username = request.get<span class="constructor">Parameter(<span class="string">&quot;username&quot;</span>)</span>;</span><br><span class="line">        String password = request.get<span class="constructor">Parameter(<span class="string">&quot;password&quot;</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义一个名为username</span></span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> <span class="constructor">Cookie(<span class="params">username</span>,<span class="params">password</span>)</span>;</span><br><span class="line">        cookie.set<span class="constructor">Path(<span class="string">&quot;&quot;</span>)</span>;</span><br><span class="line">        cookie.set<span class="constructor">Comment(<span class="string">&quot;这是一个cookie&quot;</span>)</span>;</span><br><span class="line">        response.add<span class="constructor">Cookie(<span class="params">cookie</span>)</span>;</span><br><span class="line">        request.get<span class="constructor">RequestDispatcher(<span class="string">&quot;loginSuccess.jsp&quot;</span>)</span>.forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected void <span class="keyword">do</span><span class="constructor">Get(HttpServletRequest <span class="params">request</span>, HttpServletResponse <span class="params">response</span>)</span> throws ServletException, IOException &#123;</span><br><span class="line">        response.get<span class="constructor">Writer()</span>.append(<span class="string">&quot;serverd ad:&quot;</span>).append(request.get<span class="constructor">ServletPath()</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jsp页面</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">&lt;%</span><span class="ruby">@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="/assets/JavaEE/javaweb_10.png" alt="登陆成功之后将cookie对象发送到浏览器中"></p><p>使用Session登录</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> LoginSessionServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> static final long serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void <span class="keyword">do</span><span class="constructor">Get(HttpServletRequest <span class="params">req</span>, HttpServletResponse <span class="params">resp</span>)</span> throws ServletException, IOException &#123;</span><br><span class="line">        resp.get<span class="constructor">Writer()</span>.append(<span class="string">&quot;served at: &quot;</span>).append(req.get<span class="constructor">ServletPath()</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void <span class="keyword">do</span><span class="constructor">Post(HttpServletRequest <span class="params">req</span>, HttpServletResponse <span class="params">resp</span>)</span> throws ServletException, IOException &#123;</span><br><span class="line">        String username = req.get<span class="constructor">Parameter(<span class="string">&quot;username&quot;</span>)</span>;</span><br><span class="line">        String password = req.get<span class="constructor">Parameter(<span class="string">&quot;password&quot;</span>)</span>;</span><br><span class="line">        User user = <span class="keyword">new</span> <span class="constructor">User(<span class="params">username</span>,<span class="params">password</span>)</span>;</span><br><span class="line"></span><br><span class="line">        DateFormat dateFormat = <span class="keyword">new</span> <span class="constructor">SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)</span>;</span><br><span class="line">        String dateTime = dateFormat.format(<span class="keyword">new</span> <span class="constructor">Date()</span>);</span><br><span class="line">        HttpSession session = req.get<span class="constructor">Session()</span>;</span><br><span class="line">        session.set<span class="constructor">Attribute(<span class="string">&quot;user&quot;</span>,<span class="params">user</span>)</span>;</span><br><span class="line">        session.set<span class="constructor">Attribute(<span class="string">&quot;loginTime&quot;</span>,<span class="params">dateTime</span>)</span>;</span><br><span class="line">        session.set<span class="constructor">Attribute(<span class="string">&quot;sessionId&quot;</span>,<span class="params">session</span>.<span class="params">getId</span>()</span>);</span><br><span class="line">        <span class="comment">// 请求转发</span></span><br><span class="line">        req.get<span class="constructor">RequestDispatcher(<span class="string">&quot;loginSuccess.jsp&quot;</span>)</span>.forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jsp页面：</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">// login.jsp</span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby">@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;loginsession&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// loginSuccess.jsp</span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby">@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby"><span class="variable">@page</span> import=<span class="string">&quot;java.text.DateFormat&quot;</span> </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">jsp:directive.page</span> <span class="attr">import</span>=<span class="string">&quot;com.paulniu.bean.User&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby"> User user = (User) session.getAttribute(<span class="string">&quot;user&quot;</span>);</span></span><br><span class="line"><span class="ruby">    String dateTime = (String) session.getAttribute(<span class="string">&quot;loginTime&quot;</span>);</span></span><br><span class="line"><span class="ruby">    String sessionId = (String) session.getAttribute(<span class="string">&quot;sessionId&quot;</span>);</span></span><br><span class="line"><span class="ruby"></span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录结果页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">Hello,this is an index page.<span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    用户名：&lt;%=</span><span class="ruby">user.getUserName()</span><span class="xml">%&gt;<span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    密码：&lt;%=</span><span class="ruby">user.getPassword()</span><span class="xml">%&gt;<span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    登陆时间：&lt;%=</span><span class="ruby">dateTime </span><span class="xml">%&gt;<span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    SessionId：&lt;%=</span><span class="ruby">sessionId </span><span class="xml">%&gt;<span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>User对象</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> userName;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">User</span>(<span class="params"><span class="built_in">String</span> userName, <span class="built_in">String</span> password</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userName = userName;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">User</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">getUserName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setUserName</span>(<span class="params"><span class="built_in">String</span> userName</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">getPassword</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setPassword</span>(<span class="params"><span class="built_in">String</span> password</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;userName=&#x27;&quot;</span> + userName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在没有提交表单之前<br><img src="/assets/JavaEE/javaweb_11.png" alt="原始SessionID"></p><p>表单提交之后<br><img src="/assets/JavaEE/javaweb_12.png" alt="从服务器端返回的SessionID"></p><h2 id="Servlet-数据库"><a href="#Servlet-数据库" class="headerlink" title="Servlet 数据库"></a>Servlet 数据库</h2><p>准备测试数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `websites` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">char</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;站点名称&#x27;</span>,</span><br><span class="line">  `url` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `alexa` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;Alexa 排名&#x27;</span>,</span><br><span class="line">  `country` <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;国家&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">10</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `websites` <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;https://www.google.cm/&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;USA&#x27;</span>), (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;淘宝&#x27;</span>, <span class="string">&#x27;https://www.taobao.com/&#x27;</span>, <span class="string">&#x27;13&#x27;</span>, <span class="string">&#x27;CN&#x27;</span>), (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;菜鸟教程&#x27;</span>, <span class="string">&#x27;http://www.runoob.com&#x27;</span>, <span class="string">&#x27;5892&#x27;</span>, <span class="string">&#x27;&#x27;</span>), (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;微博&#x27;</span>, <span class="string">&#x27;http://weibo.com/&#x27;</span>, <span class="string">&#x27;20&#x27;</span>, <span class="string">&#x27;CN&#x27;</span>), (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;Facebook&#x27;</span>, <span class="string">&#x27;https://www.facebook.com/&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;USA&#x27;</span>);</span><br></pre></td></tr></table></figure><p>访问数据库</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class DataBaseServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1</span>l;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//JDBC驱动名以及数据库URL</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> JDBC_DRIVER = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> DB_URL = <span class="string">&quot;jdbc:mysql://localhost:3306/javawebdb&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据库的用户名和密码</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> USER = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> PASS = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DataBaseServlet() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> doGet(HttpServletRequest req, HttpServletResponse resp) <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 设置响应内容类型</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        PrintWriter out = resp.getWriter();</span><br><span class="line">        <span class="keyword">String</span> title = <span class="string">&quot;Servlet Mysql 测试&quot;</span>;</span><br><span class="line">        <span class="keyword">String</span> docType = <span class="string">&quot;&lt;!DOCTYPE html&gt;\n&quot;</span>;</span><br><span class="line">        out.<span class="built_in">println</span>(docType +</span><br><span class="line">                <span class="string">&quot;&lt;html&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;head&gt;&lt;title&gt;&quot;</span> + title + <span class="string">&quot;&lt;/title&gt;&lt;/head&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;body bgcolor=\&quot;#f0f0f0\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;h1 align=\&quot;center\&quot;&gt;&quot;</span> + title + <span class="string">&quot;&lt;/h1&gt;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 注册 JDBC 驱动器</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 打开一个连接</span></span><br><span class="line">            conn = DriverManager.getConnection(DB_URL, USER, PASS);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行 SQL 查询</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            <span class="keyword">String</span> sql;</span><br><span class="line">            sql = <span class="string">&quot;SELECT id, name, url FROM websites&quot;</span>;</span><br><span class="line">            ResultSet rs = stmt.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 展开结果集数据库</span></span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                <span class="comment">// 通过字段检索</span></span><br><span class="line">                <span class="built_in">int</span> id = rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                <span class="keyword">String</span> name = rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                <span class="keyword">String</span> url = rs.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 输出数据</span></span><br><span class="line">                out.<span class="built_in">println</span>(<span class="string">&quot;ID: &quot;</span> + id);</span><br><span class="line">                out.<span class="built_in">println</span>(<span class="string">&quot;, 站点名称: &quot;</span> + name);</span><br><span class="line">                out.<span class="built_in">println</span>(<span class="string">&quot;, 站点 URL: &quot;</span> + url);</span><br><span class="line">                out.<span class="built_in">println</span>(<span class="string">&quot;&lt;br /&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            out.<span class="built_in">println</span>(<span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 完成后关闭</span></span><br><span class="line">            rs.close();</span><br><span class="line">            stmt.close();</span><br><span class="line">            conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException se) &#123;</span><br><span class="line">            <span class="comment">// 处理 JDBC 错误</span></span><br><span class="line">            se.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 处理 Class.forName 错误</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 最后是用于关闭资源的块</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (stmt != <span class="keyword">null</span>)</span><br><span class="line">                    stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException se2) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (conn != <span class="keyword">null</span>)</span><br><span class="line">                    conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException se) &#123;</span><br><span class="line">                se.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> doPost(HttpServletRequest req, HttpServletResponse resp) <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果<br><img src="/assets/JavaEE/javaweb_13.png" alt="运行结果"></p><p>如果向数据库中插入数据</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编写预处理 SQL 语句</span></span><br><span class="line">String sql= <span class="string">&quot;INSERT INTO websites1 VALUES(?,?,?,?,?)&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化 PreparedStatement</span></span><br><span class="line">ps = conn.prepare<span class="constructor">Statement(<span class="params">sql</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//传入参数，这里的参数来自于一个带有表单的jsp文件，很容易实现</span></span><br><span class="line">ps.set<span class="constructor">String(1, <span class="params">request</span>.<span class="params">getParameter</span>(<span class="string">&quot;id&quot;</span>)</span>);</span><br><span class="line">ps.set<span class="constructor">String(2, <span class="params">request</span>.<span class="params">getParameter</span>(<span class="string">&quot;name&quot;</span>)</span>);</span><br><span class="line">ps.set<span class="constructor">String(3, <span class="params">request</span>.<span class="params">getParameter</span>(<span class="string">&quot;url&quot;</span>)</span>);</span><br><span class="line">ps.set<span class="constructor">String(4, <span class="params">request</span>.<span class="params">getParameter</span>(<span class="string">&quot;alexa&quot;</span>)</span>);</span><br><span class="line">ps.set<span class="constructor">String(5, <span class="params">request</span>.<span class="params">getParameter</span>(<span class="string">&quot;country&quot;</span>)</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行数据库更新操作，不需要SQL语句</span></span><br><span class="line">ps.execute<span class="constructor">Update()</span>;</span><br><span class="line">sql = <span class="string">&quot;SELECT id, name, url FROM websites1&quot;</span>;</span><br><span class="line">ps = conn.prepare<span class="constructor">Statement(<span class="params">sql</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取查询结果</span></span><br><span class="line">ResultSet rs = ps.execute<span class="constructor">Query()</span>;</span><br></pre></td></tr></table></figure><h2 id="Servlet文件的上传和下载"><a href="#Servlet文件的上传和下载" class="headerlink" title="Servlet文件的上传和下载"></a>Servlet文件的上传和下载</h2><p>文件上传：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> UploadServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> static final long serialVersionUID = <span class="number">1l</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上传文件存储的路径</span></span><br><span class="line">    <span class="keyword">private</span> static final String UPLOAD_DIRECTORY = <span class="string">&quot;upload&quot;</span>;</span><br><span class="line">    <span class="comment">// 上传配置</span></span><br><span class="line">    <span class="keyword">private</span> static final <span class="built_in">int</span> MEMORY_THRESHOLD = <span class="number">1024</span><span class="operator"> * </span><span class="number">1024</span><span class="operator"> * </span><span class="number">3</span>;</span><br><span class="line">    <span class="keyword">private</span> static final <span class="built_in">int</span> MAX_FILE_SIZE = <span class="number">1024</span><span class="operator"> * </span><span class="number">1024</span><span class="operator"> * </span><span class="number">40</span>;</span><br><span class="line">    <span class="keyword">private</span> static final <span class="built_in">int</span> MAX_REQUEST_SIZE = <span class="number">1024</span><span class="operator"> * </span><span class="number">1024</span><span class="operator"> * </span><span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    protected void <span class="keyword">do</span><span class="constructor">Post(HttpServletRequest <span class="params">request</span>, HttpServletResponse <span class="params">response</span>)</span> throws ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 上传数据及保存文件</span></span><br><span class="line">        <span class="comment">// 检测是否为多媒体上传</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="module-access"><span class="module"><span class="identifier">ServletFileUpload</span>.</span></span>is<span class="constructor">MultipartContent(<span class="params">request</span>)</span>)&#123;</span><br><span class="line">            <span class="comment">// 如果不是则停止</span></span><br><span class="line">            PrintWriter writer = response.get<span class="constructor">Writer()</span>;</span><br><span class="line">            writer.println(<span class="string">&quot;Error: 表单必须包含 enctype=multipart/form-data&quot;</span>);</span><br><span class="line">            writer.flush<span class="literal">()</span>;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 配置参数</span></span><br><span class="line">        DiskFileItemFactory factory = <span class="keyword">new</span> <span class="constructor">DiskFileItemFactory()</span>;</span><br><span class="line">        <span class="comment">// 设置内存临界值 - 超过该值之后将产生临时文件并存储于临时目录中</span></span><br><span class="line">        factory.set<span class="constructor">SizeThreshold(MEMORY_THRESHOLD)</span>;</span><br><span class="line">        <span class="comment">// 设置临时存储目录</span></span><br><span class="line">        factory.set<span class="constructor">Repository(<span class="params">new</span> File(System.<span class="params">getProperty</span>(<span class="string">&quot;java.io.tmpdir&quot;</span>)</span>));</span><br><span class="line"></span><br><span class="line">        ServletFileUpload upload = <span class="keyword">new</span> <span class="constructor">ServletFileUpload(<span class="params">factory</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置最大文件上传值</span></span><br><span class="line">        upload.set<span class="constructor">FileSizeMax(MAX_FILE_SIZE)</span>;</span><br><span class="line">        <span class="comment">// 设置最大请求值(包含文件和表单数据)</span></span><br><span class="line">        upload.set<span class="constructor">SizeMax(MAX_REQUEST_SIZE)</span>;</span><br><span class="line">        <span class="comment">// 中文处理</span></span><br><span class="line">        upload.set<span class="constructor">HeaderEncoding(<span class="string">&quot;UTF-8&quot;</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造临时路径存储上传的文件</span></span><br><span class="line">        <span class="comment">// 这个路径相对于当前应用的目录</span></span><br><span class="line">        String uploadPath = request.get<span class="constructor">ServletContext()</span>.get<span class="constructor">RealPath(<span class="string">&quot;./&quot;</span>)</span> + <span class="module-access"><span class="module"><span class="identifier">File</span>.</span></span>separator+ UPLOAD_DIRECTORY;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果目录不存在则创建</span></span><br><span class="line">        File uploadDir = <span class="keyword">new</span> <span class="constructor">File(<span class="params">uploadPath</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (!uploadDir.exists<span class="literal">()</span>)&#123;</span><br><span class="line">            uploadDir.mkdirs<span class="literal">()</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 解析请求的内容提取文件数据</span></span><br><span class="line">            List&lt;FileItem&gt; formItems = upload.parse<span class="constructor">Request(<span class="params">request</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span> (formItems != null<span class="operator"> &amp;&amp; </span>formItems.size<span class="literal">()</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">// 迭代表单数据</span></span><br><span class="line">                <span class="keyword">for</span> (FileItem item:formItems)&#123;</span><br><span class="line">                    <span class="comment">// 处理不在表单中的字段</span></span><br><span class="line">                    <span class="keyword">if</span> (!item.is<span class="constructor">FormField()</span>)&#123;</span><br><span class="line">                        String fileName = <span class="keyword">new</span> <span class="constructor">File(<span class="params">item</span>.<span class="params">getName</span>()</span>).get<span class="constructor">Name()</span>;</span><br><span class="line">                        String filePath = uploadPath + <span class="module-access"><span class="module"><span class="identifier">File</span>.</span></span>separator + fileName;</span><br><span class="line">                        File storeFile = <span class="keyword">new</span> <span class="constructor">File(<span class="params">filePath</span>)</span>;</span><br><span class="line">                        <span class="comment">// 在控制台输出文件的上传路径</span></span><br><span class="line">                        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(filePath);</span><br><span class="line">                        <span class="comment">// 保存文件到硬盘</span></span><br><span class="line">                        item.write(storeFile);</span><br><span class="line">                        request.set<span class="constructor">Attribute(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;上传文件成功&quot;</span>)</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;catch (Exception ex)&#123;</span><br><span class="line">            ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">            request.set<span class="constructor">Attribute(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;错误信息&quot;</span>+<span class="params">ex</span>.<span class="params">getMessage</span>()</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 跳转到message.jsp文件中</span></span><br><span class="line">        request.get<span class="constructor">ServletContext()</span>.get<span class="constructor">RequestDispatcher(<span class="string">&quot;/message.jsp&quot;</span>)</span>.forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected void <span class="keyword">do</span><span class="constructor">Get(HttpServletRequest <span class="params">request</span>, HttpServletResponse <span class="params">response</span>)</span> throws ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件上传upload.jsp</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">&lt;%</span><span class="ruby">@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>文件上传<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>文件上传实例<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;upload&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    选择一个文件：</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uploadFile&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>文件上传结果页message.jsp</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">&lt;%</span><span class="ruby">@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>文件上传结果<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>$&#123;message&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>上传文件结果<br><img src="/assets/JavaEE/javaweb_14.png" alt="上传成功"><br>保存文件路径<br><img src="/assets/JavaEE/javaweb_15.png" alt="保存路径"></p><p>文件下载<br>首先需要声明一个页面，当访问这个页面的时候，将所有可以下载的内容展示在网页上</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> ListFilesServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上传文件存储的路径</span></span><br><span class="line">    <span class="keyword">private</span> static final String UPLOAD_DIRECTORY = <span class="string">&quot;upload&quot;</span>;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void <span class="keyword">do</span><span class="constructor">Get(HttpServletRequest <span class="params">request</span>, HttpServletResponse <span class="params">response</span>)</span> throws ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获取上传文件的目录</span></span><br><span class="line">        String uploadPath = request.get<span class="constructor">ServletContext()</span>.get<span class="constructor">RealPath(<span class="string">&quot;./&quot;</span>)</span> + <span class="module-access"><span class="module"><span class="identifier">File</span>.</span></span>separator+ UPLOAD_DIRECTORY;</span><br><span class="line">        <span class="comment">// 存储要下载的文件名称</span></span><br><span class="line">        Map&lt;String,String&gt; fileNameMap = <span class="keyword">new</span> HashMap&lt;&gt;<span class="literal">()</span>;</span><br><span class="line">        <span class="comment">// 递归遍历filePath目录下的所有文件和目录</span></span><br><span class="line">        listfile(<span class="keyword">new</span> <span class="constructor">File(<span class="params">uploadPath</span>)</span>,fileNameMap);</span><br><span class="line">        <span class="comment">// 将Map集合发送listFile.jsp文件中</span></span><br><span class="line">        request.set<span class="constructor">Attribute(<span class="string">&quot;fileNameMap&quot;</span>,<span class="params">fileNameMap</span>)</span>;</span><br><span class="line">        request.get<span class="constructor">RequestDispatcher(<span class="string">&quot;/listfile.jsp&quot;</span>)</span>.forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void <span class="keyword">do</span><span class="constructor">Post(HttpServletRequest <span class="params">req</span>, HttpServletResponse <span class="params">resp</span>)</span> throws ServletException, IOException &#123;</span><br><span class="line">        <span class="keyword">do</span><span class="constructor">Get(<span class="params">req</span>,<span class="params">resp</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历给定文件夹下的所有文件</span></span><br><span class="line"><span class="comment">     * @param file</span></span><br><span class="line"><span class="comment">     * @param map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> void listfile(File file,Map&lt;String,String&gt; map)&#123;</span><br><span class="line">        <span class="comment">// 如果file代表的不是一个文件而是一个目录，则需要递归调用</span></span><br><span class="line">        <span class="keyword">if</span> (!file.is<span class="constructor">File()</span>)&#123;</span><br><span class="line">            <span class="comment">// 列出该目录下所有的文件和目录</span></span><br><span class="line">            File<span class="literal">[]</span> files = file.<span class="built_in">list</span><span class="constructor">Files()</span>;</span><br><span class="line">            <span class="keyword">for</span> (File f:files)&#123;</span><br><span class="line">                listfile(f,map);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 获取到的文件名和对象直接放在Map集合中</span></span><br><span class="line">            map.put(file.get<span class="constructor">Name()</span>,file.get<span class="constructor">Name()</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>listfile.jsp</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">&lt;%</span><span class="ruby">@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby"><span class="variable">@taglib</span> prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>已经上传的文件列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">var</span>=<span class="string">&quot;me&quot;</span> <span class="attr">items</span>=<span class="string">&quot;$&#123;fileNameMap&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">c:url</span> <span class="attr">value</span>=<span class="string">&quot;download&quot;</span> <span class="attr">var</span>=<span class="string">&quot;downurl&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">c:param</span> <span class="attr">name</span>=<span class="string">&quot;filename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;me.key&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">c:param</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">c:url</span>&gt;</span></span></span><br><span class="line"><span class="xml">    $&#123;me.value&#125;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;downurl&#125;&quot;</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>下载的Servlet</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> DownloadServlet extends HttpServlet &#123;</span><br><span class="line">    <span class="comment">// 上传文件存储的路径</span></span><br><span class="line">    <span class="keyword">private</span> static final String UPLOAD_DIRECTORY = <span class="string">&quot;upload&quot;</span>;</span><br><span class="line"></span><br><span class="line">    protected void <span class="keyword">do</span><span class="constructor">Post(HttpServletRequest <span class="params">request</span>, HttpServletResponse <span class="params">response</span>)</span> throws ServletException, IOException &#123;</span><br><span class="line">        <span class="keyword">do</span><span class="constructor">Get(<span class="params">request</span>,<span class="params">response</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected void <span class="keyword">do</span><span class="constructor">Get(HttpServletRequest <span class="params">request</span>, HttpServletResponse <span class="params">response</span>)</span> throws ServletException, IOException &#123;</span><br><span class="line">        String fileName = request.get<span class="constructor">Parameter(<span class="string">&quot;filename&quot;</span>)</span>;</span><br><span class="line">        fileName = <span class="keyword">new</span> <span class="constructor">String(<span class="params">fileName</span>.<span class="params">getBytes</span>(<span class="string">&quot;iso8859-1&quot;</span>)</span>,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 上传的文件保存在固定的目录里</span></span><br><span class="line">        String uploadPath = request.get<span class="constructor">ServletContext()</span>.get<span class="constructor">RealPath(<span class="string">&quot;./&quot;</span>)</span> + <span class="module-access"><span class="module"><span class="identifier">File</span>.</span></span>separator+ UPLOAD_DIRECTORY;</span><br><span class="line">        <span class="comment">// 得到需要下载的文件</span></span><br><span class="line">        File file = <span class="keyword">new</span> <span class="constructor">File(<span class="params">uploadPath</span> +File.<span class="params">separator</span>+<span class="params">fileName</span>)</span>;</span><br><span class="line">        <span class="comment">// 如果文件不存在</span></span><br><span class="line">        <span class="keyword">if</span> (!file.exists<span class="literal">()</span>)&#123;</span><br><span class="line">            request.set<span class="constructor">Attribute(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;你想要下载的资源已被删除&quot;</span>)</span>;</span><br><span class="line">            request.get<span class="constructor">RequestDispatcher(<span class="string">&quot;/message.jsp&quot;</span>)</span>.forward(request,response);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置响应头</span></span><br><span class="line">        response.set<span class="constructor">Header(<span class="string">&quot;content-disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+ URLEncoder.<span class="params">encode</span>(<span class="params">fileName</span>,<span class="string">&quot;UTF-8&quot;</span>)</span>);</span><br><span class="line">        <span class="comment">// 读取要下载的文件，保存到文件输入流中</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> <span class="constructor">FileInputStream(<span class="params">uploadPath</span> + File.<span class="params">separator</span>+<span class="params">fileName</span>)</span>;</span><br><span class="line">        <span class="comment">// 创建输出流</span></span><br><span class="line">        OutputStream os = response.get<span class="constructor">OutputStream()</span>;</span><br><span class="line">        <span class="comment">// 设置缓冲区</span></span><br><span class="line">        byte<span class="literal">[]</span> buffer = <span class="keyword">new</span> byte<span class="literal">[<span class="number">1024</span>]</span>;</span><br><span class="line">        <span class="built_in">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(buffer)) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">// 输出缓冲区的内容到浏览器，实现文件下载</span></span><br><span class="line">            os.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭文件输入流</span></span><br><span class="line">        fis.close<span class="literal">()</span>;</span><br><span class="line">        <span class="comment">// 关闭输出流</span></span><br><span class="line">        os.close<span class="literal">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/assets/JavaEE/javaweb_16.png" alt="文件列表"></p><h2 id="Servlet处理日期"><a href="#Servlet处理日期" class="headerlink" title="Servlet处理日期"></a>Servlet处理日期</h2><p>Servlet可以使用Java中大多数的方法，这也是Servlet的优势之一。<br>日期相关的常用方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>boolean after(Date date)</td><td>如果调用的Date对象中包含的日期在date指定日期之后返回true</td></tr><tr><td>boolean before(Date date)</td><td>如果调用的Date对象中包含的日期在date指定日期之前返回true</td></tr><tr><td>Object clone()</td><td>重复调用Data对象</td></tr><tr><td>int compareTo(Date date)</td><td>把调用对象的值与date值进行比较，如果调用对象在date之前返回负数，如果调用对象在datte之后返回正数，两者相同返回0</td></tr><tr><td>int compareTo(Object obj)</td><td>如果obj是Date类型，使用的方式同上</td></tr><tr><td>boolean equals(Object date)</td><td>如果调用的Date对象中包含的时间和日期与date指定的相同，返回true</td></tr><tr><td>long getTime()</td><td>返回毫秒数</td></tr><tr><td>int hashCode()</td><td>未调用返回哈希代码</td></tr><tr><td>void setTime(long time)</td><td>设置time指定的时间和日期，毫秒为单位</td></tr></tbody></table><p>例子：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">DateServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void doPost(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp) <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void doGet(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp) <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> out = resp.getWriter();</span><br><span class="line">        <span class="type">String</span> title = <span class="string">&quot;显示当前的日期和时间&quot;</span>;</span><br><span class="line">        <span class="type">Date</span> date = <span class="keyword">new</span> <span class="type">Date</span>();</span><br><span class="line">        <span class="type">SimpleDateFormat</span> sdf = <span class="keyword">new</span> <span class="type">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">String</span> docType = <span class="string">&quot;&lt;!DOCTYPE html&gt;\n&quot;</span>;</span><br><span class="line">        out.println(docType +</span><br><span class="line">                <span class="string">&quot;&lt;html&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;head&gt;&lt;title&gt;&quot;</span> + title + <span class="string">&quot;&lt;/title&gt;&lt;/head&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;body bgcolor=\&quot;#f0f0f0\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;h1 align=\&quot;center\&quot;&gt;&quot;</span> + title + <span class="string">&quot;&lt;/h1&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;h2 align=\&quot;center\&quot;&gt;&quot;</span> + sdf.format(date) + <span class="string">&quot;&lt;/h2&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/assets/JavaEE/javaweb_17.png" alt="时间servlet运行结果"></p><h2 id="Servlet页面重定向"><a href="#Servlet页面重定向" class="headerlink" title="Servlet页面重定向"></a>Servlet页面重定向</h2><p>当文档移动到新的位置，我们需要向客户端发送这个新位置，我们需要用到网页重定向。当然也有可能是负载均衡，或者为了简单的随机，这些情况都有可能使用到网页重定向。</p><p>例子：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> PageRedirectServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void <span class="keyword">do</span><span class="constructor">Post(HttpServletRequest <span class="params">req</span>, HttpServletResponse <span class="params">resp</span>)</span> throws ServletException, IOException &#123;</span><br><span class="line">        <span class="keyword">do</span><span class="constructor">Get(<span class="params">req</span>,<span class="params">resp</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void <span class="keyword">do</span><span class="constructor">Get(HttpServletRequest <span class="params">req</span>, HttpServletResponse <span class="params">resp</span>)</span> throws ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 设置响应内容</span></span><br><span class="line">        resp.set<span class="constructor">ContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>)</span>;</span><br><span class="line">        <span class="comment">// 设置重定向的位置</span></span><br><span class="line">        String site = <span class="keyword">new</span> <span class="constructor">String(<span class="string">&quot;http://www.paulniu.com&quot;</span>)</span>;</span><br><span class="line">        resp.set<span class="constructor">Status(<span class="params">resp</span>.SC_MOVED_TEMPORARILY)</span>;</span><br><span class="line">        resp.set<span class="constructor">Header(<span class="string">&quot;Location&quot;</span>,<span class="params">site</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><p>本来想写在一个页面里面的，但是东西有点太多，所以分开多个博客书写</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://www.cnblogs.com/vmax-tam/p/4130589.html">Cookie和Session</a><br><a href="https://blog.csdn.net/weixin_36146275/article/details/55673211">登录Demo</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;内容可能较多，包括Servlet，Jsp，Maven，html，Js等内容&lt;/p&gt;</summary>
    
    
    
    
    <category term="JavaEE" scheme="http://www.paulniu.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>android奇技淫巧 19 高德地图/百度地图</title>
    <link href="http://www.paulniu.com/2019/09/29/android-tools-19/"/>
    <id>http://www.paulniu.com/2019/09/29/android-tools-19/</id>
    <published>2019-09-29T13:55:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
    <category term="高德地图" scheme="http://www.paulniu.com/tags/%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE/"/>
    
    <category term="百度地图" scheme="http://www.paulniu.com/tags/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE 02 Java语言基础</title>
    <link href="http://www.paulniu.com/2019/09/29/JavaEE-02-JavaSE/"/>
    <id>http://www.paulniu.com/2019/09/29/JavaEE-02-JavaSE/</id>
    <published>2019-09-29T04:37:03.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>是不是以为我会长篇累牍的描述Java语言的各种特性，语法知识点等内容？想多了！Java基础那么多一个个的写，等我写完，假期也就结束了，所以我更愿意将这部分内容改变成Java语法基础知识的查漏补缺。如果Java基础不好的同学请移步到<a href="https://www.runoob.com/java/java-tutorial.html">菜鸟教程</a>。这个网站真的很好，各种学习资料都是免费的。</p><span id="more"></span><p>总之就是查找自己有哪些知识点是掌握不牢固的，有哪些内容是已经忘记了的</p><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>java工具包提供了强大的数据结构，在java中数据结构主要包括以下几种接口和类</p><ol><li>枚举(Enum)</li><li>位集合(BitSet)</li><li>向量(Vector)</li><li>栈(Stack)</li><li>字典(Dictionary)</li><li>哈希表(Hashtable)</li><li>属性(Properties)</li></ol><p>以上是传统的数据结构，在Java2中引入了一种新的框架–集合框架(Collection)</p><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>枚举结构虽然本身不属于数据结构，但它在其他数据结构的范畴中应用很广，枚举结构定义了一种从数据结构中取回连续元素的方式。</p><p>枚举接口中定义了一些方法，通过这些方法可以枚举(一次获得一个)对象集合中的元素<br>这种传统的接口已经被迭代器取代。虽然在现在代码中很少使用，但是还是使用在Vector和Properties中，除此之外，还有一些API类中也在使用</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>boolean hasMoreElements</td><td>测试次枚举是否包含更多元素</td></tr><tr><td>Object nextElement()</td><td>如果枚举对象至少还有一个可提供的元素，则返回才枚举的下一个元素</td></tr></tbody></table><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Enmueration&lt;String&gt; days;</span><br><span class="line">Vector&lt;String&gt; dayNames = new Vector&lt;String&gt;();</span><br><span class="line">dayNames.<span class="builtin-name">add</span>(<span class="string">&quot;Sunday&quot;</span>);</span><br><span class="line">dayNames.<span class="builtin-name">add</span>(<span class="string">&quot;Monday&quot;</span>);</span><br><span class="line">dayNames.<span class="builtin-name">add</span>(<span class="string">&quot;Tuesday&quot;</span>);</span><br><span class="line">dayNames.<span class="builtin-name">add</span>(<span class="string">&quot;Wednesday&quot;</span>);</span><br><span class="line">dayNames.<span class="builtin-name">add</span>(<span class="string">&quot;Thursday&quot;</span>);</span><br><span class="line">dayNames.<span class="builtin-name">add</span>(<span class="string">&quot;Friday&quot;</span>);</span><br><span class="line">dayNames.<span class="builtin-name">add</span>(<span class="string">&quot;Saturday&quot;</span>);</span><br><span class="line">days = dayNames.elements();</span><br><span class="line"><span class="keyword">while</span>(days.hasMoreElements())&#123;</span><br><span class="line">  System.out.<span class="builtin-name">print</span>(day.nextElement());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="位集合"><a href="#位集合" class="headerlink" title="位集合"></a>位集合</h2><p>位集合类实现了一组可以单独设置和清除的位或标志<br>该类在处理一组布尔值的时候非常有用，只需要给每个值赋值一个”位”，然后对位进行适当的设置或清除，就可以对布尔值进行操作了。<br>BitSet定义了两个构造方法：BitSet()和BitSet(int size)</p><p>BitSet中实现了Cloneable接口中定义的方法，如下所示</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>void and(BitSet set)</td><td>对此目标位set和参数位set执行逻辑与操作</td></tr><tr><td>void andNot(BitSet set)</td><td>清除此BitSet中所有的位，其相应的位在置顶的BitSet中已设置</td></tr><tr><td>int cardinality()</td><td>返回此BitSet中设置为true的位数</td></tr><tr><td>void clear()</td><td>将此BitSet中所有位设置为false</td></tr><tr><td>void clear(int index)</td><td>将索引指定处的位置设置为false</td></tr><tr><td>Object Clone()</td><td>复制此BitSet生成一个与之相等的新BitSet</td></tr><tr><td>boolean equals(Object bitSet)</td><td>将此对象与指定的对象进行比较</td></tr><tr><td>void flip(int index)</td><td>将指定索引出的位设置为当前值的补码</td></tr><tr><td>void flip(int startIndex,int endIndex)</td><td>将制定的fromIndex(包括)到制定的toIndex(不包括)范围内的每一个位设置为当前值的补码</td></tr><tr><td>boolean get(int index)</td><td>返回指定索引处的位值</td></tr><tr><td>BitSet get(int startIndex,int endIndex)</td><td>返回一个新的BitSet，它由此BitSet中从fromIndex(包括)到toIndex(不包括)范围内的位组成</td></tr><tr><td>int hashCode()</td><td>返回此位set的哈希码值</td></tr><tr><td>Boolean intersects(BitSet bitSet)</td><td>如果指定的BitSet中有设置为true的位，则返回true</td></tr><tr><td>boolean isEmpty()</td><td>如果此BitSet中没有包含任何设置为ture的位，返回true</td></tr><tr><td>int length()</td><td>返回此BitSet的逻辑大小，BitSet中最高设置位的索引加1</td></tr><tr><td>int nextClearBit(int startIndex)</td><td>返回第一个设置为false的位的索引，这发生在指定的其实索引或之后的索引上</td></tr><tr><td>int nextSetBit(int startIndex)</td><td>返回第一个设置为true的位的索引，这发生在置顶的其实索引或之后的索引上</td></tr><tr><td>void or(BitSet bitSet)</td><td>对此为set和为set参数执行逻辑或操作</td></tr><tr><td>void set(int index)</td><td>将指定索引处的位置设置为true</td></tr><tr><td>void set(int index,boolean v)</td><td>将制定索引处的位设置为指定的值</td></tr><tr><td>void set(int startIndex,int endIndex)</td><td>将指定的fromIndex(包括)到指定的toIndex(不包括)范围内的位设置为true</td></tr><tr><td>void set(int startIndex,int endIndex,boolean v)</td><td>将制定的fromIndex(包括)到指定的toIndex(不包括)范围内的位置设置为指定的值</td></tr><tr><td>int size()</td><td>返回此位set的字符串表示形式</td></tr><tr><td>String toString()</td><td>返回此位set的字符串表示形式</td></tr><tr><td>void xor(BitSet bitSet)</td><td>对此位set和位set参数执行逻辑异或操作</td></tr></tbody></table><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">BitSet bits1 = <span class="keyword">new</span> <span class="constructor">BitSet(16)</span>;</span><br><span class="line">     BitSet bits2 = <span class="keyword">new</span> <span class="constructor">BitSet(16)</span>;</span><br><span class="line">      </span><br><span class="line">     <span class="comment">// set some bits</span></span><br><span class="line">     <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;<span class="number">16</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>((i%<span class="number">2</span>)<span class="operator"> == </span><span class="number">0</span>) bits1.set(i);</span><br><span class="line">        <span class="keyword">if</span>((i%<span class="number">5</span>) != <span class="number">0</span>) bits2.set(i);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;Initial pattern in bits1: &quot;</span>);</span><br><span class="line">     <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(bits1);</span><br><span class="line">     <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;\nInitial pattern in bits2: &quot;</span>);</span><br><span class="line">     <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(bits2);</span><br><span class="line"> </span><br><span class="line">     <span class="comment">// AND bits</span></span><br><span class="line">     bits2.<span class="keyword">and</span>(bits1);</span><br><span class="line">     <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;\nbits2 AND bits1: &quot;</span>);</span><br><span class="line">     <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(bits2);</span><br><span class="line"> </span><br><span class="line">     <span class="comment">// OR bits</span></span><br><span class="line">     bits2.<span class="keyword">or</span>(bits1);</span><br><span class="line">     <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;\nbits2 OR bits1: &quot;</span>);</span><br><span class="line">     <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(bits2);</span><br><span class="line"> </span><br><span class="line">     <span class="comment">// XOR bits</span></span><br><span class="line">     bits2.xor(bits1);</span><br><span class="line">     <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;\nbits2 XOR bits1: &quot;</span>);</span><br><span class="line">     <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(bits2);</span><br></pre></td></tr></table></figure><h2 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h2><p>Vector类实现了一个动态数组，和ArrayList很相似，但两者有不同</p><ul><li>Vector是同步访问的</li><li>Vector包含了很多传统方法，这些方法不属于集合框架</li></ul><p>Vector主要用在实现不知道数组的大小，或者只是需要一个可以改变大小的数组的情况<br>Vector有四个构造方法：Vector(),Vector(int size),Vector(int size,int incr),Vector(Collection c)<br>其中Vector(int size)是创建指定大小的向量，Vector(int size,int incr)创建指定大小的向量并且增量用incr指定。增量表示向量每次增加的元素数目</p><p>Vector常用方法</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>void add(int index,Object element)</td><td>在此向量的指定位置插入指定的元素</td></tr><tr><td>boolean add(Object o)</td><td>将指定元素添加到向量的末尾</td></tr><tr><td>boolean addAll(Collection c)</td><td>将制定Collection中的所有元素添加到此向量的末尾，按照指定collection的迭代器所返回的顺序添加这些元素</td></tr><tr><td>boolean addAll(int index,Collection c)</td><td>在置顶位置将制定Collection中的所有元素插入到向量中</td></tr><tr><td>void addElement(Object o)</td><td>将制定的组件添加到此向量的末尾，将其大小增加1</td></tr><tr><td>int capacity()</td><td>返回此向量的当前容量</td></tr><tr><td>void clear()</td><td>从此向量中移除所有元素</td></tr><tr><td>Object clone()</td><td>返回向量的一个副本</td></tr><tr><td>boolean contains(Object elem)</td><td>如果此向量包含指定的元素，则返回true</td></tr><tr><td>boolean containsAll(Collection c)</td><td>如果此向量包含指定Collection中的所有元素，返回true</td></tr><tr><td>void copyInto(Object[] anArray)</td><td>将此向量的组件复制到指定的数组中</td></tr><tr><td>Object elementAt(int index)</td><td>返回指定索引处的组件</td></tr><tr><td>Enumeration elements()</td><td>返回此向量的组件的枚举</td></tr><tr><td>void ensureCapacity(int minCapacity)</td><td>增加此向量的容量，以确保其至少能够保存最小容量参数指定的组件数</td></tr><tr><td>boolean equals(Object o)</td><td>比较置顶对象与此向量的相等性</td></tr><tr><td>Object firstElement()</td><td>返回此向量的第一个组件(下标从0开始)</td></tr><tr><td>Object get(int index)</td><td>返回向量中指定位置的元素</td></tr><tr><td>int hashCode()</td><td>返回此向量的哈希码值</td></tr><tr><td>int indexOf(Object elem)</td><td>返回词向量中第一次出现的指定元素的索引，如果此向量不包含该元素，返回-1</td></tr><tr><td>int indexOf(Obect element,int index)</td><td>返回此向量中第一次出现指定元素的索引，从index出正向搜索，如果未找到该元素，则返回-1</td></tr><tr><td>void insertElementAt(Object obj,int index)</td><td>将制定对象作为词向量中的组件插入到指定的index处</td></tr><tr><td>boolean isEmpty()</td><td>测试词向量是否不包含组件</td></tr><tr><td>Object lastElement()</td><td>返回此向量的最后一个组件</td></tr><tr><td>int lastIndexOf(Object elem)</td><td>返回此向量中最后一次出现的指定元素的索引，如果不包含该元素，返回-1</td></tr><tr><td>int lastIndexOf(Object elem,int index)</td><td>返回词向量中最后一次出现的指定元素的索引，从index处逆向搜索，如果未找到该元素，返回-1</td></tr><tr><td>Object remove(index)</td><td>移除此向量中置顶位置的元素</td></tr><tr><td>boolean remove(Object o)</td><td>移除此向量中指定元素的第一个匹配项，如果向量不包含该元素，则元素保持不变</td></tr><tr><td>boolean removeAll(Collection c)</td><td>从词向量中移除包含在指定Collection中全部元素</td></tr><tr><td>void removeAllElements()</td><td>从此向量中移除全部组件，并将其大小设置为0</td></tr><tr><td>boolean removeElement(Object o)</td><td>从此向量中移除变量的第一个(索引最小的)匹配项</td></tr><tr><td>void removeElementAt(int index)</td><td>删除指定索引处的组件</td></tr><tr><td>protected void removeRange(int formIndex,int toIndex)</td><td>从此List中移除索引位于formIndex(包括)与toIndex(不包括)之间的所有元素</td></tr><tr><td>boolean retainAll(Collection c)</td><td>在此向量中仅包括包含指定collection中的元素</td></tr><tr><td>Object set(int index,Object element)</td><td>用指定的元素替换此向量中指定位置处的元素</td></tr><tr><td>void setElementAt(Object obj,int index)</td><td>向此向量指定index处的组件设置为指定的对象</td></tr><tr><td>void setSize(int newSize)</td><td>设置此向量的大小</td></tr><tr><td>List subList(int fromIndex,int toIndex)</td><td>返回此List的部分视图，从fromIndex(包括)至toIndex(不包括)</td></tr><tr><td>Object[] toArray()</td><td>返回一个数组，包含此向量中以前当顺序存放的所有元素</td></tr><tr><td>Object[] toArray(Object[] a)</td><td>返回一个数组，包含此向量中以恰当顺序存放的所有元素，返回数组的运行时类型为置顶数组的类型</td></tr><tr><td>String toString()</td><td>返回此向量的字符串表示形式，其中包含每个元素的String表示形式</td></tr><tr><td>void trimToSize()</td><td>对此向量的容量进行微调，使其等于向量的当前大小</td></tr></tbody></table><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Vector v = <span class="keyword">new</span> <span class="constructor">Vector(3,2)</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.print(<span class="string">&quot;初始化大小是&quot;</span>+v.size<span class="literal">()</span>);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.print(<span class="string">&quot;初始化Capacity&quot;</span>+v.capacity<span class="literal">()</span>);</span><br><span class="line">v.add<span class="constructor">Element(<span class="params">new</span> Integer(1)</span>);</span><br><span class="line">v.add<span class="constructor">Element(<span class="params">new</span> Integer(2)</span>);</span><br><span class="line">v.add<span class="constructor">Element(<span class="params">new</span> Integer(3)</span>);</span><br><span class="line">v.add<span class="constructor">Element(<span class="params">new</span> Integer(4)</span>);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;当前的capacity&quot;</span>+v.capacity<span class="literal">()</span>);</span><br><span class="line">v.add<span class="constructor">Element(<span class="params">new</span> Double(5.45)</span>);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;当前capacity&quot;</span>+v.capacity<span class="literal">()</span>);</span><br><span class="line">v,add<span class="constructor">Element(<span class="params">new</span> Double(6.08)</span>);</span><br><span class="line">v.add<span class="constructor">Element(<span class="params">new</span> Integer(7)</span>);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;Current capacity: &quot;</span> +</span><br><span class="line">v.capacity<span class="literal">()</span>);</span><br><span class="line">v.add<span class="constructor">Element(<span class="params">new</span> Float(9.4)</span>);</span><br><span class="line">v.add<span class="constructor">Element(<span class="params">new</span> Integer(10)</span>);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;Current capacity: &quot;</span> +</span><br><span class="line">v.capacity<span class="literal">()</span>);</span><br><span class="line">v.add<span class="constructor">Element(<span class="params">new</span> Integer(11)</span>);</span><br><span class="line">v.add<span class="constructor">Element(<span class="params">new</span> Integer(12)</span>);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;First element: &quot;</span> +</span><br><span class="line">  (Integer)v.first<span class="constructor">Element()</span>);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;Last element: &quot;</span> +</span><br><span class="line">  (Integer)v.last<span class="constructor">Element()</span>);</span><br><span class="line"><span class="keyword">if</span>(v.contains(<span class="keyword">new</span> <span class="constructor">Integer(3)</span>))</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;Vector contains 3.&quot;</span>);</span><br><span class="line">    <span class="comment">// enumerate the elements in the vector.</span></span><br><span class="line">    Enumeration vEnum = v.elements<span class="literal">()</span>;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;\nElements in vector:&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(vEnum.has<span class="constructor">MoreElements()</span>)</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.print(vEnum.next<span class="constructor">Element()</span> + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println<span class="literal">()</span>;</span><br></pre></td></tr></table></figure><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>栈是Vector的一个子类，他实现了一个标准的后进先出的栈<br>堆栈之定义了默认的构造函数，用来创建一个空栈，堆栈除了包括有Vector定义的所有方法，也定义了自己的一些方法</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>boolean empty()</td><td>测试堆栈是否为空</td></tr><tr><td>Object peek()</td><td>查看堆栈顶部的对象，但不从堆栈中移除他</td></tr><tr><td>Object pop()</td><td>移除堆栈顶部的对象，并作为此函数的值返回该对象</td></tr><tr><td>Object push(Object element)</td><td>把项压入堆栈顶部</td></tr><tr><td>int search(Object element)</td><td>返回对象在堆栈中的位置，以1为基数</td></tr></tbody></table><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> StackDemo &#123;</span><br><span class="line"> </span><br><span class="line">    static <span class="type">void</span> showpush(Stack&lt;<span class="type">Integer</span>&gt; st, <span class="type">int</span> a) &#123;</span><br><span class="line">        st.push(<span class="built_in">new</span> <span class="type">Integer</span>(a));</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;push(&quot; + a + &quot;)&quot;);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;stack: &quot; + st);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    static <span class="type">void</span> showpop(Stack&lt;<span class="type">Integer</span>&gt; st) &#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.print(&quot;pop -&gt; &quot;);</span><br><span class="line">        <span class="type">Integer</span> a = (<span class="type">Integer</span>) st.pop();</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(a);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;stack: &quot; + st);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String args[]) &#123;</span><br><span class="line">        Stack&lt;<span class="type">Integer</span>&gt; st = <span class="built_in">new</span> Stack&lt;<span class="type">Integer</span>&gt;();</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;stack: &quot; + st);</span><br><span class="line">        showpush(st, <span class="number">42</span>);</span><br><span class="line">        showpush(st, <span class="number">66</span>);</span><br><span class="line">        showpush(st, <span class="number">99</span>);</span><br><span class="line">        showpop(st);</span><br><span class="line">        showpop(st);</span><br><span class="line">        showpop(st);</span><br><span class="line">        try &#123;</span><br><span class="line">            showpop(st);</span><br><span class="line">        &#125; catch (EmptyStackException e) &#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;empty stack&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>Dictionary类是一个抽象类，用来存储键值对，作用和Map类似。<br>给出键和值，我们可以将只存储早字典对象中，一旦值被存储，就可以通过它的键来获取</p><p>字典常用方法</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Enumeration elements()</td><td>返回此字典中值的枚举</td></tr><tr><td>Object get(Object key)</td><td>返回此字典中该键所映射到的值</td></tr><tr><td>boolean isEmpty()</td><td>测试次字典是否不存在从键到值的映射</td></tr><tr><td>Enumeration keys()</td><td>返回此字典中键的枚举</td></tr><tr><td>Object put(Object key,Object value)</td><td>将制定key映射到此字典中指定的value</td></tr><tr><td>Object remove(Object key)</td><td>从此字典中移除key(以及相应的value)</td></tr><tr><td>int size()</td><td>返回此字典中条目(不同键)的数量</td></tr></tbody></table><blockquote><p>字典Dictionary类已经过时了，在实际开发中使用欧冠Map集合来代替</p></blockquote><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>Java泛型是JDK5中引入的新特性，泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型<br>泛型的本质是参数化类型，也就是说操作的数据类型被指定为一个参数</p><h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><p>我们可以写一个泛型方法，该方法在调用时可以接收不同类型的参数，根据传递给泛型方法的参数类型，编译器适当的处理每一个方法调用<br>定义泛型方法的规则</p><ol><li>所有泛型方法的声明都有一个类型参数声明部分(由尖括号分割)，该类型参数声明部分在方法返回类型之前</li><li>每一个类型参数声明部分包含一个或多个类型参数，参数间用逗号隔开。一个泛型参数也被称为一个类型变量，适用于制定一个泛型类型名称的标识符</li><li>类型参数能被用来声明返回值类型，并且能作为泛型方法得到的实际参数类型的占位符。</li><li>泛型方法体声明和其他方法一样，注意类型参数只能代表引用型类型，不能是原始类型</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> GenericMethodTest&#123;</span><br><span class="line">  <span class="built_in">public</span> static &lt;E&gt; <span class="type">void</span> printArray(E[] intputArray)&#123;</span><br><span class="line">    // 输入数组元素</span><br><span class="line">    <span class="keyword">for</span>(E element:inputArray)&#123;</span><br><span class="line">      <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;%s&quot;,element);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">public</span> static <span class="type">void</span> main(String[] args)&#123;</span><br><span class="line">    // 创建不同类型数组： <span class="type">Integer</span>, <span class="type">Double</span> 和 <span class="type">Character</span></span><br><span class="line">        <span class="type">Integer</span>[] intArray = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">        <span class="type">Double</span>[] doubleArray = &#123; <span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>, <span class="number">4.4</span> &#125;;</span><br><span class="line">        <span class="type">Character</span>[] charArray = &#123; <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;O&#x27;</span> &#125;;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println( &quot;整型数组元素为:&quot; );</span><br><span class="line">        printArray( intArray  ); // 传递一个整型数组</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println( &quot;\n双精度型数组元素为:&quot; );</span><br><span class="line">        printArray( doubleArray ); // 传递一个双精度型数组</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println( &quot;\n字符型数组元素为:&quot; );</span><br><span class="line">        printArray( charArray ); // 传递一个字符型数组</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有界类型参数：<br>有时候我们想要限制那些被允许传到一个类型参数的参数类型。例如，我们只想接受一个传递的是Number类型或者是Number类型的子类，那么我们就可以约束成有界参数，实现我们想要的功能：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaximumTest</span>&#123;</span></span><br><span class="line">  <span class="comment">// 比较三个值，然后返回最大值</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;T&gt;&gt; <span class="function">T <span class="title">maximum</span><span class="params">(T x,T y,T z)</span></span>&#123;</span><br><span class="line">    T max = x;</span><br><span class="line">    <span class="keyword">if</span>(y.<span class="built_in">compareTo</span>(max) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="comment">// 说明y更大</span></span><br><span class="line">      max = y；</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(z.<span class="built_in">compareTo</span>(max) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="comment">// 说明z更大</span></span><br><span class="line">      max = z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span> [] args)</span></span>&#123;</span><br><span class="line">    System.out.<span class="built_in">printf</span>( <span class="string">&quot;%d, %d 和 %d 中最大的数为 %d\n\n&quot;</span>,</span><br><span class="line">                   <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="built_in">maximum</span>( <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ) );</span><br><span class="line"> </span><br><span class="line">      System.out.<span class="built_in">printf</span>( <span class="string">&quot;%.1f, %.1f 和 %.1f 中最大的数为 %.1f\n\n&quot;</span>,</span><br><span class="line">                   <span class="number">6.6</span>, <span class="number">8.8</span>, <span class="number">7.7</span>, <span class="built_in">maximum</span>( <span class="number">6.6</span>, <span class="number">8.8</span>, <span class="number">7.7</span> ) );</span><br><span class="line"> </span><br><span class="line">      System.out.<span class="built_in">printf</span>( <span class="string">&quot;%s, %s 和 %s 中最大的数为 %s\n&quot;</span>,<span class="string">&quot;pear&quot;</span>,</span><br><span class="line">         <span class="string">&quot;apple&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="built_in">maximum</span>( <span class="string">&quot;pear&quot;</span>, <span class="string">&quot;apple&quot;</span>, <span class="string">&quot;orange&quot;</span> ) );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><p>泛型类的声明和非泛型类的声明类似，除了在类名后面需要添加类型参数声明部分。<br>和泛型方法一样，泛型类的类型参数声明部分也包含了一个或多个类型参数，参数之间用逗号隔开。一个泛型参数也被称为类型变量，是一个用来指定泛型参数类型的标志符。因为他们接受一个或多个参数，这些类被称为参数化类或参数化类性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Box</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> T t;</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setValue</span>(<span class="params">T t</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.t = t;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> T <span class="function"><span class="title">getValue</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.t;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">main</span>(<span class="params"><span class="built_in">String</span> [] args</span>)</span>&#123;</span><br><span class="line">    Box&lt;Integer&gt; box = <span class="keyword">new</span> Box&lt;Integer&gt;();</span><br><span class="line">    Box&lt;<span class="built_in">String</span>&gt; strBox = <span class="keyword">new</span> Box&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line"></span><br><span class="line">    box.setValue(<span class="keyword">new</span> Integer(<span class="number">100</span>));</span><br><span class="line">    strBox.setValue(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类型通配符"><a href="#类型通配符" class="headerlink" title="类型通配符"></a>类型通配符</h2><ul><li>类型通配符通常使用?来代替具体的参数类型，例如List&lt;?&gt;</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericTest</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>)</span> &#123;</span><br><span class="line">        List&lt;<span class="built_in">String</span>&gt; name = <span class="keyword">new</span> ArrayList&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">        List&lt;Integer&gt; age = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        List&lt;<span class="built_in">Number</span>&gt; <span class="built_in">number</span> = <span class="keyword">new</span> ArrayList&lt;<span class="built_in">Number</span>&gt;();</span><br><span class="line">        </span><br><span class="line">        name.add(<span class="string">&quot;icon&quot;</span>);</span><br><span class="line">        age.add(<span class="number">18</span>);</span><br><span class="line">        <span class="built_in">number</span>.add(<span class="number">314</span>);</span><br><span class="line"> </span><br><span class="line">        getData(name);</span><br><span class="line">        getData(age);</span><br><span class="line">        getData(<span class="built_in">number</span>);</span><br><span class="line">       </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">getData</span>(<span class="params">List&lt;?&gt; data</span>)</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;data :&quot;</span> + data.get(<span class="number">0</span>));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>因为getData方法的参数类型是list，所以name，age，number都可以作为方法的实参，这就是通配符的作用</p></blockquote><ul><li> 类型通配符上限通过形如List来定义，如此定义就是通配符泛型类型接受Number以及子类类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericTest</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>)</span> &#123;</span><br><span class="line">        List&lt;<span class="built_in">String</span>&gt; name = <span class="keyword">new</span> ArrayList&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">        List&lt;Integer&gt; age = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        List&lt;<span class="built_in">Number</span>&gt; <span class="built_in">number</span> = <span class="keyword">new</span> ArrayList&lt;<span class="built_in">Number</span>&gt;();</span><br><span class="line">        </span><br><span class="line">        name.add(<span class="string">&quot;icon&quot;</span>);</span><br><span class="line">        age.add(<span class="number">18</span>);</span><br><span class="line">        <span class="built_in">number</span>.add(<span class="number">314</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//getUperNumber(name);//1</span></span><br><span class="line">        getUperNumber(age);<span class="comment">//2</span></span><br><span class="line">        getUperNumber(<span class="built_in">number</span>);<span class="comment">//3</span></span><br><span class="line">       </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">getData</span>(<span class="params">List&lt;?&gt; data</span>)</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;data :&quot;</span> + data.get(<span class="number">0</span>));</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">getUperNumber</span>(<span class="params">List&lt;? <span class="keyword">extends</span> <span class="built_in">Number</span>&gt; data</span>)</span> &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;data :&quot;</span> + data.get(<span class="number">0</span>));</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在(//1)处会出现错误，因为getUperNumber()方法中的参数已经限定了参数泛型上限为Number，所以泛型为String是不在这个范围之内，所以会报错</p></blockquote><ul><li>类型通配符下限通过形如List&lt;? super Number&gt;来定义，表示只接受Number以及其三层父类型</li></ul><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><ul><li><? extends T>和<? super T>的区别<? extends T>表示泛型只接受T类型或T类型的子类<？ super T>表示泛型只接受T类型或T类型的父类</li><li><p>对于泛型，只是允许程序员在编译时检测到非法的类型而已。但是在运行期时，其中的泛型标志会变化为 Object 类型。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="type">Integer</span>&gt; list = <span class="built_in">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">list.<span class="keyword">add</span>(<span class="number">12</span>);</span><br><span class="line">//这里直接添加会报错</span><br><span class="line">list.<span class="keyword">add</span>(&quot;a&quot;);</span><br><span class="line"><span class="keyword">Class</span>&lt;? extends List&gt; clazz = list.getClass();</span><br><span class="line"><span class="keyword">Method</span> <span class="keyword">add</span> = clazz.getDeclaredMethod(&quot;add&quot;, <span class="keyword">Object</span>.<span class="keyword">class</span>);</span><br><span class="line">//但是通过反射添加，是可以的</span><br><span class="line"><span class="keyword">add</span>.invoke(list, &quot;kl&quot;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(list)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;是不是以为我会长篇累牍的描述Java语言的各种特性，语法知识点等内容？想多了！Java基础那么多一个个的写，等我写完，假期也就结束了，所以我更愿意将这部分内容改变成Java语法基础知识的查漏补缺。如果Java基础不好的同学请移步到&lt;a href=&quot;https://www.runoob.com/java/java-tutorial.html&quot;&gt;菜鸟教程&lt;/a&gt;。这个网站真的很好，各种学习资料都是免费的。&lt;/p&gt;</summary>
    
    
    
    
    <category term="JavaEE" scheme="http://www.paulniu.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE 01 JavaEE学习路线</title>
    <link href="http://www.paulniu.com/2019/09/29/JavaEE-01-LearnRoute/"/>
    <id>http://www.paulniu.com/2019/09/29/JavaEE-01-LearnRoute/</id>
    <published>2019-09-29T01:53:03.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>JavaEE学习路线</p><span id="more"></span><blockquote><p>种一棵树最好的时间是十年前，而后是现在</p></blockquote><p>最近在网上买了JavaEE的学习资料，决定趁着国庆节，把自己感兴趣但是没有大量时间做的事情，好好的实现一下，所以就给自己制定了一下的学习计划，先来看一下</p><p>JavaEE的学习大致可分为七个阶段，每个阶段所代表的不同的内容</p><ol><li>JavaSE阶段</li><li>JavaWeb基础</li><li>SSH开发框架</li><li>实战项目一</li><li>其他开发框架</li><li>其他常用技术</li><li>实战项目二</li></ol><h3 id="JavaSE阶段"><a href="#JavaSE阶段" class="headerlink" title="JavaSE阶段"></a>JavaSE阶段</h3><p>这个阶段其实就是学习Java语言的入门阶段，也是最基础的部分，其中包括Java基础语法，面向对象，常用API，集合框架，I/O技术，多线程及并发，其他技术，我们可以看一下这张图片</p><p><img src="/assets/JavaEE/javase_base_01.png" alt="JavaSE"></p><p>在这一个阶段主要的就是打牢Java语言基础，因为这个部分的内容是跟我们以后每天写代码息息相关的。在这个部分，我们应该把学习的重点放在Java基础语法，面向对象，常用API，集合框架，I/O技术，多线程以及其他常用技术上。学习完这一个部分之后，我们应该可以去开发一些比较简单的桌面软件，但是这些内容都是比较简单的，想要从事企业级项目开发，这些是远远不够的，我们需要更加深入的学习</p><h3 id="JavaWeb基础"><a href="#JavaWeb基础" class="headerlink" title="JavaWeb基础"></a>JavaWeb基础</h3><p>接下来就是学习JavaWeb了，JavaWeb也是Java开发工程师必须掌握的技能</p><p><img src="/assets/JavaEE/javase_base_02.png" alt="JavaWeb"></p><p>这里我们要学习掌握一些前端知识点，如HTML，CSS，JavaScript，XML和XML解析<br>Tomcat服务器常用技术(Servlet,Jsp,Jstl标签库)<br>Mysql数据库和JDBC<br>其他技术(JS框架，JQuery)<br>巩固知识项目实战，这个部分大部分都是一些网上商城实战</p><p>这个部分的内容对于我来说是一个老大难的问题，每次学习到这里的时候都是学习不下去，或者自己有其他的事情给耽误了，所以在这个部分一定要一鼓作气，不要有任何的迟疑。我已经找到了很多学习资料，希望这次不要再让自己失望了</p><h3 id="SSH框架阶段"><a href="#SSH框架阶段" class="headerlink" title="SSH框架阶段"></a>SSH框架阶段</h3><p>所谓的SSH框架其实就是Spring，Struts2和Hibernate框架的简称，也是主流的Java开发框架，他是每一个Java开发者必学的内容之一</p><p><img src="/assets/JavaEE/javase_base_03.png" alt="SSH"></p><p>这个部分的内容，其实我也有看过一部分，但是大部分都是一知半解，所以这次一定要好好的学习完成。在这个阶段，要精通Spring，熟练掌握Hibernate和Struts2</p><h3 id="项目实战一"><a href="#项目实战一" class="headerlink" title="项目实战一"></a>项目实战一</h3><p>学习完上述的三个阶段之后，我们其实已经可以开发一些企业级应用了，理论知识的积攒就是为了实战而储备的，所以这个部分就是要将我们之前所有学习到的内容全部都应用于实践<br>但是需要注意的是，到目前为止我们使用的都是一些基础功能，也就是说我们的学习知识点可能会比较滞后。互联网技术一直在飞速发展，学习完这些基础之后，紧接着我们要去学习新技术了，那么这就是下一个模块的内容</p><h3 id="其他开发框架"><a href="#其他开发框架" class="headerlink" title="其他开发框架"></a>其他开发框架</h3><p>MyBatis是一个支持普通SQL查询，存储过程和高级映射的优秀持久层框架<br>Spring MVC是一个基于MVC的Web框架，Spring MVC是Spring框架的一个模块<br>MyBatis和Spring MVC这两个框架是现在公司里基本上都会使用的框架，所以务必掌握</p><p><img src="/assets/JavaEE/javase_base_04.png" alt="其他开发矿建"></p><h3 id="其他常用技术"><a href="#其他常用技术" class="headerlink" title="其他常用技术"></a>其他常用技术</h3><p>其实作为一个开发工程师，我们需要使用到的知识点非常多，不仅要求你会使用框架，有时候还有一些别的技术，如Java项目构建时所使用的到的工具Maven，Oracle数据库，开源的全文搜索引擎Lucene，开发员的搜索服务solr，WebService，linux等</p><p><img src="/assets/JavaEE/javase_base_05.png" alt="其他常用技术"></p><p>这个部分我虽然涉猎的不多，但是对于一些常用的比如Oracle，Linux等还是有一些基础的。<br>这个部分的内容需要重点关注的是Oracle数据库处理数据，Linux配置开发所需要的服务器，支持多种开发环境，Maven项目关机功能，生成节点，管理JAR文件</p><h3 id="实战项目二"><a href="#实战项目二" class="headerlink" title="实战项目二"></a>实战项目二</h3><p>如果你从一开始到现在一直都在认证的学习，那么恭喜你，已经马上就要成为一个合格的Java工程师了，我们的学习路线也接近了尾声。为什么是马上而不是现在已经是一个合格的Java工程师了呢？因为我们其实通过前面几个部分的学习，已经学习了大量的知识点，但是如果我们不将这些知识点带入到项目中很难达到融会贯通的效果。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;JavaEE学习路线&lt;/p&gt;</summary>
    
    
    
    
    <category term="JavaEE" scheme="http://www.paulniu.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>重拾android路(三十三) 指纹</title>
    <link href="http://www.paulniu.com/2019/09/26/android-33-fingerprint/"/>
    <id>http://www.paulniu.com/2019/09/26/android-33-fingerprint/</id>
    <published>2019-09-26T03:35:51.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android指纹识别，提升App用户体验</p><span id="more"></span><p>指纹识别大家应该都不陌生，一些比较隐私的App都会添加指纹识别技术，以保障用户的信息安全。不仅如此，一些比较新的手机已经添加了人脸识别技术，这样更是方便了用户。但是指纹识别依然是主流，对于一般的千元机来说，指纹识别也是标配。那么我们是可以通过Google API实现指纹识别的基础功能的。</p><h2 id="指纹识别的兼容性和安全性"><a href="#指纹识别的兼容性和安全性" class="headerlink" title="指纹识别的兼容性和安全性"></a>指纹识别的兼容性和安全性</h2><p>除了实现指纹识别的基础功能，我们还应该关注两个问题：兼容性和安全性</p><p>首先兼容性，指纹识别的基础功能是在Android6.0以后才开放出来的，那么在Android6.0以下，如果厂商也对手机的指纹识别进行了定制化操作，那么就会出现兼容性的问题。<br>其次安全性，由于已添加的指纹是存储在手机上的，GoogleAPI验证指纹之后的返回值仅仅是true或false，我们很难无条件的相信这个识别结果的。比如用户的手机如果root了，那么指纹识别是有可能会被劫持进而返回错误的识别结果。</p><blockquote><p>当然上面所说的情况发生概率比较低，如果指纹识别的应用场景非交易非支付，仅仅类似于启动App这样的简单操作，那么基础的指纹识别功能已经能够满足了。</p></blockquote><h2 id="指纹识别的实践"><a href="#指纹识别的实践" class="headerlink" title="指纹识别的实践"></a>指纹识别的实践</h2><p>先看代码和实现效果，再看原理和源码</p><p>我们想做一个这样的App，当应用启动的时候要求指纹识别，如果识别通过，展示主页面，如果识别不通过，则提示识别失败，请重新识别。<br>在使用指纹识别时，指纹识别框是可以让用户自定义或者使用原生的识别框的。</p><h2 id="指纹识别API的版本演进"><a href="#指纹识别API的版本演进" class="headerlink" title="指纹识别API的版本演进"></a>指纹识别API的版本演进</h2><p>在Android6.0开放了指纹识别API，存在于<p style="color:red">android.hardware.fingerprint</p>包下，核心类是FingerprintManager，提供了基础的指纹识别功能。要注意的是，FingerprintManager在android9.0做了@Deprecated标记，将被弃用</p><p>后来，在<p style="color:red">android.support.v4.hardware.fingerprint</p>包和<p style="color:red">androidx.core.hardware.fingerprint</p>包中，<p style="color:red">FngerprintManger</p>升级为<p style="color:red">FingerprintMangerCompat</p>,对功能进行了增强，也做了一些兼容性处理，比如增加了系统版本号的判断，对指纹支持加密处理等，实际上阅读源码我们会发现，其实还是调用了FingerprintManger实现的</p><p>再之后，android9.0Google对生物识别进行了进一步增强，开放了以<p style="color:red">BiometricPrompt</p>为核心的新Api，存在于<p style="color:red">androidx.biometric</p>包和<p style="color:red">android.hardware.biometrics</p>包下。这里提供的是支持设备提供的生物识别，包括指纹，虹膜，面部等</p><h3 id="指纹识别的关键方法-authenticate"><a href="#指纹识别的关键方法-authenticate" class="headerlink" title="指纹识别的关键方法 authenticate"></a>指纹识别的关键方法 authenticate</h3><p>这个是指纹识别中最核心的方法，用于拉起指纹识别扫描器进行指纹识别<br>以<p style="color:red">FingerprintManagerCompat</p>中的authenticate方法为例，定义如下<br><img src="/assets/fingerprint/fingerprint_01.png" alt="authenticate定义"><br><img src="/assets/fingerprint/fingerprint_02.png" alt="authenticate定义"></p><p>参数说明</p><ol><li>FingerprintManagerCompat.CrytoObject crypto<br> 密码对象包装类，目前支持Signature形式和Cipher形式的密码对象加密<br> 作用是，指纹扫描器会使用这个对象判断指纹认证结果的合法性，Android6.0是@Nullable，但不建议传Null，其在Android9.0之后就变成了@NonNull</li><li>int flags<br> 可选标志，暂无使用的地方，传0即可</li><li>CancellationSignal cancel<br> 这个对象的作用是用来取消指纹扫描操作的。比如用户点击了识别框上的取消按钮或者密码验证按钮，就要及时取消扫描器的扫描操作.如果不执行的话，会造成好电，而且在超时时间内无法再次唤起指纹识别        </li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/hailong0529/article/details/95406183">指纹识别</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Android指纹识别，提升App用户体验&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
    <category term="指纹" scheme="http://www.paulniu.com/tags/%E6%8C%87%E7%BA%B9/"/>
    
  </entry>
  
  <entry>
    <title>复习C语言 概述</title>
    <link href="http://www.paulniu.com/2019/09/24/c_01/"/>
    <id>http://www.paulniu.com/2019/09/24/c_01/</id>
    <published>2019-09-24T13:51:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>准备复习一下C语言的内容</p><span id="more"></span><p>C 语言是一种通用的、面向过程式的计算机程序设计语言。1972 年，为了移植与开发 UNIX 操作系统，丹尼斯·里奇在贝尔电话实验室设计开发了 C 语言。</p><p>C 语言是一种广泛使用的计算机语言，它与 Java 编程语言一样普及，二者在现代软件程序员之间都得到广泛使用。</p><p>当前最新的C语言标准为 C11 ，在它之前的C语言标准为 C99。</p><p>第一个简单例子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* 我的第一个 C 程序 */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, World! \n&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>所有的 C 语言程序都需要包含 main() 函数。 代码从 main() 函数开始执行。</li><li>/* … */ 用于注释说明。</li><li>printf() 用于格式化输出到屏幕。printf() 函数在 “stdio.h” 头文件中声明。</li><li>stdio.h 是一个头文件 (标准输入输出头文件) , #include 是一个预处理命令，用来引入头文件。 当编译器遇到 printf() 函数时，如果没有找到 stdio.h 头文件，会发生编译错误。</li><li>return 0; 语句用于表示退出程序。</li></ol><p><a href="https://www.runoob.com/try/runcode.php?filename=helloworld&type=c">在线C语言编程</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;准备复习一下C语言的内容&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="http://www.paulniu.com/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>android奇技淫巧 18 Android多种方法实现倒计时功能</title>
    <link href="http://www.paulniu.com/2019/09/19/android-tools-18/"/>
    <id>http://www.paulniu.com/2019/09/19/android-tools-18/</id>
    <published>2019-09-19T13:55:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在写一个自己练习的项目，需要实现广告显示三秒钟然后关闭页面的功能，仔细想了一下如何实现一个倒计时功能</p><span id="more"></span><p>因为很多地方都要使用到handler对象，所以我这里直接声明一个Handler 的弱引用</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LooperHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">       WeakReference&lt;Activity&gt; weakReference;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> LooperHandler(Activity activity) &#123;</span><br><span class="line">           weakReference = <span class="keyword">new</span> WeakReference&lt;&gt;(activity);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       @Override</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> handleMessage(@NonNull Message message) &#123;</span><br><span class="line">           <span class="keyword">super</span>.handleMessage(message);</span><br><span class="line">           MainActivity activity = (MainActivity) weakReference.get();</span><br><span class="line">           <span class="keyword">switch</span> (message.what) &#123;</span><br><span class="line">               <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                   <span class="built_in">int</span> <span class="keyword">count</span> = (<span class="built_in">int</span>) message.obj;</span><br><span class="line">                   <span class="keyword">count</span>--;</span><br><span class="line">                   <span class="keyword">if</span> (<span class="keyword">count</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                       activity.msg.setText(<span class="keyword">count</span> + <span class="string">&quot;s&quot;</span>);</span><br><span class="line">                       Message m = Message.obtain();</span><br><span class="line">                       m.what = <span class="number">0</span>;</span><br><span class="line">                       m.obj = <span class="keyword">count</span>;</span><br><span class="line">                       activity.handler.sendMessageDelayed(m, <span class="number">1000</span>);</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                   activity.msg.setText(message.obj + <span class="string">&quot;s&quot;</span>);</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>实现起来还是比较简单的，这里我通过自己和在网上搜到的有五种方法，记录一下。</p><h2 id="使用handler-postDelayed"><a href="#使用handler-postDelayed" class="headerlink" title="使用handler+postDelayed()"></a>使用handler+postDelayed()</h2><p>这个方法应该是属于比较传统的方法，直接看代码吧</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">btn01 = find<span class="constructor">ViewById(R.<span class="params">id</span>.<span class="params">btn01</span>)</span>;</span><br><span class="line">       btn01.set<span class="constructor">OnClickListener(<span class="params">new</span> View.OnClickListener()</span> &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void on<span class="constructor">Click(View <span class="params">view</span>)</span> &#123;</span><br><span class="line">               <span class="comment">// 当点击按钮时发送Message交给handler处理，handler处理之前先去判断计数</span></span><br><span class="line">               Message message = <span class="module-access"><span class="module"><span class="identifier">Message</span>.</span></span>obtain<span class="literal">()</span>;</span><br><span class="line">               message.what = <span class="number">0</span>;</span><br><span class="line">               message.obj = <span class="number">5</span>;</span><br><span class="line">               handler.send<span class="constructor">MessageDelayed(<span class="params">message</span>, 1000)</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure><h2 id="Timer和TimerTask"><a href="#Timer和TimerTask" class="headerlink" title="Timer和TimerTask"></a>Timer和TimerTask</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">btn02 = find<span class="constructor">ViewById(R.<span class="params">id</span>.<span class="params">btn02</span>)</span>;</span><br><span class="line">        btn02.set<span class="constructor">OnClickListener(<span class="params">new</span> View.OnClickListener()</span> &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void on<span class="constructor">Click(View <span class="params">view</span>)</span> &#123;</span><br><span class="line">                <span class="comment">// 通过声明一个Timer对象实现</span></span><br><span class="line">                Timer timer = <span class="keyword">new</span> <span class="constructor">Timer()</span>;</span><br><span class="line">                final TimerTask task = <span class="keyword">new</span> <span class="constructor">TimerTask()</span> &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void run<span class="literal">()</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">MainActivity</span>.</span></span>this.count &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            Message message = <span class="module-access"><span class="module"><span class="identifier">Message</span>.</span></span>obtain<span class="literal">()</span>;</span><br><span class="line">                            message.what = <span class="number">1</span>;</span><br><span class="line">                            message.obj = <span class="module-access"><span class="module"><span class="identifier">MainActivity</span>.</span></span>this.count;</span><br><span class="line">                            handler.send<span class="constructor">Message(<span class="params">message</span>)</span>;</span><br><span class="line">                            <span class="module-access"><span class="module"><span class="identifier">MainActivity</span>.</span></span>this.count--;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">if</span> (task != null<span class="operator"> &amp;&amp; </span>timer != null)</span><br><span class="line">                    timer.schedule(task, <span class="number">0</span>, <span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h2 id="ScheduledExecutorService"><a href="#ScheduledExecutorService" class="headerlink" title="ScheduledExecutorService"></a>ScheduledExecutorService</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">btn03 = find<span class="constructor">ViewById(R.<span class="params">id</span>.<span class="params">btn03</span>)</span>;</span><br><span class="line">        btn03.set<span class="constructor">OnClickListener(<span class="params">new</span> View.OnClickListener()</span> &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void on<span class="constructor">Click(View <span class="params">view</span>)</span> &#123;</span><br><span class="line">                <span class="comment">// 初始化一个线程大小为1的线程池</span></span><br><span class="line">                ScheduledExecutorService schedul = <span class="keyword">new</span> <span class="constructor">ScheduledThreadPoolExecutor(1)</span>;</span><br><span class="line">                schedul.schedule<span class="constructor">AtFixedRate(<span class="params">new</span> Runnable()</span> &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void run<span class="literal">()</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">MainActivity</span>.</span></span>this.count &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            Message m = <span class="keyword">new</span> <span class="constructor">Message()</span>;</span><br><span class="line">                            m.what = <span class="number">1</span>;</span><br><span class="line">                            m.obj = <span class="module-access"><span class="module"><span class="identifier">MainActivity</span>.</span></span>this.count;</span><br><span class="line">                            handler.send<span class="constructor">Message(<span class="params">m</span>)</span>;</span><br><span class="line">                            <span class="module-access"><span class="module"><span class="identifier">MainActivity</span>.</span></span>this.count--;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="number">0</span>, <span class="number">1000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h2 id="RxJava"><a href="#RxJava" class="headerlink" title="RxJava"></a>RxJava</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">btn04 = find<span class="constructor">ViewById(R.<span class="params">id</span>.<span class="params">btn04</span>)</span>;</span><br><span class="line">       btn04.set<span class="constructor">OnClickListener(<span class="params">new</span> View.OnClickListener()</span> &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void on<span class="constructor">Click(View <span class="params">view</span>)</span> &#123;</span><br><span class="line">               <span class="comment">// 通过RxJava</span></span><br><span class="line">       final long count = TOTAL_TIME<span class="operator"> / </span><span class="number">1000</span>;</span><br><span class="line">       <span class="module-access"><span class="module"><span class="identifier">Observable</span>.</span></span>interval(<span class="number">0</span>, <span class="number">1</span>, TimeUnit.SECONDS)<span class="comment">//设置0延迟，每隔一秒发送一条数据</span></span><br><span class="line">               .take((<span class="built_in">int</span>) (count + <span class="number">1</span>)) <span class="comment">//设置总共发送的次数</span></span><br><span class="line">               .map(<span class="keyword">new</span> Func1&lt;Long, Long&gt;<span class="literal">()</span> &#123;<span class="comment">//long 值是从小到大，倒计时需要将值倒置</span></span><br><span class="line">                   @Override</span><br><span class="line">                   public Long call(Long aLong) &#123;</span><br><span class="line">                       return count - aLong; </span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;)</span><br><span class="line">               .subscribe<span class="constructor">On(Schedulers.<span class="params">computation</span>()</span>)</span><br><span class="line">               <span class="comment">// doOnSubscribe 执行线程由下游逻辑最近的 subscribeOn() 控制，下游没有 subscribeOn() 则跟Subscriber 在同一线程执行</span></span><br><span class="line">               <span class="comment">//执行计时任务前先将 button 设置为不可点击</span></span><br><span class="line">               .<span class="keyword">do</span><span class="constructor">OnSubscribe(<span class="params">new</span> Action0()</span> &#123; </span><br><span class="line">                   @Override</span><br><span class="line">                   public void call<span class="literal">()</span> &#123; </span><br><span class="line">                       mStart.set<span class="constructor">Enabled(<span class="params">false</span>)</span>;<span class="comment">//在发送数据的时候设置为不能点击</span></span><br><span class="line">                       mStart.set<span class="constructor">BackgroundColor(Color.GRAY)</span>;<span class="comment">//背景色设为灰色</span></span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;)</span><br><span class="line">               .observe<span class="constructor">On(AndroidSchedulers.<span class="params">mainThread</span>()</span>)<span class="comment">//操作UI主要在UI线程</span></span><br><span class="line">               .subscribe(<span class="keyword">new</span> Subscriber&lt;Long&gt;<span class="literal">()</span> &#123;</span><br><span class="line">                   @Override</span><br><span class="line">                   public void on<span class="constructor">Completed()</span> &#123;</span><br><span class="line">                       mTvValue.set<span class="constructor">Text(<span class="params">getResources</span>()</span>.get<span class="constructor">String(R.<span class="params">string</span>.<span class="params">done</span>)</span>);</span><br><span class="line">                       mStart.set<span class="constructor">Enabled(<span class="params">true</span>)</span>;</span><br><span class="line">                       mStart.set<span class="constructor">BackgroundColor(Color.<span class="params">parseColor</span>(<span class="string">&quot;#f97e7e&quot;</span>)</span>);</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void on<span class="constructor">Error(Throwable <span class="params">e</span>)</span> &#123;</span><br><span class="line">                       e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void on<span class="constructor">Next(Long <span class="params">aLong</span>)</span> &#123; <span class="comment">//接收到一条就是会操作一次UI</span></span><br><span class="line">                       String value = <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">aLong</span>)</span>;</span><br><span class="line">                       mTvValue.set<span class="constructor">Text(<span class="params">value</span>)</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure><h2 id="CountDownTimer"><a href="#CountDownTimer" class="headerlink" title="CountDownTimer"></a>CountDownTimer</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">btn05 = findViewById(R.id.btn05);</span><br><span class="line">        btn05.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">onClick</span>(<span class="params">View view</span>)</span> &#123;</span><br><span class="line">                <span class="comment">// CountDownTimer</span></span><br><span class="line">                CountDownTimer timer = <span class="keyword">new</span> <span class="function"><span class="title">CountDownTimer</span>(<span class="params"><span class="number">5000</span>,<span class="number">1000</span></span>)</span> &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">onTick</span>(<span class="params">long time</span>)</span> &#123;</span><br><span class="line">                        MainActivity.this.msg.setText((time/<span class="number">1000</span>)+<span class="string">&quot;s&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">onFinish</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                timer.start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p><a href="https://github.com/niupuyue/blog_demo_android/tree/master/TimeCountDemo">demo地址</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在写一个自己练习的项目，需要实现广告显示三秒钟然后关闭页面的功能，仔细想了一下如何实现一个倒计时功能&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>android奇技淫巧 17 Android登录时使用到的登录信息加密和解密</title>
    <link href="http://www.paulniu.com/2019/09/17/android-tools-17/"/>
    <id>http://www.paulniu.com/2019/09/17/android-tools-17/</id>
    <published>2019-09-17T13:55:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android App用户在登陆的时候，需要传递用户的一些隐私信息，比如手机号，比如账号，比如密码等，那么我们需要将这些数据进行加密传递个后台，不然的话如果被别人拦截到很容易造成用户信息的泄露</p><span id="more"></span><p>我们在进行登录操作的时候，为了保护用户的信息安全，我们通常会对用户的传输信息进行加密操作，那么这篇博客就是专门把我们目前正在使用的加密总结一下</p><blockquote><p>所有的信息都是经过处理的  使用的方式是  AES算法加密文本(需要传输的内容)  使用RSA算法加密AES的密钥</p></blockquote><p>在当前的项目中加密的步骤分为以下几个内容</p><ol><li>首先获取到输入框输入的内容phone和pwd ，将获取到的phone和pwd封装成一个对象PhoneLoginModel</li><li>将PhoneLoginModel转换成Json字符串<ol><li>通过AES算法生成一个会话的密钥sercetKey </li><li>将公钥转换成PEM格式的byte数组publicKeyArray</li><li>将publicKeyArray转换成PublicKey对象</li><li>通过Cipher对象将PublicKey对象转换成byte数组的密文cipherKey</li><li>将json字符串换成byte数组plaintTextArray</li><li>将plaintTextArray和secretKy结合生成对应的加密报文byte数组plaintKey</li><li>将生成的机密报文cipherKey和PlaintKey封装成对象LoginInfoModel</li><li>将LoginInfoModel对象通过Post请求发送给后台</li></ol></li></ol><p>具体代码实现</p><h4 id="PhoneLoginModel"><a href="#PhoneLoginModel" class="headerlink" title="PhoneLoginModel"></a>PhoneLoginModel</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneLoginModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> phone = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> password = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> verkey = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="EncryptionInfoMode"><a href="#EncryptionInfoMode" class="headerlink" title="EncryptionInfoMode"></a>EncryptionInfoMode</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncryptionInfoMode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SecretKey secretKey = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> cipherKey = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> cipherText = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EditText phone;</span><br><span class="line">    <span class="keyword">private</span> EditText password;</span><br><span class="line">    <span class="keyword">private</span> Button submit;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void on<span class="constructor">Create(Bundle <span class="params">savedInstanceState</span>)</span> &#123;</span><br><span class="line">        super.on<span class="constructor">Create(<span class="params">savedInstanceState</span>)</span>;</span><br><span class="line">        set<span class="constructor">ContentView(R.<span class="params">layout</span>.<span class="params">activity_main</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        phone = find<span class="constructor">ViewById(R.<span class="params">id</span>.<span class="params">phone</span>)</span>;</span><br><span class="line">        password = find<span class="constructor">ViewById(R.<span class="params">id</span>.<span class="params">password</span>)</span>;</span><br><span class="line">        submit = find<span class="constructor">ViewById(R.<span class="params">id</span>.<span class="params">submit</span>)</span>;</span><br><span class="line">        submit.set<span class="constructor">OnClickListener(<span class="params">new</span> View.OnClickListener()</span> &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void on<span class="constructor">Click(View <span class="params">view</span>)</span> &#123;</span><br><span class="line">                String strPhone = phone.get<span class="constructor">Text()</span>.<span class="keyword">to</span><span class="constructor">String()</span>;</span><br><span class="line">                String strPassword = password.get<span class="constructor">Text()</span>.<span class="keyword">to</span><span class="constructor">String()</span>;</span><br><span class="line">                PhoneLoginModel model = <span class="keyword">new</span> <span class="constructor">PhoneLoginModel()</span>;</span><br><span class="line">                model.phone = strPhone;</span><br><span class="line">                model.password = strPassword;</span><br><span class="line">                EncryptionInfoMode encryptionInfoMode = <span class="module-access"><span class="module"><span class="identifier">BaseUtility</span>.</span></span>get<span class="constructor">EncryptionInfoMode(<span class="params">model</span>)</span>;</span><br><span class="line">                <span class="comment">// 可以直接将encryptionInfoMode对象传递给后台，让后台解密，执行登录操作</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="BaseUtility"><a href="#BaseUtility" class="headerlink" title="BaseUtility"></a>BaseUtility</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> BaseUtility &#123;</span><br><span class="line">    <span class="comment">// 模拟公钥</span></span><br><span class="line">    public static final String PUBLIC_KEY =</span><br><span class="line">            <span class="string">&quot;MIIBIjANBgkqhkiG9w0IOPDMANIDE&lt;DISNCEWSOCAQEAmQEjEdEXNZewgCZt40SAtYx2p/+91Cesx6Ns3sSg22NQxOHW1Mnt/OBaAEyvZu733PlMQQGkm6AkJtswRr61&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Z5pRk4ZKMIxj8sx7m1+DpnJr5ZJDZ3fd98e6d3+1d4e+8e5=d74MY0NjRGvPVKWiVOHwXaY823RJAAfG1Ks3a4KL1E6RBXLjNaN85uthK05QLuCGSoXuyc2pQRuuOykt&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;EjYiqRofwJBTkYTQ5nGPuDVzIzPmlmu10WMmY39dMXr1l00EVPobdnuuQu+dHsOqMrg0cRkMY/344SK7KKCI74YMKARDaXcRF2Kdulg8l4l46GG/29HBaUo/rvVlfFE2fwIDAQAB&quot;</span>;</span><br><span class="line"></span><br><span class="line">    public static EncryptionInfoMode get<span class="constructor">EncryptionInfoMode(PhoneLoginModel <span class="params">model</span>)</span>&#123;</span><br><span class="line">        EncryptionInfoMode encryptionInfoMode = <span class="keyword">new</span> <span class="constructor">EncryptionInfoMode()</span>;</span><br><span class="line"></span><br><span class="line">        String text = <span class="keyword">new</span> <span class="constructor">Gson()</span>.<span class="keyword">to</span><span class="constructor">Json(<span class="params">model</span>,PhoneLoginModel.<span class="params">class</span>)</span>;</span><br><span class="line">        encryptionInfoMode = get<span class="constructor">EncryptionModel(<span class="params">text</span>)</span>;</span><br><span class="line">        return encryptionInfoMode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static EncryptionInfoMode get<span class="constructor">EncryptionModel(String <span class="params">text</span>)</span>&#123;</span><br><span class="line">        EncryptionInfoMode mode = <span class="keyword">new</span> <span class="constructor">EncryptionInfoMode()</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">TextUtils</span>.</span></span>is<span class="constructor">Empty(<span class="params">text</span>)</span>)&#123;</span><br><span class="line">            return mode;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 这里我们采用的加密方式总的来说还是通过AES的方式，因为AES的加密方式最简单也最迅速，但是如果仅仅使用AES的话</span></span><br><span class="line"><span class="comment">         * 会造成很多安全性的问题，因为一旦AES的密钥被破解，那么所有的信息都将会被暴露出来，所以我们采用的方式是AES加密密文，RSA加密AES密钥</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 生成AES加密算法对象</span></span><br><span class="line">            KeyGenerator keyGenerator = <span class="module-access"><span class="module"><span class="identifier">KeyGenerator</span>.</span></span>get<span class="constructor">Instance(<span class="string">&quot;AES&quot;</span>)</span>;</span><br><span class="line">            <span class="comment">// 使用长度为128的密钥</span></span><br><span class="line">            keyGenerator.init(<span class="number">128</span>);</span><br><span class="line">            <span class="comment">// 生成简单AES密钥(这里我们还没有AES密钥进行加密处理，因为我们还要用这个对象先对密文进行加密)</span></span><br><span class="line">            mode.secretKey = keyGenerator.generate<span class="constructor">Key()</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 初始化数据，包括初始化文本(将需要传输的文本转换成byte数组)，对公钥进行解码(这里的公钥使用的是Base64已经加密过了)</span></span><br><span class="line">            byte<span class="literal">[]</span> plaintText = text.get<span class="constructor">Bytes()</span>;</span><br><span class="line">            byte<span class="literal">[]</span> publicKeyText = <span class="module-access"><span class="module"><span class="identifier">Base64</span>.</span></span>decode(PUBLIC_KEY,Base64.DEFAULT);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 下面的代码分为两部分进行，第一部分是对密文的加密，也就是对需要传输的文本执行加密算法</span></span><br><span class="line">            Cipher cipher = <span class="module-access"><span class="module"><span class="identifier">Cipher</span>.</span></span>get<span class="constructor">Instance(<span class="string">&quot;AES&quot;</span>)</span>;</span><br><span class="line">            <span class="comment">// 设置加密模式</span></span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE,mode.secretKey);</span><br><span class="line">            <span class="comment">// 将密文转换成byte数组</span></span><br><span class="line">            byte<span class="literal">[]</span> plaint = cipher.<span class="keyword">do</span><span class="constructor">Final(<span class="params">plaintText</span>)</span>;</span><br><span class="line">            <span class="comment">// 到这里，密文的加密已经完成了，但是因为AES加密的方式比较简单，很容易被别人捕获并且破解(破解是要通过密钥才能破解的)，所以当我们传递AES密钥的时候，需要对密钥进行加密处理</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 第二部分，对AES的密钥进行加密</span></span><br><span class="line">            <span class="comment">// 声明RSA算法</span></span><br><span class="line">            KeyFactory kf = <span class="module-access"><span class="module"><span class="identifier">KeyFactory</span>.</span></span>get<span class="constructor">Instance(<span class="string">&quot;RSA&quot;</span>)</span>;</span><br><span class="line">            X509EncodedKeySpec x509ks = <span class="keyword">new</span> <span class="constructor">X509EncodedKeySpec(<span class="params">publicKeyText</span>)</span>;</span><br><span class="line">            <span class="comment">// 生成一个PublicKey对象</span></span><br><span class="line">            PublicKey pk = kf.generate<span class="constructor">Public(<span class="params">x509ks</span>)</span>;</span><br><span class="line">            <span class="comment">// 使用RSA算法对AES密钥进行加密</span></span><br><span class="line">            Cipher publicKeyCipher = <span class="module-access"><span class="module"><span class="identifier">Cipher</span>.</span></span>get<span class="constructor">Instance(<span class="string">&quot;RSA/ECB/PKCS1Padding&quot;</span>)</span>;</span><br><span class="line">            <span class="comment">// 设置加密模式，并且把需要加密的对象传递过来</span></span><br><span class="line">            publicKeyCipher.init(Cipher.ENCRYPT_MODE,pk);</span><br><span class="line">            <span class="comment">// 获取AES密钥的明文</span></span><br><span class="line">            byte<span class="literal">[]</span> plainKey = mode.secretKey.get<span class="constructor">Encoded()</span>;</span><br><span class="line">            <span class="comment">// 设置AES密钥的密文</span></span><br><span class="line">            byte<span class="literal">[]</span> plaink = publicKeyCipher.<span class="keyword">do</span><span class="constructor">Final(<span class="params">plainKey</span>)</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 最后需要将AES的密文和AES的密钥在使用Base64进行加密之后，就能直接传输给后台了</span></span><br><span class="line">            mode.cipherText = <span class="keyword">new</span> <span class="constructor">String(Base64.<span class="params">encode</span>(<span class="params">plaint</span>,Base64.NO_WRAP)</span>);</span><br><span class="line">            mode.cipherKey = <span class="keyword">new</span> <span class="constructor">String(Base64.<span class="params">encode</span>(<span class="params">plaink</span>,Base64.NO_WRAP)</span>);</span><br><span class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125; catch (NoSuchPaddingException e) &#123;</span><br><span class="line">            e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125; catch (InvalidKeyException e) &#123;</span><br><span class="line">            e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125; catch (BadPaddingException e) &#123;</span><br><span class="line">            e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125; catch (IllegalBlockSizeException e) &#123;</span><br><span class="line">            e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125; catch (InvalidKeySpecException e) &#123;</span><br><span class="line">            e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return mode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/niupuyue/blog_demo_android/tree/master/LoginSecret">demo地址</a></p><p>下面是关于加密内容的补充，大部分都是以图文的形式展现的</p><h2 id="补充知识点"><a href="#补充知识点" class="headerlink" title="补充知识点"></a>补充知识点</h2><p>加密的分类：</p><ol><li>按可逆性：加密分为可逆算法和不可逆算法</li><li>按对称性：加密可分为对称算法和非对称算法</li></ol><p>一般加密分为以下几种，</p><ol><li>Base64编码算法(可逆)</li><li>MD5加密(不可逆)  (还有一个sha1值)</li><li>DES加密 （对称，可逆）</li><li>AES加密 (对称，可逆)</li><li>RSA加密(非对称，可逆)</li></ol><h3 id="对称"><a href="#对称" class="headerlink" title="对称"></a>对称</h3><p>对称加密算法是比较传统的加密体质，即通信双方在加密/解密的过程中使用他们共享的单一密钥，优点是算法简单，加密速度快，但是安全性较差。最常用的对称密码算法是DES，但是DES密钥的长度较短，已经不适合现在分布式开放网络对数据加密安全性的要求了。目前对称搞基数据加密标准AES取代了DES，使用的也比较多</p><h3 id="非对称"><a href="#非对称" class="headerlink" title="非对称"></a>非对称</h3><p>非对称加密用于加/解密钥不同(公钥加密，私钥解密),密钥管理简单，RSA是非对称加密算法中最著名的共要密码算法，但是由于RSA算法都是进行大数计算，使得RSA最快的情况也会比AES慢，但是安全性比较高</p><h2 id="Base64算法"><a href="#Base64算法" class="headerlink" title="Base64算法"></a>Base64算法</h2><p>Base64其实不是安全领域的加密算法，因为他的加密解密算法都是公开的，Base64编码本质上是一种将二进制数据转成文本数据的方案，用处就是将一些不适合传输的数据内容进行编码来适合传输</p><p>字符串进行Base64编码</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String encodedString = <span class="module-access"><span class="module"><span class="identifier">Base64</span>.</span></span>encode(<span class="string">&quot;paulniu&quot;</span>.get<span class="constructor">Bytes()</span>,Base64.DEFAULT);</span><br></pre></td></tr></table></figure><p>字符串进行Base64解码</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> decodedString = <span class="keyword">new</span> <span class="built_in"><span class="keyword">String</span></span>(Base64.<span class="built_in">decode</span>(encodedString,Base64.<span class="literal">DEFAULT</span>));</span><br><span class="line"><span class="comment">// 解析出来decodedString就是paulniu</span></span><br></pre></td></tr></table></figure><h2 id="MD5算法"><a href="#MD5算法" class="headerlink" title="MD5算法"></a>MD5算法</h2><p>这是一种单向加密算法，只能加密，无法解密，用于密码存储等。对于MD5的安全性，网上有很多MD5解密的网站，破解方式一般都是采用穷举法。就是将所有MD5字典都遍历一遍，可想而知，如果MD5的内容越多，解密越困难。所以一般情况下对数据采用多次MD5加密或者采用加权法(就是加一段独有的字符串再进行加密)</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">public</span> static String md5(String ss)&#123;</span><br><span class="line">    <span class="keyword">if</span>(TextUtils.isEmpty(ss))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    MessageDigest md5 = <span class="keyword">null</span>;</span><br><span class="line">    try&#123;</span><br><span class="line">        md5 = MessageDigest.getInstance(&quot;MD5&quot;);</span><br><span class="line">        byte[] bytes = md5.digest(ss.getBytes());</span><br><span class="line">        String result = &quot;&quot;;</span><br><span class="line">        <span class="keyword">for</span>(byte b:bytes)&#123;</span><br><span class="line">            String <span class="keyword">temp</span> = <span class="type">Integer</span>.toHexString(b &amp; <span class="number">0xff</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">temp</span>.length() == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">temp</span> = &quot;0&quot; + <span class="keyword">temp</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            result+= <span class="keyword">temp</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;catch(<span class="keyword">Exception</span> e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h2><p>对称加密密钥是唯一的，加密和解密都是同一个密钥，AES速度上回避RSA快，但是因为只有一个密钥，如果这个密钥一旦被破解，那么所有的信息都将被泄露</p><p>使用场景：</p><ul><li>本地数据加密(例如加密android中的SharedPreferences里面的敏感数据)</li><li>网络传输，登录接口使用post请求(安全性不好)</li><li>加密用户登陆结果信息并序列化到本地磁盘(例如将User对象序列化到本地磁盘，下次登录时反序列化到内存中)</li><li>网页交互数据加密</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        Cipher cipher = <span class="module-access"><span class="module"><span class="identifier">Cipher</span>.</span></span>get<span class="constructor">Instance(<span class="string">&quot;AES&quot;</span>)</span>;</span><br><span class="line">        <span class="comment">// 创建密钥</span></span><br><span class="line">        SecretKey key = <span class="module-access"><span class="module"><span class="identifier">KeyGenerator</span>.</span></span>get<span class="constructor">Instance(<span class="string">&quot;AES&quot;</span>)</span>.generate<span class="constructor">Key()</span>;</span><br><span class="line">        <span class="comment">// 设置操作模式</span></span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE,key);</span><br><span class="line">        <span class="comment">// 执行</span></span><br><span class="line">        byte<span class="literal">[]</span> res = cipher.<span class="keyword">do</span><span class="constructor">Final(<span class="string">&quot;paulniu&quot;</span>.<span class="params">getBytes</span>()</span>);</span><br><span class="line">    &#125; catch (NoSuchAlgorithmException e) &#123;</span><br><span class="line">        e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">    &#125; catch (NoSuchPaddingException e) &#123;</span><br><span class="line">        e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">    &#125; catch (InvalidKeyException e) &#123;</span><br><span class="line">        e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">    &#125; catch (BadPaddingException e) &#123;</span><br><span class="line">        e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">    &#125; catch (IllegalBlockSizeException e) &#123;</span><br><span class="line">        e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Android App用户在登陆的时候，需要传递用户的一些隐私信息，比如手机号，比如账号，比如密码等，那么我们需要将这些数据进行加密传递个后台，不然的话如果被别人拦截到很容易造成用户信息的泄露&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>android奇技淫巧 16 Android App 不显示在最近使用过的应用列表中</title>
    <link href="http://www.paulniu.com/2019/09/12/android-tools-16/"/>
    <id>http://www.paulniu.com/2019/09/12/android-tools-16/</id>
    <published>2019-09-12T13:55:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>android App最近使用过的应用列表</p><span id="more"></span><p>最近在一次使用脉脉的时候发现了一个比较骚的操作。我明明是有运行脉脉的，但是当我把脉脉切换到后台之后，在最近使用的软件列表中，没有找到脉脉这个软件。<br>我当时就觉得这个功能虽然可有可无，因为当我执行清除后台应用程序的时候，实际上也是将脉脉后台进程杀死了的，但是总感觉以后可能会用上这样的功能，比如当你浏览一些敏感信息的时候，切换到后台却不想让别人看到，就可以将后台进程设置为不可见状态。</p><p>好了，废话不多说，直接看一下如何实现这样的效果。</p><p>想要实现这样的效果只需要在清单配置文件中填写如下的内容即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;com.paulniu.nobackrunningstate&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@mipmap/ic_launcher&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">&quot;@mipmap/ic_launcher_round&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">&quot;@style/AppTheme&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:excludeFromRecents</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p>嗯，就这么多</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;android App最近使用过的应用列表&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>android奇技淫巧 15 Android沉浸式状态栏</title>
    <link href="http://www.paulniu.com/2019/09/03/android-tools-15/"/>
    <id>http://www.paulniu.com/2019/09/03/android-tools-15/</id>
    <published>2019-09-03T13:55:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android 沉浸式状态栏</p><span id="more"></span><p>最近一段时间一直在学习Android OpenGL的内容，所以这个系列的博客停下来有一整子了。最近的项目中，UI画了一个沉浸式状态栏样式，一时之间我竟无言以对，所以趁着这个时间将沉浸式状态栏的内容总结一下</p><p>首先我们需要先明确一个概念，什么是沉浸式？<br>其实沉浸式一开始是从VR里面传出来的，体验过VR的小伙伴肯定都知道，在VR体验中，我们能看到的都是VR为我们提供的内容，除此之后再无其他，会让我们有一种置身于虚拟世界之中的感觉，这个就是沉浸式。</p><p>那么对应到Android系统中，大多数情况下是用不到沉浸式的，只有一些比如玩游戏，看电影的时候才会用到沉浸式，如下图所示：<br><img src="/assets/tools/tools-statusbar-01.png" alt="沉浸式1"><br><img src="/assets/tools/tools-statusbar-02.png" alt="沉浸式2"><br>在用户玩游戏或者看电影的时候，不会被状态栏的内容所干扰这才是真正的沉浸式。</p><p>不过虽然听上去高大上的沉浸式效果，实际上也就是将内容全屏化了而已，其实Android沉浸式模式的本质就是全屏化。</p><h2 id="隐藏状态栏"><a href="#隐藏状态栏" class="headerlink" title="隐藏状态栏"></a>隐藏状态栏</h2><p>一个Android应用程序的界面其实有很多系统元素，如下<br><img src="/assets/tools/tools-statusbar-03.png" alt="状态栏内容"><br>通过上图我们会发现，有状态栏，ActionBar，导航栏等组件。而打造沉浸式模式的用户体验，就是要将这个系统元素全部隐藏，只留下主体部分。<br>例如，我这里在布局文件中添加一个ImageView，那么他的样式应该是这样的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">&quot;@mipmap/bg_01&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/assets/tools/tools-statusbar-04.png" alt="添加图片效果"><br>这样的效果很明显不是我们想要的，所以我们一步一步的来。首先隐藏状态栏，在Android4.1以下和4.1以上的版本中隐藏状态栏和ActionBar的方式不一样。不过这里我只考虑了4.1以上的版本。</p><p>先来看一下代码</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Layout1Activity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void onCreate(<span class="meta">@Nullable</span> <span class="type">Bundle</span> savedInstanceState) &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(<span class="type">R</span>.layout.activity_layout_1);</span><br><span class="line">        <span class="comment">// 隐藏状态栏和ActionBar</span></span><br><span class="line">        <span class="type">View</span> decorView = getWindow().getDecorView();</span><br><span class="line">        int option = <span class="type">View</span>.<span class="type">SYSTEM_UI_FLAG_FULLSCREEN</span>;</span><br><span class="line">        decorView.setSystemUiVisibility(option);</span><br><span class="line">        <span class="type">ActionBar</span> actionBar = getSupportActionBar();</span><br><span class="line">        actionBar.hide();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果:<br><img src="/assets/tools/tools-statusbar-05.png" alt="隐藏状态栏和ActionBar"></p><p>这里我们先通过getWindow().getDecorView()方法获取当前页面的DecorView，然后在调用他的setSystemUiVisibility()方法来设置系统UI元素的可见性。其中SYSTEM_UI_FLAG_FULLSCREEN表示全屏的意思，也就是会将状态栏隐藏掉。另外，根据Android的设计建议，ActionBar是不应该独立于状态栏单独现实的，所以我们果断把ActionBar使用hide()方法将其隐藏掉。</p><p>这个看上去有点沉浸式的样子了，而我们的UI小姐姐想让我做出来的是这样的效果<br><img src="/assets/tools/tools-statusbar-06.png" alt="预览样式"></p><p>其实也很简单，只需要使用另外一种flag就可以了</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> Layout1Activity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void on<span class="constructor">Create(@Nullable Bundle <span class="params">savedInstanceState</span>)</span> &#123;</span><br><span class="line">        super.on<span class="constructor">Create(<span class="params">savedInstanceState</span>)</span>;</span><br><span class="line">        set<span class="constructor">ContentView(R.<span class="params">layout</span>.<span class="params">activity_layout_1</span>)</span>;</span><br><span class="line">        <span class="comment">// 隐藏状态栏和ActionBar</span></span><br><span class="line"><span class="comment">//        View decorView = getWindow().getDecorView();</span></span><br><span class="line"><span class="comment">//        int option = View.SYSTEM_UI_FLAG_FULLSCREEN;</span></span><br><span class="line"><span class="comment">//        decorView.setSystemUiVisibility(option);</span></span><br><span class="line"><span class="comment">//        ActionBar actionBar = getSupportActionBar();</span></span><br><span class="line"><span class="comment">//        actionBar.hide();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 另一种效果</span></span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">21</span>)&#123;</span><br><span class="line">            View decorView = get<span class="constructor">Window()</span>.get<span class="constructor">DecorView()</span>;</span><br><span class="line">            <span class="built_in">int</span> option = View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN <span class="pattern-match">| <span class="constructor">View</span>.<span class="constructor">SYSTEM_UI_FLAG_LAYOUT_STABLE</span>;</span></span><br><span class="line"><span class="pattern-match">            decor<span class="constructor">View</span>.set<span class="constructor">SystemUiVisibility(<span class="params">option</span>)</span>;</span></span><br><span class="line"><span class="pattern-match">            get<span class="constructor">Window()</span>.set<span class="constructor">StatusBarColor(Color.TRANSPARENT)</span>;</span></span><br><span class="line"><span class="pattern-match">        &#125;</span></span><br><span class="line"><span class="pattern-match">        <span class="constructor">ActionBar</span> action<span class="constructor">Bar</span> = get<span class="constructor">SupportActionBar()</span>;</span></span><br><span class="line"><span class="pattern-match">        action<span class="constructor">Bar</span>.hide();</span></span><br><span class="line"><span class="pattern-match">    &#125;</span></span><br><span class="line"><span class="pattern-match">&#125;</span></span><br></pre></td></tr></table></figure><p>效果如下所示<br><img src="/assets/tools/tools-statusbar-07.png" alt="预览样式"></p><p>首先我们注意到，这样的样式只有5.0以上的系统才能支持，所以这里我们先判断，只有大于5.0系统才能使用。接下来我们使用SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN和SYSTEM_UI_FLAG_LAYOUT_STABLE，这两个flat必须结合在一起使用，表示会让应用的主体内容占用系统状态栏的空间，最后在调用Window的setStatusBarColor()方法将状态栏设置为透明颜色。</p><h2 id="隐藏导航栏"><a href="#隐藏导航栏" class="headerlink" title="隐藏导航栏"></a>隐藏导航栏</h2><p>现在我们已经隐藏了状态栏效果，不过在屏幕的下方我们会发现导航栏还是存在的，接下来我们就对导航栏进行隐藏。</p><p>其实原理是一样的，隐藏导航栏也就是使用了不同的UI flag而已，修改代码中的部分内容即可</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class Layout1Activity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_layout_1);</span><br><span class="line">        <span class="regexp">//</span> 隐藏状态栏和ActionBar</span><br><span class="line"><span class="regexp">//</span>        View decorView = getWindow().getDecorView();</span><br><span class="line"><span class="regexp">//</span>        int option = View.SYSTEM_UI_FLAG_FULLSCREEN;</span><br><span class="line"><span class="regexp">//</span>        decorView.setSystemUiVisibility(option);</span><br><span class="line"><span class="regexp">//</span>        ActionBar actionBar = getSupportActionBar();</span><br><span class="line"><span class="regexp">//</span>        actionBar.hide();</span><br><span class="line"></span><br><span class="line">        <span class="regexp">//</span> 另一种效果</span><br><span class="line"><span class="regexp">//</span>        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">21</span>)&#123;</span><br><span class="line"><span class="regexp">//</span>            View decorView = getWindow().getDecorView();</span><br><span class="line"><span class="regexp">//</span>            int option = View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_STABLE;</span><br><span class="line"><span class="regexp">//</span>            decorView.setSystemUiVisibility(option);</span><br><span class="line"><span class="regexp">//</span>            getWindow().setStatusBarColor(Color.TRANSPARENT);</span><br><span class="line"><span class="regexp">//</span>        &#125;</span><br><span class="line"><span class="regexp">//</span>        ActionBar actionBar = getSupportActionBar();</span><br><span class="line"><span class="regexp">//</span>        actionBar.hide();</span><br><span class="line"></span><br><span class="line">        <span class="regexp">//</span> 隐藏导航栏</span><br><span class="line">        View decorView = getWindow().getDecorView();</span><br><span class="line">        int option = View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_FULLSCREEN;</span><br><span class="line">        decorView.setSystemUiVisibility(option);</span><br><span class="line">        ActionBar actionBar = getSupportActionBar();</span><br><span class="line">        actionBar.hide();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/assets/tools/tools-statusbar-08.png" alt="效果预览"></p><p>这里我们同时使用了SYSTEM_UI_FLAG_HIDE_NAVIGATION和SYSTEM_UI_FLAG_FULLSCREEN，这样就可以将状态栏和导航栏同时隐藏</p><p>虽然我们实现了全屏化，但是还是相差比较远，因为再这样的模式下，只要我们随意的触摸屏幕，就会退出全屏模式。</p><p>除了隐藏导航栏之外，我们也要实现刚才的透明状态栏的效果，其实就是将两部分代码合并一下。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">public class Layout1Activity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_layout_1);</span><br><span class="line">        <span class="regexp">//</span> 隐藏状态栏和ActionBar</span><br><span class="line"><span class="regexp">//</span>        View decorView = getWindow().getDecorView();</span><br><span class="line"><span class="regexp">//</span>        int option = View.SYSTEM_UI_FLAG_FULLSCREEN;</span><br><span class="line"><span class="regexp">//</span>        decorView.setSystemUiVisibility(option);</span><br><span class="line"><span class="regexp">//</span>        ActionBar actionBar = getSupportActionBar();</span><br><span class="line"><span class="regexp">//</span>        actionBar.hide();</span><br><span class="line"></span><br><span class="line">        <span class="regexp">//</span> 另一种效果</span><br><span class="line"><span class="regexp">//</span>        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">21</span>)&#123;</span><br><span class="line"><span class="regexp">//</span>            View decorView = getWindow().getDecorView();</span><br><span class="line"><span class="regexp">//</span>            int option = View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_STABLE;</span><br><span class="line"><span class="regexp">//</span>            decorView.setSystemUiVisibility(option);</span><br><span class="line"><span class="regexp">//</span>            getWindow().setStatusBarColor(Color.TRANSPARENT);</span><br><span class="line"><span class="regexp">//</span>        &#125;</span><br><span class="line"><span class="regexp">//</span>        ActionBar actionBar = getSupportActionBar();</span><br><span class="line"><span class="regexp">//</span>        actionBar.hide();</span><br><span class="line"></span><br><span class="line">        <span class="regexp">//</span> 隐藏导航栏</span><br><span class="line"><span class="regexp">//</span>        View decorView = getWindow().getDecorView();</span><br><span class="line"><span class="regexp">//</span>        int option = View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_FULLSCREEN;</span><br><span class="line"><span class="regexp">//</span>        decorView.setSystemUiVisibility(option);</span><br><span class="line"><span class="regexp">//</span>        ActionBar actionBar = getSupportActionBar();</span><br><span class="line"><span class="regexp">//</span>        actionBar.hide();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">21</span>)&#123;</span><br><span class="line">            View decorView = getWindow().getDecorView();</span><br><span class="line">            int option = View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION</span><br><span class="line">                    | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN</span><br><span class="line">                    | View.SYSTEM_UI_FLAG_LAYOUT_STABLE;</span><br><span class="line">            decorView.setSystemUiVisibility(option);</span><br><span class="line">            getWindow().setNavigationBarColor(Color.TRANSPARENT);</span><br><span class="line">            getWindow().setStatusBarColor(Color.TRANSPARENT);</span><br><span class="line">        &#125;</span><br><span class="line">        ActionBar actionBar = getSupportActionBar();</span><br><span class="line">        actionBar.hide();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/assets/tools/tools-statusbar-09.png" alt="效果预览"></p><p>这里我们使用SYSTEM_UI_FLAG_HIDE_NAVIGATION表示会让应用的主体内容占用系统导航栏的空间，然后又调用了setNavigation()方法将导航栏设置为透明颜色</p><h2 id="真正的沉浸式模式"><a href="#真正的沉浸式模式" class="headerlink" title="真正的沉浸式模式"></a>真正的沉浸式模式</h2><p>其实不管我们是否误解了沉浸式模式，但是这种模式的的确确的存在，那么我们应该怎么样才能实现像视频播放或者游戏中这样的模式呢？我们只需要重写Activity中的onWindowFocusChanged()方法，然后加入如下的逻辑即可</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">public class Layout1Activity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_layout_1);</span><br><span class="line">        <span class="regexp">//</span> 隐藏状态栏和ActionBar</span><br><span class="line"><span class="regexp">//</span>        View decorView = getWindow().getDecorView();</span><br><span class="line"><span class="regexp">//</span>        int option = View.SYSTEM_UI_FLAG_FULLSCREEN;</span><br><span class="line"><span class="regexp">//</span>        decorView.setSystemUiVisibility(option);</span><br><span class="line"><span class="regexp">//</span>        ActionBar actionBar = getSupportActionBar();</span><br><span class="line"><span class="regexp">//</span>        actionBar.hide();</span><br><span class="line"></span><br><span class="line">        <span class="regexp">//</span> 另一种效果</span><br><span class="line"><span class="regexp">//</span>        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">21</span>)&#123;</span><br><span class="line"><span class="regexp">//</span>            View decorView = getWindow().getDecorView();</span><br><span class="line"><span class="regexp">//</span>            int option = View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_STABLE;</span><br><span class="line"><span class="regexp">//</span>            decorView.setSystemUiVisibility(option);</span><br><span class="line"><span class="regexp">//</span>            getWindow().setStatusBarColor(Color.TRANSPARENT);</span><br><span class="line"><span class="regexp">//</span>        &#125;</span><br><span class="line"><span class="regexp">//</span>        ActionBar actionBar = getSupportActionBar();</span><br><span class="line"><span class="regexp">//</span>        actionBar.hide();</span><br><span class="line"></span><br><span class="line">        <span class="regexp">//</span> 隐藏导航栏</span><br><span class="line"><span class="regexp">//</span>        View decorView = getWindow().getDecorView();</span><br><span class="line"><span class="regexp">//</span>        int option = View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_FULLSCREEN;</span><br><span class="line"><span class="regexp">//</span>        decorView.setSystemUiVisibility(option);</span><br><span class="line"><span class="regexp">//</span>        ActionBar actionBar = getSupportActionBar();</span><br><span class="line"><span class="regexp">//</span>        actionBar.hide();</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">21</span>)&#123;</span><br><span class="line"><span class="regexp">//</span>            View decorView = getWindow().getDecorView();</span><br><span class="line"><span class="regexp">//</span>            int option = View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION</span><br><span class="line"><span class="regexp">//</span>                    | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN</span><br><span class="line"><span class="regexp">//</span>                    | View.SYSTEM_UI_FLAG_LAYOUT_STABLE;</span><br><span class="line"><span class="regexp">//</span>            decorView.setSystemUiVisibility(option);</span><br><span class="line"><span class="regexp">//</span>            getWindow().setNavigationBarColor(Color.TRANSPARENT);</span><br><span class="line"><span class="regexp">//</span>            getWindow().setStatusBarColor(Color.TRANSPARENT);</span><br><span class="line"><span class="regexp">//</span>        &#125;</span><br><span class="line"><span class="regexp">//</span>        ActionBar actionBar = getSupportActionBar();</span><br><span class="line"><span class="regexp">//</span>        actionBar.hide();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onWindowFocusChanged(boolean hasFocus) &#123;</span><br><span class="line">        super.onWindowFocusChanged(hasFocus);</span><br><span class="line">        <span class="keyword">if</span> (hasFocus &amp;&amp; Build.VERSION.SDK_INT &gt;= <span class="number">19</span>)&#123;</span><br><span class="line">            View decorView = getWindow().getDecorView();</span><br><span class="line">            int option = View.SYSTEM_UI_FLAG_LAYOUT_STABLE</span><br><span class="line">                    | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION</span><br><span class="line">                    | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN</span><br><span class="line">                    | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION</span><br><span class="line">                    | View.SYSTEM_UI_FLAG_FULLSCREEN</span><br><span class="line">                    | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;</span><br><span class="line">            decorView.setSystemUiVisibility(option);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/assets/tools/tools-statusbar-10.png" alt="效果预览"></p><p>沉浸式模式的UI flag就这些了，如果我们真的需要实现沉浸式，直接将上面的代码应用到Activity中即可。需要注意的是，这种沉浸式模式只有在Android4.4以上的版本才支持，所以这里也是要加判断的<br>如果我们需要横屏展示，只需要在配置文件中加入如下代码即可</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity android:<span class="attribute">name</span>=<span class="string">&quot;.MainActivity&quot;</span></span><br><span class="line">    android:<span class="attribute">screenOrientation</span>=<span class="string">&quot;landscape&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/xiaoniudadi/blog_demo_android/tree/master/ImmersiveStatusBarDemo">demo地址</a></p><h1 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h1><p><a href="https://blog.csdn.net/guolin_blog/article/details/51763825">Android状态栏微技巧，带你真正理解沉浸式模式</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Android 沉浸式状态栏&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>android 音视频开发(九)</title>
    <link href="http://www.paulniu.com/2019/09/01/android-media-09/"/>
    <id>http://www.paulniu.com/2019/09/01/android-media-09/</id>
    <published>2019-09-01T08:30:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>OpenGL ES 绘制圆锥体，圆柱体，球体</p><span id="more"></span><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.jianshu.com/u/eb01968a6673">OpenGL 学习</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;OpenGL ES 绘制圆锥体，圆柱体，球体&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
    <category term="音视频" scheme="http://www.paulniu.com/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>android 音视频开发(八)</title>
    <link href="http://www.paulniu.com/2019/08/31/android-media-08/"/>
    <id>http://www.paulniu.com/2019/08/31/android-media-08/</id>
    <published>2019-08-31T01:30:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用OpenGL ES绘制立方体，并且设置为彩色的</p><span id="more"></span><p>先来看一下效果，因为我之前设置的颜色看起来并不是非常的明显，所以我在网上找了一个颜色<br><img src="/assets/tools/tools-opengl-09.png" alt="绘制立方体"><br>下面我们将一步步的实现一个立方体效果</p><h4 id="构建立方体"><a href="#构建立方体" class="headerlink" title="构建立方体"></a>构建立方体</h4><p>从我们之前学习过的数学知识，我们知道立方体(这里以正方体为例)是有六个面的，那么就对应着六个定点，所以第一步，我们需要先把定点生命出来</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private float[] vertexCoords = &#123;</span><br><span class="line">            <span class="string">-0</span>.5f, 0.5f, 1f,</span><br><span class="line">            <span class="string">-0</span>.5f, <span class="string">-0</span>.5f, 1f,</span><br><span class="line">            0.5f, <span class="string">-0</span>.5f, 1f,</span><br><span class="line">            0.5f, 0.5f, 1f,</span><br><span class="line">            <span class="string">-0</span>.5f, 0.5f, 0f,</span><br><span class="line">            <span class="string">-0</span>.5f, <span class="string">-0</span>.5f, 0f,</span><br><span class="line">            0.5f, <span class="string">-0</span>.5f, 0f,</span><br><span class="line">            0.5f, 0.5f, 0f</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>设置完六个定点之后，我们需要设置这六个点的索引，所谓的索引就是要依次找到各个点可能组成的三角形，如下所示</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private static short[] indexCoords = &#123;</span><br><span class="line">            <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>,<span class="regexp">//</span> 上面</span><br><span class="line">            <span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">1</span>,<span class="regexp">//</span> 左面</span><br><span class="line">            <span class="number">0</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">3</span>,<span class="regexp">//</span> 后面</span><br><span class="line">            <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,<span class="regexp">//</span> 底面</span><br><span class="line">            <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>,<span class="regexp">//</span> 前面</span><br><span class="line">            <span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span><span class="regexp">//</span> 右面</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>如果我们只是用单一颜色，那么这个立方体看起来会比较怪异，所以我们这里给立方体设置了多个颜色</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private float[] colorCoords = &#123;</span><br><span class="line"><span class="built_in">            0f,</span><span class="number">1</span>f,<span class="number">0</span>f,<span class="number">1</span>f,</span><br><span class="line"><span class="built_in">            0f,</span><span class="number">1</span>f,<span class="number">0</span>f,<span class="number">1</span>f,</span><br><span class="line"><span class="built_in">            0f,</span><span class="number">1</span>f,<span class="number">0</span>f,<span class="number">1</span>f,</span><br><span class="line"><span class="built_in">            0f,</span><span class="number">1</span>f,<span class="number">0</span>f,<span class="number">1</span>f,</span><br><span class="line"><span class="built_in">            1f,</span><span class="number">0</span>f,<span class="number">0</span>f,<span class="number">1</span>f,</span><br><span class="line"><span class="built_in">            1f,</span><span class="number">0</span>f,<span class="number">0</span>f,<span class="number">1</span>f,</span><br><span class="line"><span class="built_in">            1f,</span><span class="number">0</span>f,<span class="number">0</span>f,<span class="number">1</span>f,</span><br><span class="line"><span class="built_in">            1f,</span><span class="number">0</span>f,<span class="number">0</span>f,<span class="number">1</span>f,</span><br><span class="line">    &#125;<span class="comment">;</span></span><br></pre></td></tr></table></figure><h4 id="绘制立方体"><a href="#绘制立方体" class="headerlink" title="绘制立方体"></a>绘制立方体</h4><p>设置完成定点和颜色之后，我们需要设置顶点着色器和片元着色器。</p><p>步骤其实就是那么四步</p><ul><li>初始化坐标数据、索引数据、颜色数据，具体操作为将坐标数据、颜色数据分别写入到独自的FloatBuffer中，将索引数据写入到ShortBuffer中</li><li>创建OpenGL2.0程序，将顶点着色器和片元着色器加入到程序中，并链接程序。</li><li>使用创建的OpenGLES2.0程序，写入变换矩阵、顶点坐标数据及颜色数据。</li><li>索引法绘制出所有顶点坐标组成的三角形，得到一个立方体。</li></ul><p>如果我们仅仅只做了以上事情，往往我们得不到一个正确的立方里，反而会出现比较奇怪的立方体，所以我们一般情况下是需要做一个深度测试的</p><p>这是因为我们没有开启深度测试GLES20.glEnable(GLES20.GL_DEPTH_TEST)，并在绘制前清除深度缓存导致GLES20.glClear(GLES20.GL_DEPTH_BUFFER_BIT)的。<br>加入后，我们即可得到正常的立方体</p><h4 id="深度测试"><a href="#深度测试" class="headerlink" title="深度测试"></a>深度测试</h4><ol><li>什么是深度？<br>深度其实就是该象素点在3d世界中距离摄象机的距离（绘制坐标），深度缓存中存储着每个象素点（绘制在屏幕上的）的深度值！<br>深度值（Z值）越大，则离摄像机越远。<br>深度值是存贮在深度缓存里面的，我们用深度缓存的位数来衡量深度缓存的精度。深度缓存位数越高，则精确度越高，目前的显卡一般都可支持16位的Z Buffer，一些高级的显卡已经可以支持32位的Z Buffer，但一般用24位Z Buffer就已经足够了。</li><li>为什么需要深度？<br>在不使用深度测试的时候，如果我们先绘制一个距离较近的物体，再绘制距离较远的物体，则距离远的物体因为后绘制，会把距离近的物体覆盖掉，这样的效果并不是我们所希望的。而有了深度缓冲以后，绘制物体的顺序就不那么重要了，都能按照远近（Z值）正常显示，这很关键。<br>实际上，只要存在深度缓冲区，无论是否启用深度测试，OpenGL在像素被绘制时都会尝试将深度数据写入到缓冲区内，除非调用了glDepthMask(GL_FALSE)来禁止写入。这些深度数据除了用于常规的测试外，还可以有一些有趣的用途，比如绘制阴影等等。</li><li>启用深度测试<br>使用 glEnable(GL_DEPTH_TEST);<br>在默认情况是将需要绘制的新像素的z值与深度缓冲区中对应位置的z值进行比较，如果比深度缓存中的值小，那么用新像素的颜色值更新帧缓存中对应像素的颜色值。<br>但是可以使用glDepthFunc(func)来对这种默认测试方式进行修改。<br>其中参数func的值可以为GL_NEVER（没有处理）、GL_ALWAYS（处理所有）、GL_LESS（小于）、GL_LEQUAL（小于等于）、GL_EQUAL（等于）、GL_GEQUAL（大于等于）、GL_GREATER（大于）或GL_NOTEQUAL（不等于），其中默认值是GL_LESS。<br>一般来将，使用glDepthFunc(GL_LEQUAL);来表达一般物体之间的遮挡关系。</li><li>启用了深度测试，那么这就不适用于同时绘制不透明物体。</li></ol><p>实现代码：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> MyOpenGLRenderCube implements GLSurfaceView.Renderer &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> program;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> positionHandler;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> colorHandler;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> matrixHandler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FloatBuffer vertexBuffer;</span><br><span class="line">    <span class="keyword">private</span> FloatBuffer colorBuffer;</span><br><span class="line">    <span class="keyword">private</span> ShortBuffer indexBuffer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span><span class="literal">[]</span> projectMatrix = <span class="keyword">new</span> <span class="built_in">float</span><span class="literal">[<span class="number">16</span>]</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span><span class="literal">[]</span> viewMatrix = <span class="keyword">new</span> <span class="built_in">float</span><span class="literal">[<span class="number">16</span>]</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span><span class="literal">[]</span> mvpMatrix = <span class="keyword">new</span> <span class="built_in">float</span><span class="literal">[<span class="number">16</span>]</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span><span class="literal">[]</span> colorCoords = &#123;</span><br><span class="line">            <span class="number">0</span>f,<span class="number">1</span>f,<span class="number">0</span>f,<span class="number">1</span>f,</span><br><span class="line">            <span class="number">0</span>f,<span class="number">1</span>f,<span class="number">0</span>f,<span class="number">1</span>f,</span><br><span class="line">            <span class="number">0</span>f,<span class="number">1</span>f,<span class="number">0</span>f,<span class="number">1</span>f,</span><br><span class="line">            <span class="number">0</span>f,<span class="number">1</span>f,<span class="number">0</span>f,<span class="number">1</span>f,</span><br><span class="line">            <span class="number">1</span>f,<span class="number">0</span>f,<span class="number">0</span>f,<span class="number">1</span>f,</span><br><span class="line">            <span class="number">1</span>f,<span class="number">0</span>f,<span class="number">0</span>f,<span class="number">1</span>f,</span><br><span class="line">            <span class="number">1</span>f,<span class="number">0</span>f,<span class="number">0</span>f,<span class="number">1</span>f,</span><br><span class="line">            <span class="number">1</span>f,<span class="number">0</span>f,<span class="number">0</span>f,<span class="number">1</span>f,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span><span class="literal">[]</span> vertexCoords = &#123;</span><br><span class="line">            -<span class="number">0.5</span>f, <span class="number">0.5</span>f, <span class="number">1</span>f,</span><br><span class="line">            -<span class="number">0.5</span>f, -<span class="number">0.5</span>f, <span class="number">1</span>f,</span><br><span class="line">            <span class="number">0.5</span>f, -<span class="number">0.5</span>f, <span class="number">1</span>f,</span><br><span class="line">            <span class="number">0.5</span>f, <span class="number">0.5</span>f, <span class="number">1</span>f,</span><br><span class="line">            -<span class="number">0.5</span>f, <span class="number">0.5</span>f, <span class="number">0</span>f,</span><br><span class="line">            -<span class="number">0.5</span>f, -<span class="number">0.5</span>f, <span class="number">0</span>f,</span><br><span class="line">            <span class="number">0.5</span>f, -<span class="number">0.5</span>f, <span class="number">0</span>f,</span><br><span class="line">            <span class="number">0.5</span>f, <span class="number">0.5</span>f, <span class="number">0</span>f</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> static short<span class="literal">[]</span> indexCoords = &#123;</span><br><span class="line">            <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>,<span class="comment">// 上面</span></span><br><span class="line">            <span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">1</span>,<span class="comment">// 左面</span></span><br><span class="line">            <span class="number">0</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">3</span>,<span class="comment">// 后面</span></span><br><span class="line">            <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,<span class="comment">// 底面</span></span><br><span class="line">            <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>,<span class="comment">// 前面</span></span><br><span class="line">            <span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span><span class="comment">// 右面</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    public <span class="constructor">MyOpenGLRenderCube(Context <span class="params">context</span>)</span> &#123;</span><br><span class="line">        this.context = context;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置顶点</span></span><br><span class="line">        ByteBuffer bb = <span class="module-access"><span class="module"><span class="identifier">ByteBuffer</span>.</span></span>allocate<span class="constructor">Direct(<span class="params">vertexCoords</span>.<span class="params">length</span> <span class="operator">*</span> 4)</span>;</span><br><span class="line">        bb.order(<span class="module-access"><span class="module"><span class="identifier">ByteOrder</span>.</span></span>native<span class="constructor">Order()</span>);</span><br><span class="line">        vertexBuffer = bb.<span class="keyword">as</span><span class="constructor">FloatBuffer()</span>;</span><br><span class="line">        vertexBuffer.put(vertexCoords);</span><br><span class="line">        vertexBuffer.position(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置颜色</span></span><br><span class="line">        ByteBuffer cc = <span class="module-access"><span class="module"><span class="identifier">ByteBuffer</span>.</span></span>allocate<span class="constructor">Direct(<span class="params">colorCoords</span>.<span class="params">length</span> <span class="operator">*</span> 4)</span>;</span><br><span class="line">        cc.order(<span class="module-access"><span class="module"><span class="identifier">ByteOrder</span>.</span></span>native<span class="constructor">Order()</span>);</span><br><span class="line">        colorBuffer = cc.<span class="keyword">as</span><span class="constructor">FloatBuffer()</span>;</span><br><span class="line">        colorBuffer.put(colorCoords);</span><br><span class="line">        colorBuffer.position(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置索引</span></span><br><span class="line">        ByteBuffer dd = <span class="module-access"><span class="module"><span class="identifier">ByteBuffer</span>.</span></span>allocate<span class="constructor">Direct(<span class="params">indexCoords</span>.<span class="params">length</span> <span class="operator">*</span> 2)</span>;</span><br><span class="line">        dd.order(<span class="module-access"><span class="module"><span class="identifier">ByteOrder</span>.</span></span>native<span class="constructor">Order()</span>);</span><br><span class="line">        indexBuffer = dd.<span class="keyword">as</span><span class="constructor">ShortBuffer()</span>;</span><br><span class="line">        indexBuffer.put(indexCoords);</span><br><span class="line">        indexBuffer.position(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void on<span class="constructor">SurfaceCreated(GL10 <span class="params">gl10</span>, EGLConfig <span class="params">eglConfig</span>)</span> &#123;</span><br><span class="line">        String vertexSource = <span class="module-access"><span class="module"><span class="identifier">ShaderUtils</span>.</span></span>read<span class="constructor">RawText(<span class="params">context</span>, R.<span class="params">raw</span>.<span class="params">vertex_shader_7</span>)</span>;</span><br><span class="line">        String fragmentSource = <span class="module-access"><span class="module"><span class="identifier">ShaderUtils</span>.</span></span>read<span class="constructor">RawText(<span class="params">context</span>, R.<span class="params">raw</span>.<span class="params">fragment_shader_7</span>)</span>;</span><br><span class="line">        program = <span class="module-access"><span class="module"><span class="identifier">ShaderUtils</span>.</span></span>create<span class="constructor">Program(<span class="params">vertexSource</span>, <span class="params">fragmentSource</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (program &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            positionHandler = <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">GetAttribLocation(<span class="params">program</span>, <span class="string">&quot;position&quot;</span>)</span>;</span><br><span class="line">            colorHandler = <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">GetAttribLocation(<span class="params">program</span>, <span class="string">&quot;color&quot;</span>)</span>;</span><br><span class="line">            matrixHandler = <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">GetUniformLocation(<span class="params">program</span>, <span class="string">&quot;matrix&quot;</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 开启深度测试</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">Enable(GLES20.GL_DEPTH_TEST)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void on<span class="constructor">SurfaceChanged(GL10 <span class="params">gl10</span>, <span class="params">int</span> <span class="params">i</span>, <span class="params">int</span> <span class="params">i1</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">float</span> ratio = (<span class="built_in">float</span>)i/i1;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Matrix</span>.</span></span>frustum<span class="constructor">M(<span class="params">projectMatrix</span>,0,-<span class="params">ratio</span>,<span class="params">ratio</span>,-1,1,3,20)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Matrix</span>.</span></span>set<span class="constructor">LookAtM(<span class="params">viewMatrix</span>,0,5.0f,5.0f,10.0f,0f,0f,0f,0f,1f,0f)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Matrix</span>.</span></span>multiply<span class="constructor">MM(<span class="params">mvpMatrix</span>,0,<span class="params">projectMatrix</span>,0,<span class="params">viewMatrix</span>,0)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void on<span class="constructor">DrawFrame(GL10 <span class="params">gl10</span>)</span> &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">Clear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">ClearColor(0.5f,0.5f,0.5f,1f)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">UseProgram(<span class="params">program</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">EnableVertexAttribArray(<span class="params">positionHandler</span>)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">VertexAttribPointer(<span class="params">positionHandler</span>,3,GLES20.GL_FLOAT,<span class="params">false</span>,0,<span class="params">vertexBuffer</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">EnableVertexAttribArray(<span class="params">colorHandler</span>)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">VertexAttribPointer(<span class="params">colorHandler</span>,4,GLES20.GL_FLOAT,<span class="params">false</span>,0,<span class="params">colorBuffer</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">UniformMatrix4fv(<span class="params">matrixHandler</span>,1,<span class="params">false</span>,<span class="params">mvpMatrix</span>,0)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">DrawElements(GLES20.GL_TRIANGLES,<span class="params">indexCoords</span>.<span class="params">length</span>,GLES20.GL_UNSIGNED_SHORT,<span class="params">indexBuffer</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用OpenGL ES绘制立方体，并且设置为彩色的&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
    <category term="音视频" scheme="http://www.paulniu.com/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>android 音视频开发(七)</title>
    <link href="http://www.paulniu.com/2019/08/29/android-media-07/"/>
    <id>http://www.paulniu.com/2019/08/29/android-media-07/</id>
    <published>2019-08-29T04:50:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用OpenGL ES绘制正方形(多边形)，圆形，并且给这些图形填充颜色</p><span id="more"></span><p>先看效果图<br><img src="/assets/tools/tools-opengl-05.png" alt="使用OpenGL ES绘制多边形"><br><img src="/assets/tools/tools-opengl-06.png" alt="使用OpenGL ES绘制圆形"></p><p>在开始绘制其他的形状之前，我们有这么几个名字/知识点学要学习的。</p><h4 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h4><p>在数学中，矩阵是一个按照长方阵列排列的复数和实数集合，最早来自于方程组的系数和常数所构成的方阵。</p><p>矩阵常被用于图形处理，游戏开发，几何光学，量子态的线性组合以及电子学等。我们现在相当于在图形处理或者游戏开发的领域来使用矩阵。其实大学中我们很多人都学过高数，线性代码等课程，当时觉得没有用武之地，其实都是错误的，好后悔的说。在三维图形学中，一般使用的是四阶矩阵。在DirectX中使用的是行向量，如[xyzw]，所以与矩阵相乘是，向量在前矩阵在后。OpenGL中使用的是列向量，如[xyzw]T,所以与矩阵相乘时，矩阵在前向量在后。</p><h4 id="相机"><a href="#相机" class="headerlink" title="相机"></a>相机</h4><p>和现实生活中的情况一样，随着我们相机的位置，姿态的不同，拍摄出来的画面也不一样。将相机对应到OpenGL的世界，决定相机拍摄的结果（也就是最终显示在屏幕上的内容），包括相机的位置，相机观察方向以及相机的UP方法</p><p>这里有几个名字需要解释一下：</p><ol><li>相机位置：这个比较好理解，就是相机在3D空间里面的坐标点</li><li>相机观察方法：相机的观察方法，表示的是相机镜头的朝向，我们可以朝前，朝后，总之任何方法都是可以的</li><li>相机UP方法：相机的UP方法可以理解为相机顶端指向的方法，，例如我们把相机斜着拿，拍出来的照片就是斜着的。</li></ol><p>在OpenGL ES中我们可以使用下面的方法来设置相机</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Matrix.setLookATM(</span><br><span class="line">  <span class="built_in">float</span>[] rm, <span class="comment">// 接收相机变换矩阵</span></span><br><span class="line">  <span class="built_in">int</span> rmOffset, <span class="comment">// 变换矩阵的起始位置(偏移量)</span></span><br><span class="line">  <span class="built_in">float</span> eysX,<span class="built_in">float</span> eyeY,<span class="built_in">float</span> eyeZ,<span class="comment">// 相机的位置</span></span><br><span class="line">  <span class="built_in">float</span> centerX,<span class="built_in">float</span> centerY,<span class="built_in">float</span> centerZ,<span class="comment">// 观测点的位置</span></span><br><span class="line">  <span class="built_in">float</span> upX,<span class="built_in">float</span> upY,<span class="built_in">float</span> upZ<span class="comment">// up向量在xyz上的分量</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="投影"><a href="#投影" class="headerlink" title="投影"></a>投影</h4><p>用相机看到的3D世界，最后还需要呈现在2D平面上，这就是投影。其实投影的意思就是说，我们可以通过一些颜色的变换，让2D图像看起来像是3D的。在OpenGL ES中投影分为两种，正交投影和透视投影</p><ol><li>正交投影：物体呈现出来的大小不会随着其距离视点的远近而发生变化，在Android中我们使用以下的方法来设置正交投影<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Matrix<span class="selector-class">.orthoM</span>(</span><br><span class="line">  float[] m, // 接收正交投影的变换矩阵</span><br><span class="line">  int mOffset, // 变换矩阵的起始位置(偏移量)</span><br><span class="line">  <span class="attribute">float</span> <span class="attribute">left</span>, <span class="comment">// 相对观察点近面的左边距</span></span><br><span class="line">  <span class="attribute">float</span> <span class="attribute">right</span>,<span class="comment">// 相对观察点近面的右边距</span></span><br><span class="line">  <span class="attribute">float</span> <span class="attribute">bottom</span>,<span class="comment">// 相对于观察点近面的下边距</span></span><br><span class="line">  <span class="attribute">float</span> <span class="attribute">top</span>,<span class="comment">// 相对于观察点的上边距</span></span><br><span class="line">  <span class="attribute">float</span> near,<span class="comment">// 相对于观察点近面距离</span></span><br><span class="line">  <span class="attribute">float</span> far <span class="comment">// 相对于观察点远面距离</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li>透视投影：物体离视点越远，呈现出来的越小，离视点越大，呈现出来的越大。我们使用下面的方法来设置透视投影：<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Matrix<span class="selector-class">.frustumM</span>(</span><br><span class="line">  float[] m,// 接收透视投影的变换矩阵</span><br><span class="line">  int mOffset, // 变换矩阵的起始位置(偏移量)</span><br><span class="line">  <span class="attribute">float</span> <span class="attribute">left</span>, <span class="comment">// 相对于观察点近面的左边距</span></span><br><span class="line">  <span class="attribute">float</span> <span class="attribute">right</span>,<span class="comment">// 相对观察点近面的右边距</span></span><br><span class="line">  <span class="attribute">float</span> <span class="attribute">bottom</span>,<span class="comment">// 相对观察点近面的下边距</span></span><br><span class="line">  <span class="attribute">float</span> <span class="attribute">top</span>,<span class="comment">// 相对于观察点近面的上边距</span></span><br><span class="line">  <span class="attribute">float</span> near,<span class="comment">// 相对观察点近面距离</span></span><br><span class="line">  <span class="attribute">float</span> far <span class="comment">// 相对观察点远面距离</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ol><h4 id="使用变换矩阵"><a href="#使用变换矩阵" class="headerlink" title="使用变换矩阵"></a>使用变换矩阵</h4><p>实际上相机设置和投影设置并不是真正的设置，而是通过设置参数，得到一个使用相机后顶点坐标的变换矩阵和投影下的顶点坐标变换矩阵，除此之外我们还要把矩阵传递给顶点着色器，在顶点着色器中用传入的矩阵乘以坐标的向量，得到时机展示的坐标向量。</p><blockquote><p>注意，是矩阵乘以坐标向量，不是坐标向量乘以矩阵。矩阵乘法是不满足交换律的</p></blockquote><p>通过上面的相机设置和投影设置，我们得到两个矩阵，为了方便，我们需要将相机矩阵和投影矩阵相乘，得到一个实际的变换矩阵，然后再传递给顶点着色器</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Matrix.multiplyMM(</span><br><span class="line">  <span class="built_in">float</span>[] result,<span class="comment">// 接收相乘结果</span></span><br><span class="line">  <span class="built_in">int</span> resultOffset,<span class="comment">// 接收矩阵的起始位置(偏移量)</span></span><br><span class="line">  <span class="built_in">float</span>[] lhs, <span class="comment">// 左矩阵</span></span><br><span class="line">  <span class="built_in">int</span> lhsOffset,<span class="comment">// 左矩阵的起始位置(偏移量)</span></span><br><span class="line">  <span class="built_in">float</span>[] rhs, <span class="comment">// 右矩阵</span></span><br><span class="line">  <span class="built_in">int</span> rhsOffset <span class="comment">// 右矩阵的起始位置(偏移量)</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="绘制多边形"><a href="#绘制多边形" class="headerlink" title="绘制多边形"></a>绘制多边形</h3><p>其实在OpenGL ES中没有多边形和圆形，只有点，线，三角形。三角形就是OpenGL所提供的的最复杂的图元单位。所以我们如果想要绘制多边形和圆形，就要通过三角形来实现</p><p>先来看一下代码</p><p>GLSurfaceView部分代码</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyOpenGLSurfaceViewWithSquare</span> <span class="keyword">extends</span> <span class="title">GLSurfaceView</span> </span>&#123;</span><br><span class="line">    public <span class="type">MyOpenGLSurfaceViewWithSquare</span>(<span class="type">Context</span> context) &#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        setEGLContextClientVersion(<span class="number">2</span>);</span><br><span class="line">        setRenderer(<span class="keyword">new</span> <span class="type">MyOpenGLRenderSquare</span>(context));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个部分的代码比较简单，就不多说了</p><p>Render部分代码</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> MyOpenGLRenderSquare implements GLSurfaceView.Renderer &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line">    <span class="keyword">private</span> FloatBuffer vertexBuffer;</span><br><span class="line">    <span class="keyword">private</span> FloatBuffer colorBuffer;</span><br><span class="line">    <span class="keyword">private</span> ShortBuffer indexBuffer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> positionHandler;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> colorHandler;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> matrixHandler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> program;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span><span class="literal">[]</span> projectMatrix = <span class="keyword">new</span> <span class="built_in">float</span><span class="literal">[<span class="number">16</span>]</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span><span class="literal">[]</span> viewMatrix = <span class="keyword">new</span> <span class="built_in">float</span><span class="literal">[<span class="number">16</span>]</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span><span class="literal">[]</span> mvpMatrix = <span class="keyword">new</span> <span class="built_in">float</span><span class="literal">[<span class="number">16</span>]</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span><span class="literal">[]</span> squareCoords = &#123;</span><br><span class="line">            -<span class="number">0.3</span>f, <span class="number">0.28</span>f, <span class="number">0</span>f,</span><br><span class="line">            -<span class="number">0.28</span>f, -<span class="number">0.35</span>f, <span class="number">0</span>f,</span><br><span class="line">            <span class="number">0.28</span>f, -<span class="number">0.35</span>f, <span class="number">0</span>f,</span><br><span class="line">            <span class="number">0.3</span>f, <span class="number">0.35</span>f, <span class="number">0</span>f,</span><br><span class="line">            <span class="number">0</span>f, <span class="number">0.5</span>f, <span class="number">0</span>f</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span><span class="literal">[]</span> colorCoords = &#123;</span><br><span class="line">            <span class="number">0.0</span>f, <span class="number">1.0</span>f, <span class="number">0.0</span>f, <span class="number">1.0</span>f,</span><br><span class="line">            <span class="number">1.0</span>f, <span class="number">0.0</span>f, <span class="number">0.0</span>f, <span class="number">1.0</span>f,</span><br><span class="line">            <span class="number">0.0</span>f, <span class="number">0.0</span>f, <span class="number">1.0</span>f, <span class="number">1.0</span>f</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">private</span> short<span class="literal">[]</span> indexCoords = &#123;</span><br><span class="line">            <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    public <span class="constructor">MyOpenGLRenderSquare(Context <span class="params">context</span>)</span> &#123;</span><br><span class="line">        this.context = context;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置顶点数据</span></span><br><span class="line">        ByteBuffer bb = <span class="module-access"><span class="module"><span class="identifier">ByteBuffer</span>.</span></span>allocate<span class="constructor">Direct(<span class="params">squareCoords</span>.<span class="params">length</span> <span class="operator">*</span> 4)</span>;</span><br><span class="line">        bb.order(<span class="module-access"><span class="module"><span class="identifier">ByteOrder</span>.</span></span>native<span class="constructor">Order()</span>);</span><br><span class="line">        vertexBuffer = bb.<span class="keyword">as</span><span class="constructor">FloatBuffer()</span>;</span><br><span class="line">        vertexBuffer.put(squareCoords);</span><br><span class="line">        vertexBuffer.position(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置颜色</span></span><br><span class="line">        ByteBuffer cc = <span class="module-access"><span class="module"><span class="identifier">ByteBuffer</span>.</span></span>allocate<span class="constructor">Direct(<span class="params">colorCoords</span>.<span class="params">length</span> <span class="operator">*</span> 4)</span>;</span><br><span class="line">        cc.order(<span class="module-access"><span class="module"><span class="identifier">ByteOrder</span>.</span></span>native<span class="constructor">Order()</span>);</span><br><span class="line">        colorBuffer = cc.<span class="keyword">as</span><span class="constructor">FloatBuffer()</span>;</span><br><span class="line">        colorBuffer.put(colorCoords);</span><br><span class="line">        colorBuffer.position(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置索引</span></span><br><span class="line">        ByteBuffer dd = <span class="module-access"><span class="module"><span class="identifier">ByteBuffer</span>.</span></span>allocate<span class="constructor">Direct(<span class="params">indexCoords</span>.<span class="params">length</span> <span class="operator">*</span> 2)</span>;</span><br><span class="line">        dd.order(<span class="module-access"><span class="module"><span class="identifier">ByteOrder</span>.</span></span>native<span class="constructor">Order()</span>);</span><br><span class="line">        indexBuffer = dd.<span class="keyword">as</span><span class="constructor">ShortBuffer()</span>;</span><br><span class="line">        indexBuffer.put(indexCoords);</span><br><span class="line">        indexBuffer.position(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void on<span class="constructor">SurfaceCreated(GL10 <span class="params">gl10</span>, EGLConfig <span class="params">eglConfig</span>)</span> &#123;</span><br><span class="line">        String vertexSource = <span class="module-access"><span class="module"><span class="identifier">ShaderUtils</span>.</span></span>read<span class="constructor">RawText(<span class="params">context</span>, R.<span class="params">raw</span>.<span class="params">vertex_shader_5</span>)</span>;</span><br><span class="line">        String fragmentSource = <span class="module-access"><span class="module"><span class="identifier">ShaderUtils</span>.</span></span>read<span class="constructor">RawText(<span class="params">context</span>, R.<span class="params">raw</span>.<span class="params">fragment_shader_5</span>)</span>;</span><br><span class="line">        program = <span class="module-access"><span class="module"><span class="identifier">ShaderUtils</span>.</span></span>create<span class="constructor">Program(<span class="params">vertexSource</span>, <span class="params">fragmentSource</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (program &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            positionHandler = <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">GetAttribLocation(<span class="params">program</span>, <span class="string">&quot;vPosition&quot;</span>)</span>;</span><br><span class="line">            colorHandler = <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">GetAttribLocation(<span class="params">program</span>, <span class="string">&quot;aColor&quot;</span>)</span>;</span><br><span class="line">            matrixHandler = <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">GetUniformLocation(<span class="params">program</span>, <span class="string">&quot;vMatrix&quot;</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void on<span class="constructor">SurfaceChanged(GL10 <span class="params">gl10</span>, <span class="params">int</span> <span class="params">width</span>, <span class="params">int</span> <span class="params">height</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 计算宽高比</span></span><br><span class="line">        <span class="built_in">float</span> ratio = (<span class="built_in">float</span>) width<span class="operator"> / </span>height;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Matrix</span>.</span></span>frustum<span class="constructor">M(<span class="params">projectMatrix</span>, 0, -<span class="params">ratio</span>, <span class="params">ratio</span>, -1, 1, 3, 7)</span>;</span><br><span class="line">        <span class="comment">// 设置相机的位置</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Matrix</span>.</span></span>set<span class="constructor">LookAtM(<span class="params">viewMatrix</span>, 0, 0, 0, 7f, 0f, 0f, 0f, 0f, 1f, 0f)</span>;</span><br><span class="line">        <span class="comment">// 计算变换矩阵</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Matrix</span>.</span></span>multiply<span class="constructor">MM(<span class="params">mvpMatrix</span>, 0, <span class="params">projectMatrix</span>, 0, <span class="params">viewMatrix</span>, 0)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void on<span class="constructor">DrawFrame(GL10 <span class="params">gl10</span>)</span> &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">Clear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">ClearColor(0.5f, 0.5f, 0.5f, 1f)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">UseProgram(<span class="params">program</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">EnableVertexAttribArray(<span class="params">positionHandler</span>)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">VertexAttribPointer(<span class="params">positionHandler</span>, 3, GLES20.GL_FLOAT, <span class="params">false</span>, 12, <span class="params">vertexBuffer</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">EnableVertexAttribArray(<span class="params">colorHandler</span>)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">VertexAttribPointer(<span class="params">colorHandler</span>, 4, GLES20.GL_FLOAT, <span class="params">false</span>, 0, <span class="params">colorBuffer</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">UniformMatrix4fv(<span class="params">matrixHandler</span>, 1, <span class="params">false</span>, <span class="params">mvpMatrix</span>, 0)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">DrawElements(GLES20.GL_TRIANGLES, <span class="params">indexCoords</span>.<span class="params">length</span>, GLES20.GL_UNSIGNED_SHORT, <span class="params">indexBuffer</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, 0, 4);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>首先我们声明了三个数组，这三个数组分别是squareCoords,colorCoords,indexCoords。其中squareCoords表示的是多边形所对应的顶点的坐标。这里我们使用的是[xyz]的方式；colorCoords表示的是颜色数组，这里为了方便起见，我直接将三原色的数组拿了过来了，至于三个分别代表什么样的含义，后面会说；indexCoords表示的是顶点的索引</li><li>构造方法：在构造方法中我们将Context的上下文对象传递给了全局变量。</li></ol><ul><li>初始化顶点数据，初始化颜色设置，初始化索引设置</li></ul><ol start="3"><li>在onSurfaceCreated方法中创建生成program，顶点句柄，颜色句柄，投影句柄，这三个句柄需要后面去使用</li><li>在onSurfaceChanged方法中初始化相机位置，初始化视图位置，计算变换矩阵</li><li>在onDrawFrame方法中开始设置背景颜色，设置顶点着色器，片元着色器，设置变换矩阵</li></ol><h3 id="绘制圆形"><a href="#绘制圆形" class="headerlink" title="绘制圆形"></a>绘制圆形</h3><p>圆形的构架相对而言复杂一些，我们可以吧圆形看做一个正多边形，边越多，园就越平滑，如下图所示，正六边形，正八边形，正十六边形和正一百边形<br><img src="/assets/tools/tools-opengl-07.png" alt="绘制圆形"></p><p>我们一正六边形为例，由012,023,034,056,061六个三角形组成<br>利用简单的数学知识，我们可以知道，以多边形为中心简历的直角坐标系，得到n边形的顶点坐标可以使用下面的函数求出来</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建圆形图形的所有坐标点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span>[] createPositions() &#123;</span><br><span class="line">        ArrayList&lt;Float&gt; datas = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        datas.<span class="built_in">add</span>(<span class="number">0.0</span>f);</span><br><span class="line">        datas.<span class="built_in">add</span>(<span class="number">0.0</span>f);</span><br><span class="line">        datas.<span class="built_in">add</span>(<span class="number">0.5</span>f);</span><br><span class="line">        <span class="built_in">float</span> angleSpan = <span class="number">360</span>f / <span class="number">360</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">360</span> + angleSpan; i += angleSpan) &#123;</span><br><span class="line">            datas.<span class="built_in">add</span>((<span class="built_in">float</span>) (<span class="number">1.0</span>f * Math.<span class="built_in">sin</span>(i * Math.<span class="literal">PI</span> / <span class="number">180</span>f)));</span><br><span class="line">            datas.<span class="built_in">add</span>((<span class="built_in">float</span>) (<span class="number">1.0</span>f * Math.<span class="built_in">cos</span>(i * Math.<span class="literal">PI</span> / <span class="number">180</span>f)));</span><br><span class="line">            datas.<span class="built_in">add</span>(<span class="number">0.5</span>f);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">float</span>[] res = <span class="keyword">new</span> <span class="built_in">float</span>[datas.<span class="built_in">size</span>()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; res.length; i++) &#123;</span><br><span class="line">            res[i] = datas.<span class="built_in">get</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>看一下源码<br>GLSurfaceView的代码比较简单，这里就不贴出来了</p><p>render部分的代码</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyOpenGLRenderOval</span> <span class="title">implements</span> <span class="title">GLSurfaceView</span>.<span class="title">Renderer</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> positionHandler;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> colorHandler;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> matrixHandler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FloatBuffer vertexBuffer;</span><br><span class="line">    <span class="keyword">private</span> FloatBuffer colorBuffer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> program;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span>[] projectMatrix = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">16</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span>[] viewMatrix = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">16</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span>[] mvpMatrix = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span>[] colorCoords = &#123;</span><br><span class="line">            <span class="number">1.0f</span>, <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">1f</span>,</span><br><span class="line">            <span class="number">0f</span>, <span class="number">1f</span>, <span class="number">0f</span>, <span class="number">1f</span>,</span><br><span class="line">            <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">1f</span>, <span class="number">1f</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span>[] vertexCoords ;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyOpenGLRenderOval</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置顶点数据</span></span><br><span class="line">        vertexCoords = <span class="built_in">createPositions</span>();</span><br><span class="line">        ByteBuffer bb = ByteBuffer.<span class="built_in">allocateDirect</span>(vertexCoords.length * <span class="number">4</span>);</span><br><span class="line">        bb.<span class="built_in">order</span>(ByteOrder.<span class="built_in">nativeOrder</span>());</span><br><span class="line">        vertexBuffer = bb.<span class="built_in">asFloatBuffer</span>();</span><br><span class="line">        vertexBuffer.<span class="built_in">put</span>(vertexCoords);</span><br><span class="line">        vertexBuffer.<span class="built_in">position</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置颜色</span></span><br><span class="line">        ByteBuffer cc = ByteBuffer.<span class="built_in">allocateDirect</span>(colorCoords.length * <span class="number">4</span>);</span><br><span class="line">        cc.<span class="built_in">order</span>(ByteOrder.<span class="built_in">nativeOrder</span>());</span><br><span class="line">        colorBuffer = cc.<span class="built_in">asFloatBuffer</span>();</span><br><span class="line">        colorBuffer.<span class="built_in">put</span>(colorCoords);</span><br><span class="line">        colorBuffer.<span class="built_in">position</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建圆形图形的所有坐标点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span>[] <span class="built_in">createPositions</span>() &#123;</span><br><span class="line">        ArrayList&lt;Float&gt; datas = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        datas.<span class="built_in">add</span>(<span class="number">0.0f</span>);</span><br><span class="line">        datas.<span class="built_in">add</span>(<span class="number">0.0f</span>);</span><br><span class="line">        datas.<span class="built_in">add</span>(<span class="number">0.5f</span>);</span><br><span class="line">        <span class="keyword">float</span> angleSpan = <span class="number">360f</span> / <span class="number">360</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">360</span> + angleSpan; i += angleSpan) &#123;</span><br><span class="line">            datas.<span class="built_in">add</span>((<span class="keyword">float</span>) (<span class="number">1.0f</span> * Math.<span class="built_in">sin</span>(i * Math.PI / <span class="number">180f</span>)));</span><br><span class="line">            datas.<span class="built_in">add</span>((<span class="keyword">float</span>) (<span class="number">1.0f</span> * Math.<span class="built_in">cos</span>(i * Math.PI / <span class="number">180f</span>)));</span><br><span class="line">            datas.<span class="built_in">add</span>(<span class="number">0.5f</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">float</span>[] res = <span class="keyword">new</span> <span class="keyword">float</span>[datas.<span class="built_in">size</span>()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res.length; i++) &#123;</span><br><span class="line">            res[i] = datas.<span class="built_in">get</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="function">Override</span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSurfaceCreated</span><span class="params">(GL10 gl10, EGLConfig eglConfig)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">String</span> vertexSource = ShaderUtils.<span class="built_in">readRawText</span>(context, R.raw.vertex_shader_6);</span><br><span class="line">        <span class="keyword">String</span> fragmentSource = ShaderUtils.<span class="built_in">readRawText</span>(context,R.raw.fragment_shader_6);</span><br><span class="line">        program = ShaderUtils.<span class="built_in">createProgram</span>(vertexSource,fragmentSource);</span><br><span class="line">        <span class="keyword">if</span> (program &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            positionHandler = GLES20.<span class="built_in">glGetAttribLocation</span>(program,<span class="string">&quot;position&quot;</span>);</span><br><span class="line">            matrixHandler = GLES20.<span class="built_in">glGetUniformLocation</span>(program,<span class="string">&quot;matrix&quot;</span>);</span><br><span class="line">            colorHandler = GLES20.<span class="built_in">glGetAttribLocation</span>(program,<span class="string">&quot;color&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="function">Override</span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSurfaceChanged</span><span class="params">(GL10 gl10, <span class="keyword">int</span> i, <span class="keyword">int</span> i1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> ratio = (<span class="keyword">float</span>) i / i1;</span><br><span class="line">        Matrix.<span class="built_in">frustumM</span>(projectMatrix,<span class="number">0</span>,-ratio,ratio,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>);</span><br><span class="line">        Matrix.<span class="built_in">setLookAtM</span>(viewMatrix,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">7f</span>,<span class="number">0f</span>,<span class="number">0f</span>,<span class="number">0f</span>,<span class="number">0f</span>,<span class="number">1f</span>,<span class="number">0f</span>);</span><br><span class="line">        Matrix.<span class="built_in">multiplyMM</span>(mvpMatrix,<span class="number">0</span>,projectMatrix,<span class="number">0</span>,viewMatrix,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="function">Override</span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawFrame</span><span class="params">(GL10 gl10)</span> </span>&#123;</span><br><span class="line">        GLES20.<span class="built_in">glClear</span>(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);</span><br><span class="line">        GLES20.<span class="built_in">glClearColor</span>(<span class="number">0.5f</span>,<span class="number">0.5f</span>,<span class="number">0.5f</span>,<span class="number">1f</span>);</span><br><span class="line"></span><br><span class="line">        GLES20.<span class="built_in">glUseProgram</span>(program);</span><br><span class="line"></span><br><span class="line">        GLES20.<span class="built_in">glEnableVertexAttribArray</span>(positionHandler);</span><br><span class="line">        GLES20.<span class="built_in">glVertexAttribPointer</span>(positionHandler,<span class="number">3</span>,GLES20.GL_FLOAT,<span class="literal">false</span>,<span class="number">0</span>,vertexBuffer);</span><br><span class="line"></span><br><span class="line">        GLES20.<span class="built_in">glEnableVertexAttribArray</span>(colorHandler);</span><br><span class="line">        GLES20.<span class="built_in">glVertexAttribPointer</span>(colorHandler,<span class="number">4</span>,GLES20.GL_FLOAT,<span class="literal">false</span>,<span class="number">0</span>,colorBuffer);</span><br><span class="line"></span><br><span class="line">        GLES20.<span class="built_in">glUniformMatrix4fv</span>(matrixHandler,<span class="number">1</span>,<span class="literal">false</span>,mvpMatrix,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        GLES20.<span class="built_in">glDrawArrays</span>(GLES20.GL_TRIANGLE_FAN,<span class="number">0</span>,vertexCoords.length / <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这段代码中有几个部分需要我们注意，首先我们将</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">GLES20</span>.glDrawArrays(GLES<span class="number">20</span>.GL_TRIANGLES,<span class="number">0</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>改成了</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">DrawArrays(GLES20.GL_TRIANGLE_FAN,0,<span class="params">vertexCoords</span>.<span class="params">length</span><span class="operator">/</span>3)</span>;</span><br></pre></td></tr></table></figure><p>这里面第一个参数表示要绘制的方式，第二个参数表示绘制的偏移量，第三个参数表示顶点的个数</p><blockquote><p>绘制的方式有以下几种<br>int GL_POINTS:将传入的顶点坐标作为单独的点绘制<br>int GL_LINES:将传入的坐标作为单独的线条绘制，ABCDEFG六个顶点，会绘制AB，CD，EF三条线<br>int GL_LINE_STRIP:将传入的顶点作为折现绘制，ABCD四个顶点，绘制AB，BC，CD三条线<br>int GL_LINE_LOOP:将传入的顶点作为闭合折现绘制，ABCD四个顶点，绘制AB，BC，CD，DA四条线段<br>int GL_TRIANGLES:将传入的顶点作为单独的三角形绘制，ABCDEF绘制ABC，DEF两个三角形<br>int GL_TRIANGLE_FAN:将传入的顶点作为扇面绘制，ABCDEF绘制ABC，ACD，ADE，AEF四个三角形<br>int GL_TRIANGLE_STRIP:将传入的顶点作为三角条带绘制，ABCDEF绘制ABC，BCD，CDE，DEF四个三角形</p></blockquote><p>其实我们可以这样理解，GLTRIANGLE_STRIP的方式绘制连续三角形，比直接用GL_TRIANGLES的方式绘制三角形稍好多个点，绘制的效率会更高。另外GL_TRIANGLE_STRIP并不是只能绘制连续三角形构成的物体，我们只需要将不需要重复绘制的点重复绘制两次即可。比如我们传入ABCDEFFGH坐标，就会得到ABC，BCD，CDE以及FGH四个三角形</p><p>GL_TRIANGLE_FAN：扇面绘制是以第一个零点进行绘制，通常我们绘制圆形，圆锥的锥面都会使用到，值得注意的是，最后一个点的左边应当与第二个点重合，在计算的时候，起点角度为0度，终点角度应包含360度</p><h3 id="绘制彩色"><a href="#绘制彩色" class="headerlink" title="绘制彩色"></a>绘制彩色</h3><p>前几篇blog中设置的都是单一颜色，如果我们想要设置彩色的该怎么去实现？其实这个彩色很难看，只不过是为了多去了解如何设置不同的颜色而已。</p><p>先来看一下，我们在绘制一个简单的三角形时所使用的代码</p><p>首先我们通过onSurfaceCreated方法获取到了raw中的名为af_Color的颜色数值，这个颜色数值是需要我们自己去赋值的。代码如下</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public void on<span class="constructor">SurfaceCreated(GL10 <span class="params">unused</span>, EGLConfig <span class="params">config</span>)</span> &#123;</span><br><span class="line">        String vertexSource = <span class="module-access"><span class="module"><span class="identifier">ShaderUtils</span>.</span></span>read<span class="constructor">RawText(<span class="params">context</span>, R.<span class="params">raw</span>.<span class="params">vertex_shader</span>)</span>;</span><br><span class="line">        String fragmentSource = <span class="module-access"><span class="module"><span class="identifier">ShaderUtils</span>.</span></span>read<span class="constructor">RawText(<span class="params">context</span>, R.<span class="params">raw</span>.<span class="params">fragment_shader</span>)</span>;</span><br><span class="line">        program = <span class="module-access"><span class="module"><span class="identifier">ShaderUtils</span>.</span></span>create<span class="constructor">Program(<span class="params">vertexSource</span>, <span class="params">fragmentSource</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (program &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            position = <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">GetAttribLocation(<span class="params">program</span>, <span class="string">&quot;av_Position&quot;</span>)</span>;</span><br><span class="line">            color = <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">GetUniformLocation(<span class="params">program</span>, <span class="string">&quot;af_Color&quot;</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其中R.raw.vertex_shader和R.raw.fragment_shader表示的是我们需要引入的文件，这个文件时glsl结尾的文件，之前我们有介绍过。然后我们在onDrawFrame中通过<p style="color:red">GLES20.glUniform4f</p>方法设置三角形的颜色。这时候我们设置颜色的代码是</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public void on<span class="constructor">DrawFrame(GL10 <span class="params">unused</span>)</span> &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">Clear(GLES20.GL_COLOR_BUFFER_BIT)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">ClearColor(1.0f, 1.0f, 1.0f, 1.0f)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">UseProgram(<span class="params">program</span>)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">Uniform4f(<span class="params">color</span>, 1f, 0f, 0f, 1f)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">EnableVertexAttribArray(<span class="params">position</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">VertexAttribPointer(<span class="params">position</span>, 2, GLES20.GL_FLOAT, <span class="params">false</span>, 8, <span class="params">vertexBuffer</span>)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">DrawArrays(GLES20.GL_TRIANGLES, 0, 3)</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>因为我们只使用了单一颜色，所以三角形呈现的是红色。</p><p>那么当我们想要实现多种不同的颜色的时候，就需要使用float类型的数组来为我们展示多种颜色<br>如下所示，我们这里想要绘制一个彩色的三角形，那么需要声明一个float类型的数组</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">float</span>[] colorCoords = &#123;</span><br><span class="line">            <span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>,</span><br><span class="line">            <span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>,</span><br><span class="line">            <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">1.0f</span></span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>设置完成数组之后，我们需要将这个数组在底层的内存空间中申请内存地址,我们把这段代码放在了构造方法中</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置颜色数据</span></span><br><span class="line">        ByteBuffer color = <span class="module-access"><span class="module"><span class="identifier">ByteBuffer</span>.</span></span>allocate<span class="constructor">Direct(<span class="params">colorCoords</span>.<span class="params">length</span> <span class="operator">*</span> 4)</span>;</span><br><span class="line">        color.order(<span class="module-access"><span class="module"><span class="identifier">ByteOrder</span>.</span></span>native<span class="constructor">Order()</span>);</span><br><span class="line">        colorBuffer = color.<span class="keyword">as</span><span class="constructor">FloatBuffer()</span>;</span><br><span class="line">        colorBuffer.put(colorCoords);</span><br><span class="line">        colorBuffer.position(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>因为我们这里使用的是FloatBuffer对象，所以在设置三角形颜色的时候也不能再使用上面的那种方式了。使用的方式如下(我第一次看这部分的时候，是想着应该跟vertexBuffer一样，就照着去写，结果一次就成功了)</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public void on<span class="constructor">DrawFrame(GL10 <span class="params">gl10</span>)</span> &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">Clear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">ClearColor(0.5f, 0.5f, 0.5f, 1f)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">UseProgram(<span class="params">program</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">EnableVertexAttribArray(<span class="params">colorHandler</span>)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">VertexAttribPointer(<span class="params">colorHandler</span>, 4, GLES20.GL_FLOAT, <span class="params">false</span>, 0, <span class="params">colorBuffer</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">EnableVertexAttribArray(<span class="params">positionHandler</span>)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">VertexAttribPointer(<span class="params">positionHandler</span>, 3, GLES20.GL_FLOAT, <span class="params">false</span>, 12, <span class="params">vertexBuffer</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">UniformMatrix4fv(<span class="params">matrixHandler</span>, 1, <span class="params">false</span>, <span class="params">mvpMatrix</span>, 0)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">DrawArrays(GLES20.GL_TRIANGLES, 0, 3)</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>完整的代码如下：</p><p>Render部分的代码：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> MyOpenGLRenderViewColors implements GLSurfaceView.Renderer &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line">    <span class="keyword">private</span> FloatBuffer vertexBuffer;</span><br><span class="line">    <span class="keyword">private</span> FloatBuffer colorBuffer;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> positionHandler;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> colorHandler;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> matrixHandler;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> program;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span><span class="literal">[]</span> triangleCoords = &#123;</span><br><span class="line">            <span class="number">0.5</span>f, <span class="number">0.5</span>f, <span class="number">0.0</span>f, <span class="comment">// top</span></span><br><span class="line">            -<span class="number">0.5</span>f, -<span class="number">0.5</span>f, <span class="number">0.0</span>f, <span class="comment">// bottom left</span></span><br><span class="line">            <span class="number">0.5</span>f, -<span class="number">0.5</span>f, <span class="number">0.0</span>f  <span class="comment">// bottom right</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span><span class="literal">[]</span> colorCoords = &#123;</span><br><span class="line">            <span class="number">0.0</span>f, <span class="number">1.0</span>f, <span class="number">0.0</span>f, <span class="number">1.0</span>f,</span><br><span class="line">            <span class="number">1.0</span>f, <span class="number">0.0</span>f, <span class="number">0.0</span>f, <span class="number">1.0</span>f,</span><br><span class="line">            <span class="number">0.0</span>f, <span class="number">0.0</span>f, <span class="number">1.0</span>f, <span class="number">1.0</span>f</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span><span class="literal">[]</span> projectMatrix = <span class="keyword">new</span> <span class="built_in">float</span><span class="literal">[<span class="number">16</span>]</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span><span class="literal">[]</span> viewMatrix = <span class="keyword">new</span> <span class="built_in">float</span><span class="literal">[<span class="number">16</span>]</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span><span class="literal">[]</span> mvpMatrix = <span class="keyword">new</span> <span class="built_in">float</span><span class="literal">[<span class="number">16</span>]</span>;</span><br><span class="line"></span><br><span class="line">    public <span class="constructor">MyOpenGLRenderViewColors(Context <span class="params">context</span>)</span> &#123;</span><br><span class="line">        this.context = context;</span><br><span class="line">        <span class="comment">// 设置顶点数据</span></span><br><span class="line">        ByteBuffer vertex = <span class="module-access"><span class="module"><span class="identifier">ByteBuffer</span>.</span></span>allocate<span class="constructor">Direct(<span class="params">triangleCoords</span>.<span class="params">length</span> <span class="operator">*</span> 4)</span>;</span><br><span class="line">        vertex.order(<span class="module-access"><span class="module"><span class="identifier">ByteOrder</span>.</span></span>native<span class="constructor">Order()</span>);</span><br><span class="line">        vertexBuffer = vertex.<span class="keyword">as</span><span class="constructor">FloatBuffer()</span>;</span><br><span class="line">        vertexBuffer.put(triangleCoords);</span><br><span class="line">        vertexBuffer.position(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置颜色数据</span></span><br><span class="line">        ByteBuffer color = <span class="module-access"><span class="module"><span class="identifier">ByteBuffer</span>.</span></span>allocate<span class="constructor">Direct(<span class="params">colorCoords</span>.<span class="params">length</span> <span class="operator">*</span> 4)</span>;</span><br><span class="line">        color.order(<span class="module-access"><span class="module"><span class="identifier">ByteOrder</span>.</span></span>native<span class="constructor">Order()</span>);</span><br><span class="line">        colorBuffer = color.<span class="keyword">as</span><span class="constructor">FloatBuffer()</span>;</span><br><span class="line">        colorBuffer.put(colorCoords);</span><br><span class="line">        colorBuffer.position(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void on<span class="constructor">SurfaceCreated(GL10 <span class="params">gl10</span>, EGLConfig <span class="params">eglConfig</span>)</span> &#123;</span><br><span class="line">        String vertexSource = <span class="module-access"><span class="module"><span class="identifier">ShaderUtils</span>.</span></span>read<span class="constructor">RawText(<span class="params">context</span>, R.<span class="params">raw</span>.<span class="params">vertex_shader_4</span>)</span>;</span><br><span class="line">        String fragmentSource = <span class="module-access"><span class="module"><span class="identifier">ShaderUtils</span>.</span></span>read<span class="constructor">RawText(<span class="params">context</span>, R.<span class="params">raw</span>.<span class="params">fragment_shader_4</span>)</span>;</span><br><span class="line">        program = <span class="module-access"><span class="module"><span class="identifier">ShaderUtils</span>.</span></span>create<span class="constructor">Program(<span class="params">vertexSource</span>, <span class="params">fragmentSource</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (program &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            positionHandler = <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">GetAttribLocation(<span class="params">program</span>, <span class="string">&quot;vPosition&quot;</span>)</span>;</span><br><span class="line">            colorHandler = <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">GetAttribLocation(<span class="params">program</span>, <span class="string">&quot;aColor&quot;</span>)</span>;</span><br><span class="line">            matrixHandler = <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">GetUniformLocation(<span class="params">program</span>, <span class="string">&quot;vMatrix&quot;</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void on<span class="constructor">SurfaceChanged(GL10 <span class="params">gl10</span>, <span class="params">int</span> <span class="params">width</span>, <span class="params">int</span> <span class="params">height</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 计算宽高比</span></span><br><span class="line">        <span class="built_in">float</span> ratio = (<span class="built_in">float</span>) width<span class="operator"> / </span>height;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Matrix</span>.</span></span>frustum<span class="constructor">M(<span class="params">projectMatrix</span>, 0, -<span class="params">ratio</span>, <span class="params">ratio</span>, -1, 1, 3, 7)</span>;</span><br><span class="line">        <span class="comment">// 设置相机的位置</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Matrix</span>.</span></span>set<span class="constructor">LookAtM(<span class="params">viewMatrix</span>, 0, 0, 0, 7f, 0f, 0f, 0f, 0f, 1f, 0f)</span>;</span><br><span class="line">        <span class="comment">// 计算变换矩阵</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Matrix</span>.</span></span>multiply<span class="constructor">MM(<span class="params">mvpMatrix</span>, 0, <span class="params">projectMatrix</span>, 0, <span class="params">viewMatrix</span>, 0)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void on<span class="constructor">DrawFrame(GL10 <span class="params">gl10</span>)</span> &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">Clear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">ClearColor(0.5f, 0.5f, 0.5f, 1f)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">UseProgram(<span class="params">program</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">EnableVertexAttribArray(<span class="params">colorHandler</span>)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">VertexAttribPointer(<span class="params">colorHandler</span>, 4, GLES20.GL_FLOAT, <span class="params">false</span>, 0, <span class="params">colorBuffer</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">EnableVertexAttribArray(<span class="params">positionHandler</span>)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">VertexAttribPointer(<span class="params">positionHandler</span>, 3, GLES20.GL_FLOAT, <span class="params">false</span>, 12, <span class="params">vertexBuffer</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">UniformMatrix4fv(<span class="params">matrixHandler</span>, 1, <span class="params">false</span>, <span class="params">mvpMatrix</span>, 0)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">DrawArrays(GLES20.GL_TRIANGLES, 0, 3)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中vertex_shader_4的代码如下：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">attribute</span> <span class="type">vec4</span> vPosition;</span><br><span class="line"><span class="keyword">uniform</span> <span class="type">mat4</span> vMatrix;</span><br><span class="line"><span class="keyword">varying</span> <span class="type">vec4</span> vColor;</span><br><span class="line"><span class="keyword">attribute</span> <span class="type">vec4</span> aColor;</span><br><span class="line"><span class="type">void</span> main()&#123;</span><br><span class="line">    <span class="built_in">gl_Position</span> = vMatrix * vPosition;</span><br><span class="line">    vColor = aColor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>fragment_shader_4的代码如下：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置我们使用中等精确度</span></span><br><span class="line"><span class="keyword">precision</span> <span class="keyword">mediump</span> <span class="type">float</span>;</span><br><span class="line"><span class="comment">// 声明变量用于传递颜色数值</span></span><br><span class="line"><span class="keyword">varying</span> <span class="type">vec4</span> vColor;</span><br><span class="line"><span class="type">void</span> main() &#123;</span><br><span class="line">    <span class="comment">// 将af_Color的颜色属性值赋值给gl_FragColor的内置变量</span></span><br><span class="line">    <span class="built_in">gl_FragColor</span> = vColor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终的效果如下图所示<br><img src="/assets/tools/tools-opengl-08.png" alt="绘制圆形"></p><p><a href="https://github.com/xiaoniudadi/android-media-demo/tree/master/06-android-media-opengl">demo地址github</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用OpenGL ES绘制正方形(多边形)，圆形，并且给这些图形填充颜色&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
    <category term="音视频" scheme="http://www.paulniu.com/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>android 音视频开发(六)</title>
    <link href="http://www.paulniu.com/2019/08/26/android-media-06/"/>
    <id>http://www.paulniu.com/2019/08/26/android-media-06/</id>
    <published>2019-08-26T14:50:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>学习Android平台的OpenGL ES API，了解OpenGL开发的基本流程，使用OpenGL绘制三角形</p><span id="more"></span><p>先看效果图<br><img src="/assets/tools/tools-opengl-04.png" alt="使用OpenGL ES绘制三角形"></p><p>先来看一张图<br><img src="/assets/tools/tools-opgl-01.png" alt="Android架构图"></p><p>这里我们可以找到Libraries里面有我们目前要接触的库，即OpenGL ES。<br>根据上图可以知道Android 目前是支持使用开放的图形库的，特别是通过OpenGL ES API来支持高性能的2D和3D图形。OpenGL是一个跨平台的图形API。为3D图形处理硬件指定了一个标准的软件接口。OpenGL ES 是适用于嵌入式设备的OpenGL规范。<br>Android 支持OpenGL ES API版本的详细状态是：</p><blockquote><p>OpenGL ES 1.0 和 1.1 能够被Android 1.0及以上版本支持<br>OpenGL ES 2.0 能够被Android 2.2及更高版本支持<br>OpenGL ES 3.0 能够被Android 4.3及更高版本支持<br>OpenGL ES 3.1 能够被Android 5.0及以上版本支持</p></blockquote><h2 id="OpenGL-ES的使用"><a href="#OpenGL-ES的使用" class="headerlink" title="OpenGL ES的使用"></a>OpenGL ES的使用</h2><p>这里有两个非常重要的概念需要先声明一下</p><h3 id="GLSurfaceView"><a href="#GLSurfaceView" class="headerlink" title="GLSurfaceView"></a>GLSurfaceView</h3><p>GLSurfaceView从名字就可以看出，它是一个SurfaceView。看源码可知，GLSurfaceView继承自SurfaceView，并增加了Renderer，它的作用就是专门为OpenGL显示渲染使用的</p><h3 id="GLSurfaceView-Renderer"><a href="#GLSurfaceView-Renderer" class="headerlink" title="GLSurfaceView.Renderer"></a>GLSurfaceView.Renderer</h3><p>此接口定义了在GLSurfaceView中绘制图形所需的方法。您必须将此接口的实现作为单独的类提供，并使用GLSurfaceView.setRenderer()将其附加到您的GLSurfaceView实例。</p><p>GLSurfaceView.Renderer要求实现以下方法</p><ol><li>onSurfaceCreated()：创建GLSurfaceView时，系统调用一次该方法。使用此方法执行只需要执行一次的操作，例如设置OpenGL环境参数或初始化OpenGL图形对象。</li><li>onDrawFrame()：系统在每次重画GLSurfaceView时调用这个方法。使用此方法作为绘制（和重新绘制）图形对象的主要执行方法。</li><li>onSurfaceChanged()：当GLSurfaceView的发生变化时，系统调用此方法，这些变化包括GLSurfaceView的大小或设备屏幕方向的变化。例如：设备从纵向变为横向时，系统调用此方法。我们应该使用此方法来响应GLSurfaceView容器的改变。</li></ol><p>SurfaceView使用的一般步骤</p><ol><li>创建一个GlSurfaceView</li><li>为这个GlSurfaceView设置渲染</li><li>在GlSurfaceView.renderer中绘制处理显示数据</li></ol><h2 id="使用OpenGL绘制一些图像"><a href="#使用OpenGL绘制一些图像" class="headerlink" title="使用OpenGL绘制一些图像"></a>使用OpenGL绘制一些图像</h2><h3 id="OpenGL-环境搭建"><a href="#OpenGL-环境搭建" class="headerlink" title="OpenGL 环境搭建"></a>OpenGL 环境搭建</h3><p>我们想要通过OpenGL来绘制一个图像，就必须先获取到OpenGL的容器，一般情况最简单最直接的办法就是直接使用GLSurfaceView和GLSurfaceView.Rendered。<br>GLSurfaceVIew是绘制图形的容器，GLSurfaceView.Rendered是控制绘制图形的内容</p><h4 id="在Manfiest文件中声明OpenGL"><a href="#在Manfiest文件中声明OpenGL" class="headerlink" title="在Manfiest文件中声明OpenGL"></a>在Manfiest文件中声明OpenGL</h4><p>为了能够使用OpenGL 2.0 我们必须在清单配置文件中声明如下的内容</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-feature android:<span class="attribute">glEsVersion</span>=<span class="string">&quot;0x00020000&quot;</span> android:<span class="attribute">required</span>=<span class="string">&quot;true&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p>如果我们的应用需要使用纹理压缩，那么我们也要为应用声明需要使用哪种压缩格式。</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;supports-gl-<span class="built_in">texture</span> android:<span class="keyword">name</span>=<span class="string">&quot;GL_OES_compressed_ETC1_RGB8_texture&quot;</span> /&gt;</span><br><span class="line">&lt;supports-gl-<span class="built_in">texture</span> android:<span class="keyword">name</span>=<span class="string">&quot;GL_OES_compressed_paletted_texture&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><h4 id="创建一个Activity用于展示OpenGL"><a href="#创建一个Activity用于展示OpenGL" class="headerlink" title="创建一个Activity用于展示OpenGL"></a>创建一个Activity用于展示OpenGL</h4><p>在一个使用了OpenGL的Activity和普通的Activity没什么不同，如果非要说不同，那么就是Activity的布局不同了。<br>这里跟大多数的blog是一样的，我们先在Activity中设置一个GLSurfaceView，然后让他展示黑色的背景样式</p><p>先来看Activity中的代码</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">OpenGLSimpleActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">MyGLSurfaveView</span> surfaceView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void onCreate(<span class="meta">@Nullable</span> <span class="type">Bundle</span> savedInstanceState) &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        surfaceView = <span class="keyword">new</span> <span class="type">MyGLSurfaveView</span>(<span class="keyword">this</span>);</span><br><span class="line">        setContentView(surfaceView);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码比较简单，这里我们声明了一个GLSurfaceVIew，这个GLSurfaceView是我自己定义的，然后创建GLSurfaceVIew实体对象，并且把这个GLSurfaceView对象作为布局设置给当前的Activity</p><p>其次是MyGLSurfaceView</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyGLSurfaveView</span> <span class="keyword">extends</span> <span class="title">GLSurfaceView</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">MyGLSurfaceViewRendered</span> renderer;</span><br><span class="line"></span><br><span class="line">    public <span class="type">MyGLSurfaveView</span>(<span class="type">Context</span> context) &#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> void init() &#123;</span><br><span class="line">        <span class="comment">// 设置我们使用OpenGL的版本  2</span></span><br><span class="line">        setEGLContextClientVersion(<span class="number">2</span>);</span><br><span class="line">        renderer = <span class="keyword">new</span> <span class="type">MyGLSurfaceViewRendered</span>();</span><br><span class="line">        setRenderer(renderer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这段代码中，我们创建了一个名为MyGLSurfaceView的类，并且让这个类继承了GLSurfaceView，在构造方法中我们需要设置使用的OpenGL的版本，并且创建一个Rendered对象，并且将这个对象设置成当前GLSurfaceView的Render。这里的Rendered对象是我们自己创建的，这样我们可以规定当前样式需要显示的方式，并且更好的管理各个不同的状态</p><p>最后是MyGLSurfaceViewRendered</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> MyGLSurfaceViewRendered implements GLSurfaceView.Renderer &#123;</span><br><span class="line">    public void on<span class="constructor">SurfaceCreated(GL10 <span class="params">unused</span>, EGLConfig <span class="params">config</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// Set the background frame color</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">ClearColor(0.0f, 0.0f, 0.0f, 1.0f)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void on<span class="constructor">DrawFrame(GL10 <span class="params">unused</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// Redraw background color</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">Clear(GLES20.GL_COLOR_BUFFER_BIT)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void on<span class="constructor">SurfaceChanged(GL10 <span class="params">unused</span>, <span class="params">int</span> <span class="params">width</span>, <span class="params">int</span> <span class="params">height</span>)</span> &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">Viewport(0, 0, <span class="params">width</span>, <span class="params">height</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个类里，我们让他实现了GLSurfaceView.Rendered接口，并且重写了三个方法，这三个方法中我们写的代码很少，主要实现是一个跟当前屏幕大小一样的黑色背景样式</p><h4 id="OpenGL-ES-定义形状"><a href="#OpenGL-ES-定义形状" class="headerlink" title="OpenGL ES 定义形状"></a>OpenGL ES 定义形状</h4><p>上面我们配置好了OpenGL的基本环境，但是想要进行进步的操作，其实是很困难的，我有很多次学习OpenGL都是卡在这一步，然后，就没有然后了。。。手动滑稽</p><p>首先我们来看一下我们需要了解的一些基本知识，这些知识包括OpenGL ES坐标系统，定义形状，环状面等</p><h5 id="顶点坐标系"><a href="#顶点坐标系" class="headerlink" title="顶点坐标系"></a>顶点坐标系</h5><p>!(顶点坐标系)[/assets/tools/tools-opengl-02.png]</p><p>在如上图所示的内容中，我们会发现在OpenGL中原点就是屏幕的中心(0,0),最左边是(-1,0),最右边是(1,0),最上面是(0,1),最下面是(0,-1).这里我们需要现绘制一个三角形，所以我们让这个三角形的三个坐标分别如下所示</p><p>!(绘制三角形坐标)[/assets/tools/tools-opengl-03.png]</p><p>三角形的三个坐标分别是(-1,0),(1,0),(0,1)</p><h5 id="定义三角形"><a href="#定义三角形" class="headerlink" title="定义三角形"></a>定义三角形</h5><p>在绘制三角形之前，我们知道java有JVM虚拟机，在虚拟机中有一个非常重要的机制，叫做垃圾回收机制(GC)。在我们使用java语言开发应用时，所有的内存地址都是由JVM统一管理的。但是这样做的好处是方便我们上手，我们只需要注重业务逻辑，而不需要过多的思考内存情况。但是因为GC的清除不受我们代码的控制，所以会出现一种情况，当我们的程序运行时，GC可能会将三角形的顶点回收掉，这样会导致OpenGL找不到三角形的顶点，从而导致程序错误。为了避免这样情况的发生，我们需要给三角形的顶点分配内存(也就跳过了JVM分配内存的这一步).这一步很关键，网上的blog都把这步叫做顶点的本地化。</p><p>顶点的本地化分为两步：</p><ol><li>使用float数组来存放我们的三角形顶点<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">float[] vertexData = &#123;</span><br><span class="line">    -<span class="number">1</span>,<span class="number">0</span>,<span class="regexp">//</span> 左下角</span><br><span class="line">    <span class="number">1</span>,<span class="number">0</span>,<span class="regexp">//</span> 右下角</span><br><span class="line">    <span class="number">0</span>,<span class="number">1</span><span class="regexp">//</span> 顶角</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>根据顶点分配底层内存地址，因为需要本地化，所以内存地址分配和C++差不多。这里我们需要使用的是ByteBuffer这个类<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> Triangle &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FloatBuffer vertexBuffer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组中每个顶点的坐标数(其实就是在三维模型中，我们要有x,y,z三个坐标)</span></span><br><span class="line">    <span class="keyword">private</span> static final <span class="built_in">int</span> COORDS_PER_VERTEX = <span class="number">3</span>;</span><br><span class="line">    <span class="comment">// 声明三角形三个顶点的位置</span></span><br><span class="line">    <span class="keyword">private</span> static <span class="built_in">float</span> triangleCoords<span class="literal">[]</span> = &#123;</span><br><span class="line">            -<span class="number">1</span>f,<span class="number">0</span>f,<span class="comment">// 左下角</span></span><br><span class="line">            <span class="number">1</span>f,<span class="number">0</span>f,<span class="comment">// 右下角</span></span><br><span class="line">            <span class="number">0</span>f,<span class="number">1</span>f<span class="comment">// 顶角</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置颜色，分别为red,green,blue和alpha</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> color<span class="literal">[]</span> = &#123;<span class="number">0.63671875</span>f, <span class="number">0.76953125</span>f, <span class="number">0.22265625</span>f, <span class="number">1.0</span>f&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    public <span class="constructor">Triangle()</span>&#123;</span><br><span class="line">        <span class="comment">// 为存放三角形坐标，初始化顶点字节缓存</span></span><br><span class="line">        ByteBuffer bb = <span class="module-access"><span class="module"><span class="identifier">ByteBuffer</span>.</span></span>allocate<span class="constructor">Direct(4 <span class="operator">*</span> <span class="params">triangleCoords</span>.<span class="params">length</span>)</span>;<span class="comment">// 分配内存空间</span></span><br><span class="line">        <span class="comment">// 内存bit的排序方式和本地机器一致</span></span><br><span class="line">        bb.order(<span class="module-access"><span class="module"><span class="identifier">ByteOrder</span>.</span></span>native<span class="constructor">Order()</span>);</span><br><span class="line">        <span class="comment">// 转换成float的buffer，因为这里我们存放的是float类型的顶点</span></span><br><span class="line">        vertexBuffer = bb.<span class="keyword">as</span><span class="constructor">FloatBuffer()</span>;</span><br><span class="line">        <span class="comment">// 将数据放入内存中</span></span><br><span class="line">        vertexBuffer.put(triangleCoords);</span><br><span class="line">        <span class="comment">// 把索引指针指向开头位置</span></span><br><span class="line">        vertexBuffer.position(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>方法allocateDirect是用来分配内存大小的，其大小为float数组长度*float所占的字节数，而float是占有4个字节的。</li><li>方法order使用配置内存中字节的排列方式的，这里我们默认和本机的排列方式一致即可</li><li>方法asFloatBuffer是将ByteBuffer转换成floatBuffer</li><li>方法put是将float数组作为原数据放在floatBuffer中</li><li>方法position是设置从头开始访问这块内存地址</li></ul><blockquote><p>在android开发中如果我们想要设置颜色一般都会调用setxxxColor这样的方法去执行。但是在OpenGL中，我们需要编写自己的着色器，然后OpenGL会用GPU去执行这个着色器，最终将反馈的结果返回给我们。这里着色器的编写需要使用到glsl语言来编写。</p></blockquote><h5 id="顶点着色器"><a href="#顶点着色器" class="headerlink" title="顶点着色器"></a>顶点着色器</h5><p>编写顶点着色器，新建一个名为vertex_shader.glsl的文件，并且把这个文件放在res/raw文件夹下面</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">attribute</span> <span class="type">vec4</span> av_Position; <span class="comment">// 用于在Java代码中获取属性</span></span><br><span class="line"><span class="type">void</span> main()&#123;</span><br><span class="line">    <span class="built_in">gl_Position</span> = av_Position;<span class="comment">// gl_Position是内置变量，OpenGL绘制顶点就是根据这个值绘制的。所以我们需要将java代码中的值赋值给它</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码很少，但是理解起来去不那么容易，如果第一次看不懂也没有关系，后面我们会继续学习。</p><ol><li>先来看看第一行：attribute vec4 av_Position;</li></ol><ul><li>attribute表示顶点属性，只能用在顶点坐标中。java代码会回去这个变量，并且为它赋值</li><li>vec4表示包含了(x,y,z,w)四个值的向量，其中x和y表示的平面，z表示的是3D，w表示的是摄像头的距离。因为我们这里只需要绘制2D图形，所以不需要设置z和w的值，OpenGL会填写默认值1.</li></ul><blockquote><p>所以这句话的意思就是我们声明了一个名为av_Position的拥有四个值(x,y,z,w)并且数据类型是attribute的向量，我们在java代码中会找到这个变量，并且把顶点(FloatBuffer)的值赋值给它。</p></blockquote><p>这样OpenGL在执行着色器代码时就会获取到三角形三个顶点，进而绘制出我们想要的三角形。</p><ol start="2"><li>void main(){}：这个没啥好说的，就是一个函数</li><li>gl_Position = av_Position: gl_Position就是glsl中内置的最终顶点变量，其实就是这个变量决定了我们将顶点绘制到哪个地方，所以我们需要将av_Position赋值给它</li></ol><h5 id="片元着色器"><a href="#片元着色器" class="headerlink" title="片元着色器"></a>片元着色器</h5><p>上面的代码中我们只是绘制了点，那么绘制完点之后我们需要给三角形一个填充颜色，这时候就要使用到片元着色器。</p><p>编写片元着色器，需要在res/raw文件夹下新建一个名为fragment_shader.glsl的文件</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">precision</span> <span class="keyword">mediump</span> <span class="type">float</span>;<span class="comment">// 声明我们使用中等精度 float</span></span><br><span class="line"><span class="keyword">uniform</span> <span class="type">vec4</span> af_Color;<span class="comment">// 用于在java代码中传递颜色数值</span></span><br><span class="line"><span class="type">void</span> main()&#123;</span><br><span class="line">    <span class="built_in">gl_FragColor</span> = af_Color;<span class="comment">// gl_FragColor内置变量，OpenGL在填充颜色时使用该变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>第一行代码：precision mediump float  表示用中等精度float类型来保存变量数值。</li><li>第二行代码：uniform vec4 af_Color: </li></ol><ul><li>uniform:声明变量的类型。uniform是用于Java代码向顶点和片元着色器传递数据。和attribute的区别在于，attribute只能用于顶点着色器的应用程序中并且包含具体的顶点数据，每次执行都要从顶点内存中获取新的值，而uniform则始终都是一个值。</li><li>vec4 af_Color也是声明一个4个分量的变量af_Color，这个里面保存的是颜色的值了（rgba四个分量)。</li></ul><ol start="3"><li>void main(){}一个函数，没啥好说的</li><li>gl_FragColor = af_Color: gl_FragColor是一个内置变量，用于最终颜色填充的赋值。</li></ol><p>上面的两步都是生命着色器的，下面我们需要将着色器引入到java代码中</p><h5 id="加载并编译着色器语言"><a href="#加载并编译着色器语言" class="headerlink" title="加载并编译着色器语言"></a>加载并编译着色器语言</h5><ol><li>通过GLES20.glCreateShader(shaderType)创建(顶点/片元)类型的代码<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建顶点类型着色器</span></span><br><span class="line"><span class="built_in">int</span> vertexShader = <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">CreateShader(GL_VERTEX_SHADER)</span>;</span><br><span class="line"><span class="comment">// 创建片源类型着色器</span></span><br><span class="line"><span class="built_in">int</span> fragmentShader = <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">CreateShader(GL_FRAGMENT_SHADER)</span>;</span><br></pre></td></tr></table></figure></li><li>加载shader源码并且编译shader<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 其实两种着色器我们要写两种，为了方便，后面我们会写一个方法，然后在这个方法里统一执行</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">ShaderSource(<span class="params">shader</span>,<span class="params">source</span>)</span>;<span class="comment">// 根据我们的类型加载不同的着色器</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">CompileShader(<span class="params">shader</span>)</span>;<span class="comment">// 编译我们自己写的着色器代码程序</span></span><br></pre></td></tr></table></figure></li><li>实际创建并添加到渲染程序中<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> program = <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">CreateProgram()</span>;<span class="comment">// 创建一个program程序</span></span><br></pre></td></tr></table></figure></li><li>将着色器添加到渲染程序中<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">AttachShader(<span class="params">program</span>,<span class="params">vertexShader</span>)</span>;<span class="comment">// 把顶点着色器加入到渲染程序中</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">AttachShader(<span class="params">program</span>.<span class="params">fragmentShader</span>)</span>;<span class="comment">// 把片元着色器加入到渲染程序中</span></span><br></pre></td></tr></table></figure></li><li>链接源程序<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">LinkProgram(<span class="params">program</span>)</span>;<span class="comment">// 最终链接顶点着色器和片元着色器，后面再program中就可以方位顶点着色器和片元着色器的属性</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="传递顶点坐标和颜色给着色器程序"><a href="#传递顶点坐标和颜色给着色器程序" class="headerlink" title="传递顶点坐标和颜色给着色器程序"></a>传递顶点坐标和颜色给着色器程序</h5><ol><li>获取顶点变量<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取顶点属性，后面我们会给他赋值</span></span><br><span class="line"><span class="built_in">int</span> position = <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">GetAttributeLocation(<span class="params">programId</span>,<span class="string">&quot;av_Position&quot;</span>)</span>;</span><br></pre></td></tr></table></figure></li><li>获取颜色变量<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取片元变量</span></span><br><span class="line"><span class="built_in">int</span> color = <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">GetUniformLocation(<span class="params">programId</span>,<span class="string">&quot;af_Color&quot;</span>)</span>;</span><br></pre></td></tr></table></figure></li><li>开始执行着色器程序<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在开始绘制之前想将当前的programId赋值出去</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">UseProgram(<span class="params">programId</span>)</span>;</span><br></pre></td></tr></table></figure></li><li>激活顶点属性<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先激活顶点属性数组，之后才能对他进行赋值</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">EnableVertexAttribArray(<span class="params">position</span>)</span>;</span><br></pre></td></tr></table></figure></li><li>向顶点属性传递值<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">VertexAttribPointer(<span class="params">position</span>,2,GLES20.GL_FLOAT，<span class="params">false</span>,8,<span class="params">vertexBuffer</span>)</span>;</span><br></pre></td></tr></table></figure></li></ol><ul><li>第一个参数是顶点属性的句柄</li><li>第二个参数表示我们使用几个分量来表示一个点，很明显，2个(x,y)</li><li>第三个参数表示顶点的数据类型</li><li>第四个参数表示是否要做归一化处理，如果我们的坐标不再(-1,1)之间，就需要</li><li>第五个参数表示每个点所占据的空间大小，因为每个点都是(x,y),每个值都是4个字节，所以写8</li><li>第六个参数表示OpenGL要从哪个内存中获取点数据</li></ul><ol start="6"><li>绘制<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绘制三角形，从我们顶点数组中0的位置开始，绘制顶点个数为3个</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">DrawArrays(GLES20.GL_TRIANGLES,0,3)</span>;</span><br></pre></td></tr></table></figure></li></ol><ul><li>第一个参数表示绘制的方式，GL_TRIANGLES表示绘制三角形，还有其他的方式</li><li>第二个参数表示从哪个位置开始绘制，因为顶点坐标里只有三个点所以从0开始绘制</li><li>第三个参数表示绘制多少个点</li></ul><p>综上所述，绘制的过程大致分为以下几个内容<br>坐标点(顶点/纹理) –&gt;&gt; 编写着色器程序 –&gt;&gt; 加载着色器程序并生成program –&gt;&gt; 获取program中的变量 –&gt;&gt; program变量的赋值 –&gt;&gt; 最终绘制</p><h3 id="完整代码如下"><a href="#完整代码如下" class="headerlink" title="完整代码如下"></a>完整代码如下</h3><p style="color:red">activity</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">OpenGLSimpleActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">MyGLSurfaveView</span> surfaceView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void onCreate(<span class="meta">@Nullable</span> <span class="type">Bundle</span> savedInstanceState) &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        surfaceView = <span class="keyword">new</span> <span class="type">MyGLSurfaveView</span>(<span class="keyword">this</span>);</span><br><span class="line">        setContentView(surfaceView);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p style="color:red">自定义GLSurfaceView</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyGLSurfaveView</span> <span class="keyword">extends</span> <span class="title">GLSurfaceView</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">MyGLSurfaceViewRendered</span> renderer;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Context</span> context;</span><br><span class="line"></span><br><span class="line">    public <span class="type">MyGLSurfaveView</span>(<span class="type">Context</span> context) &#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> void init() &#123;</span><br><span class="line">        <span class="comment">// 设置我们使用OpenGL的版本  2</span></span><br><span class="line">        setEGLContextClientVersion(<span class="number">2</span>);</span><br><span class="line">        renderer = <span class="keyword">new</span> <span class="type">MyGLSurfaceViewRendered</span>(context);</span><br><span class="line">        setRenderer(renderer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p style="color:red">创建ShaderUtils工具类</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> ShaderUtils &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将glsl数据内容转换成String类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param context</span></span><br><span class="line"><span class="comment">     * @param rawId</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public static String read<span class="constructor">RawText(Context <span class="params">context</span>, <span class="params">int</span> <span class="params">rawId</span>)</span> &#123;</span><br><span class="line">        InputStream is = context.get<span class="constructor">Resources()</span>.<span class="keyword">open</span><span class="constructor">RawResource(<span class="params">rawId</span>)</span>;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> <span class="constructor">BufferedReader(<span class="params">new</span> InputStreamReader(<span class="params">is</span>)</span>);</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> <span class="constructor">StringBuffer()</span>;</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> ((line = br.read<span class="constructor">Line()</span>) != null) &#123;</span><br><span class="line">                sb.append(line).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            br.close<span class="literal">()</span>;</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        return sb.<span class="keyword">to</span><span class="constructor">String()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static <span class="built_in">int</span> load<span class="constructor">Shader(<span class="params">int</span> <span class="params">shaderType</span>, String <span class="params">source</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> shader = <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">CreateShader(<span class="params">shaderType</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (shader != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">ShaderSource(<span class="params">shader</span>, <span class="params">source</span>)</span>;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">CompileShader(<span class="params">shader</span>)</span>;</span><br><span class="line">            <span class="built_in">int</span><span class="literal">[]</span> compile = <span class="keyword">new</span> <span class="built_in">int</span><span class="literal">[<span class="number">1</span>]</span>;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">GetShaderiv(<span class="params">shader</span>, GLES20.GL_COMPILE_STATUS, <span class="params">compile</span>, 0)</span>;</span><br><span class="line">            <span class="keyword">if</span> (compile<span class="literal">[<span class="number">0</span>]</span> != GLES20.GL_TRUE) &#123;</span><br><span class="line">                <span class="comment">// 生成shader失败</span></span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">DeleteShader(<span class="params">shader</span>)</span>;</span><br><span class="line">                shader = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return shader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static <span class="built_in">int</span> create<span class="constructor">Program(String <span class="params">vertexSource</span>, String <span class="params">fragmentSource</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> vertexShader = load<span class="constructor">Shader(GLES20.GL_VERTEX_SHADER, <span class="params">vertexSource</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (vertexShader<span class="operator"> == </span><span class="number">0</span>) &#123;</span><br><span class="line">            return <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> fragmentShader = load<span class="constructor">Shader(GLES20.GL_FRAGMENT_SHADER, <span class="params">fragmentSource</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (fragmentShader<span class="operator"> == </span><span class="number">0</span>) &#123;</span><br><span class="line">            return <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> program = <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">CreateProgram()</span>;</span><br><span class="line">        <span class="keyword">if</span> (program != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">AttachShader(<span class="params">program</span>, <span class="params">vertexShader</span>)</span>;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">AttachShader(<span class="params">program</span>, <span class="params">fragmentShader</span>)</span>;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">LinkProgram(<span class="params">program</span>)</span>;</span><br><span class="line">            <span class="built_in">int</span><span class="literal">[]</span> linsStatus = <span class="keyword">new</span> <span class="built_in">int</span><span class="literal">[<span class="number">1</span>]</span>;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">GetProgramiv(<span class="params">program</span>, GLES20.GL_LINK_STATUS, <span class="params">linsStatus</span>, 0)</span>;</span><br><span class="line">            <span class="keyword">if</span> (linsStatus<span class="literal">[<span class="number">0</span>]</span> != GLES20.GL_TRUE) &#123;</span><br><span class="line">                <span class="comment">// 生成program社保</span></span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">DeleteProgram(<span class="params">program</span>)</span>;</span><br><span class="line">                program = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return program;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static FloatBuffer f<span class="constructor">Buffer(<span class="params">float</span>[] <span class="params">a</span>)</span> &#123;</span><br><span class="line">        FloatBuffer floatBuffer;</span><br><span class="line">        <span class="comment">// 先初始化buffer,数组的长度*4,因为一个float占4个字节</span></span><br><span class="line">        ByteBuffer mbb = <span class="module-access"><span class="module"><span class="identifier">ByteBuffer</span>.</span></span>allocate<span class="constructor">Direct(<span class="params">a</span>.<span class="params">length</span> <span class="operator">*</span> 4)</span>;</span><br><span class="line">        <span class="comment">// 数组排列用nativeOrder</span></span><br><span class="line">        mbb.order(<span class="module-access"><span class="module"><span class="identifier">ByteOrder</span>.</span></span>native<span class="constructor">Order()</span>);</span><br><span class="line">        floatBuffer = mbb.<span class="keyword">as</span><span class="constructor">FloatBuffer()</span>;</span><br><span class="line">        floatBuffer.put(a);</span><br><span class="line">        floatBuffer.position(<span class="number">0</span>);</span><br><span class="line">        return floatBuffer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p style="color:red">自定义Rendered</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> MyGLSurfaceViewRendered implements GLSurfaceView.Renderer &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line">    <span class="keyword">private</span> final <span class="built_in">float</span><span class="literal">[]</span> vertexData = &#123;</span><br><span class="line">            -<span class="number">1</span>f, <span class="number">0</span>f,<span class="comment">// 左下角</span></span><br><span class="line">            <span class="number">1</span>f, <span class="number">0</span>f,<span class="comment">// 右下角</span></span><br><span class="line">            <span class="number">0</span>f, <span class="number">1</span>f<span class="comment">// 顶角</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FloatBuffer vertexBuffer;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> program;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> position;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> color;</span><br><span class="line"></span><br><span class="line">    public <span class="constructor">MyGLSurfaceViewRendered(Context <span class="params">context</span>)</span> &#123;</span><br><span class="line">        this.context = context;</span><br><span class="line">        vertexBuffer = <span class="module-access"><span class="module"><span class="identifier">ByteBuffer</span>.</span></span>allocate<span class="constructor">Direct(<span class="params">vertexData</span>.<span class="params">length</span> <span class="operator">*</span> 4)</span></span><br><span class="line">                .order(<span class="module-access"><span class="module"><span class="identifier">ByteOrder</span>.</span></span>native<span class="constructor">Order()</span>)</span><br><span class="line">                .<span class="keyword">as</span><span class="constructor">FloatBuffer()</span></span><br><span class="line">                .put(<span class="module-access"><span class="module"><span class="identifier">ShaderUtils</span>.</span></span>f<span class="constructor">Buffer(<span class="params">vertexData</span>)</span>);</span><br><span class="line">        vertexBuffer.position(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void on<span class="constructor">SurfaceCreated(GL10 <span class="params">unused</span>, EGLConfig <span class="params">config</span>)</span> &#123;</span><br><span class="line">        String vertexSource = <span class="module-access"><span class="module"><span class="identifier">ShaderUtils</span>.</span></span>read<span class="constructor">RawText(<span class="params">context</span>, R.<span class="params">raw</span>.<span class="params">vertex_shader</span>)</span>;</span><br><span class="line">        String fragmentSource = <span class="module-access"><span class="module"><span class="identifier">ShaderUtils</span>.</span></span>read<span class="constructor">RawText(<span class="params">context</span>, R.<span class="params">raw</span>.<span class="params">fragment_shader</span>)</span>;</span><br><span class="line">        program = <span class="module-access"><span class="module"><span class="identifier">ShaderUtils</span>.</span></span>create<span class="constructor">Program(<span class="params">vertexSource</span>, <span class="params">fragmentSource</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (program &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            position = <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">GetAttribLocation(<span class="params">program</span>, <span class="string">&quot;av_Position&quot;</span>)</span>;</span><br><span class="line">            color = <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">GetUniformLocation(<span class="params">program</span>, <span class="string">&quot;af_Color&quot;</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void on<span class="constructor">SurfaceChanged(GL10 <span class="params">unused</span>, <span class="params">int</span> <span class="params">width</span>, <span class="params">int</span> <span class="params">height</span>)</span> &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">Viewport(0, 0, <span class="params">width</span>, <span class="params">height</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void on<span class="constructor">DrawFrame(GL10 <span class="params">unused</span>)</span> &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">Clear(GLES20.GL_COLOR_BUFFER_BIT)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">ClearColor(1.0f, 1.0f, 1.0f, 1.0f)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">UseProgram(<span class="params">program</span>)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">Uniform4f(<span class="params">color</span>, 1f, 0f, 0f, 1f)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">EnableVertexAttribArray(<span class="params">position</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">VertexAttribPointer(<span class="params">position</span>, 2, GLES20.GL_FLOAT, <span class="params">false</span>, 8, <span class="params">vertexBuffer</span>)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GLES20</span>.</span></span>gl<span class="constructor">DrawArrays(GLES20.GL_TRIANGLES, 0, 3)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/xiaoniudadi/android-media-demo/tree/master/06-android-media-opengl">demo地址github</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.jianshu.com/p/87abc92134dd">OpenGL ES API</a><br><a href="https://blog.csdn.net/ywl5320/article/details/80964212">OpenGL 绘制三角形</a><br><a href="https://www.jianshu.com/u/eb01968a6673">OpenGL 学习</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;学习Android平台的OpenGL ES API，了解OpenGL开发的基本流程，使用OpenGL绘制三角形&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
    <category term="音视频" scheme="http://www.paulniu.com/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>拥抱Python（十四） 数据结构</title>
    <link href="http://www.paulniu.com/2019/08/21/python-14/"/>
    <id>http://www.paulniu.com/2019/08/21/python-14/</id>
    <published>2019-08-21T13:51:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python 列表</p><span id="more"></span><p>Python中列表是可变的，这是它区别于字符串和元组的最重要的特点之一，一句话概括就是：列表可以修改，字符串和元组不能修改(其实这样说并不严谨)</p><ol><li>list.append(x)  把一个元素添加到列表的结尾</li><li>list.extend(L)  通过添加置顶列表的所有元素来扩充列表</li><li>list.insert(i,x)  在置顶位置插入一个元素，i：表示准备插入到列表中的元素的索引，x：表示准备插入到列表中的位置下标</li><li>list.remove(x)  删除列表中值为x的第一个元素，如果没有这个元素，则会返回一个错误</li><li>list.pop([i])   从列表的置顶位置移除元素，并将其返回，如果没有指定索引，a.pop()返回最后一个元素。元素随机从列表中移除</li><li>list.clear()    移出列表中的所有项  等于del a[:]</li><li>list.index(x)   返回列表中第一个值为x的元素的索引，如果没有匹配到，则会返回一个错误</li><li>list.count(x)   返回x在列表中出现的次数</li><li>list.sort()     对列表中的元素进行排序</li><li>list.reverse()   倒排列表中的元素</li><li>list.copy()    返回列表的浅复制  等于a[:]</li></ol><h1 id="将列表当做堆栈使用"><a href="#将列表当做堆栈使用" class="headerlink" title="将列表当做堆栈使用"></a>将列表当做堆栈使用</h1><p>列表方法使得列表可以很方便的作为一个堆栈来使用，堆栈作为特定的数据结构，最先进入的元素最后一个被释放，用append()方法可以吧一个元素添加到堆栈顶。用不指定索引的pop()方法可以吧一个元素从堆栈顶释放出来</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">stack</span> = [2, 3, 4]</span><br><span class="line"><span class="keyword">stack</span>.<span class="keyword">append</span>(5)</span><br><span class="line"><span class="keyword">stack</span>.<span class="keyword">append</span>(6)</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">stack</span>)</span><br><span class="line"><span class="keyword">stack</span>.pop()</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">stack</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">stack</span>.<span class="keyword">clear</span>()</span><br></pre></td></tr></table></figure><h1 id="将列表当做队列使用"><a href="#将列表当做队列使用" class="headerlink" title="将列表当做队列使用"></a>将列表当做队列使用</h1><p>可以将列表当做队列使用，只是队列里第一个加入的元素，第一个取出来，但是用列表这样做的效率不高。在列表的最后添加或者弹出元素的速度快，然而在列表中插入或者从头部弹出速度低</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">queue = <span class="built_in">deque</span>([<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>, <span class="string">&quot;ccc&quot;</span>])</span><br><span class="line">queue.<span class="built_in">append</span>(<span class="string">&quot;ddd&quot;</span>)</span><br><span class="line">queue.<span class="built_in">append</span>(<span class="string">&quot;eee&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(queue.<span class="built_in">popleft</span>())</span><br><span class="line"><span class="built_in">print</span>(queue.<span class="built_in">popleft</span>())</span><br><span class="line"><span class="built_in">print</span>(queue)</span><br><span class="line"></span><br><span class="line">queue.<span class="built_in">clear</span>()</span><br></pre></td></tr></table></figure><h1 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h1><p>列表推导式提供了从序列创建列表的简单途径。通常应用程序将一些操作应用于某个序列的每个元素，用其获得的结果作为生成新列表的元素，或者根据确定的确定的判断条件创建子序列<br>新列表的元素，或者根据确定的判定条件创建子序列<br>每个列表推导式都在for之后跟一个表达式，然后有零到多个for或者if字句，返回结果是一个根据表达从其后的for和if上下文环境中生出的列表。如果希望表达式推导出一个元组，必须使用括号</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vec = <span class="selector-attr">[2, 3, 4]</span></span><br><span class="line">vec2 = <span class="selector-attr">[3, 4, 5]</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">([<span class="number">2</span> * x for x in vec])</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">([[x, x ** <span class="number">2</span>] for x in vec])</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;-&quot;</span> * <span class="number">100</span>)</span></span></span><br><span class="line"></span><br><span class="line">freshfruit = <span class="selector-attr">[<span class="string">&#x27;  banana&#x27;</span>, <span class="string">&#x27;  loganberry &#x27;</span>, <span class="string">&#x27;passion fruit  &#x27;</span>]</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">([weapon.strip()</span></span> <span class="keyword">for</span> weapon <span class="keyword">in</span> freshfruit])</span><br></pre></td></tr></table></figure><h1 id="我们也可以使用if子句作为过滤器"><a href="#我们也可以使用if子句作为过滤器" class="headerlink" title="我们也可以使用if子句作为过滤器"></a>我们也可以使用if子句作为过滤器</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;-&quot;</span> * <span class="number">100</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">([<span class="number">3</span> * x for x in vec if x &gt;= <span class="number">3</span>])</span></span></span><br></pre></td></tr></table></figure><h1 id="再来一个"><a href="#再来一个" class="headerlink" title="再来一个"></a>再来一个</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;-&quot;</span> * <span class="number">100</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">([x * y for x in vec for y in vec2])</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Python 列表&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="http://www.paulniu.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>android奇技淫巧 14 Android7.0 桌面长按图标出现快捷方式</title>
    <link href="http://www.paulniu.com/2019/08/20/android-tools-14/"/>
    <id>http://www.paulniu.com/2019/08/20/android-tools-14/</id>
    <published>2019-08-20T03:55:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android 7.0版本有一个新特性：如果app支持，可以通过长按app图标出现一些快捷操作。一些热门应用举例： </p><span id="more"></span><p><img src="/assets/tools/tools_7.0.png" alt="android7.0图标长摁"></p><p>设置起来比较简单，两种设置方式：静态设置和动态设置</p><h1 id="静态设置"><a href="#静态设置" class="headerlink" title="静态设置"></a>静态设置</h1><ol><li>创建shortcuts.xml配置资源文件</li><li>在Manifest中添加meta-data配置</li></ol><h3 id="创建shortcuts-xml文件"><a href="#创建shortcuts-xml文件" class="headerlink" title="创建shortcuts.xml文件"></a>创建shortcuts.xml文件</h3><p>在res中创建xml的文件夹，并且在里面新建一个xml文件shortcuts.xml</p><p><img src="/assets/tools/tools_7.0_02.png" alt="创建文件"></p><p>在shortcuts.xml文件中配置如下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!xml <span class="meta-keyword">version</span>=<span class="meta-string">&quot;1.0&quot;</span> <span class="meta-keyword">encoding</span>=<span class="meta-string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shortcuts</span> <span class="attr">xmls:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">shortcut</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shortcutId</span>=<span class="string">&quot;background_setting&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:enable</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;drawable/ic_launcher_setting&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shrtcutShortLabel</span>=<span class="string">&quot;String/shortcuts_back_short_label&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shortcutLongLabel</span>=<span class="string">&quot;@string/shortcuts_back_long_label&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shortcutDisabledMessaeg</span>=<span class="string">&quot;@string/shortcuts_back_disable_message&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:action</span>=<span class="string">&quot;android.intent.action.VIEW&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:targetPackage</span>=<span class="string">&quot;com.paulniu.ying&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:targetClass</span>=<span class="string">&quot;com.paulniu.ying.ui.SettingActivity&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">categories</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;android.shortcut.conversation&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">shortcut</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">shortcut</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shortcutId</span>=<span class="string">&quot;pip_settings&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:enabled</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@drawable/ic_launcher&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shortcutShortLabel</span>=<span class="string">&quot;@string/shortcuts_pip_short_label&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shortcutLongLabel</span>=<span class="string">&quot;@string/shortcuts_pip_long_label&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shortcutDisabledMessage</span>=<span class="string">&quot;@string/shortcuts_pip_disable_message&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:action</span>=<span class="string">&quot;android.intent.action.VIEW&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:targetPackage</span>=<span class="string">&quot;com.paulniu.ying&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:targetClass</span>=<span class="string">&quot;compaulniu.ying.PipSetting&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">categories</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;android.shortcut.conversation&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">shortcuts</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在Manifest中配置"><a href="#在Manifest中配置" class="headerlink" title="在Manifest中配置"></a>在Manifest中配置</h3><p>注意：只能在有action是android.intent.action.MAIN和category是android.intent.category.LAUNCHER的Activity中配置才算有效</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;MainActivity&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;anndroid.app.shortcuts&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:resource</span>=<span class="string">&quot;@xml/shortcuts&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activity</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="动态配置"><a href="#动态配置" class="headerlink" title="动态配置"></a>动态配置</h1><h3 id="动态添加"><a href="#动态添加" class="headerlink" title="动态添加"></a>动态添加</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fun</span> on<span class="constructor">ClickshortcutsAdd(<span class="params">v</span>: View)</span> &#123;</span><br><span class="line">        var shortcutManager = get<span class="constructor">SystemService(ShortcutManager::<span class="params">class</span>.<span class="params">java</span>)</span> <span class="keyword">as</span> ShortcutManager</span><br><span class="line">        var intent = <span class="constructor">Intent(<span class="params">this</span>, NotificationChannelActivity::<span class="params">class</span>.<span class="params">java</span>)</span></span><br><span class="line">        intent.action = Intent.ACTION_VIEW</span><br><span class="line">        var shortcut = ShortcutInfo.<span class="constructor">Builder(<span class="params">this</span>, <span class="string">&quot;noti_channel_demo&quot;</span>)</span></span><br><span class="line">                .set<span class="constructor">Icon(Icon.<span class="params">createWithResource</span>(<span class="params">this</span>, R.<span class="params">drawable</span>.<span class="params">ic_launcher</span>)</span>)</span><br><span class="line">                .set<span class="constructor">ShortLabel(<span class="string">&quot;通知渠道&quot;</span>)</span></span><br><span class="line">                .set<span class="constructor">LongLabel(<span class="string">&quot;通知渠道演示&quot;</span>)</span></span><br><span class="line">                .set<span class="constructor">Intent(<span class="params">intent</span>)</span></span><br><span class="line">                .build<span class="literal">()</span></span><br><span class="line">        shortcutManager.add<span class="constructor">DynamicShortcuts(<span class="params">listOf</span>(<span class="params">shortcut</span>)</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="动态删除"><a href="#动态删除" class="headerlink" title="动态删除"></a>动态删除</h3><p>动态配置的快捷方式也是可以删除的，并且只能删除动态配置，静态配置是不能动态删除的，从sdk的api提示就可以看出，并没有提供静态配置项的接口</p><p>删除方式：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">onClickshortcutsDel</span><span class="params">(v: <span class="type">View</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> shortcutManager = getSystemService(ShortcutManager::<span class="keyword">class</span>.java) <span class="keyword">as</span> ShortcutManager</span><br><span class="line">        shortcutManager.removeDynamicShortcuts(listOf(<span class="string">&quot;noti_channel_demo&quot;</span>))</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h1><p><a href="https://blog.csdn.net/LVXIANGAN/article/details/84104786">Android 7.0新特性——桌面长按图标出现快捷方式</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Android 7.0版本有一个新特性：如果app支持，可以通过长按app图标出现一些快捷操作。一些热门应用举例： &lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>android奇技淫巧 13 Android内部存储和外部存储</title>
    <link href="http://www.paulniu.com/2019/08/13/android-tools-13/"/>
    <id>http://www.paulniu.com/2019/08/13/android-tools-13/</id>
    <published>2019-08-13T09:33:10.000Z</published>
    <updated>2021-08-20T12:48:56.871Z</updated>
    
    <content type="html"><![CDATA[<p>在Android开发中我们经常会听到这几个概念，内存，外部存储，内部存储，很多时候我们常常把这个概念弄混淆，所以这篇博客就在这里做一下总结</p><span id="more"></span><p>内存(Menory),内部存储(InternalStorage),外部存储(ExternalStorage)，通过英文翻译很容易混淆<br>我们可以对Android手机存储空间做以下划分</p><ol><li>内存：RAM</li><li>内部存储：内部ROM</li><li>外部存储：外部ROM和SDCard</li></ol><p>其中最容易混淆的就是外部存储，如果说PC上也要区分内部存储和外部存储的话，那么自带硬盘就算是内部存储，U盘或者移动硬盘就属于外部存储，因此我们也很容易带着这样的理解去看待Android手机，认为机身固有的存储就是内部存储，而扩展的T卡就是外部存储。早期Android设备的内部存储确实是固定的，而外部存储确实可以向U盘一样移动。到那时后来的设备中，很多中高端手机将自己的机身存储扩展到了8G以上，他们将存储的概念分为”内部Internal”和”外部External”两部分，但是其实都在手机内部。所以不管Android手机是否有可移动的SDCard，他们总是有外部存储和内部存储。关键的是我们都可以通过相同的Api来访问可移动SDCard或者手机自带的存储。</p><p><img src="/assets/tools/tools-storage-01.png"></p><p>使用Android studio打开手机目录，这里有三个文件夹需要我们注意，data，mnt和storage，data是指内部存储，mnt和storage指外部存储，下面我们来具体分析一下</p><h1 id="内部存储"><a href="#内部存储" class="headerlink" title="内部存储"></a>内部存储</h1><p>内部存储位于系统中很特殊的位置，如果我们想将文件存储在内部存储中，那么文件默认只能放在我们的应用可以访问到，且一个应用创建的所有文件都在和应用包名相同的目录下。也就是说，应用创建内部存储的文件，与这个应用关联起来了。当一个应用被卸载的时候，内部存储中的文件也随之被删除。从技术上来讲如果我们在创建内部存储文件是将这个文件属性设置为可读，那么其他App能够访问自己应用的数据，其实他知道你这个应用的包名，如果这个文件属性为私有的，那么即使知道包名其他应用也无法访问。内部存储控件十分有限，因而显得很重要，另外他也是系统本身和系统应用程序主要的数据存储所在地，一旦内部存储耗尽，手机也将无法使用。<br>在内部存储中有两个重要的目录</p><ol><li>app文件夹：如果没有root，我们是无法打开该文件夹的。app文件夹内存放着我们所有安装app的APK文件，当我们调试一个app的时候，可以看到控制台输出的内容，有一项是uploading…就是上传我们的APK到这个文件夹</li><li>data文件夹：这个文件夹里包含一些包名，打开这些包名，我们就会看到一些文件如<ul><li>data/data/包名/shared_prefs</li><li>data/data/包名/database</li><li>data/data/包名/files</li><li>data/data/包名/cache</li></ul></li></ol><p>我们在使用SharedPerference的时候，将数据90%存储到本地，其实就是存储到这个文件夹中的xml文件中，我们的app里面的数据库文件就存储在databases文件中，还有我们的普通数据存储在files中，缓存在cache文件夹中</p><p><img src="/assets/tools/tools-storage-02.png"></p><p><img src="/assets/tools/tools-storage-03.png"></p><h1 id="外部存储"><a href="#外部存储" class="headerlink" title="外部存储"></a>外部存储</h1><p>外部存储就是上面我们所说道的storage文件夹，也有可能是mnt文件夹，在storeage文件中有一个sdcard的文件夹，这个文件夹中的文件分为两类，一类是共有目录，还有一类是私有目录。其中共有目录分为9大类，比如DCIM，Download等这些系统为我们创建的文件夹，私有目录就是android这个文件夹，这个文件夹打开后面有一个data的文件夹，打开这个data文件夹里面包好了许多报名组成的文件夹</p><p><img src="/assets/tools/tools-storage-04.png"></p><p>Android应用程序在运行的过程中需要向手机上保存数据，一般是把数据保存在SDCard中，大部分应用时直接在SDCard的根目录创建一个文件夹，将数据直接保存在该文件夹中，当应用被卸载的时候，这些数据还保留在SDCard，留下了垃圾数据</p><p>开发中我们一般都是操作存储空间，Google官方建议我们App的数据应该存在外部存储设备的私有目录中该App包名下，这样当用户卸载App之后，相关数据也会一并删除，如果我们直接在/storage/sdcard目录下创建一个应用的文件夹，那么当删除应用时，该文件夹是不会被删除掉的。</p><h1 id="大招"><a href="#大招" class="headerlink" title="大招"></a>大招</h1><p>说了这么多概念，其实就是想让大家都了解外部存储和内部存储的区别。那么我们怎么才能获取到自己想要的存储路径呢，如下，提供了一些基本常用的方法</p><table><thead><tr><th align="left">方法调用</th><th align="left">路径位置</th></tr></thead><tbody><tr><td align="left">context.getFilesDir()</td><td align="left">外部存储data/data/包名/files目录</td></tr><tr><td align="left">context.getCacheDir()</td><td align="left">外部存储设备data/data/包名/cache目录</td></tr><tr><td align="left">context.getExternalStorageDirectory()</td><td align="left">外部存储设备的根目录</td></tr><tr><td align="left">context.getExternalStoragePublicDirectory</td><td align="left">外部存储设备公有目录 (Environment.DIRECTORY_DCIM)</td></tr><tr><td align="left">context.getExternalFilesDir()</td><td align="left">外部存储私有目录 storage/sdcard/android/data/包名/files</td></tr><tr><td align="left">context.getExternalCacheDir()</td><td align="left">外部存储私有目录 storage/sdcard/android/data/包名/cache</td></tr></tbody></table><p>通过Context.getExternalFilesDir()方法可以获取到SDCard/Android/data包名/files目录，一般存放一些长时间保存的数据</p><p>通过Context.getExternalCacheDir()方法可以获取SDCard/Android/data/包名/chache目录，一般存放一些历史缓存数据</p><p>使用上面的方法，当应用被卸载的时候，SDCard/Android/data/包名/目录 下所有的文件都会被删除，不会留下垃圾信息。这两个部分的内容分别对应设置-&gt;应用-&gt;应用详情里面的  “清除数据”和”清除缓存”</p><p>2021年08月03日20:15:24 更新 </p><p>Android 11 将读取文件外部存储权限设置为</p><h2 id="分享文件到第三方应用打开"><a href="#分享文件到第三方应用打开" class="headerlink" title="分享文件到第三方应用打开"></a>分享文件到第三方应用打开</h2><p>首先肯定是需要获取权限</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_PHONE_STATE&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 外存储写权限，构建语法需要用到此权限 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 外存储读权限，构建语法需要用到此权限 --&gt;</span></span><br></pre></td></tr></table></figure><p>创建一个工具类FileProviderUtils</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> FileProviderUtils &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打开第三方应用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @JvmStatic</span><br><span class="line">    <span class="keyword">fun</span> <span class="keyword">open</span><span class="constructor">File(<span class="params">context</span>: Context, <span class="params">file</span>: File)</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> intent = <span class="constructor">Intent(Intent.ACTION_VIEW)</span></span><br><span class="line">        <span class="keyword">val</span> uri4File = <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt; <span class="number">23</span>) &#123;</span><br><span class="line">            <span class="comment">// 大于23</span></span><br><span class="line">            <span class="keyword">val</span> uri = <span class="module-access"><span class="module"><span class="identifier">FileProvider</span>.</span></span>get<span class="constructor">UriForFile(<span class="params">context</span>, <span class="string">&quot;$&#123;context.packageName&#125;.fileProvider&quot;</span>, <span class="params">file</span>)</span></span><br><span class="line">            intent.add<span class="constructor">Flags(Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION)</span></span><br><span class="line">            uri</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">Uri</span>.</span></span>from<span class="constructor">File(<span class="params">file</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//系统会检查当前所有已创建的Task中是否有该要启动的Activity的Task</span></span><br><span class="line">        intent.add<span class="constructor">Flags(Intent.FLAG_ACTIVITY_NEW_TASK)</span></span><br><span class="line">        intent.add<span class="constructor">Flags(Intent.FLAG_GRANT_READ_URI_PERMISSION <span class="params">or</span> Intent.FLAG_GRANT_WRITE_URI_PERMISSION)</span></span><br><span class="line">        <span class="comment">// 若有，则在该Task上创建Activity；若没有则新建具有该Activity属性的Task，并在该新建的Task上创建Activity。</span></span><br><span class="line">        intent.set<span class="constructor">DataAndType(<span class="params">uri4File</span>, <span class="params">getMimeTypeFromFile</span>(<span class="params">file</span>)</span>)</span><br><span class="line">        context.start<span class="constructor">Activity(<span class="params">intent</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @JvmStatic</span><br><span class="line">    <span class="keyword">fun</span> get<span class="constructor">MimeTypeFromFile(<span class="params">file</span>: File)</span>: String &#123;</span><br><span class="line">        var <span class="keyword">type</span> = <span class="string">&quot;*/*&quot;</span></span><br><span class="line">        <span class="keyword">val</span> fName = file.name</span><br><span class="line">        <span class="comment">//获取后缀名前的分隔符&quot;.&quot;在fName中的位置。</span></span><br><span class="line">        <span class="keyword">val</span> dotIndex = fName.last<span class="constructor">IndexOf(<span class="string">&quot;.&quot;</span>)</span></span><br><span class="line">        <span class="keyword">if</span> (dotIndex &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//获取文件的后缀名</span></span><br><span class="line">            <span class="keyword">val</span> <span class="keyword">end</span> = fName.substring(dotIndex, fName.length).<span class="keyword">to</span><span class="constructor">LowerCase(Locale.<span class="params">getDefault</span>()</span>)</span><br><span class="line">            <span class="comment">//在MIME和文件类型的匹配表中找到对应的MIME类型。</span></span><br><span class="line">            <span class="keyword">val</span> map: HashMap&lt;String, String&gt; = <span class="module-access"><span class="module"><span class="identifier">MyMimeMap</span>.</span></span>mimeMap</span><br><span class="line">            <span class="keyword">if</span> (!<span class="module-access"><span class="module"><span class="identifier">TextUtils</span>.</span></span>is<span class="constructor">Empty(<span class="params">end</span>)</span><span class="operator"> &amp;&amp; </span>map.keys.contains(<span class="keyword">end</span>)) &#123;</span><br><span class="line">                <span class="keyword">type</span> = map<span class="literal">[<span class="identifier">end</span>]</span> ?: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return <span class="keyword">type</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里因为要适配打开不同的应用，所以直接写了一个公共mimeType的工具类</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">object <span class="symbol">MyMimeMap</span> &#123;</span><br><span class="line"></span><br><span class="line">    val mapSimple: <span class="symbol">HashMap</span>&lt;<span class="symbol">String</span>, <span class="symbol">String</span>&gt; = <span class="symbol">HashMap</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 常用&quot;文件扩展名—MIME类型&quot;匹配表。</span></span><br><span class="line"><span class="comment">     * 注意，此表并不全，也并不是唯一的，就像有人喜欢用浏览器打开TXT一样，你可以根据自己的爱好自定义。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    val mimeMap: <span class="symbol">HashMap</span>&lt;<span class="symbol">String</span>, <span class="symbol">String</span>&gt;</span><br><span class="line">        get() &#123;</span><br><span class="line">            if (mapSimple.size === <span class="number">0</span>) &#123;</span><br><span class="line">                mapSimple[<span class="string">&quot;.3gp&quot;</span>] = <span class="string">&quot;video/3gpp&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.apk&quot;</span>] = <span class="string">&quot;application/vnd.android.package-archive&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.asf&quot;</span>] = <span class="string">&quot;video/x-ms-asf&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.avi&quot;</span>] = <span class="string">&quot;video/x-msvideo&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.bin&quot;</span>] = <span class="string">&quot;application/octet-stream&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.bmp&quot;</span>] = <span class="string">&quot;image/bmp&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.c&quot;</span>] = <span class="string">&quot;text/plain&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.chm&quot;</span>] = <span class="string">&quot;application/x-chm&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.class&quot;</span>] = <span class="string">&quot;application/octet-stream&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.conf&quot;</span>] = <span class="string">&quot;text/plain&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.cpp&quot;</span>] = <span class="string">&quot;text/plain&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.doc&quot;</span>] = <span class="string">&quot;application/msword&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.docx&quot;</span>] = <span class="string">&quot;application/msword&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.exe&quot;</span>] = <span class="string">&quot;application/octet-stream&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.gif&quot;</span>] = <span class="string">&quot;image/gif&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.gtar&quot;</span>] = <span class="string">&quot;application/x-gtar&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.gz&quot;</span>] = <span class="string">&quot;application/x-gzip&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.h&quot;</span>] = <span class="string">&quot;text/plain&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.htm&quot;</span>] = <span class="string">&quot;text/html&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.html&quot;</span>] = <span class="string">&quot;text/html&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.jar&quot;</span>] = <span class="string">&quot;application/java-archive&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.java&quot;</span>] = <span class="string">&quot;text/plain&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.jpeg&quot;</span>] = <span class="string">&quot;image/jpeg&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.jpg&quot;</span>] = <span class="string">&quot;image/jpeg&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.js&quot;</span>] = <span class="string">&quot;application/x-javascript&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.log&quot;</span>] = <span class="string">&quot;text/plain&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.m3u&quot;</span>] = <span class="string">&quot;audio/x-mpegurl&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.m4a&quot;</span>] = <span class="string">&quot;audio/mp4a-latm&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.m4b&quot;</span>] = <span class="string">&quot;audio/mp4a-latm&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.m4p&quot;</span>] = <span class="string">&quot;audio/mp4a-latm&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.m4u&quot;</span>] = <span class="string">&quot;video/vnd.mpegurl&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.m4v&quot;</span>] = <span class="string">&quot;video/x-m4v&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.mov&quot;</span>] = <span class="string">&quot;video/quicktime&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.mp2&quot;</span>] = <span class="string">&quot;audio/x-mpeg&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.mp3&quot;</span>] = <span class="string">&quot;audio/x-mpeg&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.mp4&quot;</span>] = <span class="string">&quot;video/mp4&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.mpc&quot;</span>] = <span class="string">&quot;application/vnd.mpohun.certificate&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.mpe&quot;</span>] = <span class="string">&quot;video/mpeg&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.mpeg&quot;</span>] = <span class="string">&quot;video/mpeg&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.mpg&quot;</span>] = <span class="string">&quot;video/mpeg&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.mpg4&quot;</span>] = <span class="string">&quot;video/mp4&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.mpga&quot;</span>] = <span class="string">&quot;audio/mpeg&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.msg&quot;</span>] = <span class="string">&quot;application/vnd.ms-outlook&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.ogg&quot;</span>] = <span class="string">&quot;audio/ogg&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.pdf&quot;</span>] = <span class="string">&quot;application/pdf&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.png&quot;</span>] = <span class="string">&quot;image/png&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.pps&quot;</span>] = <span class="string">&quot;application/vnd.ms-powerpoint&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.ppt&quot;</span>] = <span class="string">&quot;application/vnd.ms-powerpoint&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.pptx&quot;</span>] = <span class="string">&quot;application/vnd.ms-powerpoint&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.prop&quot;</span>] = <span class="string">&quot;text/plain&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.rar&quot;</span>] = <span class="string">&quot;application/x-rar-compressed&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.rc&quot;</span>] = <span class="string">&quot;text/plain&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.rmvb&quot;</span>] = <span class="string">&quot;audio/x-pn-realaudio&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.rtf&quot;</span>] = <span class="string">&quot;application/rtf&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.sh&quot;</span>] = <span class="string">&quot;text/plain&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.tar&quot;</span>] = <span class="string">&quot;application/x-tar&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.tgz&quot;</span>] = <span class="string">&quot;application/x-compressed&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.txt&quot;</span>] = <span class="string">&quot;text/plain&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.wav&quot;</span>] = <span class="string">&quot;audio/x-wav&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.wma&quot;</span>] = <span class="string">&quot;audio/x-ms-wma&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.wmv&quot;</span>] = <span class="string">&quot;audio/x-ms-wmv&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.wps&quot;</span>] = <span class="string">&quot;application/vnd.ms-works&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.xml&quot;</span>] = <span class="string">&quot;text/plain&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.xls&quot;</span>] = <span class="string">&quot;application/vnd.ms-excel&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.xlsx&quot;</span>] = <span class="string">&quot;application/vnd.ms-excel&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.z&quot;</span>] = <span class="string">&quot;application/x-compress&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;.zip&quot;</span>] = <span class="string">&quot;application/zip&quot;</span></span><br><span class="line">                mapSimple[<span class="string">&quot;&quot;</span>] = <span class="string">&quot;*/*&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            return mapSimple</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用方法的时候直接传入文件的绝对路径即可。除了上面的配置之外，还需要在清单配置文件中设置FileProvier</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">provider</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">android:name</span>=<span class="string">&quot;androidx.core.content.FileProvider&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">android:authorities</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;applicationId&#125;</span><span class="xml"><span class="tag"><span class="string">.fileProvider&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">android:exported</span>=<span class="string">&quot;false&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">android:grantUriPermissions</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">meta-data</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">android:name</span>=<span class="string">&quot;android.support.FILE_PROVIDER_PATHS&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">android:resource</span>=<span class="string">&quot;@xml/file_paths&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这里我们配置了一下file_paths，在file_paths中设置数据的路径位置，在res资源文件夹下新建xml文件夹，并创建file_paths.xml文件</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;paths&gt;</span><br><span class="line">    &lt;root-<span class="built_in">path</span></span><br><span class="line">        <span class="keyword">name</span>=<span class="string">&quot;root_path&quot;</span></span><br><span class="line">        <span class="built_in">path</span>=<span class="string">&quot;&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;files-<span class="built_in">path</span></span><br><span class="line">        <span class="keyword">name</span>=<span class="string">&quot;files_path&quot;</span></span><br><span class="line">        <span class="built_in">path</span>=<span class="string">&quot;.&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;cache-<span class="built_in">path</span></span><br><span class="line">        <span class="keyword">name</span>=<span class="string">&quot;cache_path&quot;</span></span><br><span class="line">        <span class="built_in">path</span>=<span class="string">&quot;.&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;external-<span class="built_in">path</span></span><br><span class="line">        <span class="keyword">name</span>=<span class="string">&quot;external_path&quot;</span></span><br><span class="line">        <span class="built_in">path</span>=<span class="string">&quot;.&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;external-<span class="built_in">path</span></span><br><span class="line">        <span class="keyword">name</span>=<span class="string">&quot;wrong_question&quot;</span></span><br><span class="line">        <span class="built_in">path</span>=<span class="string">&quot;xizhi_wrong_question_files&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;external-files-<span class="built_in">path</span></span><br><span class="line">        <span class="keyword">name</span>=<span class="string">&quot;external_files_path&quot;</span></span><br><span class="line">        <span class="built_in">path</span>=<span class="string">&quot;.&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;external-cache-<span class="built_in">path</span></span><br><span class="line">        <span class="keyword">name</span>=<span class="string">&quot;external_cache_path&quot;</span></span><br><span class="line">        <span class="built_in">path</span>=<span class="string">&quot;.&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;external-media-<span class="built_in">path</span></span><br><span class="line">        <span class="keyword">name</span>=<span class="string">&quot;external_media_path&quot;</span></span><br><span class="line">        <span class="built_in">path</span>=<span class="string">&quot;.&quot;</span> /&gt;</span><br><span class="line">&lt;/paths&gt;</span><br></pre></td></tr></table></figure><p>这里不同的标签代表不同的存储路径</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://developer.android.google.cn/about/versions/11/privacy/storage">Android11存储机制更新</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在Android开发中我们经常会听到这几个概念，内存，外部存储，内部存储，很多时候我们常常把这个概念弄混淆，所以这篇博客就在这里做一下总结&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>android奇技淫巧 12 Android布局优化 include+merge+viewStub</title>
    <link href="http://www.paulniu.com/2019/08/13/android-tools-12/"/>
    <id>http://www.paulniu.com/2019/08/13/android-tools-12/</id>
    <published>2019-08-13T06:34:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>在编写Android布局时总会遇到这样那样的痛点，如下：</p><span id="more"></span><ol><li>有些布局在很多页面都会用到，而且样式都一样，每次都要复制粘贴大量的代码</li><li>在解决1中的问题之后，发现复用的布局外面总是要额外的再套上一层布局，要知道布局嵌套会影响性能</li><li>有些布局只有用到的时候才会显示，但是又必须提前写好，虽然设置了invisible或者gone，但是多多少少会占有内存</li></ol><p>要解决这些痛点，我们可以使用include，merge和ViewStub三个标签，先来看一下实现的效果<br><img src="/assets/tools/tools-merge-01.png" alt="布局优化实现效果"></p><h2 id="include"><a href="#include" class="headerlink" title="include"></a>include</h2><p>当我们在一个主页面中使用include标签是，会表示当前的主布局包含标签中的布局，这样一来，就能很好的起到复用布局的效果，在那些常用的布局比如标题栏或者分割线等上面使用它可以减少大量代码<br>主要属性有两个最重要的</p><ol><li>layout:必填属性，为我们需要插入当前主布局的不具名称，通过R.layout.xx的方式引入</li><li>id：当我们想通过include添加进来的布局设置id的时候，可以使用该属性，他可以重写插入主布局的布局id</li></ol><h3 id="常规使用"><a href="#常规使用" class="headerlink" title="常规使用"></a>常规使用</h3><p>我们先创建一个ViewOptimizationActivity，然后再创建一个layout_include.xml布局文件，它的内容非常简单，就一个TextView</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:gravity</span>=<span class="string">&quot;center_vertical&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:textSize</span>=<span class="string">&quot;14sp&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:background</span>=<span class="string">&quot;@android:color/holo_red_light&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_height</span>=<span class="string">&quot;40dp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在我们就用include标签，将其添加到ViewOptimizationActivity的布局中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">tools:context</span>=<span class="string">&quot;.ViewOptimizationActivity&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--include标签的使用--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:text</span>=<span class="string">&quot;1、include标签的使用&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">include</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_include1&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">layout</span>=<span class="string">&quot;@layout/layout_include&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样我们就将include试用完了，只需要知名包含布局的id即可。除此之外，我们还给这个include标签设置了一个id，为了验证它就是layout_include.xml的根布局TextView的id，我们可以在ViewOptiomizationActivity中初始化TextView，并给他设置文字</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TextView tvInClude1 = find<span class="constructor">ViewById(R.<span class="params">id</span>.<span class="params">tv_include1</span>)</span>;</span><br><span class="line">tvInclude1 = set<span class="constructor">Text(<span class="string">&quot;常规下的include布局&quot;</span>)</span></span><br></pre></td></tr></table></figure><p>这样只要能显示相应的代码，就表示我们设置的layout和id是成功的。不过你可能会对这个id属性有疑问：id我们直接在TextView中设置，为什么还要重写他呢？别忘了，我们的作用是复用，那么如果我们在一个主布局中添加了两个include标签，添加两个以上的相同布局，id相同则会造成冲突，所以重写他可以让我们更好的调用它和它里面的空间，还有一种情况，假如你的主布局是RelateLayout，这是为了设置相对位置，我们也需要设置不同的id</p><h3 id="重写根布局的布局属性"><a href="#重写根布局的布局属性" class="headerlink" title="重写根布局的布局属性"></a>重写根布局的布局属性</h3><p>除了id之外，我们还可以重写宽高，边距和可见性这些布局属性。但是我们一定要注意，单单重写android:layout_height或者android:layout_width是不行的，必须两个同时重写才能起作用，包括边距也是这样。如果我们想要给一个include进来的布局添加右边距，完整的写法如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;include</span><br><span class="line">  andorid:<span class="attribute">layout_width</span>=<span class="string">&quot;math_parent&quot;</span></span><br><span class="line">  android:<span class="attribute">layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">  android:<span class="attribute">layout_marginEnd</span>=<span class="string">&quot;40dp&quot;</span></span><br><span class="line">  android:<span class="attribute">id</span>=<span class="string">&quot;@+id/tv_include2&quot;</span></span><br><span class="line">  <span class="attribute">layout</span>=<span class="string">&quot;@layout/layout_include&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><h3 id="空间ID相同时处理"><a href="#空间ID相同时处理" class="headerlink" title="空间ID相同时处理"></a>空间ID相同时处理</h3><p>在”常规使用”中我们知道id的属性可以重写include布局的根布局id，但对于根布局里面的布局和空间是无能为力的。如果这是一个布局中在主布局中多次include布局，怎么才能区分里面的子控件呢？</p><p>我们首先创建一个layout_include2.xml的布局，他的根布局时FrameLayout，里面有一个TextView，他的id是tv_same:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:background</span>=<span class="string">&quot;@android:color/holo_orange_light&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:gravity</span>=<span class="string">&quot;center_vertical&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_same&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_height</span>=<span class="string">&quot;50dp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在主布局中添加进去：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">tools:context</span>=<span class="string">&quot;.ViewOptimizationActivity&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--include标签的使用--&gt;</span></span><br><span class="line"> ……</span><br><span class="line"> <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">&quot;@layout/layout_include2&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">include</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:id</span>=<span class="string">&quot;@+id/view_same&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">layout</span>=<span class="string">&quot;@layout/layout_include2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为了区分，这里给第二个layout_include2设置了id，这就是我们要创建根布局的对象，然后再去初始化里面的控件</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是默认的第一个include的中的TextView</span></span><br><span class="line">TextView tvSame = find<span class="constructor">ViewById(R.<span class="params">id</span>.<span class="params">tv_same</span>)</span>;</span><br><span class="line"><span class="comment">// 这是id=view_same的include中的TextView</span></span><br><span class="line">FrameLayout viewSame = find<span class="constructor">ViewById(R.<span class="params">id</span>.<span class="params">view_same</span>)</span>;</span><br><span class="line">TextView tvSame2 = viewSame.find<span class="constructor">ViewById(R.<span class="params">id</span>.<span class="params">view_same</span>)</span>;</span><br></pre></td></tr></table></figure><h1 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h1><p>include标签虽然能够解决布局重用的问题，但是也会带来另一个问题：布局嵌套。因为把需要重用的布局放在一个自布局之后，就必须加上一个根布局，如果我们的主布局的根布局和我们需要include的根布局都一样，那么相当于在中间添加了一层多余的布局，这样会造成我们的布局嵌套越来越多。</p><p>使用merge标签要注意一点：必须是一个布局文件中的根节点。看起来和其他布局并没有什么两样，但是他的特别之处在于页面加载时他不会被绘制。如：它就像是布局或者控件的搬运工，把“货物”搬到主布局之后就会功成身退，不会占用任何空间，因此也就不会增加布局层级了。这正如它的名字一样，只起“合并”作用</p><h3 id="常规使用-1"><a href="#常规使用-1" class="headerlink" title="常规使用"></a>常规使用</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">merge</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_merge1&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:text</span>=<span class="string">&quot;我是merge中的TextView1&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:background</span>=<span class="string">&quot;@android:color/holo_green_light&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_height</span>=<span class="string">&quot;40dp&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_toEndOf</span>=<span class="string">&quot;@+id/tv_merge1&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_merge2&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:text</span>=<span class="string">&quot;我是merge中的TextView2&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:background</span>=<span class="string">&quot;@android:color/holo_blue_light&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_height</span>=<span class="string">&quot;40dp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">merge</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里我使用了一些相对布局的属性，原因后面你就知道了。我们接着在ViewOptimizationActivity的布局添加RelativeLayout，然后使用include标签将layout_merge.xml添加进去：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:id</span>=<span class="string">&quot;@+id/view_merge&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">layout</span>=<span class="string">&quot;@layout/layout_merge&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="merge标签对布局层级的影响"><a href="#merge标签对布局层级的影响" class="headerlink" title="merge标签对布局层级的影响"></a>merge标签对布局层级的影响</h3><p> 在layout_merge.xml中，我们使用相对布局的属性android:layout_toEndOf将蓝色TextView设置到绿色TextView的右边，而layout_merge.xml的父布局是RelativeLayout，所以这个属性是起了作用，merge标签不会影响里面的空间，也不会增加布局层级</p><h3 id="merge的ID"><a href="#merge的ID" class="headerlink" title="merge的ID"></a>merge的ID</h3><p> 在学习include标签时我们知道，它的android:id属性可以重写被include的根布局id，但如果根节点是merge呢？前面说了merge并不会作为一个布局绘制出来，所以这里给它设置id是不起作用的。我们可以在它的父布局RelativeLayout中再加一个TextView，使用android:layout_below属性把设置到layout_merge下面:</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">include</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:id</span>=<span class="string">&quot;@+id/view_merge&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">layout</span>=<span class="string">&quot;@layout/layout_merge&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:text</span>=<span class="string">&quot;我不是merge中的布局&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_below</span>=<span class="string">&quot;@+id/view_merge&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:background</span>=<span class="string">&quot;@android:color/holo_purple&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_height</span>=<span class="string">&quot;40dp&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 运行之后你会发现新加的TextView会把merge布局盖住，没有像预期那样在其下方。如果把android:layout_below中的id改为layout_merge.xml中任一TextView的id（比如tv_merge1）</p><h1 id="ViewStub"><a href="#ViewStub" class="headerlink" title="ViewStub"></a>ViewStub</h1><p> 在开发过程中我们会遇到这样的问题，页面中有些布局在初始化的时候，没有必要显示，但又不得不事先在布局文件中写好，虽然设置成了invisible或者gone，但在初始化的时候还是会加载，这样无疑会影响加载速度。针对这样的情况，Android为我们提供了一个利器–ViewStub。这是一个不可见，大小为0的视图，具有懒加载功能。它存在于视图层级中，到那时会在setVisibility()和inflate()方法调用才会填充视图，所以不会影响初始化加载速度，他有三个重要属性</p><ol><li>android:layout  ViewStub需要填充视图名称，为R.layout.xx的形式</li><li>android:inflated    重写被填充的视图的父布局id</li></ol><p> 与include标签不同，ViewStub的android:id属性是设置ViewStub本身的id，而不是重写布局的id，这一点不能搞错。另外ViewStub还提供了OnInflateListener接口用于监听布局是否已经加载</p><h3 id="填充布局的正确方式"><a href="#填充布局的正确方式" class="headerlink" title="填充布局的正确方式"></a>填充布局的正确方式</h3><p> 这里我们创建一个layout_view_stub.xml，里面放置一个Switch开关</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:background</span>=<span class="string">&quot;@android:color/holo_blue_dark&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_height</span>=<span class="string">&quot;100dp&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">Switch</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:id</span>=<span class="string">&quot;@+id/sw&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在Activity的布局中修改如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">tools:context</span>=<span class="string">&quot;.ViewOptimizationActivity&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--ViewStub标签的使用--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:text</span>=<span class="string">&quot;3、ViewStub标签的使用&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ViewStub</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:id</span>=<span class="string">&quot;@+id/view_stub&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:inflatedId</span>=<span class="string">&quot;@+id/view_inflate&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout</span>=<span class="string">&quot;@layout/layout_view_stub&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_height</span>=<span class="string">&quot;100dp&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:text</span>=<span class="string">&quot;显示&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn_show&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:text</span>=<span class="string">&quot;隐藏&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn_hide&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:text</span>=<span class="string">&quot;操作父布局控件&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn_control&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在ViewOptimizationActivity中监听ViewStub的填充事件</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">viewStub.set<span class="constructor">OnInflateListener(<span class="params">new</span> ViewStub.OnInflateListener()</span>&#123;</span><br><span class="line">  @Override</span><br><span class="line">  public void on<span class="constructor">Inflate(ViewStb <span class="params">viewStub</span>,View <span class="params">view</span>)</span>&#123;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">Toast</span>.</span></span>make<span class="constructor">Text(ViewOptimizationActivity.<span class="params">this</span>,<span class="string">&quot;viewStub加载了&quot;</span>,Toast.LENGTH_SHORT)</span>.show<span class="literal">()</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然后通过按钮事件来填充和显示layout_view_stub:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">onClick</span>(<span class="params">View view</span>)</span> &#123;</span><br><span class="line"> <span class="keyword">switch</span> (view.getId()) &#123;</span><br><span class="line"> <span class="keyword">case</span> R.id.btn_show:</span><br><span class="line"> viewStub.inflate();</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> R.id.btn_hide:</span><br><span class="line"> viewStub.setVisibility(View.GONE);</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">default</span>:</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>运行之后，点击“显示”按钮，layout_view_stub显示了，并弹出”ViewStub加载了”的Toast；点击“隐藏”按钮，布局又隐藏掉了，但是再点击一下“显示”按钮，页面居然却闪退了，查看日志，发现抛出了一个异常：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java<span class="selector-class">.lang</span><span class="selector-class">.IllegalStateException</span>: ViewStub must have <span class="selector-tag">a</span> non-null ViewGroup viewParent</span><br></pre></td></tr></table></figure><p>我们打开ViewStub的源码，看看是在哪里抛出的异常</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function">View <span class="title">inflate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">final</span> ViewParent viewParent = getParent();</span><br><span class="line"> <span class="keyword">if</span> (viewParent != <span class="keyword">null</span> &amp;&amp; viewParent <span class="keyword">instanceof</span> ViewGroup) &#123;</span><br><span class="line"> <span class="keyword">if</span> (mLayoutResource != <span class="number">0</span>) &#123;</span><br><span class="line"> <span class="keyword">final</span> ViewGroup parent = (ViewGroup) viewParent;</span><br><span class="line"> <span class="keyword">final</span> View view = inflateViewNoAdd(parent);</span><br><span class="line"> replaceSelfWithView(view, parent);</span><br><span class="line"> mInflatedViewRef = <span class="keyword">new</span> WeakReference&lt;&gt;(view);</span><br><span class="line"> <span class="keyword">if</span> (mInflateListener != <span class="keyword">null</span>) &#123;</span><br><span class="line"> mInflateListener.onInflate(<span class="keyword">this</span>, view);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> view;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;ViewStub must have a valid layoutResource&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;ViewStub must have a non-null ViewGroup viewParent&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>注意到if语句中有一个replaceSelfWithView()方法，听这名字就让人有一种不祥的预感了，点进去一看：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> void replace<span class="constructor">SelfWithView(View <span class="params">view</span>, ViewGroup <span class="params">parent</span>)</span> &#123;</span><br><span class="line"> final <span class="built_in">int</span> index = parent.index<span class="constructor">OfChild(<span class="params">this</span>)</span>;</span><br><span class="line"> parent.remove<span class="constructor">ViewInLayout(<span class="params">this</span>)</span>;</span><br><span class="line"> final ViewGroup.LayoutParams layoutParams = get<span class="constructor">LayoutParams()</span>;</span><br><span class="line"> <span class="keyword">if</span> (layoutParams != null) &#123;</span><br><span class="line"> parent.add<span class="constructor">View(<span class="params">view</span>, <span class="params">index</span>, <span class="params">layoutParams</span>)</span>;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> parent.add<span class="constructor">View(<span class="params">view</span>, <span class="params">index</span>)</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>果然，ViewStub在这里调用了removeViewInLayout()方法把自己从布局移除了。到这里我们就明白了，ViewStub在填充布局成功之后就会自我销毁，再次调用inflate()方法就会抛出IllegalStateException异常了。此时如果想要再次显示布局，可以调用setVisibility()方法。</p><p>为了避免inflate()方法多次调用，我们可以采用如下三种方式</p><h4 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h4><p>我们可以通过捕获异常，同时调用setVisibility()方法显示布局</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"> viewStub.inflate<span class="literal">()</span>;</span><br><span class="line"> &#125; catch (IllegalStateException e) &#123;</span><br><span class="line"> <span class="module-access"><span class="module"><span class="identifier">Log</span>.</span></span>e(<span class="string">&quot;Tag&quot;</span>,e.<span class="keyword">to</span><span class="constructor">String()</span>);</span><br><span class="line"> view.set<span class="constructor">Visibility(View.VISIBLE)</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="通过监听ViewStub的填充事件"><a href="#通过监听ViewStub的填充事件" class="headerlink" title="通过监听ViewStub的填充事件"></a>通过监听ViewStub的填充事件</h4><p>声明一个布尔值变量isViewStubShow,默认值是false，布局填充成功之后，在监听事件onInflate方法中将其设置为true</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">if</span> (isViewStubShow)&#123;</span><br><span class="line"> <span class="selector-tag">viewStub</span><span class="selector-class">.setVisibility</span>(View.VISIBLE);</span><br><span class="line"> &#125;<span class="selector-tag">else</span> &#123;</span><br><span class="line"> <span class="selector-tag">viewStub</span><span class="selector-class">.inflate</span>();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="直接调用setVisibility-方法"><a href="#直接调用setVisibility-方法" class="headerlink" title="直接调用setVisibility()方法"></a>直接调用setVisibility()方法</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="type">void</span> setVisibility(<span class="type">int</span> visibility) &#123;</span><br><span class="line"> <span class="keyword">if</span> (mInflatedViewRef != <span class="keyword">null</span>) &#123;</span><br><span class="line"> <span class="keyword">View</span> <span class="keyword">view</span> = mInflatedViewRef.<span class="keyword">get</span>();</span><br><span class="line"> <span class="keyword">if</span> (<span class="keyword">view</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line"> <span class="keyword">view</span>.setVisibility(visibility);</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> throw <span class="built_in">new</span> IllegalStateException(&quot;setVisibility called on un-referenced view&quot;);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> super.setVisibility(visibility);</span><br><span class="line"> <span class="keyword">if</span> (visibility == VISIBLE || visibility == INVISIBLE) &#123;</span><br><span class="line"> inflate();</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这里我们可以看到，在inflate()初始化mInflatedVIewRef之前，如果设置visibility为VISIBLE的话，是会调用inflate()方法的，在mInflatedViewRef不为null之后就不会再去调用inflate()了</p><h3 id="viewStub-getVisibility-为什么一直为0"><a href="#viewStub-getVisibility-为什么一直为0" class="headerlink" title="viewStub.getVisibility()为什么一直为0"></a>viewStub.getVisibility()为什么一直为0</h3><p>在显示ViewStub中的布局时，我们可能会采用如下的方法</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(viewStub.getVisibility() == <span class="keyword">View</span>.GONE)&#123;</span><br><span class="line">  viewStub.setVisibility(<span class="keyword">View</span>.VISIBLE)<span class="comment">;</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  viewStub.setVisibility(<span class="keyword">View</span>.GONE)<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这真的是是一个大坑。这样写你会发现点击“显示”按钮后ViewStub里面的布局不会再显示出来，也就是说if语句里面的代码没有执行。如果你将viewStub.getVisibility()的值打印出来，就会看到它始终为0，这恰恰是View.VISIBLE的值。奇怪，我们明明写了viewStub.setVisibility(View.GONE)，layout_view_stub也隐藏了，为什么ViewStub的状态还是可见呢？</p><p>重新回到”直接调用setVisibility()方法”中，看看ViewStub中的setVisibility()源码，首先判断弱引用对象mInflatedViewRef是否为空，不为空则取出存放进去的对象，也就是我们ViewStub中的View，然后调用了view的setVisibility()方法，mInflatedViewRef为空时，则判断visibility为VISIBLE或INVISIBLE时调用inflate()方法填充布局，如果为GONE的话则不予处理。这样一来，在mInflatedViewRef不为空，也就是已经填充了布局的情况下，ViewStub中的setVisibility()方法实际上是在设置内部视图的可见性，而不是ViewStub本身。这样的设计其实也符合ViewStub的特性，即填充布局之后就自我销毁了，给其设置可见性是没有意义的</p><h3 id="操作布局控件"><a href="#操作布局控件" class="headerlink" title="操作布局控件"></a>操作布局控件</h3><p>其实我们可以这样认为，ViewStub就是一个懒惰的include，我们需要他加载时才会加载，要操作布局里面的控件也跟include一样，我们可以先初始化ViewStub中的布局，然后在初始化控件</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 初始化inflate的布局后在初始化其中的控件</span></span><br><span class="line">FrameLayout frameLayout = find<span class="constructor">ViewById(R.<span class="params">id</span>.<span class="params">view_inflate</span>)</span>;<span class="comment">// android:inflatedId设置id</span></span><br><span class="line">switch sw = frameLayout.find<span class="constructor">ViewById(R.<span class="params">id</span>.<span class="params">sw</span>)</span>;</span><br><span class="line">sw.toggle<span class="literal">()</span>;</span><br></pre></td></tr></table></figure><p>如果主布局中控件id没有冲突，可以直接初始化控件即可</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. 直接初始化控件</span></span><br><span class="line">Switch sw = find<span class="constructor">ViewById(R.<span class="params">id</span>.<span class="params">sw</span>)</span>;</span><br><span class="line">sw.toggle<span class="literal">()</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在编写Android布局时总会遇到这样那样的痛点，如下：&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>android 音视频开发(五)</title>
    <link href="http://www.paulniu.com/2019/08/12/android-media-05/"/>
    <id>http://www.paulniu.com/2019/08/12/android-media-05/</id>
    <published>2019-08-12T10:50:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>学习Android平台的MediaExtractor和MediaMuxer API，知道如何解析和封装mp4文件</p><span id="more"></span><h1 id="MediaExtractor-API"><a href="#MediaExtractor-API" class="headerlink" title="MediaExtractor API"></a>MediaExtractor API</h1><p>作用：可以把音视频文件的音频和视频分离，并且抽取相应的数据通道，然后进行操作</p><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><ol><li>先要知道针对的哪个文件进行操作，所以我们需要使用setDataSource(String filePath)设置目标文件</li><li>然后需要知道这个文件所有的通道数，我们可以通过getTrackCount()得到，然后通过遍历，得到需要的通道 int  pipe</li><li>根据得到的通道，用getTrackFirmat(int pipe)得到这个通道的数据格式(MediaFormat mediaformat)</li><li>然后把MediaExtractor对准这个通道，使用selectTrack(int pipe)读取数据</li><li>用readSampleData(ByteBuffer byteBuffer,int offset)把指定通道中的数据按偏移量读取到byteBuffer中，注意，此处只是一帧的数据</li><li>有了这个byteBuffer数据，之后的是直接交给MediaMuxer执行操作这一帧，之后调用adVance()获取下一帧，重复第5,6步的操作</li><li>操作完成之后释放release()</li></ol><h3 id="主要的API介绍"><a href="#主要的API介绍" class="headerlink" title="主要的API介绍"></a>主要的API介绍</h3><ol><li>setDataSource(String path)  可以设置本地文件又可以设置为网络文件</li><li>getTrackCount()             得到源文件的通道数</li><li>getTrackFormat(int index)   获取指定(index)的通道格式</li><li>getSampleTime()             返回当前的时间戳</li><li>readSampleData(ByteBuffer byteBuf,int offset)    把指定通道中的数据偏移量读取到ByteBuffer中</li><li>advance()                   读取下一帧数据</li><li>release()                   读取结束后释放资源</li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">MediaExtractor extractor = <span class="keyword">new</span> <span class="constructor">MediaExtractor()</span>;</span><br><span class="line"> extractor.set<span class="constructor">DataSource(<span class="operator">...</span>)</span>;</span><br><span class="line"> <span class="built_in">int</span> numTracks = extractor.get<span class="constructor">TrackCount()</span>;</span><br><span class="line"> <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; numTracks; ++i) &#123;</span><br><span class="line">   MediaFormat format = extractor.get<span class="constructor">TrackFormat(<span class="params">i</span>)</span>;</span><br><span class="line">   String mime = format.get<span class="constructor">String(MediaFormat.KEY_MIME)</span>;</span><br><span class="line">   <span class="keyword">if</span> (weAreInterestedInThisTrack) &#123;</span><br><span class="line">     extractor.select<span class="constructor">Track(<span class="params">i</span>)</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> ByteBuffer inputBuffer = <span class="module-access"><span class="module"><span class="identifier">ByteBuffer</span>.</span></span>allocate(...)</span><br><span class="line"> <span class="keyword">while</span> (extractor.read<span class="constructor">SampleData(<span class="params">inputBuffer</span>, <span class="operator">...</span>)</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">   <span class="built_in">int</span> trackIndex = extractor.get<span class="constructor">SampleTrackIndex()</span>;</span><br><span class="line">   long presentationTimeUs = extractor.get<span class="constructor">SampleTime()</span>;<span class="operator"></span></span><br><span class="line"><span class="operator">   ...</span></span><br><span class="line"><span class="operator">   </span>extractor.advance<span class="literal">()</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> extractor.release<span class="literal">()</span>;</span><br><span class="line"> extractor = null;</span><br></pre></td></tr></table></figure><h1 id="MediaMuxer-API"><a href="#MediaMuxer-API" class="headerlink" title="MediaMuxer API"></a>MediaMuxer API</h1><p>作用：生成一个音频或者视频文件，还可以吧音频和视频混合成一个音视频文件</p><h3 id="如何使用-1"><a href="#如何使用-1" class="headerlink" title="如何使用"></a>如何使用</h3><ol><li>因为生成一个文件，所以构造一个MediaMuxer的时候需要传入文件的路径，和文件的格式，如：new MediaMuxer(String filePath,int format);其中格式一般为MediaMuxer.OutputFormat.MUXER_OUTPUT_MPEG_4</li><li>然后添加通道，记录一个数据通道的格式(MediaExtracktor第3步)addTrack(MediaFormat format)并且会得到一个trackIndex之后用这个判断使用哪个通过到写入数据</li><li>start():开始合成文件</li><li>每当MediaExtracktor的第5步之后，用writeSampleData(int trackIndex,ByteBuffer byteBuf,MediaCodec.BufferInfo bufferInfo):把ByteBuffer中的数据写入之前设置的文件中</li><li>数据写入完成，stop():停止合成文件  release()释放资源</li></ol><h3 id="主要API介绍"><a href="#主要API介绍" class="headerlink" title="主要API介绍"></a>主要API介绍</h3><ol><li>MediaMuxer(String path, int format)：path:输出文件的名称  format:输出文件的格式；当前只支持MP4格式；</li><li>addTrack(MediaFormat format)：添加通道；我们更多的是使用MediaCodec.getOutpurForma()或Extractor.getTrackFormat(int index)来获取MediaFormat;也可以自己创建；</li><li>start()：开始合成文件</li><li>writeSampleData(int trackIndex, ByteBuffer byteBuf, MediaCodec.BufferInfo bufferInfo)：把ByteBuffer中的数据写入到在构造器设置的文件中；</li><li>stop()：停止合成文件</li><li>release()：释放资源</li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">MediaMuxer muxer = <span class="keyword">new</span> <span class="constructor">MediaMuxer(<span class="string">&quot;temp.mp4&quot;</span>, OutputFormat.MUXER_OUTPUT_MPEG_4)</span>;</span><br><span class="line"> <span class="comment">// More often, the MediaFormat will be retrieved from MediaCodec.getOutputFormat()</span></span><br><span class="line"> <span class="comment">// or MediaExtractor.getTrackFormat().</span></span><br><span class="line"> MediaFormat audioFormat = <span class="keyword">new</span> <span class="constructor">MediaFormat(<span class="operator">...</span>)</span>;</span><br><span class="line"> MediaFormat videoFormat = <span class="keyword">new</span> <span class="constructor">MediaFormat(<span class="operator">...</span>)</span>;</span><br><span class="line"> <span class="built_in">int</span> audioTrackIndex = muxer.add<span class="constructor">Track(<span class="params">audioFormat</span>)</span>;</span><br><span class="line"> <span class="built_in">int</span> videoTrackIndex = muxer.add<span class="constructor">Track(<span class="params">videoFormat</span>)</span>;</span><br><span class="line"> ByteBuffer inputBuffer = <span class="module-access"><span class="module"><span class="identifier">ByteBuffer</span>.</span></span>allocate(bufferSize);</span><br><span class="line"> boolean finished = <span class="literal">false</span>;</span><br><span class="line"> BufferInfo bufferInfo = <span class="keyword">new</span> <span class="constructor">BufferInfo()</span>;</span><br><span class="line"></span><br><span class="line"> muxer.start<span class="literal">()</span>;</span><br><span class="line"> <span class="keyword">while</span>(!finished) &#123;</span><br><span class="line">   <span class="comment">// getInputBuffer() will fill the inputBuffer with one frame of encoded</span></span><br><span class="line">   <span class="comment">// sample from either MediaCodec or MediaExtractor, set isAudioSample to</span></span><br><span class="line">   <span class="comment">// true when the sample is audio data, set up all the fields of bufferInfo,</span></span><br><span class="line">   <span class="comment">// and return true if there are no more samples.</span></span><br><span class="line">   finished = get<span class="constructor">InputBuffer(<span class="params">inputBuffer</span>, <span class="params">isAudioSample</span>, <span class="params">bufferInfo</span>)</span>;</span><br><span class="line">   <span class="keyword">if</span> (!finished) &#123;</span><br><span class="line">     <span class="built_in">int</span> currentTrackIndex = isAudioSample ? audioTrackIndex : videoTrackIndex;</span><br><span class="line">     muxer.write<span class="constructor">SampleData(<span class="params">currentTrackIndex</span>, <span class="params">inputBuffer</span>, <span class="params">bufferInfo</span>)</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"> muxer.stop<span class="literal">()</span>;</span><br><span class="line"> muxer.release<span class="literal">()</span>;</span><br></pre></td></tr></table></figure><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>从MP4文件中提取视频，并生成新的视频文件</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="title">extends</span> <span class="title">AppCompatActivity</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> SDCARD_PATH = Environment.<span class="built_in">getExternalStorageDirectory</span>().<span class="built_in">getPath</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MediaExtractor mMediaExtractor;</span><br><span class="line">    <span class="keyword">private</span> MediaMuxer mMediaMuxer;</span><br><span class="line"></span><br><span class="line">    @<span class="function">Override</span></span><br><span class="line"><span class="function">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        super.<span class="built_in">onCreate</span>(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取权限</span></span><br><span class="line">        <span class="keyword">int</span> checkWriteExternalPermission = ContextCompat.<span class="built_in">checkSelfPermission</span>(<span class="keyword">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE);</span><br><span class="line">        <span class="keyword">int</span> checkReadExternalPermission = ContextCompat.<span class="built_in">checkSelfPermission</span>(<span class="keyword">this</span>, Manifest.permission.READ_EXTERNAL_STORAGE);<span class="keyword">if</span> (checkWriteExternalPermission != PackageManager.PERMISSION_GRANTED ||</span><br><span class="line">                checkReadExternalPermission != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line"></span><br><span class="line">            ActivityCompat.<span class="built_in">requestPermissions</span>(<span class="keyword">this</span>, <span class="keyword">new</span> <span class="keyword">String</span>[]&#123;</span><br><span class="line">                    Manifest.permission.WRITE_EXTERNAL_STORAGE,</span><br><span class="line">                    Manifest.permission.READ_EXTERNAL_STORAGE&#125;, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">setContentView</span>(R.layout.activity_main);</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">Thread</span>(<span class="keyword">new</span> <span class="built_in">Runnable</span>() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">run</span>() &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="built_in">process</span>();</span><br><span class="line">                &#125; <span class="built_in"><span class="keyword">catch</span></span> (Exception e) &#123;</span><br><span class="line">                    e.<span class="built_in">printStackTrace</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).<span class="built_in">start</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">()</span> throws IOException </span>&#123;</span><br><span class="line">        mMediaExtractor = <span class="keyword">new</span> <span class="built_in">MediaExtractor</span>();</span><br><span class="line">        mMediaExtractor.<span class="built_in">setDataSource</span>(SDCARD_PATH + <span class="string">&quot;/ss.mp4&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> mVideoTrackIndex = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> framerate = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mMediaExtractor.<span class="built_in">getTrackCount</span>(); i++) &#123;</span><br><span class="line">            MediaFormat format = mMediaExtractor.<span class="built_in">getTrackFormat</span>(i);</span><br><span class="line">            <span class="keyword">String</span> mime = format.<span class="built_in">getString</span>(MediaFormat.KEY_MIME);</span><br><span class="line">            <span class="keyword">if</span> (!mime.<span class="built_in">startsWith</span>(<span class="string">&quot;video/&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            framerate = format.<span class="built_in">getInteger</span>(MediaFormat.KEY_FRAME_RATE);</span><br><span class="line">            mMediaExtractor.<span class="built_in">selectTrack</span>(i);</span><br><span class="line">            mMediaMuxer = <span class="keyword">new</span> <span class="built_in">MediaMuxer</span>(SDCARD_PATH + <span class="string">&quot;/ouput.mp4&quot;</span>, MediaMuxer.OutputFormat.MUXER_OUTPUT_MPEG_4);</span><br><span class="line">            mVideoTrackIndex = mMediaMuxer.<span class="built_in">addTrack</span>(format);</span><br><span class="line">            mMediaMuxer.<span class="built_in">start</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mMediaMuxer == null) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        MediaCodec.BufferInfo info = <span class="keyword">new</span> MediaCodec.<span class="built_in">BufferInfo</span>();</span><br><span class="line">        info.presentationTimeUs = <span class="number">0</span>;</span><br><span class="line">        ByteBuffer buffer = ByteBuffer.<span class="built_in">allocate</span>(<span class="number">500</span> * <span class="number">1024</span>);</span><br><span class="line">        <span class="keyword">int</span> sampleSize = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((sampleSize = mMediaExtractor.<span class="built_in">readSampleData</span>(buffer, <span class="number">0</span>)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">            info.offset = <span class="number">0</span>;</span><br><span class="line">            info.size = sampleSize;</span><br><span class="line">            info.flags = MediaCodec.BUFFER_FLAG_SYNC_FRAME;</span><br><span class="line">            info.presentationTimeUs += <span class="number">1000</span> * <span class="number">1000</span> / framerate;</span><br><span class="line">            mMediaMuxer.<span class="built_in">writeSampleData</span>(mVideoTrackIndex, buffer, info);</span><br><span class="line">            mMediaExtractor.<span class="built_in">advance</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mMediaExtractor.<span class="built_in">release</span>();</span><br><span class="line"></span><br><span class="line">        mMediaMuxer.<span class="built_in">stop</span>();</span><br><span class="line">        mMediaMuxer.<span class="built_in">release</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.cnblogs.com/renhui/p/7474096.html">Android 音视频开发(五)：使用 MediaExtractor 和 MediaMuxer API 解析和封装 mp4 文件</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;学习Android平台的MediaExtractor和MediaMuxer API，知道如何解析和封装mp4文件&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
    <category term="音视频" scheme="http://www.paulniu.com/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>拥抱Python（十三） 函数</title>
    <link href="http://www.paulniu.com/2019/08/09/python-13/"/>
    <id>http://www.paulniu.com/2019/08/09/python-13/</id>
    <published>2019-08-09T13:51:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>函数</p><span id="more"></span><p>函数是组织好的，可以重复使用的，用来实现歹意，或者相关联功能的代码段<br>函数能提高应用的模块性和代码的重复利用率</p><h2 id="定义一个函数"><a href="#定义一个函数" class="headerlink" title="定义一个函数"></a>定义一个函数</h2><p>我们可以定义一个有自己想要功能的函数，规则如下：</p><ol><li>代码块以def关键字开头，后面是函数标识符名称和圆括号()</li><li>任何传入参数和自变量必须放在括号中间，括号之间可以用于定义参数</li><li>函数的第一行语句可以选择性的使用文档字符串–用于存放函数说明</li><li>函数内容以冒号起始，并且缩进</li><li>return[表达式]结束函数，选择性的返回一个值给调用方，不带表达式的return相当于返回None </li></ol><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>Python定义函数使用def关键字，一般格式如下：<br>def 函数名(参数列表):<br>    函数体</p><p>默认情况下，参数值和参数名称是按照函数生命中定义的顺序匹配起来的</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">def</span> <span class="selector-tag">sayHello</span>(name):</span><br><span class="line">    <span class="selector-tag">print</span>(<span class="string">&quot;hello world , %s&quot;</span> % (name))</span><br><span class="line"><span class="selector-tag">sayHello</span>(<span class="string">&quot;paulniu&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h2><p>定义一个函数：给了函数一个名称，指定函数里包含的参数，和代码块节奏<br>这个函数的基本结构完成以后，我们可以通过另一个函数调用执行，也可以直接从Python命令图书符执行</p><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><p>在python中，定义属于对象吗，变量是没有类型的</p><h2 id="可改变和不可改变对象"><a href="#可改变和不可改变对象" class="headerlink" title="可改变和不可改变对象"></a>可改变和不可改变对象</h2><ol><li><p>在Python中，string，tuples和numbers是不可更改对象，而list和dict等正式可以修改的对象<br>不可变类型：变量赋值 a=5 后再赋值 a=10，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变a的值，相当于新生成了a。</p></li><li><p>可变类型：变量赋值 la=[1,2,3,4] 后再赋值 la[2]=5 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。</p></li></ol><p>python 函数的参数传递：</p><ol><li>不可变类型：类似 c++ 的值传递，如 整数、字符串、元组。如fun（a），传递的只是a的值，没有影响a对象本身。比如在 fun（a）内部修改 a 的值，只是修改另一个复制的对象，不会影响 a 本身。</li><li>可变类型：类似 c++ 的引用传递，如 列表，字典。如 fun（la），则是将 la 真正的传过去，修改后fun外部的la也会受影响</li></ol><blockquote><p>Python中一切都是对象，严格意义我们不能说值传递还是引用传递，我们可以说传递对象和传递可变对象</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def change<span class="constructor">Int(<span class="params">a</span>)</span>:</span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">change<span class="constructor">Int(<span class="params">b</span>)</span></span><br></pre></td></tr></table></figure><p>示例中int对象的值为2，指向他的变量值b，在传递给changeInt函数时，传值的方式复制了变量b，a和b都指向同一个int对象，在a=10时，则新生成了一个int对象10，并把a指向他</p><h2 id="传可变对象实例"><a href="#传可变对象实例" class="headerlink" title="传可变对象实例"></a>传可变对象实例</h2><p>可变对象在函数中修改了参数，那么在调用这个函数的函数里，原始的参数也会被修改</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> changeMe(myList):</span><br><span class="line">    myList.<span class="keyword">append</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&quot;函数内取值为：&quot;</span>,myList)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">myList = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">changeMe(myList)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&quot;函数外取值为：&quot;</span>,myList)</span><br></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>以下是调用函数时可以使用的正式参数类型</p><ol><li>必须参数</li><li>关键字参数</li><li>默认参数</li><li>不定长参数</li></ol><h3 id="必须参数"><a href="#必须参数" class="headerlink" title="必须参数"></a>必须参数</h3><p>必须参数须以正确的顺序传入函数，调用的时候数量必须和声明的一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printMe</span>(<span class="params"><span class="built_in">str</span></span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world!&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h3><p>关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。使用关键字参数允许函数调用时参数顺序和声明时不一样，因为Python解析器能够用参数名匹配参数值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printMe</span>(<span class="params"><span class="built_in">str</span></span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">printMe(<span class="built_in">str</span> = <span class="string">&quot;hello&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printInfo</span>(<span class="params">name, age</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;姓名是&quot;</span>, name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;年龄是&quot;</span>, age)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">printInfo(age=<span class="number">28</span>, name=<span class="string">&quot;paulniu&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><p>调用函数时，如果没有传递参数，会使用默认参数</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def printInfo(name,<span class="attribute">age</span>=18):</span><br><span class="line">    <span class="builtin-name">print</span>(<span class="string">&quot;姓名是&quot;</span>,name)</span><br><span class="line">    <span class="builtin-name">print</span>(<span class="string">&quot;年龄是&quot;</span>,age)</span><br><span class="line">    return</span><br><span class="line">printInfo(<span class="attribute">name</span>=<span class="string">&quot;张三&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="不定长参数"><a href="#不定长参数" class="headerlink" title="不定长参数"></a>不定长参数</h3><p>加了星号*的参数会以元组的形式导入，存放在所有未命名的变量参数</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def printInfo(arg1,*<span class="built_in">var</span>):</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&quot;arg1=&quot;</span>,arg1)</span><br><span class="line">    <span class="keyword">print</span>(<span class="built_in">var</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">printInfo(<span class="string">&quot;hello world!&quot;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>还有一种就是参数带两个星号**的变量会以字典的形式导入，基本语法如下：</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def fucationname([<span class="keyword">formal</span><span class="number">_</span>arg,]**var<span class="number">_</span>args<span class="number">_</span>dict):</span><br><span class="line">    <span class="keyword">function</span><span class="number">_</span>suite</span><br><span class="line">    <span class="keyword">return</span> [expression]</span><br></pre></td></tr></table></figure><p>例子</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def print<span class="constructor">Info(<span class="params">arg1</span>,<span class="operator">**</span><span class="params">vardict</span>)</span>:</span><br><span class="line">    print(arg1)</span><br><span class="line">    print(vardict)</span><br><span class="line">    return</span><br><span class="line">print<span class="constructor">Info(1,<span class="params">a</span>=&#x27;<span class="params">a</span>&#x27;,<span class="params">b</span>=&#x27;<span class="params">b</span>&#x27;)</span></span><br></pre></td></tr></table></figure><h1 id="在使用的时候最好以变量名-变量值的方式调用函数"><a href="#在使用的时候最好以变量名-变量值的方式调用函数" class="headerlink" title="在使用的时候最好以变量名=变量值的方式调用函数"></a>在使用的时候最好以变量名=变量值的方式调用函数</h1><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>python使用lambda来创建匿名函数<br>所谓匿名函数，就是不适用关键字def</p><ol><li>lambda只是一个表达式，函数体比def简单的多</li><li>lambda的主体是一个表达式，而不是代码块，仅仅能够在lambda表达式中封装有限的逻辑</li><li>lambda函数拥有自己的命名空间。且不能访问自己参数列表之外或者全局命名空间里的参数</li><li>虽然lambda函数只有写一行，却不同于C++的内联函数，后者的目的是调用小函数时不占用栈内存而增加运行效率</li></ol><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="built_in">lambda</span> <span class="built_in">var1</span>,var2:<span class="built_in">var1</span> + var2</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(<span class="number">100</span>,<span class="number">100</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(<span class="number">200</span>,<span class="number">300</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>) # 错误示范</span><br></pre></td></tr></table></figure><h2 id="return语句"><a href="#return语句" class="headerlink" title="return语句"></a>return语句</h2><p>return [表达式]语句用于退出函数，选择性的向调用方返回一个表达式，不带参数值的return语句返回None</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;函数&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="http://www.paulniu.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>拥抱Python（十二） 迭代器</title>
    <link href="http://www.paulniu.com/2019/08/08/python-12/"/>
    <id>http://www.paulniu.com/2019/08/08/python-12/</id>
    <published>2019-08-08T13:51:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>迭代器</p><span id="more"></span><h1 id="迭代器和生成器"><a href="#迭代器和生成器" class="headerlink" title="迭代器和生成器"></a>迭代器和生成器</h1><p>迭代是Python最强大的功能之一，是访问集合元素的一种方式<br>迭代器是一个可以记住遍历位置的对象<br>迭代器对象从集合的第一个元素开始访问，知道所有元素被访问结束。迭代器只能往前走不能后退<br>迭代器有两个基本方法：iter()和next()<br>字符串，列表或元组对象都可以用于创建迭代器</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = <span class="selector-attr">[1, 2, 3, 4]</span></span><br><span class="line">it1 = iter(list1)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(next(it1)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(next(it1)</span></span>)</span><br></pre></td></tr></table></figure><h1 id="迭代器对象可以使用常规for语句进行遍历"><a href="#迭代器对象可以使用常规for语句进行遍历" class="headerlink" title="迭代器对象可以使用常规for语句进行遍历"></a>迭代器对象可以使用常规for语句进行遍历</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list2 = [2, 3, 4, 5]</span><br><span class="line">it2 = iter(list2)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> it2:</span><br><span class="line">    <span class="builtin-name">print</span>(x, <span class="attribute">end</span>=<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="创建一个迭代器"><a href="#创建一个迭代器" class="headerlink" title="创建一个迭代器"></a>创建一个迭代器</h2><p>把一个类作为一个迭代器使用需要在类中实现两个方法__iter__()和__next__()<br>我们都知道类对象中需要有构造函数，Python的构造函数为__init__(),他会在对象初始化的时候执行<br><strong>iter</strong>()方法返回一个特殊的迭代器对象，这个迭代器对象实现了__next__()方法并通过StopIteration异常标识迭代的完成<br><strong>next</strong>()方法会返回下一个迭代器对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Numbers</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.a = <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">        x = self.a</span><br><span class="line">        self.a += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">myNumbers = Numbers()</span><br><span class="line">myIter = <span class="built_in">iter</span>(myNumbers)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myIter))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myIter))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myIter))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myIter))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myIter))</span><br></pre></td></tr></table></figure><h2 id="StopIteration"><a href="#StopIteration" class="headerlink" title="StopIteration"></a>StopIteration</h2><p>StopIteration异常用于标识迭代的完成，防止出现无限循环的情况，在__next__()方法中我们可以设置在完成指定循环次数后触发StopIteration异常来结束迭代</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyNumbers</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.a = <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.a &lt;= <span class="number">20</span>:</span><br><span class="line">            x = self.a</span><br><span class="line">            self.a += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line">myNumber = MyNumbers()</span><br><span class="line">myIter = <span class="built_in">iter</span>(myNumber)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> myIter:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><p>在Python中，使用了yield的函数被称为生成器<br>跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单的理解生成器是一个迭代器<br>在调用生成器运行的过程中，每次遇到yield时函数会暂停并保存当前所有的运行信息，返回yield的值，并在下一次执行next()方法时从当前位置继续运行<br>调用一个生成器函数，返回的是一个迭代器对象</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">def fibonacci(n):<span class="comment"># 生成器函数</span></span><br><span class="line">    a,b,counter = <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        <span class="keyword">if</span> (counter &gt; n):</span><br><span class="line">            return</span><br><span class="line">        yield a</span><br><span class="line">        a,b = b , a+b</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">f = fibonacci(<span class="number">10</span>) <span class="comment"># f是一个迭代器，由生成器返回生成</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    try:</span><br><span class="line">        print(<span class="keyword">next</span>(f),end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    except StopIteration:</span><br><span class="line">        sys.<span class="keyword">exit</span>()</span><br></pre></td></tr></table></figure><p>什么时候使用yield<br>一个函数f，f的返回一个list，这个list是动态计算出来的(不管是数学上的计算还是逻辑上的读取格式化),并且这个list会很大(无论是否是固定很很大还是随着输入参数的增大而增大)，<br>这个时候，我们希望每次调用这个函数并且使用迭代器进行循环的时候一个一个的得到每个list元素而不是直接得到一个完整的list来节省内存，这个时候就可以使用yield</p><p>打个比方，yield有点像断点，加了yield的函数，每次执行到有yield的时候，会返回yield后面的值，并且函数会暂停，直到下次调用或迭代终止</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;迭代器&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="http://www.paulniu.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>重拾android路(三十二) OkHttp</title>
    <link href="http://www.paulniu.com/2019/08/08/android-32-okhttp/"/>
    <id>http://www.paulniu.com/2019/08/08/android-32-okhttp/</id>
    <published>2019-08-08T11:36:26.000Z</published>
    <updated>2021-06-19T12:59:56.698Z</updated>
    
    <content type="html"><![CDATA[<p>OKHttp网络请求</p><span id="more"></span><p>目前公司所使用的网络请求框架依然是AsyncHttpClient，虽然说这款老的网络请求框架很好用，很容易理解，也很容易上手，但是开发技术总是在不断的创新和更新的，所以保持较高的对新技术的敏感度是非常重要的事情。<br>之前自己也有使用过OKHttp，只不过那时候使用的时间很少，大部分的还都是自己在业余时间自己去学习和使用。说到这点，可能别人都不相信一个做开发做了快五年的人，竟然还没有去深入学习过OKHttp，真是汗颜啊。所以我决定通过这一篇blog在学习使用OKHttp网络请求框架的基础功能的同时，深入学习OKHttp的核心内容，并且要能够深挖他的设计模式和设计思路，希望不会浪费自己所付出的努力。</p><h1 id="基础部分"><a href="#基础部分" class="headerlink" title="基础部分"></a>基础部分</h1><p>关于OKHttp的介绍这里就不多少了，<a href="https://square.github.io/okhttp/">官网</a>上给出了比较详细的解读和分析，这里还有<a href="https://github.com/square/okhttp">github</a>的网址<br>到目前为止OKHttp的版本已经更新到了4.x版本，使用的是Kotlin语言，而Kotlin语言我目前也正在学习。所以学习OKHttp的版本还是以3.x为主。</p><p>鉴于目前RxJava+OKHttp+Retrofit已经成为基本的网络请求框架，所以在这里我也是使用这样的方式去实现的。</p><p>在使用OKHttp基本操作之前，我们还是要先了解一下OKHttp的基本步骤，基本步骤一般是由四部分组成的</p><ol><li>创建OKHttpClient对象</li><li>创建Request请求对象</li><li>创建Call对象</li><li>使用同步call.execute()或者一部call.enqueue(callback)开启网络请求</li></ol><h1 id="高级部分"><a href="#高级部分" class="headerlink" title="高级部分"></a>高级部分</h1><h1 id="封装OKHttp网络请求库"><a href="#封装OKHttp网络请求库" class="headerlink" title="封装OKHttp网络请求库"></a>封装OKHttp网络请求库</h1><p>以上的所有使用都是在我们使用的时候直接创建OKHttpClient对象，那么可能这里会造成内容的泄露。除此之外的话，还有另外一些情况，比如当我们通过OKHttp进行网络请求的时候，可能需要对网络请求进行统一的处理，例如将所有的网络请求全部停止。那么这样我们需要对网络请求进行统一的管理，而显然官方的默认框架不能很好的满足我们的要求。除此之外，我们还可能需要对网络请求的头部需要统一管理，对抓包工具的支持等等。那么我们很有必须写一个自己封装的网络请求框架</p><blockquote><p>注：本框架参考了<a href=""></a>封装库</p></blockquote><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><p>因为目前公司的项目是老项目，所以使用的是AsyncHttpClient，所以还是有必要将AsyncHttpClient重新整理一下的，我的想法是自己创建一个工具类，方便后面的时候。<br>工具的模块分为以下几个部分，先看图片<br><img src="/assets/android_http/async_01.png"></p><p>主体代码：</p><h1 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h1><p><a href="https://juejin.im/post/5d6f9ee16fb9a06add4e4c5d?utm_source=gold_browser_extension">OKHttp源码解读</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;OKHttp网络请求&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
    <category term="OkHttp" scheme="http://www.paulniu.com/tags/OkHttp/"/>
    
  </entry>
  
  <entry>
    <title>拥抱Python（十一） 循环语句</title>
    <link href="http://www.paulniu.com/2019/08/07/python-11/"/>
    <id>http://www.paulniu.com/2019/08/07/python-11/</id>
    <published>2019-08-07T13:51:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>循环语句</p><span id="more"></span><p>Python的循环语句分为两种，for和while循环</p><p>while循环，需要注意冒号和缩进，在Python中没有do…while 循环<br>下面一个例子，计算100以内数字的和</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">n</span> = <span class="number">100</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">while <span class="built_in">n</span> &gt; <span class="symbol">0:</span></span><br><span class="line">    <span class="built_in">sum</span> += <span class="built_in">n</span></span><br><span class="line">    <span class="built_in">n</span> -= <span class="number">1</span></span><br><span class="line">print(<span class="string">&quot;100以内数字的和是：%d&quot;</span> % (<span class="built_in">sum</span>))</span><br></pre></td></tr></table></figure><h1 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h1><p>我们可以通过设置表达式的值永远不为false，来实现一个无限循环</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">var</span> == <span class="number">1</span>:  # 表达式永远为 <span class="keyword">true</span></span><br><span class="line">    <span class="built_in">num</span> = <span class="built_in">int</span>(input(<span class="string">&quot;输入一个数字  :&quot;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你输入的数字是: &quot;</span>, <span class="built_in">num</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Good bye!&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="while循环中使用else语句"><a href="#while循环中使用else语句" class="headerlink" title="while循环中使用else语句"></a>while循环中使用else语句</h1><p>在while…else语句中，当条件判断为false的时候，执行else代码块</p><h1 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h1><p>for语句可以遍历任何序列的项目，可以是一个列表或者一个字符串</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">languages = [<span class="string">&quot;C&quot;</span>, <span class="string">&quot;C++&quot;</span>, <span class="string">&quot;Java&quot;</span>, <span class="string">&quot;Kotlin&quot;</span>, <span class="string">&quot;Python&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> item in <span class="keyword">language</span><span class="variable">s:</span></span><br><span class="line">    <span class="keyword">print</span>(item)</span><br></pre></td></tr></table></figure><p>在for循环中我们可以使用break语句表示跳出当前循环体，如下</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">num</span> <span class="keyword">in</span> nums:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">num</span> &gt;= <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;当前数字是%d&quot;</span> <span class="symbol">%</span> <span class="built_in">num</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;退出循环了&quot;</span>)</span><br><span class="line"></span><br><span class="line">```    </span><br><span class="line"># <span class="built_in">range</span>()函数</span><br><span class="line">如果我们需要遍历数字列表，我们可以使用内置函数<span class="built_in">range</span>()，他会生成数列，如下所示</span><br></pre></td></tr></table></figure><p>for i in range(10):<br>    print(“当前的数字是%d” % i)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">同样我们可以指定遍历数字列表的范围</span><br></pre></td></tr></table></figure><p>for ii in range(2, 6):<br>    print(“当前的数字是%d” % ii)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我们可以指定遍历数字列表的步长</span><br></pre></td></tr></table></figure><p>for iii in range(1, 20, 3):<br>    print(“当前的数字是%d” % iii)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我们还可以使用负数</span><br></pre></td></tr></table></figure><p>for iiii in range(-10, -100, -30):<br>    print(“当前数字是%d” % iiii)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我们可以结合<span class="keyword">range</span>()和<span class="built_in">len</span>()函数便利一个序列的索引</span><br></pre></td></tr></table></figure><p>a = [“google”, “baidu”, “Taobao”, “Tencent”]<br>for temp in range(len(a)):<br>    print(temp, a[temp])</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">同时我们还可以使用<span class="keyword">range</span>()函数来创建一个列表</span><br></pre></td></tr></table></figure><p>print(list(range(5)))</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">break</span>语句可以跳出<span class="keyword">for</span>和<span class="keyword">while</span>循环体，如果我们从<span class="keyword">for</span>或者<span class="keyword">while</span>循环中终止，任何对应的循环<span class="keyword">else</span>块将不再执行</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>for charr in ‘paulniu’:<br>    if charr == ‘l’:<br>        break<br>    print(“当前字符是%s” % charr)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">continue</span>语句被用来告诉苏Python跳过当前循环块中剩余的语句，然后继续进行下一个循环</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>for letter in “paulniu”:<br>    if letter == “i”:<br>        continue<br>    print(“当前的字符串是=” + letter)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">pass</span>语句在Python是空语句，是为了保持程序结构的完整性</span><br><span class="line"><span class="keyword">pass</span>不做任何事情，一般做占位符语句</span><br><span class="line"></span><br><span class="line">使用内置<span class="built_in">enumerate</span>函数进行遍历</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>sequence = [12, 34, 56, 23, 34, 45, 56]<br>for i, j in enumerate(sequence):<br>    print(i, j)</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attribute">for</span>循环<span class="number">1</span>-<span class="number">100</span>内所有证书的和</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>n = 0<br>sum = 0<br>for n in range(0, 101):<br>    sum += n<br>print(“结果是%d” % sum)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">使用循环嵌套实现99乘法法则</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>start = 1<br>while start &lt;= 9:<br>    sec = 1<br>    while sec &lt;= start:<br>        mut = start * sec<br>        print(“%d x %d = %d” % (start, sec, mut), end=” “)<br>        sec += 1<br>    print(“”)<br>    print(“”)<br>    start += 1</p><pre><code></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;循环语句&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="http://www.paulniu.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>拥抱Python（十） 条件判断</title>
    <link href="http://www.paulniu.com/2019/08/06/python-10/"/>
    <id>http://www.paulniu.com/2019/08/06/python-10/</id>
    <published>2019-08-06T13:51:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>条件判断</p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;条件判断&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="http://www.paulniu.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>android 音视频开发(四)</title>
    <link href="http://www.paulniu.com/2019/08/06/android-media-04/"/>
    <id>http://www.paulniu.com/2019/08/06/android-media-04/</id>
    <published>2019-08-06T12:00:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Camera2 API 采集视频并SurfaceView、TextureView 预览</p><span id="more"></span><p>从5.0开始（API Level 21），可以完全控制安卓设备相机的新api Camera2(android.hardware.Camera2)被引入了进来。在以前的Camera api(android.hardware.Camera)中，对相机的手动控制需要更改系统才能实现，而且api也不友好。不过老的Camera API在5.0上已经过时，如今Android推荐使用Camera2采集视频，借着写这篇记录的过程，熟悉和理解Camera2流程。</p><h2 id="一些名词"><a href="#一些名词" class="headerlink" title="一些名词"></a>一些名词</h2><h3 id="YVU"><a href="#YVU" class="headerlink" title="YVU"></a>YVU</h3><p>颜色编码的方法，在旧Camera API 常用的是NV21和YV12，可以转成RGB编码</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取Camera2支持的颜色编码</span></span><br><span class="line">StreamConfigurationMap map characteristics.<span class="built_in">get</span>(CameraCharacteristics,SCALER_STREAM_CONFIGURATION_MAP);</span><br><span class="line">map.<span class="built_in">getOutputFormats</span>();</span><br></pre></td></tr></table></figure><h3 id="CameraManager"><a href="#CameraManager" class="headerlink" title="CameraManager"></a>CameraManager</h3><p>Camera2中负责管理，查询摄像头信息，打开可用摄像头的管理对象</p><ol><li>cameraId  通过getCameraidList()枚举获得，代表使用哪个摄像头</li><li>设备信息通过CameraCharateristic.getCameraCharacteristics(cameraId)获取到</li><li>打开摄像头 openCamera(String cameraId,CameraManager.StateCallback callback,Handler handler),其中StateCallback是接收设备状态的更新回调，例如CameraDevice就是通过StateCallback中的onOpen()回调中拿到，handler表示打开摄像头具体操作在哪个Handler的Looper中，也就是在哪个线程中执行，设置为null，表示在当前线程</li></ol><h3 id="CameraDevice"><a href="#CameraDevice" class="headerlink" title="CameraDevice"></a>CameraDevice</h3><p>具体的摄像头，提供一组属性信息，描述硬件设备以及设备的可用设置和参数</p><ol><li>CamearDevice是在CameraManager打开摄像头后，通过CameraDevice.StateCallback的回调中拿到的，是一个异步过程</li><li>createCaptureRequest()创建CaptureRequest.Builder,CaptureRequest.Builder负责创建各种捕获图像的请求CaptureRequest</li><li>createCaptureSession() 负责创建捕获对象会话CameraCaptureSession</li></ol><h3 id="CaptureRequest"><a href="#CaptureRequest" class="headerlink" title="CaptureRequest"></a>CaptureRequest</h3><p>一次捕获请求，通过CaptureRequest.Builder的build()方法创建，其实请求参数也是通过Builder来设置：CaptureRequest.Builder常用的方法：</p><ol><li>addTarget(Surface outputTarget) 将Surface添加到输出列表中，才可以显示在SurfaceView，TextureView或者输出到ImageReader中</li><li>set(Key<T> key,T value) 设置其他属性</li></ol><h3 id="CameraCaptureSession"><a href="#CameraCaptureSession" class="headerlink" title="CameraCaptureSession"></a>CameraCaptureSession</h3><p>捕获的会话Session，预览，拍照，都由该对象进行控制</p><ol><li>CameraCaptureSession是通过CameraDevice的createCaptureSession(List<Surface>,CameraCaptureSessionStateCallback,handler)创建</li><li>拍照 capture(CaptureRequest,CameraCaptureSession.CaptureCallback,hanlder)</li><li>预览 setRepeatingRequest(CaptureRequest,CameraCaptureSession.CaptureCallback,handler)</li></ol><h1 id="SurfaceView"><a href="#SurfaceView" class="headerlink" title="SurfaceView"></a>SurfaceView</h1><p>完整代码</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Coder: niupuyue</span></span><br><span class="line"><span class="comment"> * Date: 2019/8/6</span></span><br><span class="line"><span class="comment"> * Time: 18:33</span></span><br><span class="line"><span class="comment"> * Desc: 通过SurFaceView预览Camera</span></span><br><span class="line"><span class="comment"> * Version:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public <span class="keyword">class</span> SurfaceViewActivity extends AppCompatActivity implements View.OnClickListener &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> static final String TAG = <span class="module-access"><span class="module"><span class="identifier">SurfaceViewActivity</span>.</span></span><span class="keyword">class</span>.get<span class="constructor">SimpleName()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SurfaceView预览相机</span></span><br><span class="line">    <span class="keyword">private</span> SurfaceView surfaceview;</span><br><span class="line">    <span class="comment">// 获取当前相机的id(我们要使用前置相机)</span></span><br><span class="line">    <span class="keyword">private</span> String mCameraId;</span><br><span class="line">    <span class="keyword">private</span> Size mPreviewSize;</span><br><span class="line">    <span class="keyword">private</span> HandlerThread mCameraThread;</span><br><span class="line">    <span class="keyword">private</span> Handler mCameraHandler;</span><br><span class="line">    <span class="comment">// 摄像头驱动</span></span><br><span class="line">    <span class="keyword">private</span> CameraDevice cameraDevice;</span><br><span class="line">    <span class="keyword">private</span> CaptureRequest.Builder mCaptureRequestBuilder;</span><br><span class="line">    <span class="keyword">private</span> CaptureRequest mCaptureRequest;</span><br><span class="line">    <span class="keyword">private</span> CameraCaptureSession session;</span><br><span class="line">    <span class="keyword">private</span> SurfaceHolder holder;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> boolean isSurfaceViewCreate = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> surfaceViewHolderWidth;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> surfaceViewHolderHeight;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> boolean isFontCamera = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Button btn_surfaceview_font;</span><br><span class="line">    <span class="keyword">private</span> Button btn_surfaceview_back;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void on<span class="constructor">Create(@Nullable Bundle <span class="params">savedInstanceState</span>)</span> &#123;</span><br><span class="line">        super.on<span class="constructor">Create(<span class="params">savedInstanceState</span>)</span>;</span><br><span class="line">        set<span class="constructor">ContentView(R.<span class="params">layout</span>.<span class="params">activity_surfaceview</span>)</span>;</span><br><span class="line">        surfaceview = find<span class="constructor">ViewById(R.<span class="params">id</span>.<span class="params">surfaceview</span>)</span>;</span><br><span class="line"></span><br><span class="line">        btn_surfaceview_font = find<span class="constructor">ViewById(R.<span class="params">id</span>.<span class="params">btn_surfaceview_font</span>)</span>;</span><br><span class="line">        btn_surfaceview_back = find<span class="constructor">ViewById(R.<span class="params">id</span>.<span class="params">btn_surfaceview_back</span>)</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void on<span class="constructor">Resume()</span> &#123;</span><br><span class="line">        super.on<span class="constructor">Resume()</span>;</span><br><span class="line">        init<span class="constructor">CameraThread()</span>;</span><br><span class="line"></span><br><span class="line">        holder = surfaceview.get<span class="constructor">Holder()</span>;</span><br><span class="line">        surfaceview.set<span class="constructor">ZOrderMediaOverlay(<span class="params">true</span>)</span>;</span><br><span class="line">        <span class="comment">// 设置半透明</span></span><br><span class="line">        holder.set<span class="constructor">Format(PixelFormat.TRANSLUCENT)</span>;</span><br><span class="line">        holder.add<span class="constructor">Callback(<span class="params">mSurfaceHolderCallback</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> void init<span class="constructor">CameraThread()</span> &#123;</span><br><span class="line">        mCameraThread = <span class="keyword">new</span> <span class="constructor">HandlerThread(<span class="string">&quot;CameraSufaceViewThread&quot;</span>)</span>;</span><br><span class="line">        mCameraThread.start<span class="literal">()</span>;</span><br><span class="line">        mCameraHandler = <span class="keyword">new</span> <span class="constructor">Handler(<span class="params">mCameraThread</span>.<span class="params">getLooper</span>()</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SurfaceHolder.Callback mSurfaceHolderCallback = <span class="keyword">new</span> SurfaceHolder.<span class="constructor">Callback()</span> &#123;</span><br><span class="line">        @<span class="constructor">RequiresApi(<span class="params">api</span> = Build.VERSION_CODES.LOLLIPOP)</span></span><br><span class="line">        @Override</span><br><span class="line">        public void surface<span class="constructor">Created(SurfaceHolder <span class="params">surfaceHolder</span>)</span> &#123;</span><br><span class="line"><span class="comment">//            surfaceViewHolderWidth = surfaceHolder.getSurfaceFrame().width();</span></span><br><span class="line"><span class="comment">//            surfaceViewHolderHeight = surfaceHolder.getSurfaceFrame().height();</span></span><br><span class="line"><span class="comment">//            isSurfaceViewCreate = true;</span></span><br><span class="line">            <span class="comment">// 设置摄像头的基本配合信息，宽高跟SurfaceView的尺寸相关</span></span><br><span class="line">            setup<span class="constructor">Camerar(<span class="params">surfaceHolder</span>.<span class="params">getSurfaceFrame</span>()</span>.width<span class="literal">()</span>, surfaceHolder.get<span class="constructor">SurfaceFrame()</span>.height<span class="literal">()</span>);</span><br><span class="line">            <span class="keyword">open</span><span class="constructor">Camera()</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void surface<span class="constructor">Changed(SurfaceHolder <span class="params">surfaceHolder</span>, <span class="params">int</span> <span class="params">i</span>, <span class="params">int</span> <span class="params">i1</span>, <span class="params">int</span> <span class="params">i2</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void surface<span class="constructor">Destroyed(SurfaceHolder <span class="params">surfaceHolder</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置Camera的基本配置信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param width</span></span><br><span class="line"><span class="comment">     * @param height</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @<span class="constructor">RequiresApi(<span class="params">api</span> = Build.VERSION_CODES.LOLLIPOP)</span></span><br><span class="line">    <span class="keyword">private</span> void setup<span class="constructor">Camerar(<span class="params">int</span> <span class="params">width</span>, <span class="params">int</span> <span class="params">height</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取摄像头管理者CameraManager</span></span><br><span class="line">        CameraManager cameraManager = (CameraManager) get<span class="constructor">SystemService(CAMERA_SERVICE)</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 遍历所有的摄像头</span></span><br><span class="line">            <span class="keyword">for</span> (String cameraId : cameraManager.get<span class="constructor">CameraIdList()</span>) &#123;</span><br><span class="line">                <span class="comment">// CameraCharacteristics 该属性用来描述摄像头驱动信息</span></span><br><span class="line">                CameraCharacteristics cameraCharacteristics = cameraManager.get<span class="constructor">CameraCharacteristics(<span class="params">cameraId</span>)</span>;</span><br><span class="line">                <span class="comment">// 获取摄像头相对于屏幕的方向</span></span><br><span class="line">                Integer facing = cameraCharacteristics.get(CameraCharacteristics.LENS_FACING);</span><br><span class="line">                <span class="comment">// 设置打开后置摄像头</span></span><br><span class="line">                <span class="keyword">if</span> (facing != null<span class="operator"> &amp;&amp; </span>facing<span class="operator"> == </span>CameraCharacteristics.LENS_FACING_FRONT)</span><br><span class="line">                    continue;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 获取StreamConfigurationMap，他是管理摄像头支持的所有输出格式和尺寸</span></span><br><span class="line">                StreamConfigurationMap map = cameraCharacteristics.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);</span><br><span class="line">                <span class="keyword">assert</span> map != null;</span><br><span class="line">                mPreviewSize = get<span class="constructor">OptimalSize(<span class="params">map</span>.<span class="params">getOutputSizes</span>(SurfaceTexture.<span class="params">class</span>)</span>, width, height);</span><br><span class="line">                mCameraId = cameraId;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 选择sizeMap中大于并最接近width和height的size</span></span><br><span class="line">    @<span class="constructor">RequiresApi(<span class="params">api</span> = Build.VERSION_CODES.LOLLIPOP)</span></span><br><span class="line">    <span class="keyword">private</span> Size get<span class="constructor">OptimalSize(Size[] <span class="params">sizeMap</span>, <span class="params">int</span> <span class="params">width</span>, <span class="params">int</span> <span class="params">height</span>)</span> &#123;</span><br><span class="line">        List&lt;Size&gt; sizeList = <span class="keyword">new</span> ArrayList&lt;&gt;<span class="literal">()</span>;</span><br><span class="line">        <span class="keyword">for</span> (Size option : sizeMap) &#123;</span><br><span class="line">            <span class="keyword">if</span> (width &gt; height) &#123;</span><br><span class="line">                <span class="keyword">if</span> (option.get<span class="constructor">Width()</span> &gt; width<span class="operator"> &amp;&amp; </span>option.get<span class="constructor">Height()</span> &gt; height) &#123;</span><br><span class="line">                    sizeList.add(option);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (option.get<span class="constructor">Width()</span> &gt; height<span class="operator"> &amp;&amp; </span>option.get<span class="constructor">Height()</span> &gt; width) &#123;</span><br><span class="line">                    sizeList.add(option);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sizeList.size<span class="literal">()</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            return <span class="module-access"><span class="module"><span class="identifier">Collections</span>.</span></span>min(sizeList, <span class="keyword">new</span> Comparator&lt;Size&gt;<span class="literal">()</span> &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public <span class="built_in">int</span> compare(Size left, Size right) &#123;</span><br><span class="line">                    return <span class="module-access"><span class="module"><span class="identifier">Long</span>.</span></span>signum(left.get<span class="constructor">Width()</span><span class="operator"> * </span>left.get<span class="constructor">Height()</span> - right.get<span class="constructor">Width()</span><span class="operator"> * </span>right.get<span class="constructor">Height()</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        return sizeMap<span class="literal">[<span class="number">0</span>]</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打开摄像头</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @<span class="constructor">RequiresApi(<span class="params">api</span> = Build.VERSION_CODES.LOLLIPOP)</span></span><br><span class="line">    <span class="keyword">private</span> void <span class="keyword">open</span><span class="constructor">Camera()</span> &#123;</span><br><span class="line">        CameraManager cameraManager = (CameraManager) get<span class="constructor">SystemService(CAMERA_SERVICE)</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">ActivityCompat</span>.</span></span>check<span class="constructor">SelfPermission(<span class="params">this</span>, Manifest.<span class="params">permission</span>.CAMERA)</span> != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">Log</span>.</span></span>e(TAG, <span class="string">&quot;cameraID = &quot;</span> + mCameraId);</span><br><span class="line">            cameraManager.<span class="keyword">open</span><span class="constructor">Camera(<span class="params">mCameraId</span>, <span class="params">mCameraDeviceStateCallback</span>, <span class="params">mCameraHandler</span>)</span>;</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当摄像机的状态发生改变的时候触发该监听</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @<span class="constructor">RequiresApi(<span class="params">api</span> = Build.VERSION_CODES.LOLLIPOP)</span></span><br><span class="line">    <span class="keyword">private</span> CameraDevice.StateCallback mCameraDeviceStateCallback = <span class="keyword">new</span> CameraDevice.<span class="constructor">StateCallback()</span> &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void on<span class="constructor">Opened(CameraDevice <span class="params">cameraDevice</span>)</span> &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">SurfaceViewActivity</span>.</span></span>this.cameraDevice = cameraDevice;</span><br><span class="line">            start<span class="constructor">PreView()</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void on<span class="constructor">Disconnected(CameraDevice <span class="params">cameraDevice</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">SurfaceViewActivity</span>.</span></span>this.cameraDevice != null) &#123;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">SurfaceViewActivity</span>.</span></span>this.cameraDevice.close<span class="literal">()</span>;</span><br><span class="line">                cameraDevice.close<span class="literal">()</span>;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">SurfaceViewActivity</span>.</span></span>this.cameraDevice = null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void on<span class="constructor">Error(CameraDevice <span class="params">cameraDevice</span>, <span class="params">int</span> <span class="params">i</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">SurfaceViewActivity</span>.</span></span>this.cameraDevice != null) &#123;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">SurfaceViewActivity</span>.</span></span>this.cameraDevice.close<span class="literal">()</span>;</span><br><span class="line">                cameraDevice.close<span class="literal">()</span>;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">SurfaceViewActivity</span>.</span></span>this.cameraDevice = null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    @<span class="constructor">RequiresApi(<span class="params">api</span> = Build.VERSION_CODES.LOLLIPOP)</span></span><br><span class="line">    <span class="keyword">private</span> void start<span class="constructor">PreView()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Surface surface = holder.get<span class="constructor">Surface()</span>;</span><br><span class="line">            mCaptureRequestBuilder = cameraDevice.create<span class="constructor">CaptureRequest(CameraDevice.TEMPLATE_PREVIEW)</span>;</span><br><span class="line">            <span class="keyword">if</span> (surface != null) &#123;</span><br><span class="line"></span><br><span class="line">                mCaptureRequestBuilder.add<span class="constructor">Target(<span class="params">surface</span>)</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">Log</span>.</span></span>e(TAG, <span class="string">&quot;surface为空&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            cameraDevice.create<span class="constructor">CaptureSession(Arrays.<span class="params">asList</span>(<span class="params">surface</span>)</span>, <span class="keyword">new</span> CameraCaptureSession.<span class="constructor">StateCallback()</span> &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void on<span class="constructor">Configured(CameraCaptureSession <span class="params">cameraCaptureSession</span>)</span> &#123;</span><br><span class="line">                    mCaptureRequest = mCaptureRequestBuilder.build<span class="literal">()</span>;</span><br><span class="line">                    session = cameraCaptureSession;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        session.set<span class="constructor">RepeatingRequest(<span class="params">mCaptureRequest</span>, <span class="params">null</span>, <span class="params">mCameraHandler</span>)</span>;</span><br><span class="line">                    &#125; catch (Exception ex) &#123;</span><br><span class="line">                        ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                @Override</span><br><span class="line">                public void on<span class="constructor">ConfigureFailed(CameraCaptureSession <span class="params">cameraCaptureSession</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, mCameraHandler);</span><br><span class="line"></span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void on<span class="constructor">Pause()</span> &#123;</span><br><span class="line">        super.on<span class="constructor">Pause()</span>;</span><br><span class="line">        <span class="keyword">if</span> (session != null) &#123;</span><br><span class="line">            session.close<span class="literal">()</span>;</span><br><span class="line">            session = null;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cameraDevice != null) &#123;</span><br><span class="line">            cameraDevice.close<span class="literal">()</span>;</span><br><span class="line">            cameraDevice = null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="constructor">RequiresApi(<span class="params">api</span> = Build.VERSION_CODES.LOLLIPOP)</span></span><br><span class="line">    @Override</span><br><span class="line">    public void on<span class="constructor">Click(View <span class="params">v</span>)</span> &#123;</span><br><span class="line">        switch (v.get<span class="constructor">Id()</span>) &#123;</span><br><span class="line">            case <span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>id.btn_surfaceview_font:</span><br><span class="line">                <span class="comment">// 打开后置摄像头</span></span><br><span class="line">                isFontCamera = <span class="literal">true</span>;</span><br><span class="line">                <span class="comment">// 设置摄像头的基本配合信息，宽高跟SurfaceView的尺寸相关</span></span><br><span class="line">                setup<span class="constructor">Camerar(<span class="params">surfaceViewHolderWidth</span>, <span class="params">surfaceViewHolderHeight</span>)</span>;</span><br><span class="line">                <span class="keyword">open</span><span class="constructor">Camera()</span>;</span><br><span class="line">                break;</span><br><span class="line">            case <span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>id.btn_surfaceview_back:</span><br><span class="line">                <span class="comment">// 打开前置摄像头</span></span><br><span class="line">                isFontCamera = <span class="literal">false</span>;</span><br><span class="line">                <span class="comment">// 设置摄像头的基本配合信息，宽高跟SurfaceView的尺寸相关</span></span><br><span class="line">                setup<span class="constructor">Camerar(<span class="params">surfaceViewHolderWidth</span>, <span class="params">surfaceViewHolderHeight</span>)</span>;</span><br><span class="line">                <span class="keyword">open</span><span class="constructor">Camera()</span>;</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="TextureView"><a href="#TextureView" class="headerlink" title="TextureView"></a>TextureView</h1><p>完整代码</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Coder: niupuyue</span></span><br><span class="line"><span class="comment"> * Date: 2019/8/6</span></span><br><span class="line"><span class="comment"> * Time: 18:34</span></span><br><span class="line"><span class="comment"> * Desc: 使用TextureViewActivity预览相机</span></span><br><span class="line"><span class="comment"> * Version:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public <span class="keyword">class</span> TextureViewActivity extends AppCompatActivity implements View.OnClickListener &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String cameraId;</span><br><span class="line">    <span class="keyword">private</span> Size previewSize;</span><br><span class="line">    <span class="keyword">private</span> HandlerThread handlerThread;</span><br><span class="line">    <span class="keyword">private</span> Handler handler;</span><br><span class="line">    <span class="keyword">private</span> CameraDevice cameraDevice;</span><br><span class="line">    <span class="keyword">private</span> CaptureRequest request;</span><br><span class="line">    <span class="keyword">private</span> CaptureRequest.Builder builder;</span><br><span class="line">    <span class="keyword">private</span> CameraCaptureSession session;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Button btn_texture_font, btn_texture_back;</span><br><span class="line">    <span class="keyword">private</span> TextureView textureView;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void on<span class="constructor">Create(@Nullable Bundle <span class="params">savedInstanceState</span>)</span> &#123;</span><br><span class="line">        super.on<span class="constructor">Create(<span class="params">savedInstanceState</span>)</span>;</span><br><span class="line">        set<span class="constructor">ContentView(R.<span class="params">layout</span>.<span class="params">activity_textureview</span>)</span>;</span><br><span class="line"></span><br><span class="line">        btn_texture_font = find<span class="constructor">ViewById(R.<span class="params">id</span>.<span class="params">btn_texture_font</span>)</span>;</span><br><span class="line">        btn_texture_back = find<span class="constructor">ViewById(R.<span class="params">id</span>.<span class="params">btn_texture_back</span>)</span>;</span><br><span class="line"></span><br><span class="line">        btn_texture_font.set<span class="constructor">OnClickListener(<span class="params">this</span>)</span>;</span><br><span class="line">        btn_texture_back.set<span class="constructor">OnClickListener(<span class="params">this</span>)</span>;</span><br><span class="line"></span><br><span class="line">        textureView = find<span class="constructor">ViewById(R.<span class="params">id</span>.<span class="params">textureView</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="constructor">RequiresApi(<span class="params">api</span> = Build.VERSION_CODES.LOLLIPOP)</span></span><br><span class="line">    @Override</span><br><span class="line">    protected void on<span class="constructor">Resume()</span> &#123;</span><br><span class="line">        super.on<span class="constructor">Resume()</span>;</span><br><span class="line">        start<span class="constructor">CameraThread()</span>;</span><br><span class="line">        <span class="keyword">if</span> (!textureView.is<span class="constructor">Available()</span>) &#123;</span><br><span class="line">            textureView.set<span class="constructor">SurfaceTextureListener(<span class="params">textureListener</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            start<span class="constructor">PreView()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextureView.SurfaceTextureListener textureListener = <span class="keyword">new</span> TextureView.<span class="constructor">SurfaceTextureListener()</span> &#123;</span><br><span class="line">        @<span class="constructor">RequiresApi(<span class="params">api</span> = Build.VERSION_CODES.LOLLIPOP)</span></span><br><span class="line">        @Override</span><br><span class="line">        public void on<span class="constructor">SurfaceTextureAvailable(SurfaceTexture <span class="params">surface</span>, <span class="params">int</span> <span class="params">width</span>, <span class="params">int</span> <span class="params">height</span>)</span> &#123;</span><br><span class="line">            <span class="comment">// 当特效图review可用的时候，打开相机</span></span><br><span class="line">            setup<span class="constructor">Camera(<span class="params">width</span>, <span class="params">height</span>)</span>;</span><br><span class="line">            <span class="keyword">open</span><span class="constructor">Camera()</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void on<span class="constructor">SurfaceTextureSizeChanged(SurfaceTexture <span class="params">surface</span>, <span class="params">int</span> <span class="params">width</span>, <span class="params">int</span> <span class="params">height</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public boolean on<span class="constructor">SurfaceTextureDestroyed(SurfaceTexture <span class="params">surface</span>)</span> &#123;</span><br><span class="line">            return <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void on<span class="constructor">SurfaceTextureUpdated(SurfaceTexture <span class="params">surface</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    @<span class="constructor">RequiresApi(<span class="params">api</span> = Build.VERSION_CODES.LOLLIPOP)</span></span><br><span class="line">    <span class="keyword">private</span> void setup<span class="constructor">Camera(<span class="params">int</span> <span class="params">width</span>, <span class="params">int</span> <span class="params">height</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取Camera管理对象CameraManager</span></span><br><span class="line">        CameraManager manager = (CameraManager) get<span class="constructor">SystemService(CAMERA_SERVICE)</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 遍历所有的摄像头</span></span><br><span class="line">            <span class="keyword">for</span> (String cameraId : manager.get<span class="constructor">CameraIdList()</span>) &#123;</span><br><span class="line">                CameraCharacteristics cameraCharacteristics = manager.get<span class="constructor">CameraCharacteristics(<span class="params">cameraId</span>)</span>;</span><br><span class="line">                Integer facing = cameraCharacteristics.get(CameraCharacteristics.LENS_FACING);</span><br><span class="line">                <span class="comment">// 在此处默认打开后置摄像头</span></span><br><span class="line">                <span class="keyword">if</span> (facing != null<span class="operator"> &amp;&amp; </span>facing<span class="operator"> == </span>CameraCharacteristics.LENS_FACING_FRONT) &#123;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 获取StreamConfigurationMap,他是管理所有摄像头支持的输出格式和尺寸</span></span><br><span class="line">                StreamConfigurationMap map = cameraCharacteristics.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);</span><br><span class="line">                <span class="keyword">assert</span> map != null;</span><br><span class="line">                previewSize = get<span class="constructor">OptimalSize(<span class="params">map</span>.<span class="params">getOutputSizes</span>(SurfaceTexture.<span class="params">class</span>)</span>, width, height);</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">TextureViewActivity</span>.</span></span>this.cameraId = cameraId;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//选择sizeMap中大于并且最接近width和height的size</span></span><br><span class="line">    @<span class="constructor">RequiresApi(<span class="params">api</span> = Build.VERSION_CODES.LOLLIPOP)</span></span><br><span class="line">    <span class="keyword">private</span> Size get<span class="constructor">OptimalSize(Size[] <span class="params">sizeMap</span>, <span class="params">int</span> <span class="params">width</span>, <span class="params">int</span> <span class="params">height</span>)</span> &#123;</span><br><span class="line">        List&lt;Size&gt; sizeList = <span class="keyword">new</span> ArrayList&lt;&gt;<span class="literal">()</span>;</span><br><span class="line">        <span class="keyword">for</span> (Size option : sizeMap) &#123;</span><br><span class="line">            <span class="keyword">if</span> (width &gt; height) &#123;</span><br><span class="line">                <span class="keyword">if</span> (option.get<span class="constructor">Width()</span> &gt; width<span class="operator"> &amp;&amp; </span>option.get<span class="constructor">Height()</span> &gt; height) &#123;</span><br><span class="line">                    sizeList.add(option);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (option.get<span class="constructor">Width()</span> &gt; height<span class="operator"> &amp;&amp; </span>option.get<span class="constructor">Height()</span> &gt; width) &#123;</span><br><span class="line">                    sizeList.add(option);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sizeList.size<span class="literal">()</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            return <span class="module-access"><span class="module"><span class="identifier">Collections</span>.</span></span>min(sizeList, <span class="keyword">new</span> Comparator&lt;Size&gt;<span class="literal">()</span> &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public <span class="built_in">int</span> compare(Size lhs, Size rhs) &#123;</span><br><span class="line">                    return <span class="module-access"><span class="module"><span class="identifier">Long</span>.</span></span>signum(lhs.get<span class="constructor">Width()</span><span class="operator"> * </span>lhs.get<span class="constructor">Height()</span> - rhs.get<span class="constructor">Width()</span><span class="operator"> * </span>rhs.get<span class="constructor">Height()</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        return sizeMap<span class="literal">[<span class="number">0</span>]</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="constructor">RequiresApi(<span class="params">api</span> = Build.VERSION_CODES.LOLLIPOP)</span></span><br><span class="line">    <span class="keyword">private</span> void <span class="keyword">open</span><span class="constructor">Camera()</span> &#123;</span><br><span class="line">        CameraManager cameraManager = (CameraManager) get<span class="constructor">SystemService(CAMERA_SERVICE)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">ActivityCompat</span>.</span></span>check<span class="constructor">SelfPermission(<span class="params">this</span>, Manifest.<span class="params">permission</span>.CAMERA)</span> != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cameraManager.<span class="keyword">open</span><span class="constructor">Camera(<span class="params">cameraId</span>, <span class="params">mStateCallback</span>, <span class="params">handler</span>)</span>;</span><br><span class="line">        &#125; catch (CameraAccessException e) &#123;</span><br><span class="line">            e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="constructor">RequiresApi(<span class="params">api</span> = Build.VERSION_CODES.LOLLIPOP)</span></span><br><span class="line">    <span class="keyword">private</span> CameraDevice.StateCallback mStateCallback = <span class="keyword">new</span> CameraDevice.<span class="constructor">StateCallback()</span> &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void on<span class="constructor">Opened(@NonNull CameraDevice <span class="params">camera</span>)</span> &#123;</span><br><span class="line">            cameraDevice = camera;</span><br><span class="line">            start<span class="constructor">PreView()</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void on<span class="constructor">Disconnected(@NonNull CameraDevice <span class="params">camera</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (cameraDevice != null) &#123;</span><br><span class="line">                cameraDevice.close<span class="literal">()</span>;</span><br><span class="line">                camera.close<span class="literal">()</span>;</span><br><span class="line">                cameraDevice = null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void on<span class="constructor">Error(@NonNull CameraDevice <span class="params">camera</span>, <span class="params">int</span> <span class="params">error</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (cameraDevice != null) &#123;</span><br><span class="line">                cameraDevice.close<span class="literal">()</span>;</span><br><span class="line">                camera.close<span class="literal">()</span>;</span><br><span class="line">                cameraDevice = null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    @<span class="constructor">RequiresApi(<span class="params">api</span> = Build.VERSION_CODES.LOLLIPOP)</span></span><br><span class="line">    <span class="keyword">private</span> void start<span class="constructor">PreView()</span> &#123;</span><br><span class="line">        SurfaceTexture mSurfaceTexture = textureView.get<span class="constructor">SurfaceTexture()</span>;</span><br><span class="line">        mSurfaceTexture.set<span class="constructor">DefaultBufferSize(<span class="params">previewSize</span>.<span class="params">getWidth</span>()</span>, previewSize.get<span class="constructor">Height()</span>);</span><br><span class="line"></span><br><span class="line">        Surface previewSurface = <span class="keyword">new</span> <span class="constructor">Surface(<span class="params">mSurfaceTexture</span>)</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            builder = cameraDevice.create<span class="constructor">CaptureRequest(CameraDevice.TEMPLATE_PREVIEW)</span>;</span><br><span class="line">            builder.add<span class="constructor">Target(<span class="params">previewSurface</span>)</span>;</span><br><span class="line">            cameraDevice.create<span class="constructor">CaptureSession(Arrays.<span class="params">asList</span>(<span class="params">previewSurface</span>)</span>, <span class="keyword">new</span> CameraCaptureSession.<span class="constructor">StateCallback()</span> &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void on<span class="constructor">Configured(@NonNull CameraCaptureSession <span class="params">session</span>)</span> &#123;</span><br><span class="line">                    request = builder.build<span class="literal">()</span>;</span><br><span class="line">                    session = session;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        session.set<span class="constructor">RepeatingRequest(<span class="params">request</span>, <span class="params">null</span>, <span class="params">handler</span>)</span>;</span><br><span class="line">                    &#125; catch (CameraAccessException e) &#123;</span><br><span class="line">                        e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                @Override</span><br><span class="line">                public void on<span class="constructor">ConfigureFailed(@NonNull CameraCaptureSession <span class="params">session</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, handler);</span><br><span class="line">        &#125; catch (CameraAccessException e) &#123;</span><br><span class="line">            e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> void start<span class="constructor">CameraThread()</span> &#123;</span><br><span class="line">        handlerThread = <span class="keyword">new</span> <span class="constructor">HandlerThread(<span class="string">&quot;CameraHandlerThread&quot;</span>)</span>;</span><br><span class="line">        handlerThread.start<span class="literal">()</span>;</span><br><span class="line">        handler = <span class="keyword">new</span> <span class="constructor">Handler(<span class="params">handlerThread</span>.<span class="params">getLooper</span>()</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void on<span class="constructor">Pause()</span> &#123;</span><br><span class="line">        super.on<span class="constructor">Pause()</span>;</span><br><span class="line">        <span class="keyword">if</span> (session != null) &#123;</span><br><span class="line">            session.close<span class="literal">()</span>;</span><br><span class="line">            session = null;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cameraDevice != null) &#123;</span><br><span class="line">            cameraDevice.close<span class="literal">()</span>;</span><br><span class="line">            cameraDevice = null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void on<span class="constructor">Click(View <span class="params">v</span>)</span> &#123;</span><br><span class="line">        switch (v.get<span class="constructor">Id()</span>) &#123;</span><br><span class="line">            case <span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>id.btn_texture_font:</span><br><span class="line"></span><br><span class="line">                break;</span><br><span class="line">            case <span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>id.btn_texture_back:</span><br><span class="line"></span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/xiaoniudadi/android-media-demo/tree/master/03-android-media-camera-video">demo代码</a></p><h1 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h1><p><a href="https://www.jianshu.com/p/e01c11b96829">Camera2 API 采集视频并SurfaceView、TextureView 预览</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Camera2 API 采集视频并SurfaceView、TextureView 预览&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
    <category term="音视频" scheme="http://www.paulniu.com/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>拥抱Python（九） 字典</title>
    <link href="http://www.paulniu.com/2019/08/05/python-09/"/>
    <id>http://www.paulniu.com/2019/08/05/python-09/</id>
    <published>2019-08-05T13:51:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>字典</p><span id="more"></span><p>字典是另一种可变容器模型，且可存储任意类型对象<br>字典的每个键值(key=value)对用冒号(:)分割，每个对之间用逗号隔开，字典是放在花括号里面的<br>键必须是唯一的，但值不必<br>值可以取任何数据类型，但键必须是不可变的，如字符串，数字，元组</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">dic</span> = &#123;<span class="string">&quot;a&quot;</span>:<span class="number">123</span>,<span class="string">&quot;b&quot;</span>:<span class="string">&quot;123&quot;</span>,<span class="number">100</span>:<span class="number">101</span>,(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>):<span class="string">&quot;hello world&quot;</span>&#125;</span><br><span class="line"><span class="attribute">print</span>(dic)</span><br><span class="line"><span class="attribute">print</span>(dic[<span class="string">&quot;a&quot;</span>])</span><br><span class="line"><span class="attribute">print</span>(dic[(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)])</span><br></pre></td></tr></table></figure><h3 id="修改字典"><a href="#修改字典" class="headerlink" title="修改字典"></a>修改字典</h3><p>向字典添加新内容的方法是增加新的键值对，修改或删除已有的键值对</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dict</span> = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;paulniu&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">27</span>,<span class="string">&quot;city&quot;</span>:<span class="string">&quot;BJ&quot;</span>&#125;</span><br><span class="line"><span class="built_in">dict</span>[<span class="string">&quot;age&quot;</span>] = <span class="number">28</span></span><br><span class="line"><span class="built_in">dict</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&quot;牛谱乐&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>)</span><br></pre></td></tr></table></figure><h3 id="删除字典元素"><a href="#删除字典元素" class="headerlink" title="删除字典元素"></a>删除字典元素</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">dict</span> = &#123;<span class="number">1</span>:<span class="string">&quot;hello&quot;</span>,<span class="number">2</span>:<span class="string">&quot;world&quot;</span>,<span class="number">3</span>:<span class="number">9</span>,<span class="string">&quot;name&quot;</span>:<span class="number">23</span>,(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>):[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]&#125;</span><br><span class="line"><span class="attribute">del</span> dict[<span class="number">1</span>]</span><br><span class="line"><span class="attribute">print</span>(dict)</span><br><span class="line"><span class="comment"># dict.clear()</span></span><br><span class="line"><span class="attribute">del</span> dict</span><br><span class="line"><span class="attribute">print</span>(dict)</span><br></pre></td></tr></table></figure><h3 id="字典键的特性"><a href="#字典键的特性" class="headerlink" title="字典键的特性"></a>字典键的特性</h3><ol><li>不允许同一个键出现两次，创建时如果同一个键被赋值了两次，前面的值会被覆盖</li><li>键必须不可变，所以只能是数字，字符串或者元祖，列表就是不行</li></ol><h3 id="字典内置函数"><a href="#字典内置函数" class="headerlink" title="字典内置函数"></a>字典内置函数</h3><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">len(dict)</td><td align="left">计算字典元素个数，即键的总数</td></tr><tr><td align="left">str(dict)</td><td align="left">输出字典，以可打印的字符串表示</td></tr><tr><td align="left">type(dict)</td><td align="left">返回输入的变量类型，如果变量是字典则返回字典类型</td></tr><tr><td align="left">dict.clear()</td><td align="left">删除字典内所有元素</td></tr><tr><td align="left">dict.copy()</td><td align="left">返回一个字典的浅复制</td></tr><tr><td align="left">dict.fromkeys()</td><td align="left">创建一个薪字典，以序列seq中元素作为字典的键，val为字典所有键对应的初始值</td></tr><tr><td align="left">dict.get(ke,default=None)</td><td align="left">返回指定键的值，如果值不在字典中返回default值</td></tr><tr><td align="left">key in dict</td><td align="left">如果键在字典dict中返回True，否则返回false</td></tr><tr><td align="left">dict.items()</td><td align="left">以列表返回可遍历的(键，值)元组数组</td></tr><tr><td align="left">dict.keys()</td><td align="left">返回一个迭代器，keyishiyonglist()来转换成列表</td></tr><tr><td align="left">dict.setdefault(key,default=None)</td><td align="left">和get()类似，但是如果键不存在于字典中，将会添加键并将值设置为default</td></tr><tr><td align="left">dict.update(dict2)</td><td align="left">把字典dict2的键值对更新到dict中</td></tr><tr><td align="left">dict.values()</td><td align="left">返回一个迭代器，可以shiyonglist()来转换成列表</td></tr><tr><td align="left">dict.pop(key[,default])</td><td align="left">删除字典给定键key所有对应的值，返回值为被删除的值，key值必须给出，否则返回default值</td></tr><tr><td align="left">dict.popitem()</td><td align="left">随机返回并删除字典中的一对键值(一般删除末尾)</td></tr></tbody></table><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;paulniu&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">27</span>,<span class="string">&quot;city&quot;</span>:<span class="string">&quot;beijing&quot;</span>,<span class="string">&quot;home&quot;</span>:<span class="string">&quot;henan&quot;</span>,(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>):<span class="selector-attr">[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,(<span class="string">&quot;hello&quot;</span>,[<span class="string">&quot;world&quot;</span>]</span>)]&#125;</span><br><span class="line">dict2 = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;牛谱乐&quot;</span>,<span class="string">&quot;school&quot;</span>:<span class="string">&quot;Guangzhou Un&quot;</span>&#125;</span><br><span class="line">tunple = (<span class="string">&quot;address&quot;</span>,<span class="string">&quot;phone&quot;</span>,<span class="number">1</span>,(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;字典的长度是&quot;</span>,len(dict1)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(str(dict1)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(type(dict1)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;字典的浅复制&quot;</span>,dict1.copy()</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;formkeys=&quot;</span>,dict1.fromkeys(tunple)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(dict1)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;返回键为name的值&quot;</span>,dict1.get(<span class="string">&quot;name&quot;</span>)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&#x27;age&#x27;</span> in dict1)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(dict1.items()</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(dict1.keys()</span></span>)</span><br><span class="line">dict1<span class="selector-class">.update</span>(dict2)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(dict1)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(dict1.values()</span></span>)</span><br><span class="line">dict1<span class="selector-class">.popitem</span>()</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(dict1)</span></span></span><br><span class="line">dict1<span class="selector-class">.pop</span>((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(dict1)</span></span></span><br></pre></td></tr></table></figure><p>字典是支持无线嵌套的，但是最好别太多层，比较难分析</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><pre><code>students = &#123;&#125;write = 1while write:    name = str(input(&quot;请输入学生姓名&quot;))    age = int(input(&quot;请输入学生年龄&quot;))    students[str(name)] = age    write = int(input(&quot;是否继续? \n 1/继续  0/结束 \n&quot;))# 输出最终结果for key, value in students.items():    if value &gt; 90:        print(&quot;%s    %s    A&quot;.center(20, &quot;-&quot;) % (key, value))    elif value &gt;= 60 and value &lt;= 90:        print(&quot;%s    %s    B&quot;.center(20, &quot;-&quot;) % (key, value))    elif value &lt; 60:        print(&quot;%s    %s    C&quot;.center(20, &quot;-&quot;) % (key, value))</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;字典&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="http://www.paulniu.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>android 音视频开发(三)</title>
    <link href="http://www.paulniu.com/2019/08/04/android-media-03/"/>
    <id>http://www.paulniu.com/2019/08/04/android-media-03/</id>
    <published>2019-08-04T13:51:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>实现音频的采集和播放</p><span id="more"></span><p>实现语音的采集和播放有三种方式，这里我会把三种方式都分别实现一下。这三种方式分别是AudioRecord，MediaRecord，AudioTrack。<br>其中MediaRecord是基于文件录音，系统集成，提供了大量的方法，集成了录音，编码，压缩等，支持少量的音频格式文件，操作起来比较简单。而AudioRecord基于字节流录音，Audiotrack更加贴近底层，使用起来更加灵活，也能够实现更多的功能。<br>先来看一下他们的优缺点吧</p><h4 id="AudioRecord"><a href="#AudioRecord" class="headerlink" title="AudioRecord"></a>AudioRecord</h4><p>优点：可以实现语音的实时处理，进行边录边播，对音频的实时处理AudioTrack更加贴近底层<br>缺点：输出的是PCM语音数据，如果保存成音频文件是不能被播放器播放的。需要使用AudioTrack进行播放。API不完善，常见的如暂停功能没有实现</p><h4 id="MediaRecord"><a href="#MediaRecord" class="headerlink" title="MediaRecord"></a>MediaRecord</h4><p>优点：系统封装完整，直接调用即可，操作简单，录制的音频文件可以使用系统自带的播放器播放<br>缺点：无法实现实时处理音频，输出音频格式少，录制的音频文件是经过压缩的，需要设置编码器</p><p>在实现进一步操作之前，有几个专有名词需要了解一下</p><h4 id="采样率"><a href="#采样率" class="headerlink" title="采样率"></a>采样率</h4><p>采样率：采样率即采样频率，指每秒钟取得声音样本的次数，采样频率越高，能表现的频率范围就越大，音质就会越好，声音的还原度也更真实，但此同时带来的弊端是占有的内存资源也会越大。因为人耳的分辨率有限，并不是频率越高越好，44KHz已相当于CD音质了，目前的常用采样频率都不超过48KHz。</p><h4 id="声道"><a href="#声道" class="headerlink" title="声道"></a>声道</h4><p>声道：这个好理解，生活中也经常听到单声道、双声道等，在Android系统中，可以通过设置音频的录制的声道 CHANNEL_IN_STEREO 为双声道，CHANNEL_CONFIGURATION_MONO 为单声道，双声道音质更加，但同样伴随着内存资源消耗更大的弊端。</p><h4 id="采样位深"><a href="#采样位深" class="headerlink" title="采样位深"></a>采样位深</h4><p>采样位深：位深度也叫采样位深，音频的位深度决定动态范围，它是用来衡量声音波动变化的一个参数，也可以说是声卡的分辨率。它的数值越大，分辨率也就越高，所发出声音的能力越强。在计算机中采样位数一般有8位和16位之分，即分成2的8次方和2的16次方之分，PCM 16位每个样本，保证设备支持。PCM 8位每个样本，不一定能得到设备支持。</p><h1 id="AudioRecord-1"><a href="#AudioRecord-1" class="headerlink" title="AudioRecord"></a>AudioRecord</h1><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>我们先来看构造函数</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> AudioRecord(<span class="built_in">int</span> audioSource, <span class="built_in">int</span> sampleRateInHz, <span class="built_in">int</span> channelConfig, <span class="built_in">int</span> audioFormat,</span><br><span class="line">            <span class="built_in">int</span> bufferSizeInBytes)</span><br></pre></td></tr></table></figure><ol><li>audioSource：录音源，指定声音是从哪里录制的，官网文档参考戳此</li><li>sampleRateInHz：采样率</li><li>channelConfig：声道数</li><li>audioFormat：采样位深</li><li>bufferSizeInBytes：最小缓冲大小，可以通过 getMinBufferSize 获取。</li></ol><blockquote><p>存储量= 采样率 * 采样时间 * 采样位深 / 8 * 声道数（Bytes）。以采样率为44.1kHZ、采样位深为16位、双声道计算，一分钟消耗的内存为10.335M。</p></blockquote><p>完整代码</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于实现录音、暂停、继续、停止、播放</span></span><br><span class="line"><span class="comment"> * 最近看了下pcm和wav，内容真多，要是有一些参数不理解的，可以查阅资料</span></span><br><span class="line"><span class="comment"> * PCM BufferSize = 采样率 * 采样时间 * 采样位深 / 8 * 通道数（Bytes）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AudioRecorder</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AudioRecorder audioRecorder;</span><br><span class="line">    <span class="comment">//音频输入-麦克风</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> AUDIO_INPUT = MediaRecorder.AudioSource.MIC;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 采样率即采样频率，采样频率越高，能表现的频率范围就越大</span></span><br><span class="line"><span class="comment">     * 设置音频采样率，44100是目前的标准，但是某些设备仍然支持22050，16000，11025</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> AUDIO_SAMPLE_RATE = <span class="number">16000</span>;</span><br><span class="line">    <span class="comment">// 设置音频的录制的声道CHANNEL_IN_STEREO为双声道，CHANNEL_CONFIGURATION_MONO为单声道</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> AUDIO_CHANNEL = AudioFormat.CHANNEL_IN_MONO;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 位深度也叫采样位深，音频的位深度决定动态范围</span></span><br><span class="line"><span class="comment">     * 音频数据格式:PCM 16位每个样本。保证设备支持。PCM 8位每个样本。不一定能得到设备支持。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> AUDIO_ENCODING = AudioFormat.ENCODING_PCM_16BIT;</span><br><span class="line">    <span class="comment">// 缓冲区字节大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bufferSizeInBytes = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//录音对象</span></span><br><span class="line">    <span class="keyword">private</span> AudioRecord audioRecord;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 播放声音</span></span><br><span class="line"><span class="comment">     * 一些必要的参数，需要和AudioRecord一一对应，否则声音会出错</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> AudioTrack audioTrack;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//录音状态,默认未开始</span></span><br><span class="line">    <span class="keyword">private</span> AudioStatus status = AudioStatus.STATUS_NO_READY;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//文件名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> fileName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//录音文件集合</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;<span class="keyword">String</span>&gt; filesName = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用来回调，转码后的文件绝对路径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> IAudioCallback iAudioCallback;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建带有缓存的线程池</span></span><br><span class="line"><span class="comment">     * 当执行第二个任务时第一个任务已经完成，会复用执行第一个任务的线程，而不用每次新建线程。</span></span><br><span class="line"><span class="comment">     * 如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</span></span><br><span class="line"><span class="comment">     * 一开始选择错误，选用newSingleThreadExecutor，导致停止后在录制，出现一堆问题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ExecutorService cachedThreadPool = Executors.<span class="built_in">newCachedThreadPool</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重置，删除所有的pcm文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isReset = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">AudioRecorder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        isReset = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单例，双重检验</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param iAudio 用于合成后回调</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AudioRecorder <span class="title">getInstance</span><span class="params">(IAudioCallback iAudio)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (audioRecorder == null) &#123;</span><br><span class="line">            <span class="built_in">synchronized</span> (AudioRecord.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (audioRecorder == null) &#123;</span><br><span class="line">                    audioRecorder = <span class="keyword">new</span> <span class="built_in">AudioRecorder</span>();</span><br><span class="line">                    iAudioCallback = iAudio;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> audioRecorder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建默认的录音对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param fileName 文件名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @<span class="built_in">RequiresApi</span>(api = Build.VERSION_CODES.LOLLIPOP)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createDefaultAudio</span><span class="params">(<span class="keyword">String</span> fileName)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获得缓冲区字节大小</span></span><br><span class="line">        bufferSizeInBytes = AudioRecord.<span class="built_in">getMinBufferSize</span>(AUDIO_SAMPLE_RATE, AUDIO_CHANNEL, AUDIO_ENCODING);</span><br><span class="line">        audioRecord = <span class="keyword">new</span> <span class="built_in">AudioRecord</span>(AUDIO_INPUT, AUDIO_SAMPLE_RATE, AUDIO_CHANNEL, AUDIO_ENCODING, bufferSizeInBytes);</span><br><span class="line">        <span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">        status = AudioStatus.STATUS_READY;</span><br><span class="line"></span><br><span class="line">        AudioAttributes audioAttributes = <span class="keyword">new</span> AudioAttributes.<span class="built_in">Builder</span>().<span class="built_in">setUsage</span>(AudioAttributes.USAGE_MEDIA)</span><br><span class="line">                .<span class="built_in">setContentType</span>(AudioAttributes.CONTENT_TYPE_MUSIC).<span class="built_in">build</span>();</span><br><span class="line"></span><br><span class="line">        AudioFormat audioFormat = <span class="keyword">new</span> AudioFormat.<span class="built_in">Builder</span>().<span class="built_in">setSampleRate</span>(AUDIO_SAMPLE_RATE)</span><br><span class="line">                .<span class="built_in">setEncoding</span>(AUDIO_ENCODING).<span class="built_in">setChannelMask</span>(AudioFormat.CHANNEL_OUT_MONO).<span class="built_in">build</span>();</span><br><span class="line"></span><br><span class="line">        audioTrack = <span class="keyword">new</span> <span class="built_in">AudioTrack</span>(audioAttributes, audioFormat, bufferSizeInBytes,</span><br><span class="line">                AudioTrack.MODE_STREAM, AudioManager.AUDIO_SESSION_ID_GENERATE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始录音</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startRecord</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (status == AudioStatus.STATUS_NO_READY || TextUtils.<span class="built_in">isEmpty</span>(fileName)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">IllegalStateException</span>(<span class="string">&quot;请检查录音权限&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (status == AudioStatus.STATUS_START) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">IllegalStateException</span>(<span class="string">&quot;正在录音&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        audioRecord.<span class="built_in">startRecording</span>();</span><br><span class="line">        cachedThreadPool.<span class="built_in">execute</span>(<span class="keyword">new</span> <span class="built_in">Runnable</span>() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">run</span>() &#123;</span><br><span class="line">                <span class="built_in">writeDataTOFile</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 暂停录音</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pauseRecord</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (status != AudioStatus.STATUS_START) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">IllegalStateException</span>(<span class="string">&quot;没有在录音&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            audioRecord.<span class="built_in">stop</span>();</span><br><span class="line">            status = AudioStatus.STATUS_PAUSE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 停止录音</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopRecord</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (status == AudioStatus.STATUS_NO_READY || status == AudioStatus.STATUS_READY) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">IllegalStateException</span>(<span class="string">&quot;录音尚未开始&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            audioRecord.<span class="built_in">stop</span>();</span><br><span class="line">            status = AudioStatus.STATUS_STOP;</span><br><span class="line">            <span class="built_in">release</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//假如有暂停录音</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (filesName.<span class="built_in">size</span>() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                List&lt;<span class="keyword">String</span>&gt; filePaths = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">String</span> fileName : filesName) &#123;</span><br><span class="line">                    filePaths.<span class="built_in">add</span>(FileUtils.<span class="built_in">getPcmFileAbsolutePath</span>(fileName));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//清除</span></span><br><span class="line">                filesName.<span class="built_in">clear</span>();</span><br><span class="line">                <span class="keyword">if</span> (isReset) &#123;</span><br><span class="line">                    isReset = <span class="literal">false</span>;</span><br><span class="line">                    FileUtils.<span class="built_in">clearFiles</span>(filePaths);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//将多个pcm文件转化为wav文件</span></span><br><span class="line">                    <span class="built_in">pcmFilesToWavFile</span>(filePaths);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="built_in"><span class="keyword">catch</span></span> (IllegalStateException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">IllegalStateException</span>(e.<span class="built_in">getMessage</span>());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (audioRecord != null) &#123;</span><br><span class="line">            audioRecord.<span class="built_in">release</span>();</span><br><span class="line">            audioRecord = null;</span><br><span class="line">        &#125;</span><br><span class="line">        status = AudioStatus.STATUS_NO_READY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 播放合成后的wav文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param filePath 文件的绝对路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(<span class="keyword">final</span> <span class="keyword">String</span> filePath)</span> </span>&#123;</span><br><span class="line">        audioTrack.<span class="built_in">play</span>();</span><br><span class="line"></span><br><span class="line">        cachedThreadPool.<span class="built_in">execute</span>(<span class="keyword">new</span> <span class="built_in">Runnable</span>() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">run</span>() &#123;</span><br><span class="line">                <span class="built_in">File</span> file = <span class="keyword">new</span> <span class="built_in"><span class="built_in">File</span></span>(filePath);</span><br><span class="line">                FileInputStream fis = null;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis = <span class="keyword">new</span> <span class="built_in">FileInputStream</span>(file);</span><br><span class="line">                &#125; <span class="built_in"><span class="keyword">catch</span></span> (FileNotFoundException e) &#123;</span><br><span class="line">                    e.<span class="built_in">printStackTrace</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[bufferSizeInBytes];</span><br><span class="line">                <span class="keyword">while</span> (fis != null) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">int</span> readCount = fis.<span class="built_in">read</span>(buffer);</span><br><span class="line">                        <span class="keyword">if</span> (readCount == AudioTrack.ERROR_INVALID_OPERATION || readCount == AudioTrack.ERROR_BAD_VALUE) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (readCount != <span class="number">0</span> &amp;&amp; readCount != <span class="number">-1</span>) &#123;</span><br><span class="line">                            audioTrack.<span class="built_in">write</span>(buffer, <span class="number">0</span>, readCount);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="built_in"><span class="keyword">catch</span></span> (IOException e) &#123;</span><br><span class="line">                        e.<span class="built_in">printStackTrace</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放audioTrack</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">releaseAudioTrack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (audioTrack == null) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (audioTrack.<span class="built_in">getPlayState</span>() != AudioTrack.PLAYSTATE_STOPPED) &#123;</span><br><span class="line">            audioTrack.<span class="built_in">stop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        audioTrack.<span class="built_in">release</span>();</span><br><span class="line">        audioTrack = null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将音频信息写入文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeDataTOFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// new一个byte数组用来存一些字节数据，大小为缓冲区大小</span></span><br><span class="line">        <span class="keyword">byte</span>[] audioData = <span class="keyword">new</span> <span class="keyword">byte</span>[bufferSizeInBytes];</span><br><span class="line">        FileOutputStream fos = null;</span><br><span class="line">        <span class="keyword">int</span> readSize = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">String</span> currentFileName = fileName;</span><br><span class="line">            <span class="keyword">if</span> (status == AudioStatus.STATUS_PAUSE) &#123;</span><br><span class="line">                <span class="comment">//假如是暂停录音 将文件名后面加个数字,防止重名文件内容被覆盖</span></span><br><span class="line">                currentFileName += filesName.<span class="built_in">size</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            filesName.<span class="built_in">add</span>(currentFileName);</span><br><span class="line">            <span class="built_in">File</span> file = <span class="keyword">new</span> <span class="built_in"><span class="built_in">File</span></span>(FileUtils.<span class="built_in">getPcmFileAbsolutePath</span>(currentFileName));</span><br><span class="line">            <span class="keyword">if</span> (file.<span class="built_in">exists</span>()) &#123;</span><br><span class="line">                file.<span class="built_in"><span class="keyword">delete</span></span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 建立一个可存取字节的文件</span></span><br><span class="line">            fos = <span class="keyword">new</span> <span class="built_in">FileOutputStream</span>(file);</span><br><span class="line">        &#125; <span class="built_in"><span class="keyword">catch</span></span> (IllegalStateException e) &#123;</span><br><span class="line">            e.<span class="built_in">printStackTrace</span>();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">IllegalStateException</span>(e.<span class="built_in">getMessage</span>());</span><br><span class="line">        &#125; <span class="built_in"><span class="keyword">catch</span></span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.<span class="built_in">printStackTrace</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将录音状态设置成正在录音状态</span></span><br><span class="line">        status = AudioStatus.STATUS_START;</span><br><span class="line">        <span class="keyword">while</span> (status == AudioStatus.STATUS_START) &#123;</span><br><span class="line">            readSize = audioRecord.<span class="built_in">read</span>(audioData, <span class="number">0</span>, bufferSizeInBytes);</span><br><span class="line">            <span class="keyword">if</span> (AudioRecord.ERROR_INVALID_OPERATION != readSize &amp;&amp; fos != null) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.<span class="built_in">write</span>(audioData);</span><br><span class="line">                &#125; <span class="built_in"><span class="keyword">catch</span></span> (IOException e) &#123;</span><br><span class="line">                    e.<span class="built_in">printStackTrace</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fos != null) &#123;</span><br><span class="line">                fos.<span class="built_in">close</span>();<span class="comment">// 关闭写入流</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="built_in"><span class="keyword">catch</span></span> (IOException e) &#123;</span><br><span class="line">            e.<span class="built_in">printStackTrace</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将pcm合并成wav</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param filePaths pcm文件的绝对路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pcmFilesToWavFile</span><span class="params">(<span class="keyword">final</span> List&lt;<span class="keyword">String</span>&gt; filePaths)</span> </span>&#123;</span><br><span class="line">        cachedThreadPool.<span class="built_in">execute</span>(<span class="keyword">new</span> <span class="built_in">Runnable</span>() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">run</span>() &#123;</span><br><span class="line">                <span class="keyword">String</span> filePath = FileUtils.<span class="built_in">getWavFileAbsolutePath</span>(fileName);</span><br><span class="line">                <span class="keyword">if</span> (PcmToWav.<span class="built_in">mergePCMFilesToWAVFile</span>(filePaths, filePath)) &#123;</span><br><span class="line">                    <span class="comment">//合成后回调</span></span><br><span class="line">                    <span class="keyword">if</span> (iAudioCallback != null) &#123;</span><br><span class="line">                        iAudioCallback.<span class="built_in">showPlay</span>(filePath);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">IllegalStateException</span>(<span class="string">&quot;合成失败&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                fileName = null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取录音对象的状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AudioStatus <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="MediaRecord-1"><a href="#MediaRecord-1" class="headerlink" title="MediaRecord"></a>MediaRecord</h1><p>完整代码</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Coder: niupuyue</span></span><br><span class="line"><span class="comment"> * Date: 2019/8/6</span></span><br><span class="line"><span class="comment"> * Time: 16:29</span></span><br><span class="line"><span class="comment"> * Desc: 用于实现录音，暂停，继续，停止，播放</span></span><br><span class="line"><span class="comment"> * 统一将语音录制成wav格式</span></span><br><span class="line"><span class="comment"> * Version:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public <span class="keyword">class</span> IMediaRecorder &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认采样率</span></span><br><span class="line">    <span class="keyword">private</span> static final <span class="built_in">int</span> RECORDER_SIMPLE_RATE = <span class="number">8000</span>;</span><br><span class="line">    <span class="comment">// 最大采样率</span></span><br><span class="line">    <span class="keyword">private</span> static final <span class="built_in">int</span> RECORDER_SIMPLE_BIG_RATE = <span class="number">67000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> static IMediaRecorder mIMediaRecorder;</span><br><span class="line"></span><br><span class="line">    public static IMediaRecorder get<span class="constructor">Instance()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mIMediaRecorder<span class="operator"> == </span>null) &#123;</span><br><span class="line">            synchronized (<span class="module-access"><span class="module"><span class="identifier">IMediaRecorder</span>.</span></span><span class="keyword">class</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mIMediaRecorder<span class="operator"> == </span>null) &#123;</span><br><span class="line">                    mIMediaRecorder = <span class="keyword">new</span> <span class="constructor">IMediaRecorder()</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return mIMediaRecorder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认输出文件</span></span><br><span class="line">    <span class="keyword">private</span> File audioFile;</span><br><span class="line">    <span class="comment">// 语音录制系统封装好的对象</span></span><br><span class="line">    <span class="keyword">private</span> MediaRecorder mediaRecorder;</span><br><span class="line">    <span class="comment">// 语音播放系统封装好的对象</span></span><br><span class="line">    <span class="keyword">private</span> MediaPlayer mediaPlayer;</span><br><span class="line">    <span class="comment">// 语音播放管理对象</span></span><br><span class="line">    <span class="keyword">private</span> AudioManager audioManager;</span><br><span class="line">    <span class="comment">// 声明一个带有缓存的线程池</span></span><br><span class="line">    <span class="keyword">private</span> ExecutorService thread = <span class="module-access"><span class="module"><span class="identifier">Executors</span>.</span></span><span class="keyword">new</span><span class="constructor">CachedThreadPool()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始语音录制</span></span><br><span class="line"><span class="comment">     * 语音的录制放在子线程中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public void start<span class="constructor">Recorder()</span> &#123;</span><br><span class="line">        thread.execute(<span class="keyword">new</span> <span class="constructor">Runnable()</span> &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run<span class="literal">()</span> &#123;</span><br><span class="line">                audioFile = <span class="module-access"><span class="module"><span class="identifier">FileUtils</span>.</span></span>create<span class="constructor">MediaRecordCacheFile(<span class="params">new</span> SimpleDateFormat(<span class="string">&quot;yyyyMMddhhmmss&quot;</span>, Locale.CHINA)</span>.format(<span class="keyword">new</span> <span class="constructor">Date()</span>));</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mediaRecorder<span class="operator"> == </span>null) &#123;</span><br><span class="line">                        mediaRecorder = <span class="keyword">new</span> <span class="constructor">MediaRecorder()</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    mediaRecorder.set<span class="constructor">AudioSource(MediaRecorder.AudioSource.MIC)</span>;</span><br><span class="line">                    mediaRecorder.set<span class="constructor">OutputFormat(MediaRecorder.OutputFormat.RAW_AMR)</span>;</span><br><span class="line">                    mediaRecorder.set<span class="constructor">AudioEncoder(MediaRecorder.AudioEncoder.AMR_NB)</span>;</span><br><span class="line">                    mediaRecorder.set<span class="constructor">AudioSamplingRate(RECORDER_SIMPLE_RATE)</span>;</span><br><span class="line">                    mediaRecorder.set<span class="constructor">AudioEncodingBitRate(RECORDER_SIMPLE_BIG_RATE)</span>;</span><br><span class="line">                    mediaRecorder.set<span class="constructor">OutputFile(<span class="params">audioFile</span>.<span class="params">getAbsolutePath</span>()</span>);</span><br><span class="line">                    mediaRecorder.prepare<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">                    mediaRecorder.start<span class="literal">()</span>;</span><br><span class="line">                &#125; catch (Exception ex) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mediaRecorder != null) &#123;</span><br><span class="line">                        mediaRecorder.reset<span class="literal">()</span>;</span><br><span class="line">                        mediaRecorder.release<span class="literal">()</span>;</span><br><span class="line">                        mediaRecorder = null;</span><br><span class="line">                    &#125;</span><br><span class="line">                    ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 停止录制语音</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public void stop<span class="constructor">Recorder()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mediaRecorder != null) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mediaRecorder.stop<span class="literal">()</span>;</span><br><span class="line">            &#125; catch (Exception ex) &#123;</span><br><span class="line">                ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mediaRecorder.release<span class="literal">()</span>;</span><br><span class="line">            mediaRecorder = null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 播放语音</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public void play<span class="constructor">Recorder()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (audioFile != null<span class="operator"> &amp;&amp; </span>audioFile.exists<span class="literal">()</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mediaPlayer<span class="operator"> == </span>null) &#123;</span><br><span class="line">                mediaPlayer = <span class="keyword">new</span> <span class="constructor">MediaPlayer()</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 语音播放完成回调</span></span><br><span class="line">            mediaPlayer.set<span class="constructor">OnCompletionListener(<span class="params">new</span> MediaPlayer.OnCompletionListener()</span> &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void on<span class="constructor">Completion(MediaPlayer <span class="params">mediaPlayer</span>)</span> &#123;</span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">Log</span>.</span></span>e(<span class="string">&quot;npl&quot;</span>, <span class="string">&quot;语音播放完成&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 设置语音播放失败监听回调</span></span><br><span class="line">            mediaPlayer.set<span class="constructor">OnErrorListener(<span class="params">new</span> MediaPlayer.OnErrorListener()</span> &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public boolean on<span class="constructor">Error(MediaPlayer <span class="params">mediaPlayer</span>, <span class="params">int</span> <span class="params">what</span>, <span class="params">int</span> <span class="params">extra</span>)</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (what<span class="operator"> == </span>MediaPlayer.MEDIA_ERROR_UNKNOWN) &#123;</span><br><span class="line">                        <span class="module-access"><span class="module"><span class="identifier">Log</span>.</span></span>e(<span class="string">&quot;NPL&quot;</span>, <span class="string">&quot;语音播放失败&quot;</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="module-access"><span class="module"><span class="identifier">Log</span>.</span></span>e(<span class="string">&quot;NPL&quot;</span>, <span class="string">&quot;取消语音播放&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    return <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span> (!mediaPlayer.is<span class="constructor">Playing()</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    mediaPlayer.reset<span class="literal">()</span>;</span><br><span class="line">                    mediaPlayer.set<span class="constructor">DataSource(<span class="params">audioFile</span>.<span class="params">getAbsolutePath</span>()</span>);</span><br><span class="line">                    <span class="comment">// 异步操作播放语音</span></span><br><span class="line">                    mediaPlayer.prepare<span class="constructor">Async()</span>;</span><br><span class="line">                    <span class="comment">// 语音播放准备完毕监听回调</span></span><br><span class="line">                    mediaPlayer.set<span class="constructor">OnPreparedListener(<span class="params">new</span> MediaPlayer.OnPreparedListener()</span> &#123;</span><br><span class="line">                        @Override</span><br><span class="line">                        public void on<span class="constructor">Prepared(MediaPlayer <span class="params">mediaPlayer</span>)</span> &#123;</span><br><span class="line">                            <span class="comment">// 开始播放</span></span><br><span class="line">                            mediaPlayer.start<span class="literal">()</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125; catch (Exception ex) &#123;</span><br><span class="line">                    ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/xiaoniudadi/android-media-demo/tree/master/02-android-media-audio-collection">demo代码</a></p><h1 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h1><p><a href="https://blog.csdn.net/pangpang123654/article/details/82657795">AudioRecord 录音详解</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;实现音频的采集和播放&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
    <category term="音视频" scheme="http://www.paulniu.com/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>拥抱Python（八） 元组</title>
    <link href="http://www.paulniu.com/2019/08/04/python-08/"/>
    <id>http://www.paulniu.com/2019/08/04/python-08/</id>
    <published>2019-08-04T13:51:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python的元组和列表类似，不过元组不能修改</p><span id="more"></span><p>元组使用小括号，列表使用方括号<br>如果元组只包含一个元素，这个元素的后面也要加上逗号，否则括号会被当做运算符使用<br>元组中的元素是不允许被修改的，但是我们可以对元祖进行连接组合<br>元组的原始是不允许被删除的，但是我们可以用del语句来删除整个元组</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">tup1</span> = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="attribute">tup2</span> = (&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line"><span class="attribute">tup3</span> = (x for x in range(<span class="number">1</span>,<span class="number">11</span>))</span><br><span class="line"><span class="attribute">print</span>(tup<span class="number">1</span>[<span class="number">0</span>])</span><br><span class="line"><span class="attribute">print</span>(tup<span class="number">1</span>[::<span class="number">2</span>])</span><br><span class="line"><span class="attribute">print</span>(tup<span class="number">1</span>[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line"><span class="attribute">print</span>(tup<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h3 id="修改元组"><a href="#修改元组" class="headerlink" title="修改元组"></a>修改元组</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">tup1</span> = (<span class="number">12</span>,<span class="number">34</span>,<span class="number">56</span>)</span><br><span class="line"><span class="attribute">tup2</span> = (&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;)</span><br><span class="line"><span class="attribute">tup3</span> = tup<span class="number">1</span> + tup<span class="number">2</span></span><br><span class="line"><span class="attribute">print</span>(tup<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h3 id="删除元组"><a href="#删除元组" class="headerlink" title="删除元组"></a>删除元组</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tup = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="selector-tag">del</span> tup</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(tup)</span></span></span><br></pre></td></tr></table></figure><h3 id="元组运算符"><a href="#元组运算符" class="headerlink" title="元组运算符"></a>元组运算符</h3><p>和字符串一样，元组之间可以使用+和*进行运算，也就是进行组合和赋值，运算之后生成一个新的元组</p><table><thead><tr><th align="center">表达式</th><th align="center">结果</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">len((1,2,3))</td><td align="center">3</td><td align="center">计算元素个数</td></tr><tr><td align="center">(1,2,3) + (4,5,6)</td><td align="center">(1,2,3,4,5,6)</td><td align="center">连接</td></tr><tr><td align="center">(“hello”) * 3</td><td align="center">(“hello”,”hello”,”hello”)</td><td align="center">复制</td></tr><tr><td align="center">3 in (1,2,3)</td><td align="center">True</td><td align="center">元素是否存在</td></tr><tr><td align="center">for x in(1,2,3):print(x,end=” “)</td><td align="center">1,2,3</td><td align="center">迭代</td></tr></tbody></table><h3 id="元组内置函数"><a href="#元组内置函数" class="headerlink" title="元组内置函数"></a>元组内置函数</h3><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">len(tuple)</td><td align="center">计算元组元素个数</td></tr><tr><td align="center">max(tuple)</td><td align="center">返回元祖中元素最大值</td></tr><tr><td align="center">min(tuple)</td><td align="center">返回远足中元素最小值</td></tr><tr><td align="center">tuple(seq)</td><td align="center">将列表转换成元组</td></tr></tbody></table><p>tuple陷阱：当定义了一个tuple时，在定义的时候，tuple的元素就必须被确定下来<br>tuple不可变指的是tuple指向的指针时不可变的，指向某一块内容，如果tuple中包含list，那么list其实是可以改变的，只要tuple指向list即可<br>字符串是只用特殊的tuple，支持部分tuple的运算符</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Python的元组和列表类似，不过元组不能修改&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="http://www.paulniu.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>拥抱Python（七） 列表</title>
    <link href="http://www.paulniu.com/2019/08/03/python-07/"/>
    <id>http://www.paulniu.com/2019/08/03/python-07/</id>
    <published>2019-08-03T13:51:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>序列是Python中最基本的数据结构，序列中每个元素都分配一个数字–位置或者索引，从0开始计数</p><span id="more"></span><p>Python有6个序列类型，其中最常见的是列表和元组<br>序列都可以进行的操作包括索引，切片，加，乘检查成员<br>此外，Python内置确定序列的长度以及确定最大值最小值元素的方法<br>列表是最常见的Python数据类型，他可以作为一个方括号内的逗号分隔值出现<br>列表的数据项不需要具有相同的类型<br>创建一个列表，只要用逗号隔开不同的数据项使用方括号括起来即可</p><h3 id="访问列表中的值"><a href="#访问列表中的值" class="headerlink" title="访问列表中的值"></a>访问列表中的值</h3><p>使用下标索引来访问列表中的值，也可以使用方括号的形式截取字符</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list1 = <span class="selector-attr">[1, 2, 3, 4]</span></span><br><span class="line">list2 = <span class="selector-attr">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span></span><br><span class="line">list3 = <span class="selector-attr">[100, 101, <span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>]</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(list1[<span class="number">1</span>])</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(list3[<span class="number">3</span>])</span></span></span><br></pre></td></tr></table></figure><h3 id="更新列表"><a href="#更新列表" class="headerlink" title="更新列表"></a>更新列表</h3><p>我们可以对列表的数据项进行修改和更新，我们可以使用append()方法来添加列表项，如下</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = <span class="selector-attr">[<span class="string">&#x27;google&#x27;</span>,<span class="string">&#x27;paulniu&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>,123,456]</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;第三个元素是&quot;</span>,list1[<span class="number">2</span>])</span></span></span><br><span class="line">list1<span class="selector-attr">[2]</span> = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;更新后第三个元素是&quot;</span>,list1[<span class="number">2</span>])</span></span></span><br></pre></td></tr></table></figure><h3 id="删除列表元素"><a href="#删除列表元素" class="headerlink" title="删除列表元素"></a>删除列表元素</h3><p>可以使用del语句来删除列表的元素</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = <span class="selector-attr">[<span class="string">&#x27;google&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>,1000,2000]</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;原来列表：&quot;</span>,list1)</span></span></span><br><span class="line"><span class="selector-tag">del</span> list1<span class="selector-attr">[1]</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;删除之后列表：&quot;</span>,list1)</span></span></span><br></pre></td></tr></table></figure><h3 id="Python列表脚本操作符"><a href="#Python列表脚本操作符" class="headerlink" title="Python列表脚本操作符"></a>Python列表脚本操作符</h3><p>列表对+和<em>的操作符和字符串相似，+用于组合列表，</em>用于重复列表</p><table><thead><tr><th align="left">Python表达式</th><th align="left">结果</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">len([1,2,3])</td><td align="left">3</td><td align="left">长度</td></tr><tr><td align="left">[1,2,3] + [4,5,6]</td><td align="left">[1,2,3,4,5,6]</td><td align="left">组合</td></tr><tr><td align="left">[“hello”] * 3</td><td align="left">[“hello”,”hello”,”hello”]</td><td align="left">重复</td></tr><tr><td align="left">3 in [1,2,3]</td><td align="left">True</td><td align="left">判断元素是否在列表中</td></tr><tr><td align="left">for x in [1,2,3] :print(x,end=” “)</td><td align="left">1 2 3</td><td align="left">迭代</td></tr></tbody></table><h3 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> = <span class="selector-attr">[1,2,3]</span></span><br><span class="line">b= <span class="selector-attr">[4,5,6]</span></span><br><span class="line">c = <span class="selector-attr">[a,b]</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;c列表的数据为&quot;</span>,c)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(c[<span class="number">1</span>])</span></span></span><br></pre></td></tr></table></figure><h3 id="Python列表函数和方法"><a href="#Python列表函数和方法" class="headerlink" title="Python列表函数和方法"></a>Python列表函数和方法</h3><table><thead><tr><th align="center">函数</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">len(list)</td><td align="center">列表元素的个数</td></tr><tr><td align="center">max(list)</td><td align="center">返回列表元素的最大值</td></tr><tr><td align="center">min(list)</td><td align="center">返回列表元素的最小值</td></tr><tr><td align="center">list(seq)</td><td align="center">将元组转换成列表</td></tr><tr><td align="center">list.append(obj)</td><td align="center">在列表末尾添加新对象</td></tr><tr><td align="center">list.count(obj)</td><td align="center">统计某个元素在列表中出现的次数</td></tr><tr><td align="center">list.extend(seq)</td><td align="center">在列表的末尾一次性追加另一个序列中的多值(用新列表扩展原列表)</td></tr><tr><td align="center">list.index(obj)</td><td align="center">从列表中找出某个值第一个匹配项的索引位置</td></tr><tr><td align="center">list.insert(index,obj)</td><td align="center">将对象插入列表中的某一个位置</td></tr><tr><td align="center">list.pop([index=-1])</td><td align="center">移除列表中的一个元素(默认是最后一个元素)，并且返回该元素的值</td></tr><tr><td align="center">list.remove(obj)</td><td align="center">移出列表中某个值的第一个匹配项</td></tr><tr><td align="center">list.reverse()</td><td align="center">反向列表中的元素</td></tr><tr><td align="center">list.sort(key=None,reverse=False)</td><td align="center">对原列表进行排序</td></tr><tr><td align="center">list.clear()</td><td align="center">清空列表</td></tr><tr><td align="center">list.copy()</td><td align="center">复制列表</td></tr></tbody></table><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">list = <span class="selector-attr">[1,2,3,4,5,6]</span></span><br><span class="line">list2 = <span class="selector-attr">[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span></span><br><span class="line">list3 = <span class="selector-attr">[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,True]</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;列表的长度是&quot;</span>,len(list)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;列表的最大值是&quot;</span>,max(list)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;列表的最小值是&quot;</span>,min(list)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;列表的最大值是&quot;</span>,max(list2)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;列表的最大值是&quot;</span>,max(list3)</span></span>)</span><br><span class="line"></span><br><span class="line">list = <span class="selector-attr">[1,2,3,4,5,6,7,8,9]</span></span><br><span class="line">listTemp = <span class="selector-attr">[<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>]</span></span><br><span class="line">list<span class="selector-class">.append</span>(<span class="number">10</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;新增一个元素&quot;</span>,list)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;统计2在列表中出现的次数&quot;</span>,list.count(<span class="number">2</span>)</span></span>)</span><br><span class="line">list<span class="selector-class">.extend</span>(listTemp)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;在列表末尾追加一个序列&quot;</span>,list)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;查找第一次出现2的下标&quot;</span>,list.index(<span class="number">2</span>)</span></span>)</span><br><span class="line">list<span class="selector-class">.insert</span>(<span class="number">3</span>,<span class="string">&quot;new element&quot;</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;在index=3的位置添加新的元素&quot;</span>,list)</span></span></span><br><span class="line">list<span class="selector-class">.pop</span>(<span class="number">4</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;移除index=4的元素&quot;</span>,list)</span></span></span><br><span class="line">list<span class="selector-class">.remove</span>(<span class="number">7</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;移除元素4&quot;</span>,list)</span></span></span><br><span class="line">list<span class="selector-class">.reverse</span>()</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;列表翻转&quot;</span>,list)</span></span></span><br><span class="line">list<span class="selector-class">.clear</span>()</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;清空列表&quot;</span>,list)</span></span></span><br><span class="line"></span><br><span class="line">l = <span class="selector-attr">[x for x in range(0,10)]</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(l[::<span class="number">3</span>])</span></span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> = <span class="selector-attr">[i for i in range(1,10)]</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">([x**<span class="number">2</span> for x in li])</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">([x**<span class="number">2</span> for x in li if x &gt;=<span class="number">5</span>])</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(dict([(x,x*<span class="number">10</span>)</span></span> <span class="keyword">for</span> x <span class="keyword">in</span> li]))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;序列是Python中最基本的数据结构，序列中每个元素都分配一个数字–位置或者索引，从0开始计数&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="http://www.paulniu.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>android 音视频开发(二)</title>
    <link href="http://www.paulniu.com/2019/08/02/android-media-02/"/>
    <id>http://www.paulniu.com/2019/08/02/android-media-02/</id>
    <published>2019-08-02T13:51:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>绘制一张图片，使用至少三种不同的方式</p><span id="more"></span><h3 id="ImageView"><a href="#ImageView" class="headerlink" title="ImageView"></a>ImageView</h3><p>这个比较简单，就是在布局文件中设置一个ImageView的标签，然后通过属性src或者background来设置具体的图片资源，然后这样子就可以在view中显示该图片了。<br>只不过这里有两种方式去实现我们想要的操作，一种是在xml文件中设置ImageView标签，另外一种是在java代码中动态创建一个ImageView。这两种方式相比较而言都比较简单。具体实现就不一一介绍了。</p><h3 id="自定义View"><a href="#自定义View" class="headerlink" title="自定义View"></a>自定义View</h3><p>自定义View中有三个重要的生命周期：</p><ol><li>onLayout()布局</li><li>onMeasure()测量</li><li>onDraw()绘制</li></ol><p>因为我们只要显示图片，所以我们不需要执行太多的操作，所以我们只需要onDraw方法即可</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> void init<span class="constructor">View()</span>&#123;</span><br><span class="line">    mPaint = <span class="keyword">new</span> <span class="constructor">Paint(Paint.ANTI_ALIAS_FLAG)</span>;</span><br><span class="line">    mBitmap = <span class="module-access"><span class="module"><span class="identifier">BitmapFactory</span>.</span></span>decode<span class="constructor">Resourcw(<span class="params">getContext</span>()</span>.get<span class="constructor">Resource()</span>,<span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>mipmap.images);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected void on<span class="constructor">Draw(Canvas <span class="params">canvas</span>)</span>&#123;</span><br><span class="line">    super.on<span class="constructor">Draw(<span class="params">canvas</span>)</span>;</span><br><span class="line">    Rect srcRect = <span class="keyword">new</span> <span class="constructor">Rect(0,0,<span class="params">mBitmap</span>.<span class="params">getHeight</span>()</span>,mBitmap.get<span class="constructor">Width()</span>);</span><br><span class="line">    Rect destRect = get<span class="constructor">BitmapRect(<span class="params">mBitmap</span>)</span>;<span class="comment">// 获取调整后bitmap的显示位置</span></span><br><span class="line">    canvas.draw<span class="constructor">Bitmap(<span class="params">mBitmap</span>,<span class="params">srcRect</span>,<span class="params">destRect</span>,<span class="params">mPaint</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SurfaceView-显示图片"><a href="#SurfaceView-显示图片" class="headerlink" title="SurfaceView 显示图片"></a>SurfaceView 显示图片</h3><p>SurfaceView和普通view的区别是：</p><ul><li>surfaceview不需要在UI线程中绘制，可以在子线程中绘制</li><li>surfaceview提供了双缓冲机制，绘制效率高</li><li>surfaceview是创建一个位于应用窗口之上的窗口，所以无法应用动画，变换，缩放，无法折叠</li></ul><p>SurfaceView需要实现SurfaceHolder.Callback接口，这里包括了三个生命周期</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">surface<span class="constructor">Created(SurfaceHolder <span class="params">holder</span>)</span>;</span><br><span class="line">surface<span class="constructor">Changed(SurfaceHolder <span class="params">holder</span>,<span class="params">int</span> <span class="params">format</span>,<span class="params">int</span> <span class="params">height</span>,<span class="params">int</span> <span class="params">width</span>)</span>;</span><br><span class="line">surface<span class="constructor">Destoryed(SurfaceHolder <span class="params">holder</span>)</span>;</span><br></pre></td></tr></table></figure><p>具体实现代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageSurfaceActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">SurfaceHolder</span>.<span class="title">Callback</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SurfaceView mSurfaceView;</span><br><span class="line">    <span class="keyword">private</span> ExecutorService mThread;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        mSurfaceView = <span class="keyword">new</span> SurfaceView(<span class="keyword">this</span>);</span><br><span class="line">        setContentView(mSurfaceView);</span><br><span class="line">        initSurfaceView();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initSurfaceView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个只有一个线程的线程池，其实用Thread也可以</span></span><br><span class="line">        mThread = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2000L</span>, TimeUnit.MILLISECONDS, </span><br><span class="line">                  <span class="keyword">new</span> LinkedBlockingDeque&lt;Runnable&gt;());</span><br><span class="line">        <span class="comment">// 添加SurfaceHolder.callback，在回调中可以绘制</span></span><br><span class="line">        mSurfaceView.getHolder().addCallback(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">surfaceCreated</span><span class="params">(SurfaceHolder surfaceHolder)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 执行绘制</span></span><br><span class="line">        mThread.execute(<span class="keyword">new</span> DrawRunnable());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">surfaceChanged</span><span class="params">(SurfaceHolder surfaceHolder, <span class="keyword">int</span> i, <span class="keyword">int</span> i1, <span class="keyword">int</span> i2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">surfaceDestroyed</span><span class="params">(SurfaceHolder surfaceHolder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!mThread.isShutdown()) &#123;</span><br><span class="line">            mThread.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">DrawRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Bitmap bimap = BitmapFactory.decodeResource(ImageSurfaceActivity.<span class="keyword">this</span>.getResources(), </span><br><span class="line">                           R.mipmap.images);</span><br><span class="line">            SurfaceHolder surfaceHolder = mSurfaceView.getHolder();</span><br><span class="line">            Canvas canvas = surfaceHolder.lockCanvas(); <span class="comment">// 获取画布</span></span><br><span class="line">            Paint paint = <span class="keyword">new</span> Paint();</span><br><span class="line">            Rect srcRect = <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, bimap.getHeight(), bimap.getWidth());</span><br><span class="line">            Rect destRect = getBitmapRect(bimap);</span><br><span class="line">            canvas.drawBitmap(bimap, srcRect, destRect, paint);</span><br><span class="line">            surfaceHolder.unlockCanvasAndPost(canvas);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图片的尺寸和屏幕的尺寸不一样，需要把图片调整居中</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Rect <span class="title">getBitmapRect</span><span class="params">(Bitmap bimap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> bimapHeight = bimap.getHeight();</span><br><span class="line">        <span class="keyword">int</span> bimapWidth = bimap.getWidth();</span><br><span class="line">        <span class="keyword">int</span> viewWidth = mSurfaceView.getWidth();</span><br><span class="line">        <span class="keyword">int</span> viewHeight = mSurfaceView.getHeight();</span><br><span class="line">        <span class="keyword">float</span> bimapRatio = (<span class="keyword">float</span>) bimapWidth / (<span class="keyword">float</span>) bimapHeight; <span class="comment">// 宽高比</span></span><br><span class="line">        <span class="keyword">float</span> screenRatio = (<span class="keyword">float</span>) viewWidth / (<span class="keyword">float</span>) viewHeight;</span><br><span class="line">        <span class="keyword">int</span> factWidth;</span><br><span class="line">        <span class="keyword">int</span> factHeight;</span><br><span class="line">        <span class="keyword">int</span> x1, y1, x2, y2;</span><br><span class="line">        <span class="keyword">if</span> (bimapRatio &gt; screenRatio) &#123;</span><br><span class="line">            factWidth = viewWidth;</span><br><span class="line">            factHeight = (<span class="keyword">int</span>)(factWidth / bimapRatio);</span><br><span class="line">            x1 = <span class="number">0</span>;</span><br><span class="line">            y1 = (viewHeight - factHeight) / <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bimapRatio &lt; screenRatio) &#123;</span><br><span class="line">            factHeight = viewHeight;</span><br><span class="line">            factWidth = (<span class="keyword">int</span>)(factHeight * bimapRatio);</span><br><span class="line">            x1 = (viewWidth - factWidth) / <span class="number">2</span>;</span><br><span class="line">            y1 = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            factWidth = bimapWidth;</span><br><span class="line">            factHeight = bimapHeight;</span><br><span class="line">            x1 = <span class="number">0</span>;</span><br><span class="line">            y1 = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        x2 = x1 + factWidth;</span><br><span class="line">        y2 = y1 + factHeight;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Rect(x1, y1, x2, y2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/xiaoniudadi/android-media-demo/tree/master/01-android-media-create-image">demo代码</a></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://blog.csdn.net/qq_15893929/article/details/81411584">Android ImageView、TextureView、自定义View显示图片</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;绘制一张图片，使用至少三种不同的方式&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
    <category term="音视频" scheme="http://www.paulniu.com/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>android 音视频开发(一)</title>
    <link href="http://www.paulniu.com/2019/08/02/android-media-01/"/>
    <id>http://www.paulniu.com/2019/08/02/android-media-01/</id>
    <published>2019-08-02T11:31:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>随着5G时代的即将到来，以后的手机软件中视频和语音类的软件肯定会迎来一次崛起的机会，然而自己在这方面还没有真正的涉足过，所以在网上找了一些资料，打算好好的学习一下。不过自己真的没有将这些应用于实际开发中，所以应该会有很多不完善和不合理的地方，所以希望能够借着这个机会，查漏补缺，将自己的技术多打磨一下。</p><span id="more"></span><p>这是音视频开发的第一篇博客，所以具体的技术方面的内容不会涉及太多，更多的还是统计一下需要使用到的技术，算是给自己定下目标，以后就按照这个步骤学下去，希望有所收获吧。</p><h2 id="android-音视频开发任务列表"><a href="#android-音视频开发任务列表" class="headerlink" title="android 音视频开发任务列表"></a>android 音视频开发任务列表</h2><ol><li>在android平台绘制一张图片，使用至少三种不同的API，ImageView,SurfaceView,和自定义view</li><li>在Android平台中使用AudioRecord和AndroidTrack API完成音频PCM数据的采集和播放，并实现读写音频wav文件</li><li>在Android平台使用Camera API进行视频采集，分别使用SurfaceView，TextureView来预览Camera数据，获取到NV21数据回调</li><li>学习Android平台的MediaExtractor和MediaMuxer API，知道如何解析和封装mp4文件</li><li>学习Android平台的OpenGL ES API，了解OpenGL开发的基本流程，使用OpenGL绘制三角形</li><li>学习Android平台的OpenGL ES API，学习纹理绘制，能够使用OpenGL显示一张图片</li><li>学习MediaCodec API完成音频ACC硬编，硬解</li><li>学习MediaCodec API，完成视频H.264的硬编，硬解</li><li>串联整个音视频录制流程，完成音视频的采集，编码，封装成mp4输出</li><li>串联整个音视频播放流程，完成mp4的解析，音视频的解码，播放和渲染</li><li>进一步学习OpenGL，了解如何实现视频的裁剪，旋转，水印，滤镜，并学习OpenGL的高级特性，如VBO，VAO，FBO</li><li>学习Android的图形图像框架，能够使用GLSurfaceView绘制Camera预览画面</li><li>深入学习音视频的网络协议，如rtms，hls，以及封装格式：flv，mp4</li><li>深入学习一些音频领域的开源框架，如webrtc，ffmpeg，ijkplayer，librtmp等</li><li>将ffmpeg移植到Android平台，结合上面积累的经验，编写一款简易的音视频播放器</li><li>将x264移植到Android平台，结合上面的经验，完成视频数据的H264软编功能</li><li>将librtmp库移植到Android平台，结合上面的经验，完成Android RTMP推流功能</li><li>结合上面的经验，做一款短视频App，完成如断点拍摄，添加水印，本地转码，视频剪辑，视频拼接，MV特效等功能</li></ol><p>可供参考的资料<br><a href="http://blog.csdn.net/leixiaohua1020">雷霄骅的专栏</a><br><a href="http://ticktick.blog.51cto.com/823160/d-15">Android音频开发</a><br><a href="http://ticktick.blog.51cto.com/823160/d-17">FFMPEG Tips</a><br><a href="https://learnopengl-cn.readthedocs.io/zh/latest/">Learn OpenGL 中文</a><br><a href="https://source.android.com/devices/graphics/">Android Graphic 架构</a><br><a href="https://www.cnblogs.com/renhui/">灰色飘零</a></p><p>就按照这个步骤走下去，就一定会有所收获</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;随着5G时代的即将到来，以后的手机软件中视频和语音类的软件肯定会迎来一次崛起的机会，然而自己在这方面还没有真正的涉足过，所以在网上找了一些资料，打算好好的学习一下。不过自己真的没有将这些应用于实际开发中，所以应该会有很多不完善和不合理的地方，所以希望能够借着这个机会，查漏补缺，将自己的技术多打磨一下。&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
    <category term="音视频" scheme="http://www.paulniu.com/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>拥抱Python（六） 字符串</title>
    <link href="http://www.paulniu.com/2019/08/01/python-06/"/>
    <id>http://www.paulniu.com/2019/08/01/python-06/</id>
    <published>2019-08-01T13:51:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>字符串是 Python 中最常用的数据类型。我们可以使用引号( ‘ 或 “ )来创建字符串。</p><span id="more"></span><p>创建字符串很简单，只要为变量分配一个值即可</p><h1 id="Python中访问字符串的值"><a href="#Python中访问字符串的值" class="headerlink" title="Python中访问字符串的值"></a>Python中访问字符串的值</h1><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var1</span> = <span class="string">&quot;abcdefghjiklmn&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;var1[2] = &quot;</span> + <span class="built_in">var1</span>[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;var1[1:3] = &quot;</span> + <span class="built_in">var1</span>[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line"><span class="built_in">del</span> <span class="built_in">var1</span></span><br></pre></td></tr></table></figure><h1 id="Python中更新字符串"><a href="#Python中更新字符串" class="headerlink" title="Python中更新字符串"></a>Python中更新字符串</h1><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var1</span> = <span class="string">&quot;hello world!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;更新后的内容：&quot;</span> + <span class="built_in">var1</span>[:<span class="number">6</span>] + <span class="string">&quot;Python!&quot;</span>)</span><br><span class="line"><span class="built_in">del</span> <span class="built_in">var1</span></span><br></pre></td></tr></table></figure><h1 id="Python的转义字符"><a href="#Python的转义字符" class="headerlink" title="Python的转义字符"></a>Python的转义字符</h1><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">\</span> 在行尾 换行符</span><br><span class="line"><span class="string">\\</span> 反斜杠符号</span><br><span class="line"><span class="string">\&#x27;</span> 单引号</span><br><span class="line"><span class="string">\&quot;</span> 双引号</span><br><span class="line"><span class="string">\a</span> 响铃</span><br><span class="line"><span class="string">\b</span> backspace按键</span><br><span class="line"><span class="string">\000</span> 空</span><br><span class="line"><span class="string">\n</span> 换行</span><br><span class="line"><span class="string">\r</span> 回车</span><br><span class="line"><span class="string">\v</span> 纵向制表符</span><br><span class="line"><span class="string">\t</span> 横向制表符</span><br><span class="line"><span class="string">\f</span> 换页</span><br></pre></td></tr></table></figure><h1 id="Python字符串格式化"><a href="#Python字符串格式化" class="headerlink" title="Python字符串格式化"></a>Python字符串格式化</h1><p>Python 支持格式化字符串的输出 。尽管这样可能会用到非常复杂的表达式，但最基本的用法是将一个值插入到一个有字符串格式符 %s 的字符串中</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var1</span> = <span class="string">&quot;ab%sdefghijklmn&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">var1</span> <span class="symbol">%</span> (<span class="string">&quot; hahah &quot;</span>))</span><br></pre></td></tr></table></figure><ol><li>%c 格式化字符串以及ASCII码</li><li>%s 格式化字符串</li><li>%d 格式化整数</li><li>%u 格式化无符号整数</li><li>%o 格式化无符号八进制数</li><li>%x 格式化无符号十六进制数</li><li>%f 格式化浮点数，可指定符号后精确度</li><li>%e 用科学计数法格式化浮点数</li><li>%p 用十六进制数格式化地址</li></ol><h1 id="Python的字符串内建函数"><a href="#Python的字符串内建函数" class="headerlink" title="Python的字符串内建函数"></a>Python的字符串内建函数</h1><ol><li>capitalize() 将字符串首字母变成大写</li><li>center(width, fillchar)    返回一个指定的宽度 width 居中的字符串，fillchar 为填充的字符，默认为空格。</li><li>isdigit()    是否只包含数字</li><li>islower()    如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False</li><li>isnumeric()  如果字符串中只包含数字字符，则返回 True，否则返回 False</li><li>len()        返回字符串的长度</li><li>lstrip()     截掉字符串左边的空格或指定字符。</li><li>max()        返回字符串 str 中最大的字母。</li><li>replace(old, new [, max])     把 将字符串中的 str1 替换成 str2,如果 max 指定，则替换不超过 max 次。</li><li>rstrip()    删除字符串字符串末尾的空格.</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;字符串是 Python 中最常用的数据类型。我们可以使用引号( ‘ 或 “ )来创建字符串。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="http://www.paulniu.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>拥抱Python（五） 数字</title>
    <link href="http://www.paulniu.com/2019/07/31/python-05/"/>
    <id>http://www.paulniu.com/2019/07/31/python-05/</id>
    <published>2019-07-31T13:51:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python 数字数据类型用于存储数值。</p><span id="more"></span><p>数据类型是不允许改变的,这就意味着如果改变数字数据类型的值，将重新分配内存空间。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">var1</span> = <span class="number">10</span></span><br><span class="line"><span class="attr">var2</span> = <span class="number">0.01</span></span><br></pre></td></tr></table></figure><p>同时我们可以使用del去删除一些数字对象的引用，这里我们如果使用了del ，那么被删除的引用就不能在使用了</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">del</span> var<span class="number">1</span>, var<span class="number">2</span></span><br></pre></td></tr></table></figure><p>Python支持三种类型的数字类型</p><ol><li>整型</li><li>浮点型</li><li>复数</li></ol><p>var1 = 100<br>var2 = 10.01<br>var3 = complex(2, 3)</p><p>del var1, var2, var3</p><p>Python数据类型的转化</p><ol><li>int(x) 将x转换成整数</li><li>float(x) 将x转换成浮点数</li><li>complex(x) 将x转换成复数，实数部分为x，虚数部分为0</li><li>complex(x,y) 将x，y转换到一个复数，实数部分为x，虚数部分为y</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;Python 数字数据类型用于存储数值。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="http://www.paulniu.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>拥抱Python（四） 基本运算符</title>
    <link href="http://www.paulniu.com/2019/07/30/python-04/"/>
    <id>http://www.paulniu.com/2019/07/30/python-04/</id>
    <published>2019-07-30T13:51:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python支持的运算符主要从以下几个方面入手</p><span id="more"></span><ol><li>算术运算符</li><li>比较(关系运算符)</li><li>赋值运算符</li><li>逻辑运算符</li><li>位运算符</li><li>成员运算符</li><li>运算符的优先级</li></ol><h1 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h1><p>a = 10<br>b = 21<br>print(“-“ * 100)<br>print(“算数运算符”)<br>print(“a + b = “ + str(a + b))  # 加<br>print(“a - b = “ + str(a - b))  # 减<br>print(“a * b = “ + str(a * b))  # 乘<br>print(“a / b = “ + str(a / b))  # 商<br>print(“a % b = “ + str(a % b))  # 取余<br>print(“a // b = “ + str(a // b))  # 向下取整</p><h1 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h1><p>a1 = 21<br>b1 = 10<br>print(“-“ * 100)<br>print(“比较运算符”)<br>print(“a == b : “ + str(a == b))<br>print(“a != b : “ + str(a != b))<br>print(“a &gt; b : “ + str(a &gt; b))<br>print(“a &lt; b : “ + str(a &lt; b))<br>print(“a &gt;= b : “ + str(a &gt;= b))<br>print(“a &lt;= b : “ + str(a &lt;= b))</p><h1 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h1><p>a2 = 10<br>b2 = 21<br>print(“-“ * 100)<br>print(“赋值运算符”)<br>a2 += b2<br>print(“a += b : “ + str(a2))<br>a2 -= b2<br>print(“a -= b : “ + str(a2))<br>a2 *= b2<br>print(“a *= b : “ + str(a2))<br>a2 /= b2<br>print(“a /= b : “ + str(a2))<br>a2 %= b2<br>print(“a %= b : “ + str(a2))<br>a2 //= b2<br>print(“a //= b : “ + str(a2))</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Python支持的运算符主要从以下几个方面入手&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="http://www.paulniu.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>拥抱Python（三） 其他操作符</title>
    <link href="http://www.paulniu.com/2019/07/30/python-03/"/>
    <id>http://www.paulniu.com/2019/07/30/python-03/</id>
    <published>2019-07-30T13:50:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python的标识</p><span id="more"></span><p>在 Python 里，标识符由字母、数字、下划线组成。</p><p>在 Python 中，所有标识符可以包括英文、数字以及下划线(_)，但不能以数字开头。</p><p>Python 中的标识符是区分大小写的。</p><p>以下划线开头的标识符是有特殊意义的。以单下划线开头 _foo 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 from xxx import * 而导入。</p><p>以双下划线开头的 <pre>__foo</pre> 代表类的私有成员，以双下划线开头和结尾的<pre> <strong>foo</strong> </pre>代表 Python 里特殊方法专用的标识，如  <pre><strong>init</strong>() </pre>代表类的构造函数。</p><p>Python 可以同一行显示多条语句，方法是用分号 ; 分开</p><h1 id="行和缩进"><a href="#行和缩进" class="headerlink" title="行和缩进"></a>行和缩进</h1><p>学习 Python 与其他语言最大的区别就是，Python 的代码块不使用大括号 {} 来控制类，函数以及其他逻辑判断。python 最具特色的就是用缩进来写模块。</p><p>缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量，这个必须严格执行</p><h1 id="Python的注释"><a href="#Python的注释" class="headerlink" title="Python的注释"></a>Python的注释</h1><p>注释分为单行注释和多行注释</p><ol><li>单行注释：使用字符’#’</li><li>多行注释：使用字符”””或者当前的样式</li></ol><h1 id="查看保留字"><a href="#查看保留字" class="headerlink" title="查看保留字"></a>查看保留字</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import keyword</span><br><span class="line">import sys</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;-&quot;</span> * <span class="number">100</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(keyword.kwlist)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(sys.path)</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Python的标识&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="http://www.paulniu.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>android奇技淫巧 11 Activity启动</title>
    <link href="http://www.paulniu.com/2019/07/27/android-tools-11/"/>
    <id>http://www.paulniu.com/2019/07/27/android-tools-11/</id>
    <published>2019-07-27T12:42:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Activity启动流程</p><span id="more"></span><h1 id="Zygote"><a href="#Zygote" class="headerlink" title="Zygote"></a>Zygote</h1><p>先来看一张图片<br><img src="/assets/tools/tools-progress-01.png" alt="Android系统结构图"><br>在Android体系结构中，底层内核空间以Linux Kernel为核心，上层用户控件以C++/Java组成FrameWork，通过系统调用来连接用户空间和内核空间。而用户空间又分为Native和Java，通过JNI技术机型连接。Native的init进程是所有用户进程的祖先，其pid为1，init进程通过解析init.rc文件创建出Zygote进程，Zygote进程如其名，中文直译为受精卵，他是Java世界中的第一个进程，也是Android系统中的第一个Java进程。</p><p>Zygote创建的第一个进程就是System Server，System Server负责管理和启动整个Java FrameWork层。创建完System Server之后，Zygote会完全进入受精卵的角色，等待进行不行繁殖，创建应用进程。所有的应用进程都是由Zygote进程forl而来的</p><p>Zygote的启动过程是从Native层开始的，我们先不对Native层做过多分析，直接进入Java代码的入口ZygoteInit.main();</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span> argv[]) &#123;</span><br><span class="line">    ZygoteServer zygoteServer = <span class="keyword">new</span> ZygoteServer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Mark zygote start. This ensures that thread creation will throw</span></span><br><span class="line">    <span class="comment">// an error.</span></span><br><span class="line">    ZygoteHooks.startZygoteNoThreadCreation();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Zygote goes into its own process group.</span></span><br><span class="line">    <span class="comment">// 设置进程组 ID</span></span><br><span class="line">    <span class="comment">// pid 为 0 表示设置当前进程的进程组 ID</span></span><br><span class="line">    <span class="comment">// gid 为 0 表示使用当前进程的 PID 作为进程组 ID</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Os.setpgid(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ErrnoException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RuntimeException</span>(<span class="string">&quot;Failed to setpgid(0,0)&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Runnable caller;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ......</span><br><span class="line">        RuntimeInit.enableDdms(); <span class="comment">// 启用 DDMS</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> startSystemServer = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">String</span> socketName = <span class="string">&quot;zygote&quot;</span>;</span><br><span class="line">        <span class="keyword">String</span> abiList = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">boolean</span> enableLazyPreload = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; argv.length; i++) &#123; <span class="comment">// 参数解析</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;start-system-server&quot;</span>.equals(argv[i])) &#123;</span><br><span class="line">                startSystemServer = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;--enable-lazy-preload&quot;</span>.equals(argv[i])) &#123;</span><br><span class="line">                enableLazyPreload = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (argv[i].startsWith(ABI_LIST_ARG)) &#123;</span><br><span class="line">                abiList = argv[i].substring(ABI_LIST_ARG.length());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (argv[i].startsWith(SOCKET_NAME_ARG)) &#123;</span><br><span class="line">                socketName = argv[i].substring(SOCKET_NAME_ARG.length());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RuntimeException</span>(<span class="string">&quot;Unknown command line argument: &quot;</span> + argv[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (abiList == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RuntimeException</span>(<span class="string">&quot;No ABI list supplied.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 注册服务端 socket，这里的 IPC 不是 Binder 通信</span></span><br><span class="line">        zygoteServer.registerServerSocketFromEnv(socketName); </span><br><span class="line">        <span class="comment">// In some configurations, we avoid preloading resources and classes eagerly.</span></span><br><span class="line">        <span class="comment">// In such cases, we will preload things prior to our first fork.</span></span><br><span class="line">        <span class="keyword">if</span> (!enableLazyPreload) &#123;</span><br><span class="line">            bootTimingsTraceLog.traceBegin(<span class="string">&quot;ZygotePreload&quot;</span>);</span><br><span class="line">            EventLog.writeEvent(LOG_BOOT_PROGRESS_PRELOAD_START,</span><br><span class="line">                SystemClock.uptimeMillis());</span><br><span class="line">            preload(bootTimingsTraceLog); <span class="comment">// 2. 预加载操作</span></span><br><span class="line">            EventLog.writeEvent(LOG_BOOT_PROGRESS_PRELOAD_END,</span><br><span class="line">                SystemClock.uptimeMillis());</span><br><span class="line">            bootTimingsTraceLog.traceEnd(); <span class="comment">// ZygotePreload</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Zygote.resetNicePriority(); <span class="comment">// 设置线程优先级为 NORM_PRIORITY (5)</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do an initial gc to clean up after startup</span></span><br><span class="line">        gcAndFinalize(); <span class="comment">// 3. 强制进行一次垃圾收集</span></span><br><span class="line"></span><br><span class="line">        Zygote.nativeSecurityInit();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Zygote process unmounts root storage spaces.</span></span><br><span class="line">        Zygote.nativeUnmountStorageOnInit();</span><br><span class="line"></span><br><span class="line">        ZygoteHooks.stopZygoteNoThreadCreation();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (startSystemServer) &#123;</span><br><span class="line">            <span class="comment">// 4. 启动SystemServer 进程</span></span><br><span class="line">            Runnable r = forkSystemServer(abiList, socketName, zygoteServer); </span><br><span class="line"></span><br><span class="line">            <span class="comment">// &#123;@code r == null&#125; in the parent (zygote) process, and &#123;@code r != null&#125; in the</span></span><br><span class="line">            <span class="comment">// child (system_server) process.</span></span><br><span class="line">            <span class="keyword">if</span> (r != <span class="literal">null</span>) &#123;</span><br><span class="line">                r.run(); <span class="comment">// 由 RuntimeInit.java 中的 MethodAndArgsCaller 反射调用SystemServer 的 main() 方法</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Log.i(TAG, <span class="string">&quot;Accepting command socket connections&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The select loop returns early in the child process after a fork and</span></span><br><span class="line">        <span class="comment">// loops forever in the zygote.</span></span><br><span class="line">        <span class="comment">// 5. 循环等待处理客户端请求</span></span><br><span class="line">        caller = zygoteServer.runSelectLoop(abiList);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="built_in">Throwable</span> ex) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;System zygote died with exception&quot;</span>, ex);</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        zygoteServer.closeServerSocket(); <span class="comment">// 关闭并释放 socket 连接</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We&#x27;re in the child process and have exited the select loop. Proceed to execute the</span></span><br><span class="line">    <span class="comment">// command.</span></span><br><span class="line">    <span class="keyword">if</span> (caller != <span class="literal">null</span>) &#123;</span><br><span class="line">        caller.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>已经省略掉一些不是特别重要的代码，ZtgoteInit.main()方法大致分为五个步骤</p><ol><li>registerServerSocketFromEnv，注册服务端socket，用于跨进程通信，这里并没有使用Binder通信</li><li>preload(),进行预加载操作</li><li>gcAndFinalize(),在forkSystemServer之前主动进行一次垃圾回收</li><li>forkSystemServer(),创建SystemServer进程</li><li>runSelectLoop(),循环贷等处理客户端发送来的socket请求</li></ol><p>上面基本上就是Zygote的全部内容</p><h2 id="registerServerSocketFromEnv"><a href="#registerServerSocketFromEnv" class="headerlink" title="registerServerSocketFromEnv"></a>registerServerSocketFromEnv</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&gt; ZygoteServer.java</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> registerServerSocketFromEnv(<span class="keyword">String</span> socketName) &#123;</span><br><span class="line">    <span class="keyword">if</span> (mServerSocket == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> fileDesc;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">String</span> fullSocketName = ANDROID_SOCKET_PREFIX + socketName;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 从环境变量中获取 socket 的 fd</span></span><br><span class="line">            <span class="keyword">String</span> env = System.getenv(fullSocketName);</span><br><span class="line">            fileDesc = <span class="keyword">Integer</span>.parseInt(env);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="built_in">RuntimeException</span> ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RuntimeException</span>(fullSocketName + <span class="string">&quot; unset or invalid&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileDescriptor fd = <span class="keyword">new</span> FileDescriptor();</span><br><span class="line">            fd.setInt$(fileDesc); <span class="comment">// 设置文件描述符</span></span><br><span class="line">            mServerSocket = <span class="keyword">new</span> LocalServerSocket(fd); <span class="comment">// 创建服务端 socket</span></span><br><span class="line">            mCloseSocketFd = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RuntimeException</span>(</span><br><span class="line">                    <span class="string">&quot;Error binding to local socket &#x27;&quot;</span> + fileDesc + <span class="string">&quot;&#x27;&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先从环境变量中获取socket的文件描述符fd，然后根据fd创建服务器LocalServerSocket，用于IPC通信，这里的环境变量是init进程创建Zygote进程时设置的</p><h3 id="preload"><a href="#preload" class="headerlink" title="preload()"></a>preload()</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="module-access"><span class="module"><span class="identifier">ZygoteInit</span>.</span></span>java</span><br><span class="line"></span><br><span class="line">static void preload(TimingsTraceLog bootTimingsTraceLog) &#123;</span><br><span class="line">        ......</span><br><span class="line">        preload<span class="constructor">Classes()</span>; <span class="comment">// 预加载并初始化 /system/etc/preloaded-classes 中的类</span></span><br><span class="line">        ......</span><br><span class="line">        preload<span class="constructor">Resources()</span>; <span class="comment">// 预加载系统资源</span></span><br><span class="line">        ......</span><br><span class="line">        native<span class="constructor">PreloadAppProcessHALs()</span>; <span class="comment">// HAL?</span></span><br><span class="line">        ......</span><br><span class="line">        preload<span class="constructor">OpenGL()</span>; <span class="comment">// 预加载 OpenGL</span></span><br><span class="line">        ......</span><br><span class="line">        preload<span class="constructor">SharedLibraries()</span>; <span class="comment">// 预加载 共享库，包括 android、compiler_rt、jnigraphics 这三个库</span></span><br><span class="line">        preload<span class="constructor">TextResources()</span>; <span class="comment">// 预加载文字资源</span></span><br><span class="line">        <span class="comment">// Ask the WebViewFactory to do any initialization that must run in the zygote process,</span></span><br><span class="line">        <span class="comment">// for memory sharing purposes.</span></span><br><span class="line">        <span class="comment">// WebViewFactory 中一些必须在 zygote 进程中进行的初始化工作，用于共享内存</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">WebViewFactory</span>.</span></span>prepare<span class="constructor">WebViewInZygote()</span>;</span><br><span class="line">        warm<span class="constructor">UpJcaProviders()</span>;</span><br><span class="line"></span><br><span class="line">        sPreloadComplete = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>preload()方法主要进行一些类，资源，共享库的预加载工作，艺体生运行时效率，分别加载的了以下内容</p><h4 id="preloadClasses"><a href="#preloadClasses" class="headerlink" title="preloadClasses()"></a>preloadClasses()</h4><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&gt; ZygoteInit.java</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> preloadClasses() &#123;</span><br><span class="line">    ......</span><br><span class="line">    InputStream is;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// /system/etc/preloaded-classes</span></span><br><span class="line">        is = <span class="keyword">new</span> FileInputStream(PRELOADED_CLASSES);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;Couldn&#x27;t find &quot;</span> + PRELOADED_CLASSES + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">BufferedReader</span> br</span><br><span class="line">            = <span class="keyword">new</span> <span class="keyword">BufferedReader</span>(<span class="keyword">new</span> InputStreamReader(is), <span class="number">256</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">String</span> <span class="built_in">line</span>;</span><br><span class="line">        <span class="keyword">while</span> ((<span class="built_in">line</span> = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Skip comments and blank lines.</span></span><br><span class="line">            <span class="built_in">line</span> = <span class="built_in">line</span>.<span class="built_in">trim</span>();</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">line</span>.startsWith(<span class="string">&quot;#&quot;</span>) || <span class="built_in">line</span>.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// Load and explicitly initialize the given class. Use</span></span><br><span class="line">                <span class="comment">// Class.forName(String, boolean, ClassLoader) to avoid repeated stack lookups</span></span><br><span class="line">                <span class="comment">// (to derive the caller&#x27;s class-loader). Use true to force initialization, and</span></span><br><span class="line">                <span class="comment">// null for the boot classpath class-loader (could as well cache the</span></span><br><span class="line">                <span class="comment">// class-loader of this class in a variable).</span></span><br><span class="line">                Class.forName(<span class="built_in">line</span>, <span class="keyword">true</span>, <span class="keyword">null</span>);</span><br><span class="line">                count++;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                Log.w(TAG, <span class="string">&quot;Class not found for preloading: &quot;</span> + <span class="built_in">line</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsatisfiedLinkError e) &#123;</span><br><span class="line">                Log.w(TAG, <span class="string">&quot;Problem preloading &quot;</span> + <span class="built_in">line</span> + <span class="string">&quot;: &quot;</span> + e);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                ......</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;Error reading &quot;</span> + PRELOADED_CLASSES + <span class="string">&quot;.&quot;</span>, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        IoUtils.closeQuietly(is);</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只保留了核心逻辑代码，读取/system/etc/preloaded-classes文件，并通过Class.forName()方法逐行加载文件中声明的类。提前预加载系统常用的类无疑可以提升运行时效率，但是这个预加载常用类的工作通常会很繁重。搜索整个代码库，在/frameworks/base/config目录下发现一份preoloaded-classes文件，打开这个文件，一共6558行，这就意味着要提前加载数千个类，这无疑会消耗很长时间，以增加Android系统启动时间的代价提升运行时效率</p><h4 id="preloadResoureces"><a href="#preloadResoureces" class="headerlink" title="preloadResoureces()"></a>preloadResoureces()</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&gt; ZygoteInit.java</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> static <span class="built_in">void</span> preloadResources() &#123;</span><br><span class="line">    <span class="keyword">final</span> VMRuntime runtime = VMRuntime.getRuntime();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        mResources = Resources.getSystem();</span><br><span class="line">        mResources.startPreloading();</span><br><span class="line">        <span class="keyword">if</span> (PRELOAD_RESOURCES) &#123;</span><br><span class="line">            TypedArray ar = mResources.obtainTypedArray(</span><br><span class="line">                    com.android.<span class="built_in">int</span>ernal.R.<span class="built_in">array</span>.preloaded_drawables);</span><br><span class="line">            <span class="built_in">int</span> N = preloadDrawables(ar);</span><br><span class="line">            ar.recycle();</span><br><span class="line">            ......</span><br><span class="line">            ar = mResources.obtainTypedArray(</span><br><span class="line">                    com.android.<span class="built_in">int</span>ernal.R.<span class="built_in">array</span>.preloaded_color_state_lists);</span><br><span class="line">            N = preloadColorStateLists(ar);</span><br><span class="line">            ar.recycle();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mResources.getBoolean(</span><br><span class="line">                    com.android.<span class="built_in">int</span>ernal.R.<span class="built_in">bool</span>.config_freeformWindowManagement)) &#123;</span><br><span class="line">                ar = mResources.obtainTypedArray(</span><br><span class="line">                    com.android.<span class="built_in">int</span>ernal.R.<span class="built_in">array</span>.preloaded_freeform_multi_window_drawables);</span><br><span class="line">                N = preloadDrawables(ar);</span><br><span class="line">                ar.recycle();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mResources.finishPreloading();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">        Log.w(TAG, <span class="string">&quot;Failure preloading resources&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从源码中可以看出主要加载的有以下几个资源</p><ul><li>com.android.internal.R.array.preloaded_drawables</li><li>com.android.internal.R.array.preloaded_color_state_lists</li><li>com.android.internal.R.array.preloaded_freeform_multi_window_drawables</li></ul><h4 id="preloadSharedLibraries"><a href="#preloadSharedLibraries" class="headerlink" title="preloadSharedLibraries"></a>preloadSharedLibraries</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="module-access"><span class="module"><span class="identifier">ZygoteInit</span>.</span></span>java</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> static void preload<span class="constructor">SharedLibraries()</span> &#123;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">Log</span>.</span></span>i(TAG, <span class="string">&quot;Preloading shared libraries...&quot;</span>);</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>load<span class="constructor">Library(<span class="string">&quot;android&quot;</span>)</span>;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>load<span class="constructor">Library(<span class="string">&quot;compiler_rt&quot;</span>)</span>;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>load<span class="constructor">Library(<span class="string">&quot;jnigraphics&quot;</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>预加载了三个共享库，libandroid.so,libcompiler_rt.so和libjnigraphics.so</p><h3 id="gcAndroid"><a href="#gcAndroid" class="headerlink" title="gcAndroid"></a>gcAndroid</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="module-access"><span class="module"><span class="identifier">ZygoteInit</span>.</span></span>java</span><br><span class="line"></span><br><span class="line">static void gc<span class="constructor">AndFinalize()</span> &#123;</span><br><span class="line">    final VMRuntime runtime = <span class="module-access"><span class="module"><span class="identifier">VMRuntime</span>.</span></span>get<span class="constructor">Runtime()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* runFinalizationSync() lets finalizers be called in Zygote,</span></span><br><span class="line"><span class="comment">     * which doesn&#x27;t have a HeapWorker thread.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>gc<span class="literal">()</span>;</span><br><span class="line">    runtime.run<span class="constructor">FinalizationSync()</span>;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>gc<span class="literal">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在forkSystemServer()之前会主动进行一次GC操作</p><h3 id="forSystemServer"><a href="#forSystemServer" class="headerlink" title="forSystemServer()"></a>forSystemServer()</h3><p>主动调用GC之后，Zygote就要去做他的大事—fork SystemServer进程了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&gt; ZygoteInit.java</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">static</span> Runnable forkSystemServer(<span class="keyword">String</span> abiList, <span class="keyword">String</span> socketName,</span><br><span class="line">    </span><br><span class="line">    ......</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Hardcoded command line to start the system server */</span></span><br><span class="line">    <span class="comment">// 启动参数</span></span><br><span class="line">    <span class="keyword">String</span> args[] = &#123;</span><br><span class="line">        <span class="string">&quot;--setuid=1000&quot;</span>,</span><br><span class="line">        <span class="string">&quot;--setgid=1000&quot;</span>,</span><br><span class="line">        <span class="string">&quot;--setgroups=1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1018,1021,1023,1024,1032,1065,3001,3002,3003,3006,3007,3009,3010&quot;</span>,</span><br><span class="line">        <span class="string">&quot;--capabilities=&quot;</span> + capabilities + <span class="string">&quot;,&quot;</span> + capabilities,</span><br><span class="line">        <span class="string">&quot;--nice-name=system_server&quot;</span>, <span class="comment">// 进程名</span></span><br><span class="line">        <span class="string">&quot;--runtime-args&quot;</span>,</span><br><span class="line">        <span class="string">&quot;--target-sdk-version=&quot;</span> + VMRuntime.SDK_VERSION_CUR_DEVELOPMENT,</span><br><span class="line">        <span class="string">&quot;com.android.server.SystemServer&quot;</span>, <span class="comment">// 加载类名</span></span><br><span class="line">    &#125;;</span><br><span class="line">    ZygoteConnection.Arguments parsedArgs = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> pid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        parsedArgs = <span class="keyword">new</span> ZygoteConnection.Arguments(args);</span><br><span class="line">        ZygoteConnection.applyDebuggerSystemProperty(parsedArgs);</span><br><span class="line">        ZygoteConnection.applyInvokeWithSystemProperty(parsedArgs);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> profileSystemServer = SystemProperties.getBoolean(</span><br><span class="line">                <span class="string">&quot;dalvik.vm.profilesystemserver&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (profileSystemServer) &#123;</span><br><span class="line">            parsedArgs.runtimeFlags |= Zygote.PROFILE_SYSTEM_SERVER;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Request to fork the system server process</span></span><br><span class="line"><span class="comment">         * fork system_server 进程</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        pid = Zygote.forkSystemServer(</span><br><span class="line">                parsedArgs.uid, parsedArgs.gid,</span><br><span class="line">                parsedArgs.gids,</span><br><span class="line">                parsedArgs.runtimeFlags,</span><br><span class="line">                <span class="literal">null</span>,</span><br><span class="line">                parsedArgs.permittedCapabilities,</span><br><span class="line">                parsedArgs.effectiveCapabilities);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RuntimeException</span>(ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* For child process */</span></span><br><span class="line">    <span class="comment">// pid == 0 表示子进程，从这里开始进入 system_server 进程</span></span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hasSecondZygote(abiList)) &#123; <span class="comment">// 如果有第二个 Zygote</span></span><br><span class="line">            waitForSecondaryZygote(socketName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        zygoteServer.closeServerSocket(); <span class="comment">// 关闭并释放从 Zygote copy 过来的 socket</span></span><br><span class="line">        <span class="keyword">return</span> handleSystemServerProcess(parsedArgs); <span class="comment">// 完成新创建的 system_server 进程的剩余工作</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注意 fork() 函数式一次执行，两次返回（两个进程对同一程序的两次执行）。</span></span><br><span class="line"><span class="comment">     * pid &gt; 0  说明还是父进程。pid = 0 说明进入了子进程</span></span><br><span class="line"><span class="comment">     * 所以这里的 return null 依旧会执行 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的启动参数可以看到，SystemServer进程的uid和gid都是1000，进程名是system_server，其最后要加载的类名是com.android.server.SystemSever。准备好一系列参数后通过ZygoteConnection.Arguments()拼接，接着调用Zygote.forkSystemServer()方法真正的fork出子进程system_server</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt; Zygote.java</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">int</span> <span class="title">forkSystemServer</span><span class="params">(<span class="keyword">int</span> uid, <span class="keyword">int</span> gid, <span class="keyword">int</span>[] gids, <span class="keyword">int</span> runtimeFlags,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">int</span>[][] rlimits, <span class="keyword">long</span> permittedCapabilities, <span class="keyword">long</span> effectiveCapabilities)</span> </span>&#123;</span><br><span class="line">    VM_HOOKS.preFork();</span><br><span class="line">    <span class="comment">// Resets nice priority for zygote process.</span></span><br><span class="line">    resetNicePriority();</span><br><span class="line">    <span class="keyword">int</span> pid = nativeForkSystemServer(</span><br><span class="line">            uid, gid, gids, runtimeFlags, rlimits, permittedCapabilities, effectiveCapabilities);</span><br><span class="line">    <span class="comment">// Enable tracing as soon as we enter the system_server.</span></span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">        Trace.setTracingEnabled(<span class="keyword">true</span>, runtimeFlags);</span><br><span class="line">    &#125;</span><br><span class="line">    VM_HOOKS.postForkCommon();</span><br><span class="line">    <span class="keyword">return</span> pid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">native</span> <span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">int</span> <span class="title">nativeForkSystemServer</span><span class="params">(<span class="keyword">int</span> uid, <span class="keyword">int</span> gid, <span class="keyword">int</span>[] gids, <span class="keyword">int</span> runtimeFlags,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">int</span>[][] rlimits, <span class="keyword">long</span> permittedCapabilities, <span class="keyword">long</span> effectiveCapabilities)</span></span>;</span><br></pre></td></tr></table></figure><p>最后的fork()操作是在native层完成的，再回到ZygoteInit.forSystemServer()中执行fork()之后的逻辑处理</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">return</span> handleSystemServerProcess(parsedArgs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>按照正常的逻辑思维，这两处return只会执行一次，其实不然。fork()函数是一次执行，两次返回。更准确的说是两个进程对用一个程序的两次执行。当pis==0时，说明现在处于子进程，当pid&gt;0时，说明处于父进程。在刚fork出子进程的时候，父子进程的数据结构基本是一样的，但是之后就分道扬镳了，各自执行各自的殴。所以上面的代码会出现两次返回值，子进程中会反悔执行hadleSystemServerProcess(parsedArgs)的结果，父进程Zygote会返回null，对于两个不同的返回值又会分别做什么处理呢？我们回到ZygoteInit.main()中，</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (startSystemServer) &#123;</span><br><span class="line">        Runnable r = fork<span class="constructor">SystemServer(<span class="params">abiList</span>, <span class="params">socketName</span>, <span class="params">zygoteServer</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;@code r == null&#125; in the parent (zygote) process, and &#123;@code r != null&#125; in the</span></span><br><span class="line">        <span class="comment">// child (system_server) process.</span></span><br><span class="line">        <span class="comment">// r == null 说明是在 zygote 进程</span></span><br><span class="line">        <span class="comment">// r != null 说明是在 system_server 进程</span></span><br><span class="line">        <span class="keyword">if</span> (r != null) &#123;</span><br><span class="line">            r.run<span class="literal">()</span>; </span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 循环等待处理客户端请求</span></span><br><span class="line">    caller = zygoteServer.run<span class="constructor">SelectLoop(<span class="params">abiList</span>)</span>;</span><br></pre></td></tr></table></figure><p>子进程system_server返回的是一个Runnable，执行r.run(),然后直接return了。而父进程Zygote返回的是null，所以不满足if的判断条件，继续往下执行runSelectLoop。父子进程就各做各的事情了</p><p>下面分析runSelectLoop()和handlSystemServerProcess()这两个方法</p><h4 id="handleSystemServerProcess"><a href="#handleSystemServerProcess" class="headerlink" title="handleSystemServerProcess"></a>handleSystemServerProcess</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&gt; ZygoteInit.java</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">static</span> Runnable handleSystemServerProcess(ZygoteConnection.Arguments parsedArgs) &#123;</span><br><span class="line">    <span class="comment">// set umask to 0077 so new files and directories will default to owner-only permissions.</span></span><br><span class="line">    <span class="comment">// umask一般是用在你初始创建一个目录或者文件的时候赋予他们的权限</span></span><br><span class="line">    Os.umask(S_IRWXG | S_IRWXO);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置当前进程名为 &quot;system_server&quot;</span></span><br><span class="line">    <span class="keyword">if</span> (parsedArgs.niceName != <span class="literal">null</span>) &#123; </span><br><span class="line">        Process.setArgV0(parsedArgs.niceName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">String</span> systemServerClasspath = Os.getenv(<span class="string">&quot;SYSTEMSERVERCLASSPATH&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (systemServerClasspath != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// dex 优化操作</span></span><br><span class="line">        performSystemServerDexOpt(systemServerClasspath);</span><br><span class="line">        <span class="comment">// Capturing profiles is only supported for debug or eng builds since selinux normally</span></span><br><span class="line">        <span class="comment">// prevents it.</span></span><br><span class="line">        <span class="keyword">boolean</span> profileSystemServer = SystemProperties.getBoolean(</span><br><span class="line">                <span class="string">&quot;dalvik.vm.profilesystemserver&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (profileSystemServer &amp;&amp; (Build.IS_USERDEBUG || Build.IS_ENG)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                prepareSystemServerProfile(systemServerClasspath);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> e) &#123;</span><br><span class="line">                Log.wtf(TAG, <span class="string">&quot;Failed to set up system server profile&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (parsedArgs.invokeWith != <span class="literal">null</span>) &#123; <span class="comment">// invokeWith 一般为空</span></span><br><span class="line">        <span class="keyword">String</span>[] args = parsedArgs.remainingArgs;</span><br><span class="line">        <span class="comment">// If we have a non-null system server class path, we&#x27;ll have to duplicate the</span></span><br><span class="line">        <span class="comment">// existing arguments and append the classpath to it. ART will handle the classpath</span></span><br><span class="line">        <span class="comment">// correctly when we exec a new process.</span></span><br><span class="line">        <span class="keyword">if</span> (systemServerClasspath != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">String</span>[] amendedArgs = <span class="keyword">new</span> <span class="keyword">String</span>[args.length + <span class="number">2</span>];</span><br><span class="line">            amendedArgs[<span class="number">0</span>] = <span class="string">&quot;-cp&quot;</span>;</span><br><span class="line">            amendedArgs[<span class="number">1</span>] = systemServerClasspath;</span><br><span class="line">            System.arraycopy(args, <span class="number">0</span>, amendedArgs, <span class="number">2</span>, args.length);</span><br><span class="line">            args = amendedArgs;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        WrapperInit.execApplication(parsedArgs.invokeWith,</span><br><span class="line">                parsedArgs.niceName, parsedArgs.targetSdkVersion,</span><br><span class="line">                VMRuntime.getCurrentInstructionSet(), <span class="literal">null</span>, args);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Unexpected return from WrapperInit.execApplication&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ClassLoader cl = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (systemServerClasspath != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 创建类加载器，并赋给当前线程</span></span><br><span class="line">            cl = createPathClassLoader(systemServerClasspath, parsedArgs.targetSdkVersion);</span><br><span class="line">                </span><br><span class="line">            Thread.currentThread().setContextClassLoader(cl);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Pass the remaining arguments to SystemServer.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> ZygoteInit.zygoteInit(parsedArgs.targetSdkVersion, parsedArgs.remainingArgs, cl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* should never reach here */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置进程名为system_server，执行dex优化，给当前线程设置类加载器，最后调用ZygoteInit.zygoteInit()继续处理剩余参数</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static final Runnable zygote<span class="constructor">Init(<span class="params">int</span> <span class="params">targetSdkVersion</span>, String[] <span class="params">argv</span>, ClassLoader <span class="params">classLoader</span>)</span> &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">// Redirect System.out and System.err to the Android log.</span></span><br><span class="line">    <span class="comment">// 重定向 System.out 和 System.err 到 Android log</span></span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">RuntimeInit</span>.</span></span>redirect<span class="constructor">LogStreams()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">RuntimeInit</span>.</span></span>common<span class="constructor">Init()</span>; <span class="comment">// 一些初始化工作</span></span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">ZygoteInit</span>.</span></span>native<span class="constructor">ZygoteInit()</span>; <span class="comment">// native 层初始化</span></span><br><span class="line">    return <span class="module-access"><span class="module"><span class="identifier">RuntimeInit</span>.</span></span>application<span class="constructor">Init(<span class="params">targetSdkVersion</span>, <span class="params">argv</span>, <span class="params">classLoader</span>)</span>; <span class="comment">// 调用入口函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重定向Log，进行一些初始化工作。这部分工作就先不说了，最后调用RuntimeInit.applicationInit(),继续往下看</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; RuntimeInit.<span class="function">java</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> Runnable <span class="title">applicationInit</span><span class="params">(<span class="keyword">int</span> targetSdkVersion, <span class="keyword">String</span>[] argv,</span></span></span><br><span class="line"><span class="params"><span class="function">        ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">final</span> Arguments args = <span class="keyword">new</span> <span class="built_in">Arguments</span>(argv); <span class="comment">// 解析参数</span></span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">// 寻找 startClass 的 main() 方法。这里的 startClass 是 com.android.server.SystemServer</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">findStaticMain</span>(args.startClass, args.startArgs, classLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 startClass 参数是 com.android.server.SystemServer。findStaticMain() 方法看名字就能知道它的作用是找到 main() 函数，这里是要找到 com.android.server.SystemServer 类的 main() 方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="built_in">static</span> Runnable findStaticMain(<span class="keyword">String</span> className, <span class="keyword">String</span>[] argv,</span><br><span class="line">        ClassLoader classLoader) &#123;</span><br><span class="line">    <span class="class"><span class="keyword">Class</span>&lt;?&gt; <span class="title">cl</span>;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">try</span> </span>&#123;</span><br><span class="line">        cl = <span class="keyword">Class</span>.forName(className, <span class="literal">true</span>, classLoader);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RuntimeException</span>(</span><br><span class="line">                <span class="string">&quot;Missing class when invoking static main &quot;</span> + className,</span><br><span class="line">                ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Method m;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 寻找 main() 方法</span></span><br><span class="line">        m = cl.getMethod(<span class="string">&quot;main&quot;</span>, <span class="keyword">new</span> <span class="class"><span class="keyword">Class</span>[] </span>&#123; <span class="keyword">String</span>[].<span class="keyword">class</span> &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RuntimeException</span>(</span><br><span class="line">                <span class="string">&quot;Missing static main on &quot;</span> + className, ex);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SecurityException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RuntimeException</span>(</span><br><span class="line">                <span class="string">&quot;Problem getting static main on &quot;</span> + className, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> modifiers = m.getModifiers();</span><br><span class="line">    <span class="keyword">if</span> (! (Modifier.isStatic(modifiers) &amp;&amp; Modifier.isPublic(modifiers))) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RuntimeException</span>(</span><br><span class="line">                <span class="string">&quot;Main method is not public and static on &quot;</span> + className);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * This throw gets caught in ZygoteInit.main(), which responds</span></span><br><span class="line"><span class="comment">     * by invoking the exception&#x27;s run() method. This arrangement</span></span><br><span class="line"><span class="comment">     * clears up all the stack frames that were required in setting</span></span><br><span class="line"><span class="comment">     * up the process.</span></span><br><span class="line"><span class="comment">     * 返回一个 Runnable，在 Zygote 的 main() 方法中执行器 run() 方法</span></span><br><span class="line"><span class="comment">     * 之前的版本是抛出一个异常，在 main() 方法中捕获</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MethodAndArgsCaller(m, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到 main() 方法并构建一个 Runnable 对象 MethodAndArgsCaller 。这里返回的 Runnable 对象会在哪里执行呢？又要回到文章开头的 ZygoteInit.main() 函数了，在 forkSystemServer() 之后，子进程执行 handleSystemServerProcess() 并返回一个 Runnable 对象，在 ZygoteInit.main() 中会执行其 run() 方法。<br>再来看看 MethodAndArgsCaller 的 run() 方法吧！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodAndArgsCaller</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** method to call */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Method mMethod;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** argument array */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">String</span>[] mArgs;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MethodAndArgsCaller(Method method, <span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        mMethod = method;</span><br><span class="line">        mArgs = args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mMethod.invoke(<span class="literal">null</span>, <span class="keyword">new</span> <span class="keyword">Object</span>[] &#123; mArgs &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RuntimeException</span>(ex);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line">            <span class="built_in">Throwable</span> cause = ex.getCause();</span><br><span class="line">            <span class="keyword">if</span> (cause <span class="keyword">instanceof</span> <span class="built_in">RuntimeException</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> (<span class="built_in">RuntimeException</span>) cause;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cause <span class="keyword">instanceof</span> <span class="built_in">Error</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> (<span class="built_in">Error</span>) cause;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RuntimeException</span>(ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就一件事，执行参数中的 method。这里的 method 就是 com.android.server.SystemServer 的 main() 方法。到这里，SystemServer 就要正式工作了。<br>其实在老版本的 Android 源码中，并不是通过这种方法执行 SystemServer.main() 的。老版本的 MethodAndArgsCaller 是 Exception 的子类，在这里会直接抛出异常，然后在 ZygoteInit.main() 方法中进行捕获，捕获之后执行其 run() 方法。<br>SystemServer 的具体分析就放到下篇文章吧，本篇的主角还是 Zygote ！<br>看到这里，Zygote 已经完成了一件人生大事，孵化出了 SystemServer 进程。但是作为 “女娲” ，造人的任务还是停不下来，任何一个应用进程的创建还是离不开它的。ZygoteServer.runSlectLoop() 给它搭好了和客户端之前的桥梁。</p><h4 id="runSelectLoop"><a href="#runSelectLoop" class="headerlink" title="runSelectLoop"></a>runSelectLoop</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&gt; ZygoteServer.java</span><br><span class="line"></span><br><span class="line">Runnable runSelectLoop(<span class="keyword">String</span> abiList) &#123;</span><br><span class="line">    ArrayList&lt;FileDescriptor&gt; fds = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;FileDescriptor&gt;();</span><br><span class="line">    ArrayList&lt;ZygoteConnection&gt; peers = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;ZygoteConnection&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// mServerSocket 是之前在 Zygote 中创建的</span></span><br><span class="line">    fds.add(mServerSocket.getFileDescriptor());</span><br><span class="line">    peers.add(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        StructPollfd[] pollFds = <span class="keyword">new</span> <span class="type">StructPollfd</span>[fds.size()];</span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; pollFds.length; ++i) &#123;</span><br><span class="line">            pollFds[i] = <span class="keyword">new</span> <span class="type">StructPollfd</span>();</span><br><span class="line">            pollFds[i].fd = fds.<span class="keyword">get</span>(i);</span><br><span class="line">            pollFds[i].events = (short) POLLIN;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 有事件来时往下执行，没有时就阻塞</span></span><br><span class="line">            Os.poll(pollFds, <span class="number">-1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ErrnoException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">RuntimeException</span>(<span class="string">&quot;poll failed&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (int i = pollFds.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((pollFds[i].revents &amp; POLLIN) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) &#123; <span class="comment">// 有新客户端连接</span></span><br><span class="line">                ZygoteConnection <span class="keyword">new</span><span class="type">Peer</span> = acceptCommandPeer(abiList);</span><br><span class="line">                peers.add(<span class="keyword">new</span><span class="type">Peer</span>);</span><br><span class="line">                fds.add(<span class="keyword">new</span><span class="type">Peer</span>.getFileDesciptor());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 处理客户端请求</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ZygoteConnection connection = peers.<span class="keyword">get</span>(i);</span><br><span class="line">                    final Runnable command = connection.processOneCommand(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">                    ......</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                   ......</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mServerSocket 是 ZygoteInit.main() 中一开始就建立的服务端 socket，用于处理客户端请求。一看到 while(true) 就肯定会有阻塞操作。Os.poll() 在有事件来时往下执行，否则就阻塞。当有客户端请求过来时，调用 ZygoteConnection.processOneCommand() 方法来处理。<br>processOneCommand() 源码很长，这里就贴一下关键部分：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">pid = Zygote.forkAndSpecialize(parsedArgs.uid, parsedArgs.gid, parsedArgs.gids,</span><br><span class="line">        parsedArgs.runtimeFlags, rlimits, parsedArgs.mountExternal, parsedArgs.seInfo,</span><br><span class="line">        parsedArgs.niceName, fdsToClose, fdsToIgnore, parsedArgs.startChildZygote,</span><br><span class="line">        parsedArgs.instructionSet, parsedArgs.appDataDir);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// in child 进入子进程</span></span><br><span class="line">        zygoteServer.setForkChild();</span><br><span class="line"></span><br><span class="line">        zygoteServer.closeServerSocket();</span><br><span class="line">        IoUtils.closeQuietly(serverPipeFd);</span><br><span class="line">        serverPipeFd = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> handleChildProc(parsedArgs, descriptors, childPipeFd,</span><br><span class="line">                parsedArgs.startChildZygote);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// In the parent. A pid &lt; 0 indicates a failure and will be handled in</span></span><br><span class="line">        <span class="comment">// handleParentProc.</span></span><br><span class="line">        IoUtils.closeQuietly(childPipeFd);</span><br><span class="line">        childPipeFd = <span class="literal">null</span>;</span><br><span class="line">        handleParentProc(pid, descriptors, serverPipeFd);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            IoUtils.closeQuietly(childPipeFd);</span><br><span class="line">            IoUtils.closeQuietly(serverPipeFd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>乍一看是不是感觉有点眼熟？没错，这一块的逻辑和 forkSystemServer() 很相似，只是这里 fork 的是普通应用进程，调用的是 forkAndSpecialize() 方法。中间的代码调用就不在这详细分析了，最后还是会调用到 findStaticMain() 执行应用进程的对应 main() 方法，感兴趣的同学可以到我的源码项目 android_9.0.0_r45 阅读相关文件，注释还是比较多的。<br>还有一个问题，上面只分析了 Zygote 接收到客户端请求并响应，那么这个客户端可能是谁呢？具体又是如何与 Zygote 通信的呢？关于这个问题，后续文章中肯定会写到，关注我的 Github 仓库 android_9.0.0_r45，所有文章都会第一时间同步过去。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="/assets/tools/tools-progress-03.png" alt="时序图"></p><h1 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h1><p><a href="http://wuxiaolong.me/2017/03/13/appStart/">App启动</a><br><a href="https://www.jianshu.com/p/89fd44083c1c">Activity启动流程</a><br><a href="https://juejin.im/post/5d6cad7d518825138e2b587a?utm_source=gold_browser_extension">Android App启动过程</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Activity启动流程&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>拥抱Python（二） 基本语法概述</title>
    <link href="http://www.paulniu.com/2019/07/25/python-02/"/>
    <id>http://www.paulniu.com/2019/07/25/python-02/</id>
    <published>2019-07-25T14:23:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python变量</p><span id="more"></span><p>变量是存储在内存中的值。这就意味着在创建变量的时候会在内存中开辟一个空间。<br>基于变量的数据类型，解释器会分配指定内存，并决定什么数据可以被存储在内存中。<br>因此，变量可以指定不同的数据类型，这些变量可以存储整数，小数或字符</p><h1 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h1><p>变量赋值没什么好说的，就是通过<pre>=</pre>去执行赋值语句。这里需要注意的是，Python中有一个新的赋值方法，多个变量赋值，这个还是比较有意思的</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">counter = <span class="number">100</span>  <span class="comment"># 赋值整型变量</span></span><br><span class="line">mails = <span class="number">10.01</span>  <span class="comment"># 赋值浮点类型</span></span><br><span class="line"><span class="keyword">values</span> = <span class="string">&#x27;hello world&#x27;</span>  <span class="comment"># 赋值字符类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> counter</span><br><span class="line"><span class="keyword">print</span> mails</span><br><span class="line"><span class="keyword">print</span> <span class="keyword">values</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多个变量赋值</span></span><br><span class="line">a, b, c = <span class="number">1</span>, <span class="number">10.2</span>, <span class="string">&#x27;paulniu&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> a, b, c</span><br></pre></td></tr></table></figure><h1 id="标准数据类型"><a href="#标准数据类型" class="headerlink" title="标准数据类型"></a>标准数据类型</h1><p>在内存中存储的数据可以有多种类型，例如，一个人的年龄可以用数字表示，姓名用字符表示<br>为了方便，在Python中定义了一些标准类型，用于存储各种类型的数据</p><ol><li>Numbers(数字)</li><li>String(字符串)</li><li>List(列表)</li><li>Tuple(元组)</li><li>Dictionary(字典)</li></ol><h2 id="Python数字"><a href="#Python数字" class="headerlink" title="Python数字"></a>Python数字</h2><p>数字类型用于存储数值。<br>他们是不可改变的的数据类型，这意味着改变数字数据类型会分配一个新的对象<br>当你指定一个值时，Number对象就会被创建：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">var1</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">var2</span> = <span class="number">10</span></span><br></pre></td></tr></table></figure><p>你也可以del语句删除一些对象的引用。如下所示</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">del</span> <span class="built_in">var1</span></span><br></pre></td></tr></table></figure><p>这个地方的操作和Java语言有着非常大的区别。我们都知道，在Java中如果一个变量不再去使用的时候，我们是不需要手动删除变量引用的。java的JVM会在合适的时间去帮我们清除这个内存碎片。但是在Python中，我们是可以自己去删除一些引用，以保证内存的合理使用。</p><p>Python支持的四种数字类型如下：</p><ol><li>int：有符号整数</li><li>long：长整数，可以代表八进制和十六进制</li><li>float：浮点型</li><li>complex：复数</li></ol><blockquote><p>注意：long 类型只存在于 Python2.X 版本中，在 2.2 以后的版本中，int 类型数据溢出后会自动转为long类型。在 Python3.X 版本中 long 类型被移除，使用 int 替代。</p></blockquote><h2 id="Python字符串"><a href="#Python字符串" class="headerlink" title="Python字符串"></a>Python字符串</h2><p>字符串或串(String)是由数字、字母、下划线组成的一串字符。<br>一般记做如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">s</span> = <span class="string">&quot;abcdefghijklmnnopqrstuvwxyz&quot;</span></span><br></pre></td></tr></table></figure><p>这里需要特别说明一点，python的字串列表有2种取值顺序:</p><ol><li>从左到右索引默认0开始的，最大范围是字符串长度少1</li><li>从右到左索引默认-1开始的，最大范围是字符串开头</li></ol><p><img src="/assets/python01/python02.png" alt="python去字符串列表"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ss = <span class="string">&quot;hello world!&quot;</span></span><br><span class="line"><span class="builtin-name">print</span> ss  # 输出完整字符串</span><br><span class="line"><span class="builtin-name">print</span> ss[0]  # 输出字符串中第一个字符</span><br><span class="line"><span class="builtin-name">print</span> ss[2:5]  # 数组字符串中第三个和第六个之间的字符串</span><br><span class="line"><span class="builtin-name">print</span> ss[2:]  # 输出字符串中第三个开始后面的字符串</span><br><span class="line"><span class="builtin-name">print</span> ss * 2  # 输出字符串两次</span><br><span class="line"><span class="builtin-name">print</span> ss + <span class="string">&quot;test&quot;</span>  # 输出拼接字符串</span><br><span class="line"><span class="builtin-name">print</span> ss[-4:]</span><br></pre></td></tr></table></figure><p>输入结果：<br><img src="/assets/python01/python03.png" alt="python运行结果"></p><p>除了可以传两个参数之外，还可以传递第三个参数，也就是步长，如下所示：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置步长</span></span><br><span class="line"><span class="attribute">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">100</span>)</span><br><span class="line"><span class="attribute">ss1</span> = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span></span><br><span class="line"><span class="attribute">print</span>(ss<span class="number">1</span>[<span class="number">0</span>:<span class="number">20</span>:<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="/assets/python01/python04.png" alt="python运行结果"></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>List（列表） 是 Python 中使用最频繁的数据类型。<br>列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至可以包含列表（即嵌套）。<br>列表用 [ ] 标识，是 python 最通用的复合数据类型。<br>列表中值的切割也可以用到变量 [头下标:尾下标] ，就可以截取相应的列表，从左到右索引默认 0 开始，从右到左索引默认 -1 开始，下标可以为空表示取到头或尾。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表拼接</span></span><br><span class="line"></span><br><span class="line">ss2 = [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;!&quot;</span>]</span><br><span class="line">ss3 = [100, <span class="string">&quot;python&quot;</span>, <span class="string">&quot;!&quot;</span>]</span><br><span class="line">ss4 = <span class="string">&quot;paulniu&quot;</span></span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">&quot;-&quot;</span> * 100)</span><br><span class="line"><span class="builtin-name">print</span>(ss2 + ss3)</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="/assets/python01/python05.png" alt="python运行结果"></p><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>元组相当于list列表，但是只能赋值一次，不能再次修改</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">print</span>(<span class="string">&quot;-&quot;</span> * 100)</span><br><span class="line">ss5 = (<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;!&quot;</span>, 100);</span><br><span class="line"><span class="builtin-name">print</span>(ss5)</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="/assets/python01/python06.png" alt="python运行结果"></p><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>字典(dictionary)是除列表以外python之中最灵活的内置数据结构类型。列表是有序的对象集合，字典是无序的对象集合。<br>两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。<br>字典用”{ }”标识。字典由索引(key)和它对应的值value组成。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">100</span>)</span><br><span class="line"><span class="attribute">ss6</span> = &#123;<span class="string">&quot;key1&quot;</span>: <span class="string">&quot;value1&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;paulniu&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">27</span>, <span class="number">100</span>: <span class="string">&quot;classname&quot;</span>, <span class="number">101</span>: <span class="number">10001</span>&#125;</span><br><span class="line"><span class="attribute">print</span>(ss<span class="number">6</span>)</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="/assets/python01/python07.png" alt="运行结果"></p><h1 id="Python数据类型转换方法"><a href="#Python数据类型转换方法" class="headerlink" title="Python数据类型转换方法"></a>Python数据类型转换方法</h1><ul><li>int(x) 将数据转成int类型</li><li>long(x) 将数据转成long类型</li><li>float(x) 将数据类型转成float类型</li><li>complex(x) 创建一个复数</li><li>str(x) 将数据类型转成String类型</li><li>repr(x) 将对象转化为供解释器读取的形式</li><li>eval() 用来计算在字符串中的有效Python表达式,并返回一个对象</li><li>tuple(s) 将序列 s 转换为一个元组</li><li>list(s) 将序列 s 转换为一个列表</li><li>set(s) 转换为可变集合</li><li>dict(d) 创建一个字典。d 必须是一个序列 (key,value)元组。</li><li>frozenset(s) 转换成不可变</li><li>chr(x) 将一个整数转换为一个字符</li><li>unichr(x) 将一个整数转换为Unicode字符</li><li>ord(x) 将一个字符转换为它的整数值</li><li>hex(x) 将一个整数转换为一个十六进制字符串</li><li>oct(x) 将一个整数转换为一个八进制字符串</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Python变量&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="http://www.paulniu.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>拥抱Python（一） 介绍</title>
    <link href="http://www.paulniu.com/2019/07/25/python-01/"/>
    <id>http://www.paulniu.com/2019/07/25/python-01/</id>
    <published>2019-07-25T08:48:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>python已经非常火爆了，可是我一直没有去学习，最近一段时间，公司的项目并不是非常紧张，所以趁着这个机会去学一些新东西。<br>其实真正让我下定决心去学习Python的原因就是，我在使用一款软件，结果网上就有一个人使用Python去通过抓包获取到了很多信息。通过这些数据可以知道大家对某一件事情的喜好和看法。我觉得这个挺有意思的，所以，下定决心，把这个Python搞一下</p><span id="more"></span><p>这一个系列的博客，我希望能够把自己从头到尾学习Python的轨迹记录下来，也算是给自己一个学习的记录</p><p>今天介绍的东西比较简单，都是Python的一些介绍，和简单的使用方法。后面才是真正的去学习语法的东西。</p><h1 id="Python概念"><a href="#Python概念" class="headerlink" title="Python概念"></a>Python概念</h1><p>在没有看到官网的介绍之前，Python在我心中有了一个大概的概念，知道他的语法很简练，是一个脚本语言，不要虚拟机编译等等。所以，这里我就直接把Python的介绍给复制了下来，语言的概念基本上都是千篇一律吧。</p><blockquote><p>Python是一种解释型、面向对象、动态数据类型的高级程序设计语言。</p></blockquote><ol><li>Python是一种解释型的语言：这就意味着在开发的过程中没有编译这个环节，类似于PHP</li><li>Python是一种交互式的语言：这就意味着可以使用Python的提示符<pre><<<</pre>直接执行代码</li><li>Python是一种面向对象的语言：这就意味着Python支持面向对象的风格或代码封装在对象的编程技术</li><li>Python是一种初学者语言：</li></ol><h1 id="Python环境的搭建"><a href="#Python环境的搭建" class="headerlink" title="Python环境的搭建"></a>Python环境的搭建</h1><p>这里我的电脑是MacOS系统，自带有Python，所以我使用起来比较方便，那么除了MacOS系统之外，Windows，Linux等系统也是支持Python的。例如Windows系统，直接访问<a href="https://wwww.python.org/">官网</a>就可以下载最新的Python安装包。这里需要声明一下，Python的版本分为两个，一个是Python2.x，另外一个是Python3.x。因为我是初学者，所以在选择哪一个版本作为学习的起步的时候，真的是让我难为了好一阵子。后来我觉得，只要入了门，后面再去学习新版本，应该问题也不大(虽然官网说了，2.x和3.x的差别还是蛮大的)。所以，我这里使用的是Python2.7.10的版本。</p><blockquote><p>其实大家不必过于纠结，后面我们就会发现，只要学懂了一个，后面的也会迎刃而解。</p></blockquote><p>下载下来之后，直接安装即可。安装很方便，这里就不过多介绍。唯一需要注意的是，一定要配置环境变量。在将所有的内容都配置完成之后，在终端中输入<pre>python</pre>，就会打印出如下的内容，说明你的环境搭建已经完成了。</p><p><img src="/assets/python01/python01.png" alt="python环境搭建"></p><h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><p>Python的使用有三种方式</p><ol><li>交互式解析器：也就是通过终端的方式去执行。终端中输入python+enter键，就会打开解析器，然后直接在上面输入Python代码即可</li><li>命令行脚本：就是在磁盘中创建一个.py文件，例如创建test.py的文件，在需要执行脚本的时候直接运行python test.py即可</li><li>使用开发工具，我这里使用的是PyCharm</li></ol><h1 id="Python的基础语法"><a href="#Python的基础语法" class="headerlink" title="Python的基础语法"></a>Python的基础语法</h1><p>在 Python 里，标识符由字母、数字、下划线组成。</p><p>在 Python 中，所有标识符可以包括英文、数字以及下划线(_)，但不能以数字开头。</p><p>Python 中的标识符是区分大小写的。</p><p>以下划线开头的标识符是有特殊意义的。以单下划线开头 _foo 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 from xxx import * 而导入。</p><p>以双下划线开头的 <pre>__foo</pre> 代表类的私有成员，以双下划线开头和结尾的 <pre><strong>foo</strong></pre> 代表 Python 里特殊方法专用的标识，如 <pre><strong>init</strong>()</pre> 代表类的构造函数。</p><p>Python 可以同一行显示多条语句，方法是用分号 ; 分开</p><h1 id="行和缩进"><a href="#行和缩进" class="headerlink" title="行和缩进"></a>行和缩进</h1><p>学习 Python 与其他语言最大的区别就是，Python 的代码块不使用大括号 {} 来控制类，函数以及其他逻辑判断。python 最具特色的就是用缩进来写模块。</p><p>缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量，这个必须严格执行</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;python已经非常火爆了，可是我一直没有去学习，最近一段时间，公司的项目并不是非常紧张，所以趁着这个机会去学一些新东西。&lt;br&gt;其实真正让我下定决心去学习Python的原因就是，我在使用一款软件，结果网上就有一个人使用Python去通过抓包获取到了很多信息。通过这些数据可以知道大家对某一件事情的喜好和看法。我觉得这个挺有意思的，所以，下定决心，把这个Python搞一下&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="http://www.paulniu.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>重拾android路(三十一) Kotlin学习笔记</title>
    <link href="http://www.paulniu.com/2019/07/25/android-31-kotlin/"/>
    <id>http://www.paulniu.com/2019/07/25/android-31-kotlin/</id>
    <published>2019-07-25T03:49:11.000Z</published>
    <updated>2021-08-30T08:55:55.300Z</updated>
    
    <content type="html"><![CDATA[<p>概述</p><span id="more"></span><p>Kotlin 是一种在 Java 虚拟机上运行的静态类型编程语言，被称之为 Android 世界的Swift，由 JetBrains 设计开发并开源。<br>Kotlin 可以编译成Java字节码，也可以编译成 JavaScript，方便在没有 JVM 的设备上运行。</p><h1 id="kotlin继承android开发环境"><a href="#kotlin继承android开发环境" class="headerlink" title="kotlin继承android开发环境"></a>kotlin继承android开发环境</h1><p>在Android Studio3.0以后的版本，自动能够使用kotlin作为开发语言</p><h1 id="kotlin基础语法"><a href="#kotlin基础语法" class="headerlink" title="kotlin基础语法"></a>kotlin基础语法</h1><p>熟悉Java语言之后，Kotlin的上手简直不要太简单，直接开始总结</p><h2 id="包声明"><a href="#包声明" class="headerlink" title="包声明"></a>包声明</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runoob.main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>kotlin源文件不需要相匹配的目录和包，源文件可以放在任何文件目录。<br>如果没有指定包，默认为 <pre>default </pre>包。</p><h2 id="默认导入"><a href="#默认导入" class="headerlink" title="默认导入"></a>默认导入</h2><p>有几个包会默认导入到每个kotlin文件中，如下</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">kotlin.<span class="emphasis">*</span></span><br><span class="line"><span class="emphasis">kotlin.annotation.*</span></span><br><span class="line">kotlin.collections.<span class="emphasis">*</span></span><br><span class="line"><span class="emphasis">kotlin.comparisons.*</span></span><br><span class="line">kotlin.io.<span class="emphasis">*</span></span><br><span class="line"><span class="emphasis">kotlin.ranges.*</span></span><br><span class="line">kotlin.sequences.<span class="emphasis">*</span></span><br><span class="line"><span class="emphasis">kotlin.text.*</span></span><br></pre></td></tr></table></figure><h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><p>函数定义使用关键字 fun，参数格式为：参数 : 类型</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;   <span class="comment">// Int 参数，返回值 Int</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表达式作为函数体，返回类型自动推断：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span> = a + b</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> = a + b   <span class="comment">// public 方法则必须明确写出返回类型</span></span><br></pre></td></tr></table></figure><p>无返回值的函数(类似Java中的void)：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printSum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Unit</span> &#123; </span><br><span class="line">    print(a + b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是返回 Unit类型，则可以省略(对于public方法也是这样)：</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">printSum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span> &#123; </span><br><span class="line">    print(a + b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可变长参数函数"><a href="#可变长参数函数" class="headerlink" title="可变长参数函数"></a>可变长参数函数</h2><p>函数的变长参数可以用 vararg 关键字进行标识：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">vars</span><span class="params">(<span class="keyword">vararg</span> v:<span class="type">Int</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(vt <span class="keyword">in</span> v)&#123;</span><br><span class="line">        print(vt)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    vars(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)  <span class="comment">// 输出12345</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="lambda-匿名函数"><a href="#lambda-匿名函数" class="headerlink" title="lambda(匿名函数)"></a>lambda(匿名函数)</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> sumLambda: (<span class="built_in">Int</span>, <span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> = &#123;x,y -&gt; x+y&#125;</span><br><span class="line">    println(sumLambda(<span class="number">1</span>,<span class="number">2</span>))  <span class="comment">// 输出 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义常量与变量"><a href="#定义常量与变量" class="headerlink" title="定义常量与变量"></a>定义常量与变量</h2><p>可变变量定义：var 关键字</p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var <span class="attribute">&lt;标识符&gt;</span> : <span class="attribute">&lt;类型&gt;</span> = <span class="attribute">&lt;初始化值&gt;</span></span><br></pre></td></tr></table></figure><p>不可变变量定义：val 关键字，只能赋值一次的变量(类似Java中final修饰的变量)</p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val <span class="attribute">&lt;标识符&gt;</span> : <span class="attribute">&lt;类型&gt;</span> = <span class="attribute">&lt;初始化值&gt;</span></span><br></pre></td></tr></table></figure><p>常量与变量都可以没有初始化值,但是在引用前必须初始化<br>编译器支持自动类型判断,即声明时可以不指定类型,由编译器判断。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> a: <span class="built_in">Int</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">val</span> b = <span class="number">1</span>       <span class="comment">// 系统自动推断变量类型为Int</span></span><br><span class="line"><span class="keyword">val</span> c: <span class="built_in">Int</span>      <span class="comment">// 如果不在声明时初始化则必须提供变量类型</span></span><br><span class="line">c = <span class="number">1</span>           <span class="comment">// 明确赋值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">5</span>        <span class="comment">// 系统自动推断变量类型为Int</span></span><br><span class="line">x += <span class="number">1</span>           <span class="comment">// 变量可修改</span></span><br></pre></td></tr></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>Kotlin 支持单行和多行注释，实例如下：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是一个单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 这是一个多行的</span></span><br><span class="line"><span class="comment">   块注释。 */</span></span><br></pre></td></tr></table></figure><p>与 Java 不同, Kotlin 中的块注释允许嵌套。</p><h2 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ 表示一个变量名或者变量值</span><br><span class="line">$varName 表示变量值</span><br><span class="line">$&#123;varName.<span class="keyword">fun</span>()&#125; 表示变量的方法返回值:</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="comment">// 模板中的简单名称：</span></span><br><span class="line"><span class="keyword">val</span> s1 = <span class="string">&quot;a is <span class="variable">$a</span>&quot;</span> </span><br><span class="line"></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line"><span class="comment">// 模板中的任意表达式：</span></span><br><span class="line"><span class="keyword">val</span> s2 = <span class="string">&quot;<span class="subst">$&#123;s1.replace(<span class="string">&quot;is&quot;</span>, <span class="string">&quot;was&quot;</span>)&#125;</span>, but now is <span class="variable">$a</span>&quot;</span></span><br></pre></td></tr></table></figure><h2 id="NULL检查机制"><a href="#NULL检查机制" class="headerlink" title="NULL检查机制"></a>NULL检查机制</h2><p>Kotlin的空安全设计对于声明可为空的参数，在使用时要进行空判断处理，有两种处理方式，字段后加!!像Java一样抛出空异常，另一种字段后加?可不做处理返回值为 null或配合?:做空判断处理</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类型后面加?表示可为空</span></span><br><span class="line">var age: String? = <span class="string">&quot;23&quot;</span> </span><br><span class="line"><span class="comment">//抛出空指针异常</span></span><br><span class="line"><span class="keyword">val</span> ages = age!!.<span class="keyword">to</span><span class="constructor">Int()</span></span><br><span class="line"><span class="comment">//不做处理返回 null</span></span><br><span class="line"><span class="keyword">val</span> ages1 = age?.<span class="keyword">to</span><span class="constructor">Int()</span></span><br><span class="line"><span class="comment">//age为空返回-1</span></span><br><span class="line"><span class="keyword">val</span> ages2 = age?.<span class="keyword">to</span><span class="constructor">Int()</span> ?: -<span class="number">1</span></span><br></pre></td></tr></table></figure><p>当一个引用可能为 null 值时, 对应的类型声明必须明确地标记为可为 null。<br>当 str 中的字符串内容不是一个整数时, 返回 null:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">parseInt</span><span class="params">(str: <span class="type">String</span>)</span></span>: <span class="built_in">Int</span>? &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">以下实例演示如何使用一个返回值可为 <span class="literal">null</span> 的函数:</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (args.size &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    print(<span class="string">&quot;Two integers expected&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">val</span> x = parseInt(args[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">val</span> y = parseInt(args[<span class="number">1</span>])</span><br><span class="line">  <span class="comment">// 直接使用 `x * y` 会导致错误, 因为它们可能为 null.</span></span><br><span class="line">  <span class="keyword">if</span> (x != <span class="literal">null</span> &amp;&amp; y != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 在进行过 null 值检查之后, x 和 y 的类型会被自动转换为非 null 变量</span></span><br><span class="line">    print(x * y)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类型检测及自动类型转换"><a href="#类型检测及自动类型转换" class="headerlink" title="类型检测及自动类型转换"></a>类型检测及自动类型转换</h2><p>我们可以使用 is 运算符检测一个表达式是否某类型的一个实例(类似于Java中的instanceof关键字)。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getStringLength</span><span class="params">(obj: <span class="type">Any</span>)</span></span>: <span class="built_in">Int</span>? &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">is</span> String) &#123;</span><br><span class="line">    <span class="comment">// 做过类型判断以后，obj会被系统自动转换为String类型</span></span><br><span class="line">    <span class="keyword">return</span> obj.length </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//在这里还有一种方法，与Java中instanceof不同，使用!is</span></span><br><span class="line">  <span class="comment">// if (obj !is String)&#123;</span></span><br><span class="line">  <span class="comment">//   // XXX</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这里的obj仍然是Any类型的引用</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getStringLength</span><span class="params">(obj: <span class="type">Any</span>)</span></span>: <span class="built_in">Int</span>? &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj !<span class="keyword">is</span> String)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  <span class="comment">// 在这个分支中, `obj` 的类型会被自动转换为 `String`</span></span><br><span class="line">  <span class="keyword">return</span> obj.length</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>甚至还可以</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getStringLength</span><span class="params">(obj: <span class="type">Any</span>)</span></span>: <span class="built_in">Int</span>? &#123;</span><br><span class="line">  <span class="comment">// 在 `&amp;&amp;` 运算符的右侧, `obj` 的类型会被自动转换为 `String`</span></span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">is</span> String &amp;&amp; obj.length &gt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> obj.length</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="区间"><a href="#区间" class="headerlink" title="区间"></a>区间</h2><p>区间表达式由具有操作符形式 .. 的 rangeTo 函数辅以 in 和 !in 形成。<br>区间是为任何可比较类型定义的，但对于整型原生类型，它有一个优化的实现。以下是使用区间的一些示例:</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">for</span> (i in <span class="number">1</span>..<span class="number">4</span>) <span class="selector-tag">print</span>(i) <span class="comment">// 输出“1234”</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">for</span> (i in <span class="number">4</span>..<span class="number">1</span>) <span class="selector-tag">print</span>(i) <span class="comment">// 什么都不输出</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">if</span> (i in <span class="number">1</span>..<span class="number">10</span>) &#123; <span class="comment">// 等同于 1 &lt;= i &amp;&amp; i &lt;= 10</span></span><br><span class="line">    <span class="selector-tag">println</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 step 指定步长</span></span><br><span class="line"><span class="selector-tag">for</span> (i in <span class="number">1</span>..<span class="number">4</span> step <span class="number">2</span>) <span class="selector-tag">print</span>(i) <span class="comment">// 输出“13”</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">for</span> (i in <span class="number">4</span> downTo <span class="number">1</span> step <span class="number">2</span>) <span class="selector-tag">print</span>(i) <span class="comment">// 输出“42”</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 until 函数排除结束元素</span></span><br><span class="line"><span class="selector-tag">for</span> (i in <span class="number">1</span> until <span class="number">10</span>) &#123;   <span class="comment">// i in [1, 10) 排除了 10</span></span><br><span class="line">     <span class="selector-tag">println</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试实例"><a href="#测试实例" class="headerlink" title="测试实例"></a>测试实例</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">fun</span> <span class="selector-tag">main</span>(<span class="attribute">args</span>: Array&lt;String&gt;) &#123;</span><br><span class="line">    <span class="selector-tag">print</span>(<span class="string">&quot;循环输出：&quot;</span>)</span><br><span class="line">    <span class="selector-tag">for</span> (i in <span class="number">1</span>..<span class="number">4</span>) <span class="selector-tag">print</span>(i) <span class="comment">// 输出“1234”</span></span><br><span class="line">    <span class="selector-tag">println</span>(<span class="string">&quot;\n----------------&quot;</span>)</span><br><span class="line">    <span class="selector-tag">print</span>(<span class="string">&quot;设置步长：&quot;</span>)</span><br><span class="line">    <span class="selector-tag">for</span> (i in <span class="number">1</span>..<span class="number">4</span> step <span class="number">2</span>) <span class="selector-tag">print</span>(i) <span class="comment">// 输出“13”</span></span><br><span class="line">    <span class="selector-tag">println</span>(<span class="string">&quot;\n----------------&quot;</span>)</span><br><span class="line">    <span class="selector-tag">print</span>(<span class="string">&quot;使用 downTo：&quot;</span>)</span><br><span class="line">    <span class="selector-tag">for</span> (i in <span class="number">4</span> downTo <span class="number">1</span> step <span class="number">2</span>) <span class="selector-tag">print</span>(i) <span class="comment">// 输出“42”</span></span><br><span class="line">    <span class="selector-tag">println</span>(<span class="string">&quot;\n----------------&quot;</span>)</span><br><span class="line">    <span class="selector-tag">print</span>(<span class="string">&quot;使用 until：&quot;</span>)</span><br><span class="line">    <span class="comment">// 使用 until 函数排除结束元素</span></span><br><span class="line">    <span class="selector-tag">for</span> (i in <span class="number">1</span> until <span class="number">4</span>) &#123;   <span class="comment">// i in [1, 4) 排除了 4</span></span><br><span class="line">        <span class="selector-tag">print</span>(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">println</span>(<span class="string">&quot;\n----------------&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><p>Kotlin 的基本数值类型包括 Byte、Short、Int、Long、Float、Double 等。不同于 Java 的是，字符不属于数值类型，是一个独立的数据类型。</p><table><thead><tr><th align="left">类型</th><th align="left">位宽度</th></tr></thead><tbody><tr><td align="left">Double</td><td align="left">64</td></tr><tr><td align="left">Float</td><td align="left">32</td></tr><tr><td align="left">Long</td><td align="left">64</td></tr><tr><td align="left">Int</td><td align="left">32</td></tr><tr><td align="left">Short</td><td align="left">16</td></tr><tr><td align="left">Byte</td><td align="left">8</td></tr></tbody></table><h2 id="字面常量"><a href="#字面常量" class="headerlink" title="字面常量"></a>字面常量</h2><p>下面是所有类型的字面常量：</p><ol><li>十进制：123</li><li>长整型以大写的 L 结尾：123L</li><li>16 进制以 0x 开头：0x0F</li><li>2 进制以 0b 开头：0b00001011</li><li>注意：8进制不支持<br>Kotlin 同时也支持传统符号表示的浮点数值：</li></ol><ul><li>Doubles 默认写法: 123.5, 123.5e10</li><li>Floats 使用 f 或者 F 后缀：123.5f<br>你可以使用下划线使数字常量更易读：</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">val</span> oneMillion = <span class="number">1</span>_<span class="number">000</span>_<span class="number">000</span></span><br><span class="line"><span class="attribute">val</span> creditCardNumber = <span class="number">1234</span>_<span class="number">5678</span>_<span class="number">9012</span>_<span class="number">3456</span>L</span><br><span class="line"><span class="attribute">val</span> socialSecurityNumber = <span class="number">999</span>_<span class="number">99</span>_<span class="number">9999</span>L</span><br><span class="line"><span class="attribute">val</span> hexBytes = <span class="number">0</span>xFF_EC_DE_<span class="number">5</span>E</span><br><span class="line"><span class="attribute">val</span> bytes = <span class="number">0</span>b<span class="number">11010010</span>_<span class="number">01101001</span>_<span class="number">10010100</span>_<span class="number">10010010</span></span><br></pre></td></tr></table></figure><h2 id="比较两个数字"><a href="#比较两个数字" class="headerlink" title="比较两个数字"></a>比较两个数字</h2><p>Kotlin 中没有基础数据类型，只有封装的数字类型，你每定义的一个变量，其实 Kotlin 帮你封装了一个对象，这样可以保证不会出现空指针。数字类型也一样，所有在比较两个数字的时候，就有比较数据大小和比较两个对象是否相同的区别了。<br>在 Kotlin 中，三个等号 === 表示比较对象地址，两个 == 表示比较两个值大小。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> a: <span class="built_in">Int</span> = <span class="number">10000</span></span><br><span class="line">    println(a === a) <span class="comment">// true，值相等，对象地址相等</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//经过了装箱，创建了两个不同的对象</span></span><br><span class="line">    <span class="keyword">val</span> boxedA: <span class="built_in">Int</span>? = a</span><br><span class="line">    <span class="keyword">val</span> anotherBoxedA: <span class="built_in">Int</span>? = a</span><br><span class="line"></span><br><span class="line">    <span class="comment">//虽然经过了装箱，但是值是相等的，都是10000</span></span><br><span class="line">    println(boxedA === anotherBoxedA) <span class="comment">//  false，值相等，对象地址不一样</span></span><br><span class="line">    println(boxedA == anotherBoxedA) <span class="comment">// true，值相等</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>由于不同的表示方式，较小类型并不是较大类型的子类型，较小的类型不能隐式转换为较大的类型。 这意味着在不进行显式转换的情况下我们不能把 Byte 型值赋给一个 Int 变量。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> b: <span class="built_in">Byte</span> = <span class="number">1</span> <span class="comment">// OK, 字面值是静态检测的</span></span><br><span class="line"><span class="keyword">val</span> i: <span class="built_in">Int</span> = b <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><p>我们可以代用其toInt()方法。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> b: <span class="built_in">Byte</span> = <span class="number">1</span> <span class="comment">// OK, 字面值是静态检测的</span></span><br><span class="line"><span class="keyword">val</span> i: <span class="built_in">Int</span> = b.toInt() <span class="comment">// OK</span></span><br></pre></td></tr></table></figure><p>每种数据类型都有下面的这些方法，可以转化为其它的类型：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">toByte</span><span class="params">()</span></span>: Byte</span><br><span class="line"><span class="function"><span class="title">toShort</span><span class="params">()</span></span>: Short</span><br><span class="line"><span class="function"><span class="title">toInt</span><span class="params">()</span></span>: Int</span><br><span class="line"><span class="function"><span class="title">toLong</span><span class="params">()</span></span>: Long</span><br><span class="line"><span class="function"><span class="title">toFloat</span><span class="params">()</span></span>: Float</span><br><span class="line"><span class="function"><span class="title">toDouble</span><span class="params">()</span></span>: Double</span><br><span class="line"><span class="function"><span class="title">toChar</span><span class="params">()</span></span>: Char</span><br></pre></td></tr></table></figure><p>有些情况下也是可以使用自动类型转化的，前提是可以根据上下文环境推断出正确的数据类型而且数学操作符会做相应的重载。例如下面是正确的：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">val</span> l = <span class="number">1</span>L + <span class="number">3</span> // Long + Int =&gt; Long</span><br></pre></td></tr></table></figure><h2 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a>位操作符</h2><p>对于Int和Long类型，还有一系列的位操作符可以使用，分别是：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">shl</span><span class="params">(bits)</span></span> – 左移位 (Java’s &lt;&lt;)</span><br><span class="line"><span class="function"><span class="title">shr</span><span class="params">(bits)</span></span> – 右移位 (Java’s &gt;&gt;)</span><br><span class="line"><span class="function"><span class="title">ushr</span><span class="params">(bits)</span></span> – 无符号右移位 (Java’s &gt;&gt;&gt;)</span><br><span class="line"><span class="function"><span class="title">and</span><span class="params">(bits)</span></span> – 与</span><br><span class="line"><span class="function"><span class="title">or</span><span class="params">(bits)</span></span> – 或</span><br><span class="line"><span class="function"><span class="title">xor</span><span class="params">(bits)</span></span> – 异或</span><br><span class="line"><span class="function"><span class="title">inv</span><span class="params">()</span></span> – 反向</span><br></pre></td></tr></table></figure><h2 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h2><p>和 Java 不一样，Kotlin 中的 Char 不能直接和数字操作，Char 必需是单引号 ‘ 包含起来的。比如普通字符 ‘0’，’a’。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">check</span><span class="params">(c: <span class="type">Char</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">1</span>) &#123; <span class="comment">// 错误：类型不兼容</span></span><br><span class="line">        <span class="comment">// ……</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符字面值用单引号括起来: ‘1’。 特殊字符可以用反斜杠转义。 支持这几个转义序列：\t、 \b、\n、\r、&#39;、&quot;、\ 和 $。 编码其他字符要用 Unicode 转义序列语法：’\uFF00’。<br>我们可以显式把字符转换为 Int 数字：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">decimalDigitValue</span><span class="params">(c: <span class="type">Char</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (c !<span class="keyword">in</span> <span class="string">&#x27;0&#x27;</span>..<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        <span class="keyword">throw</span> IllegalArgumentException(<span class="string">&quot;Out of range&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> c.toInt() - <span class="string">&#x27;0&#x27;</span>.toInt() <span class="comment">// 显式转换为数字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当需要可空引用时，像数字、字符会被装箱。装箱操作不会保留同一性。</p><h2 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h2><p>布尔用 Boolean 类型表示，它有两个值：true 和 false。<br>若需要可空引用布尔会被装箱。<br>内置的布尔运算有：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">|| – 短路逻辑或</span></span><br><span class="line"><span class="meta">&amp;&amp; – 短路逻辑与</span></span><br><span class="line">! - 逻辑非</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组用类 Array 实现，并且还有一个 size 属性及 get 和 set 方法，由于使用 [] 重载了 get 和 set 方法，所以我们可以通过下标很方便的获取或者设置数组对应位置的值。<br>数组的创建两种方式：一种是使用函数arrayOf()；另外一种是使用工厂函数。如下所示，我们分别是两种方式创建了两个数组：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="comment">//[1,2,3]</span></span><br><span class="line">    <span class="keyword">val</span> a = arrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="comment">//[0,2,4]</span></span><br><span class="line">    <span class="keyword">val</span> b = Array(<span class="number">3</span>, &#123; i -&gt; (i * <span class="number">2</span>) &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取数组内容</span></span><br><span class="line">    println(a[<span class="number">0</span>])    <span class="comment">// 输出结果：1</span></span><br><span class="line">    println(b[<span class="number">1</span>])    <span class="comment">// 输出结果：2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上所述，[] 运算符代表调用成员函数 get() 和 set()。<br>注意: 与 Java 不同的是，Kotlin 中数组是不型变的（invariant）。<br>除了类Array，还有ByteArray, ShortArray, IntArray，用来表示各个类型的数组，省去了装箱操作，因此效率更高，其用法同Array一样：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">val</span> x: IntArray = intArrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="attribute">x</span>[<span class="number">0</span>] = x[<span class="number">1</span>] + x[<span class="number">2</span>]</span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>和 Java 一样，String 是不可变的。方括号 [] 语法可以很方便的获取字符串中的某个字符，也可以通过 for 循环来遍历：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">for</span> <span class="params">(c in str)</span> &#123;</span></span><br><span class="line"><span class="function">    <span class="title">println</span><span class="params">(c)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>Kotlin 支持三个引号 “”” 扩起来的字符串，支持多行字符串，比如：</p><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fun</span> main(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;) &#123;</span><br><span class="line">    <span class="meta">val</span> text = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    多行字符串</span></span><br><span class="line"><span class="string">    多行字符串</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    println(text)   <span class="comment">// 输出有一些前置空格</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>String 可以通过 trimMargin() 方法来删除多余的空白。</p><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fun</span> main(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;) &#123;</span><br><span class="line">    <span class="meta">val</span> text = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    |多行字符串</span></span><br><span class="line"><span class="string">    |菜鸟教程</span></span><br><span class="line"><span class="string">    |多行字符串</span></span><br><span class="line"><span class="string">    |Runoob</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>.trimMargin()</span><br><span class="line">    println(text)    <span class="comment">// 前置空格删除了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认 | 用作边界前缀，但你可以选择其他字符并作为参数传入，比如 trimMargin(“&gt;”)。</p><h2 id="字符串模板-1"><a href="#字符串模板-1" class="headerlink" title="字符串模板"></a>字符串模板</h2><p>字符串可以包含模板表达式 ，即一些小段代码，会求值并把结果合并到字符串中。 模板表达式以美元符（$）开头，由一个简单的名字构成:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> i = <span class="number">10</span></span><br><span class="line">    <span class="keyword">val</span> s = <span class="string">&quot;i = <span class="variable">$i</span>&quot;</span> <span class="comment">// 求值结果为 &quot;i = 10&quot;</span></span><br><span class="line">    println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者用花括号扩起来的任意表达式:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> s = <span class="string">&quot;runoob&quot;</span></span><br><span class="line">    <span class="keyword">val</span> str = <span class="string">&quot;<span class="variable">$s</span>.length is <span class="subst">$&#123;s.length&#125;</span>&quot;</span> <span class="comment">// 求值结果为 &quot;runoob.length is 6&quot;</span></span><br><span class="line">    println(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原生字符串和转义字符串内部都支持模板。 如果你需要在原生字符串中表示字面值 $ 字符（它不支持反斜杠转义），你可以用下列语法：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    val price = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    $&#123;&#x27;$&#x27;&#125;9.99</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    println(price)  <span class="regexp">//</span> 求值结果为 <span class="variable">$9</span>.<span class="number">99</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a>条件控制</h1><h2 id="IF表达式"><a href="#IF表达式" class="headerlink" title="IF表达式"></a>IF表达式</h2><p>一个if语句包含一个布尔表达式和一条或多条语句</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通用法</span></span><br><span class="line"><span class="selector-tag">var</span> max = <span class="selector-tag">a</span></span><br><span class="line"><span class="keyword">if</span> (<span class="selector-tag">a</span> &lt; b) max = <span class="selector-tag">b</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用else</span></span><br><span class="line"><span class="selector-tag">var</span> max: Int</span><br><span class="line"><span class="keyword">if</span> (<span class="selector-tag">a</span> &gt; b)&#123;</span><br><span class="line">  max = <span class="selector-tag">a</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  max = <span class="selector-tag">b</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作为表达式</span></span><br><span class="line">val max = <span class="keyword">if</span> (<span class="selector-tag">a</span> &gt; b) <span class="selector-tag">a</span> <span class="keyword">else</span> b</span><br></pre></td></tr></table></figure><p>我们也可以吧IF语句的表达式的结果赋值给一个变量</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">val</span> <span class="variable">max</span> = <span class="variable"><span class="keyword">if</span></span> (<span class="variable">a</span> &gt; <span class="variable">b</span>)&#123;</span><br><span class="line">  <span class="function"><span class="title">print</span>(<span class="string">&quot;选择a&quot;</span>)</span></span><br><span class="line">  <span class="variable">a</span></span><br><span class="line">&#125; <span class="variable"><span class="keyword">else</span></span> &#123;</span><br><span class="line">  <span class="function"><span class="title">print</span>(<span class="string">&quot;选择b&quot;</span>)</span></span><br><span class="line">  <span class="variable">b</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这也说明我们不需要像java那样有三元运算符，因为我们可以使用他的简单实现</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> c = <span class="keyword">if</span> (condition) a <span class="keyword">else</span> b</span><br></pre></td></tr></table></figure><p>一个例子</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x= <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span>(x &gt;<span class="number">0</span>)&#123;</span><br><span class="line">    println(<span class="string">&quot;x 大于0&quot;</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(x == <span class="number">0</span>)&#123;</span><br><span class="line">    println(<span class="string">&quot;x 等于0&quot;</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    println(<span class="string">&quot;x 小于0&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">val</span> c = <span class="keyword">if</span>(a&gt;=b) a <span class="keyword">else</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">x</span> 等于 <span class="number">0</span></span><br><span class="line"><span class="attribute">c</span> 的值为 <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="使用区间"><a href="#使用区间" class="headerlink" title="使用区间"></a>使用区间</h2><p>使用in运算符来检测某个数字是否在指定区间内</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">  <span class="keyword">val</span> x = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">val</span> y = <span class="number">9</span>;</span><br><span class="line">  <span class="keyword">if</span>(x <span class="keyword">in</span> <span class="number">1.</span><span class="number">.8</span>)&#123;</span><br><span class="line">    println(<span class="string">&quot;x 在区间内&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="When表达式"><a href="#When表达式" class="headerlink" title="When表达式"></a>When表达式</h2><p>when将他的参数和所有的分支条件顺序比较，直到某个分支满足条件<br>when既可以被当做表达式使用也可以被当做语句使用，如果它被当作表达式，符合条件的分支的值就是整个表达式的值，如果当做语句使用，则忽略个别分支的值<br>when类似java语言中的switch</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">when</span>(<span class="variable">x</span>)&#123;</span></span><br><span class="line"><span class="function">  <span class="number">1</span> -&gt; <span class="title">print</span>(<span class="string">&quot;x= 1&quot;</span>)</span></span><br><span class="line">  <span class="number">2</span> -&gt; <span class="function"><span class="title">print</span>(<span class="string">&quot;x=2&quot;</span>)</span></span><br><span class="line">  <span class="variable"><span class="keyword">else</span></span> -&gt; &#123;</span><br><span class="line">    <span class="function"><span class="title">print</span>(<span class="string">&quot;x 不是1，也不是2&quot;</span>)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在when中，else同switch的default，如果其他分支都不满足条件则会求值else分支<br>如果很多分支需要相同的方式出里，则可以把多个分支条件放在一起，用逗号隔开</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">when</span>(x)&#123;</span><br><span class="line">  <span class="number">0</span>,<span class="number">1</span> -&gt; <span class="built_in">print</span>(<span class="string">&quot;x=0或者x=1&quot;</span>)</span><br><span class="line">  <span class="keyword">else</span> -&gt; <span class="built_in">print</span>(<span class="string">&quot;otherwise&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们也可以检测一个值在(in) 或者不在(!in)一个区间或者集合中</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">when</span>(<span class="variable">x</span>)&#123;</span></span><br><span class="line"><span class="function">  <span class="variable"><span class="keyword">in</span></span> <span class="number">1</span>..<span class="number">10</span> -&gt; <span class="title">print</span>(<span class="string">&quot;x 在1到10之间&quot;</span>)</span></span><br><span class="line">  <span class="variable"><span class="keyword">in</span></span> <span class="variable">validNumbers</span> -&gt; <span class="function"><span class="title">print</span>(<span class="string">&quot;x 是有效数字&quot;</span>)</span></span><br><span class="line">  <span class="variable">!<span class="keyword">in</span></span> <span class="number">10</span>..<span class="number">20</span> -&gt; <span class="function"><span class="title">print</span>(<span class="string">&quot;想不在10到20之间&quot;</span>)</span></span><br><span class="line">  <span class="variable"><span class="keyword">else</span></span> -&gt; <span class="function"><span class="title">print</span>(<span class="string">&quot;以上都不是&quot;</span>)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一种可能性是检测一个是是(is)或不是(!is)一个特定类型的值，注意如果是只能转换，我们可以访问该类型的方法和属性而无需任何额外的检测</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">(x:<span class="type">Any</span>)</span></span> = <span class="keyword">when</span>(x)&#123;</span><br><span class="line">  <span class="keyword">is</span> String -&gt; x.startWith(<span class="string">&quot;xxx&quot;</span>)</span><br><span class="line">  <span class="keyword">else</span> -&gt; <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>when也可以用来替换if-else语句，如果不提供参数，所有的分支条件都是简单布尔表达式，而当一个分支的条件为真时执行该分支</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">when</span>&#123;</span><br><span class="line">  x.isOdd<span class="function"><span class="params">()</span> -&gt;</span> <span class="built_in">print</span>(<span class="string">&quot;x是老版本&quot;</span>)</span><br><span class="line">  x.isEven<span class="function"><span class="params">()</span> -&gt;</span> <span class="built_in">print</span>()</span><br><span class="line">  <span class="keyword">else</span> -&gt; <span class="built_in">print</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个例子：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">0</span></span><br><span class="line">    <span class="keyword">when</span> (x) &#123;</span><br><span class="line">        <span class="number">0</span>, <span class="number">1</span> -&gt; println(<span class="string">&quot;x == 0 or x == 1&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span> -&gt; println(<span class="string">&quot;otherwise&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">when</span> (x) &#123;</span><br><span class="line">        <span class="number">1</span> -&gt; println(<span class="string">&quot;x == 1&quot;</span>)</span><br><span class="line">        <span class="number">2</span> -&gt; println(<span class="string">&quot;x == 2&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span> -&gt; &#123; <span class="comment">// 注意这个块</span></span><br><span class="line">            println(<span class="string">&quot;x 不是 1 ，也不是 2&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">when</span> (x) &#123;</span><br><span class="line">        <span class="keyword">in</span> <span class="number">0.</span><span class="number">.10</span> -&gt; println(<span class="string">&quot;x 在该区间范围内&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span> -&gt; println(<span class="string">&quot;x 不在该区间范围内&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h1><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>for循环可以对任何提供迭代器的对象进行遍历，例如for循环<br>如果我们想要通过索引遍历一个数组或者list，我们就可以这么做</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(<span class="meta">x</span> <span class="meta">in</span> <span class="meta">array</span>.indices)&#123;</span><br><span class="line">  p<span class="meta">rint(</span><span class="meta">array</span>[<span class="meta">x</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意上面，在区间上遍历会编译成优化的实现而不会创建额外的对象<br>或者我们可以使用库函数withIndex</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">for</span><span class="params">((index,value)</span></span> <span class="keyword">in</span> array<span class="selector-class">.withInde</span>())&#123;</span><br><span class="line">  println(<span class="string">&quot;the element at $index is $value&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个例子</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">  <span class="keyword">val</span> items = listOf(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;my name&quot;</span>,<span class="string">&quot;paulniu&quot;</span>)</span><br><span class="line">  <span class="keyword">for</span>(item <span class="keyword">in</span> items)&#123;</span><br><span class="line">    println(item)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(index <span class="keyword">in</span> items.indices)&#123;</span><br><span class="line">    println(<span class="string">&quot;item at <span class="variable">$index</span> is <span class="subst">$&#123;items[index]&#125;</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了上面的方式之外，我们还可以通过增强for循环遍历数组或者集合</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">val <span class="built_in">items</span> = listOf(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;my name&quot;</span>,<span class="string">&quot;paulniu&quot;</span>)</span><br><span class="line"><span class="built_in">items</span>.<span class="keyword">forEach</span>&#123; item -&gt; </span><br><span class="line">  println(item)  </span><br><span class="line">&#125;</span><br><span class="line">打印结果就是</span><br><span class="line"><span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;my name&quot;</span>,<span class="string">&quot;paulniu&quot;</span></span><br></pre></td></tr></table></figure><p>如果我们想获取每个item的下标，可以通过带index的for循环，来实现</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">val <span class="built_in">items</span> = listOf(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;my name&quot;</span>,<span class="string">&quot;paulniu&quot;</span>)</span><br><span class="line"><span class="built_in">items</span>.forEachIndex&#123; <span class="built_in">index</span>,item -&gt;</span><br><span class="line">  println(<span class="string">&quot;index=&quot;</span>+<span class="built_in">index</span>+<span class="string">&quot;;item=&quot;</span> +item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当我们想要输出字符串时，可以通过**${}**的方式实现，例如上面的例子，我们可以这样写</p></blockquote><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">val items = listOf(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;my name&quot;</span>,<span class="string">&quot;paulniu&quot;</span>)</span><br><span class="line">items.forEachIndex&#123; <span class="keyword">index</span>,item -&gt; </span><br><span class="line">  println(<span class="string">&quot;index=<span class="subst">$&#123;<span class="keyword">index</span>&#125;</span>;item=<span class="subst">$&#123;item&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="while和do…while循环"><a href="#while和do…while循环" class="headerlink" title="while和do…while循环"></a>while和do…while循环</h2><p>while循环是最基本的循环<br>do…while循环对于while循环来说，如果不满足条件则不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次<br>do…while循环和while循环相似，不同的是，do…while循环至少会执行一次<br>一个例子</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x= <span class="number">5</span></span><br><span class="line">  <span class="keyword">while</span>(x &gt;<span class="number">0</span>)&#123;</span><br><span class="line">    print(x--)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> y = <span class="number">5</span></span><br><span class="line">  <span class="keyword">do</span>&#123;</span><br><span class="line">    println(y--)</span><br><span class="line">  &#125;<span class="keyword">while</span>(y &gt; <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="返回和跳转"><a href="#返回和跳转" class="headerlink" title="返回和跳转"></a>返回和跳转</h2><p>Kotlin有三种结构化跳转表达式</p><ol><li>return 默认从最直接包围他的函数或匿名函数返回</li><li>break 终止最直接包围他的训话</li><li>continue 继续下一次最直接包围他的循环<br>在循环中Kotlin支持传统的break和continue操作符<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.10</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i==<span class="number">3</span>) <span class="keyword">continue</span>  <span class="comment">// i 为 3 时跳过当前循环，继续下一次循环</span></span><br><span class="line">        println(i)</span><br><span class="line">        <span class="keyword">if</span> (i&gt;<span class="number">5</span>) <span class="keyword">break</span>   <span class="comment">// i 为 6 时 跳出循环</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="Break和Continue标签"><a href="#Break和Continue标签" class="headerlink" title="Break和Continue标签"></a>Break和Continue标签</h4><p>在Kotlin中任何表达式都可以用标签(label)标记，标签格式为标识符后面跟@符号</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">loop@</span> <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.100</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">1.</span><span class="number">.100</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (……) <span class="keyword">break</span><span class="symbol">@loop</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>标签限制的break跳转到刚好位于该标签指定的循环后面的执行点，continue继续标签指定的循环的下一次迭代</p><h4 id="标签返回"><a href="#标签返回" class="headerlink" title="标签返回"></a>标签返回</h4><p>Kotlin有函数字面量，局部函数和对象表达式，因此Kotlin的函数可以被嵌套。标签限制的return允许我们从外层函数返回。最重要的一个用途就是从lambda表达式中返回，例如</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line">  ints.forEach&#123;</span><br><span class="line">    <span class="keyword">if</span>(it == <span class="number">0</span>) <span class="keyword">return</span></span><br><span class="line">    print(it)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个return表达式从最直接包围他的函数即f行数中返回(注意这种非局部的返回只支持传给内联函数的lambda表达式)。如果我们需要从lambda表达式中返回，则必须给它加标签并用以限制return</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ints.forEach <span class="symbol">lit@</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (it == <span class="number">0</span>) <span class="keyword">return</span><span class="symbol">@lit</span></span><br><span class="line">        print(it)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h1><h3 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h3><p>Kotlin类包含：构造函数和初始化代码块，函数，属性，内部类，对象声明<br>Kotlin使用关键字class声明类，后面紧跟类名</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">function</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 同时我们也可以声明一个空类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Empty</span></span></span><br></pre></td></tr></table></figure><h3 id="类的属性"><a href="#类的属性" class="headerlink" title="类的属性"></a>类的属性</h3><h4 id="属性定义"><a href="#属性定义" class="headerlink" title="属性定义"></a>属性定义</h4><p>类的属性可以使用关键字var声明为可变的，否则使用只读关键字val声明为不可变</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name:<span class="keyword">String</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">var</span> age:<span class="keyword">Int</span> = <span class="number">22</span></span><br><span class="line">  <span class="keyword">var</span> address: <span class="keyword">String</span>=<span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以使用普通函数那样使用构造函数创建类实例</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> <span class="built_in">demo</span> = Demo()// 注意Kotlin中没有<span class="built_in">new</span>关键字</span><br></pre></td></tr></table></figure><p>如果要使用一个属性，直接用名称引用即可</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">demo</span>.name</span><br><span class="line"><span class="built_in">demo</span>.age</span><br></pre></td></tr></table></figure><p>Kotlin中类可以有一个主构造器，以及一个或多个次构造器，主构造器是类头的一部分，位于类名称之后</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person <span class="function"><span class="keyword">constructor</span><span class="params">(<span class="keyword">name</span>:<span class="keyword">String</span>)</span><span class="comment">&#123;</span></span></span><br><span class="line"><span class="comment"><span class="function"></span></span></span><br><span class="line"><span class="comment"><span class="function">&#125;</span></span></span><br></pre></td></tr></table></figure><p>如果主构造器没有任何注解，也没有任何可见度修饰符，那么constructor关键字可以省略</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Person</span>(<span class="symbol">name:<span class="symbol">String</span></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="getter和setter"><a href="#getter和setter" class="headerlink" title="getter和setter"></a>getter和setter</h4><p>getter和setter都是可选的，如果属性类型可以从初始化语句或者类的成员函数中推断出来，那也可以省略类型，val不允许设置setter函数，因为他是只读的</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> allByDefault:<span class="built_in">Int</span>? <span class="comment">// 错误，需要一个初始化语句，默认实现了getter和setter方法</span></span><br><span class="line"><span class="keyword">var</span> initialized = <span class="number">1</span>   <span class="comment">// 类型为Int，默认实现了getter和setter方法</span></span><br><span class="line"><span class="keyword">val</span> simple:<span class="built_in">Int</span>?       <span class="comment">// 类型为Int，默认实现了getter方法，但必须在构造函数中初始化</span></span><br><span class="line"><span class="keyword">val</span> inferredType = <span class="number">1</span>  <span class="comment">// 类型为Int类型，默认实现了getter方法</span></span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> lastName:String = <span class="string">&quot;wang&quot;</span></span><br><span class="line">      <span class="keyword">get</span>() = field.toUpperCase()     <span class="comment">// 将变量赋值后转换为大写</span></span><br><span class="line">      <span class="keyword">set</span></span><br><span class="line">  <span class="keyword">var</span> no: <span class="built_in">Int</span> = <span class="number">100</span></span><br><span class="line">      <span class="keyword">get</span>() = field                   <span class="comment">// 后端变量</span></span><br><span class="line">      <span class="keyword">set</span>(value)&#123;</span><br><span class="line">        <span class="keyword">if</span>(value &lt; <span class="number">10</span>)&#123;</span><br><span class="line">          field = value</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          field = -<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="keyword">var</span> height:<span class="built_in">Float</span> = <span class="number">123.45f</span></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">set</span>        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> person = Person()</span><br><span class="line">  person.lastName = <span class="string">&quot;lee&quot;</span></span><br><span class="line">  println(<span class="string">&quot;lastName: <span class="subst">$&#123;person.lastName&#125;</span>&quot;</span>)</span><br><span class="line">  person.no = <span class="number">9</span></span><br><span class="line">  println(<span class="string">&quot;no: <span class="subst">$&#123;person.no&#125;</span>&quot;</span>)</span><br><span class="line">  person.no = <span class="number">20</span></span><br><span class="line">  println(<span class="string">&quot;no: <span class="subst">$&#123;person.no&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">lastName:</span>LEE</span><br><span class="line"><span class="symbol">no:</span><span class="number">9</span></span><br><span class="line"><span class="symbol">no:</span><span class="number">-1</span></span><br></pre></td></tr></table></figure><p>Kotlin中类不能有字段，提供了后端变量机制，备用字段使用field关键字声明，field关键字只能用于属性的访问器</p><p>非空属性必须在定义的时候初始化，Kotlin提供了一种可以延迟初始化的方案，使用lateinit关键字描述属性</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">  <span class="keyword">lateinit</span> <span class="keyword">var</span> sub:TestSubject</span><br><span class="line">  <span class="meta">@SetUp</span> <span class="function"><span class="keyword">fun</span> <span class="title">setUp</span><span class="params">()</span></span>&#123;</span><br><span class="line">    sub = TestSubject()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Test</span> <span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    sub.method()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="主构造器"><a href="#主构造器" class="headerlink" title="主构造器"></a>主构造器</h3><p>主构造器中不能包含任何代码，初始化代码可以放在初始化代码段中，初始化代码段使用init关键字作为前缀</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person <span class="function"><span class="keyword">constructor</span><span class="params">(<span class="keyword">name</span>:<span class="keyword">String</span>)</span><span class="comment">&#123;</span></span></span><br><span class="line"><span class="comment"><span class="function">  init&#123;</span></span></span><br><span class="line"><span class="comment"><span class="function">    printlin(&quot;name is $name&quot;)</span></span></span><br><span class="line"><span class="comment"><span class="function">  &#125;</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>注意：主构造器的参数可以在初始化代码段中使用，也可以再累主题定义的属性初始化代码中使用<br>一个例子：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们创建一个person类，然后通过构造函数传入person的姓名，年龄，地址等信息</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">constructor</span></span>(name:string,age:<span class="built_in">Int</span>,address:String)&#123;</span><br><span class="line">  <span class="comment">// 此处为类体构成</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 初始化代码段</span></span><br><span class="line">  <span class="keyword">init</span>&#123;</span><br><span class="line">    println(<span class="string">&quot;初始化一个person信息，姓名是&quot;</span>+$name +<span class="string">&quot;;年龄是&quot;</span>+$age+<span class="string">&quot;;地址是&quot;</span>+$address)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">  <span class="keyword">val</span> person = Person(<span class="string">&quot;张三&quot;</span>,<span class="number">22</span>,<span class="string">&quot;北京市海淀区&quot;</span>)</span><br><span class="line">  println(person.name)</span><br><span class="line">  println(person.age)</span><br><span class="line">  println(person.address)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="次构造函数"><a href="#次构造函数" class="headerlink" title="次构造函数"></a>次构造函数</h3><p>类也可以有二级构造函数，需要在前面加上constructor关键字</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> person&#123;</span></span><br><span class="line"><span class="class">  constructor(<span class="title">parent</span>:<span class="type">Person</span>)&#123;</span></span><br><span class="line"><span class="class">    parent.children.add(<span class="title">this</span>)</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br></pre></td></tr></table></figure><p>如果类有主构造函数，每个次构造函数或者直接或者间接通过另一个次构造函数代理主构造函数，在同一个类中代理另一个构造函数使用this关键字</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Person</span>(<span class="symbol">val</span> <span class="symbol">name:<span class="symbol">String</span></span>)&#123;</span><br><span class="line">  constructor(name:String,age:<span class="built_in">int</span>):<span class="keyword">this</span>(name)&#123;</span><br><span class="line">    <span class="comment">// 执行初始化操作</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果一个非抽象类没有声明构造函数(包括主构造函数和次构造函数)，它会产生一个没有参数的构造函数，构造函数都是public，如果我们不想我们的类有公共的构造函数，那么我们就必须声明一个空的主构造函数</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> DontCreateMe <span class="keyword">private</span> <span class="function"><span class="keyword">constructor</span><span class="params">()</span><span class="comment">&#123;</span></span></span><br><span class="line"><span class="comment"><span class="function"></span></span></span><br><span class="line"><span class="comment"><span class="function">&#125;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>注意：在JVM虚拟机中，如果主构造函数的所有参数都有默认值，编译器就会生成一个附加的无参的构造函数，这个构造函数会直接使用默认值</p></blockquote><p>一个例子</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> <span class="keyword">constructor</span></span>(name:String)&#123;</span><br><span class="line">  <span class="keyword">var</span> url:String= <span class="string">&quot;http://www.baidu.com&quot;</span></span><br><span class="line">  <span class="keyword">var</span> country:String = <span class="string">&quot;CN&quot;</span></span><br><span class="line">  <span class="keyword">var</span> siteName = name</span><br><span class="line"></span><br><span class="line">  <span class="keyword">init</span>&#123;</span><br><span class="line">    println(<span class="string">&quot;初始化网站名称: <span class="subst">$&#123;name&#125;</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 次构造函数</span></span><br><span class="line">  <span class="keyword">constructor</span> (name:String,age:<span class="built_in">Int</span>) :<span class="keyword">this</span>(name)&#123;</span><br><span class="line">    println(<span class="string">&quot;age 是： <span class="variable">$age</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">  <span class="keyword">val</span> website = MyClass(<span class="string">&quot;http://www.paulniu.com&quot;</span>,<span class="number">22</span>)</span><br><span class="line">  println(website.siteName)</span><br><span class="line">  println(website.url)</span><br><span class="line">  println(website.country)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>抽象是面向对象编程的特征之一，类本身或者类中的部分成员都是可以声明为abstract的。抽象成员在类中不存在具体的实现.注意：无需对抽象类或者抽象成员标注open注解</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span></span>&#123;</span><br><span class="line">  <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">myAAA</span>:<span class="type">Base</span></span>()&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="嵌套类"><a href="#嵌套类" class="headerlink" title="嵌套类"></a>嵌套类</h2><p>我们可以把类嵌套在其他类中</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;                  <span class="comment">// 外部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> bar: <span class="built_in">Int</span> = <span class="number">1</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Nested</span> </span>&#123;             <span class="comment">// 嵌套类</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> = <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> demo = Outer.Nested().foo() <span class="comment">// 调用格式：外部类.嵌套类.嵌套类方法/属性</span></span><br><span class="line">    println(demo)    <span class="comment">// == 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>内部类使用inner关键字表示<br>内部类会带有一个对外部类的对象的引用，所以内部类可以访问外部类成员属性和成员函数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> bar: <span class="built_in">Int</span> = <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> v = <span class="string">&quot;成员属性&quot;</span></span><br><span class="line">    <span class="comment">/**嵌套内部类**/</span></span><br><span class="line">    <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> = bar  <span class="comment">// 访问外部类成员</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">innerTest</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">var</span> o = <span class="keyword">this</span><span class="symbol">@Outer</span> <span class="comment">//获取外部类的成员变量</span></span><br><span class="line">            println(<span class="string">&quot;内部类可以引用外部类的成员，例如：&quot;</span> + o.v)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> demo = Outer().Inner().foo()</span><br><span class="line">    println(demo) <span class="comment">//   1</span></span><br><span class="line">    <span class="keyword">val</span> demo2 = Outer().Inner().innerTest()   </span><br><span class="line">    println(demo2)   <span class="comment">// 内部类可以引用外部类的成员，例如：成员属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><p>使用对象表达式来创建匿名内部类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> v = <span class="string">&quot;成员属性&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setInterFace</span><span class="params">(test: <span class="type">TestInterFace</span>)</span></span> &#123;</span><br><span class="line">        test.test()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TestInterFace</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> test = Test()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 采用对象表达式来创建接口对象，即匿名内部类的实例。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    test.setInterFace(<span class="keyword">object</span> : TestInterFace &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">            println(<span class="string">&quot;对象表达式创建匿名内部类的实例&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类的修饰符"><a href="#类的修饰符" class="headerlink" title="类的修饰符"></a>类的修饰符</h2><p>类的修饰符包括两个</p><ol><li>classModifier:类属性修饰符，标示类本身特性</li></ol><table><thead><tr><th align="left">修饰符</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">abstract</td><td align="left">抽象类</td></tr><tr><td align="left">final</td><td align="left">类不可继承，默认属性</td></tr><tr><td align="left">enum</td><td align="left">枚举类</td></tr><tr><td align="left">open</td><td align="left">类可继承，类默认是final的</td></tr><tr><td align="left">annotation</td><td align="left">注解类</td></tr></tbody></table><ol start="2"><li>accessModifier：访问权限修饰符</li></ol><table><thead><tr><th align="left">修饰符</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">private</td><td align="left">仅在同一个文件中可见</td></tr><tr><td align="left">protected</td><td align="left">同一个文件中或子类可见</td></tr><tr><td align="left">public</td><td align="left">所有调用的地方都可见</td></tr><tr><td align="left">internal</td><td align="left">同一个模块中可见</td></tr></tbody></table><p>一个例子：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件名：example.kt</span></span><br><span class="line"><span class="keyword">package</span> foo</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;&#125; <span class="comment">// 在 example.kt 内可见</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">var</span> bar: <span class="built_in">Int</span> = <span class="number">5</span> <span class="comment">// 该属性随处可见</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">val</span> baz = <span class="number">6</span>    <span class="comment">// 相同模块内可见</span></span><br></pre></td></tr></table></figure><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>Kotlin中所有类都继承自Any类，他是所有类的超类，对于没有超类型声明的类是默认超类</p><p>Any默认提供了三个函数</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">equals</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">hashCode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">toString</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>注意：Any不是java中的Object</p><p>如果一个类要被继承，可以使用open关键字进行修饰</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">open <span class="keyword">class</span> <span class="symbol">Base</span>(<span class="symbol">p:<span class="symbol">Int</span></span>)&#123;</span><br><span class="line">  <span class="comment">// 定义基类</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="symbol">Text</span>(<span class="symbol">p:<span class="symbol">Int</span></span>):<span class="symbol">Base</span>(<span class="symbol">p</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><h3 id="子类有主构造函数"><a href="#子类有主构造函数" class="headerlink" title="子类有主构造函数"></a>子类有主构造函数</h3><p>如果子类中有主构造函数，则基类必须在主构造函数中立即初始化</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">open <span class="keyword">class</span> <span class="symbol">Person</span>(<span class="symbol">ver</span> <span class="symbol">name:<span class="symbol">String</span>,<span class="symbol">var</span></span> <span class="symbol">age:<span class="symbol">Int</span></span>)&#123;</span><br><span class="line">  <span class="comment">// 基类</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="symbol">Student</span>(<span class="symbol">name:<span class="symbol">String</span>,<span class="symbol">age</span>:<span class="symbol">Int</span>,<span class="symbol">var</span></span> <span class="symbol">no:<span class="symbol">String</span>,<span class="symbol">var</span></span> <span class="symbol">score:<span class="symbol">Int</span></span>) :<span class="symbol">Person</span>(<span class="symbol">name,<span class="symbol">age</span></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line">fun main(args:Array&lt;String&gt;)&#123;</span><br><span class="line">  var s = Student(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="string">&quot;s123456&quot;</span>,<span class="number">89</span>)</span><br><span class="line">  println(<span class="string">&quot;学生姓名是：$&#123;s.name&#125;&quot;</span></span><br><span class="line">  println(<span class="string">&quot;学生年龄是：$(s.age)&quot;</span>))</span><br><span class="line">  println(<span class="string">&quot;学生号是：$&#123;s.no&#125;&quot;</span>)</span><br><span class="line">  println(<span class="string">&quot;成绩是：$&#123;s.score&#125;&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子类没有主构造函数"><a href="#子类没有主构造函数" class="headerlink" title="子类没有主构造函数"></a>子类没有主构造函数</h3><p>如果子类没有主构造函数，则必须在每一个二级构造函数中使用super关键字初始化基类，或者在代理另一个构造函数。初始化基类时，可以调用基类的不同构造方法</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Student:Person<span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  constructor(ctx:Context):super(ctx)&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">constructor</span><span class="params">(ctx;Context,attrs:AttributeSet)</span> :</span>Super(ctx,attrs)<span class="comment">&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个例子</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">open</span> <span class="selector-tag">class</span> <span class="selector-tag">Person</span>(<span class="attribute">name</span>:String)&#123;</span><br><span class="line">  <span class="comment">// 次级构造函数</span></span><br><span class="line">  <span class="selector-tag">constructor</span>(<span class="attribute">name</span>:String,<span class="attribute">age</span>:Int):<span class="selector-tag">this</span>(name)&#123;</span><br><span class="line">    <span class="comment">// 初始化操作</span></span><br><span class="line">    <span class="selector-tag">println</span>(<span class="string">&quot;-------------基本次级构造函数-------------&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类继承Person类</span></span><br><span class="line"><span class="selector-tag">class</span> <span class="selector-tag">Student</span>:<span class="selector-tag">Person</span>&#123;</span><br><span class="line">  <span class="comment">// 次级构造函数</span></span><br><span class="line">  <span class="selector-tag">contructor</span>(<span class="attribute">name</span>:String,<span class="attribute">age</span>:Int,<span class="attribute">no</span>:String,<span class="attribute">score</span>:Int):<span class="selector-tag">super</span>(name,age)&#123;</span><br><span class="line">    <span class="selector-tag">println</span>(<span class="string">&quot;学生姓名是：$&#123;name&#125;&quot;</span></span><br><span class="line">  println(<span class="string">&quot;学生年龄是：$(age)&quot;</span>))</span><br><span class="line">  <span class="selector-tag">println</span>(<span class="string">&quot;学生号是：$&#123;no&#125;&quot;</span>)</span><br><span class="line">  <span class="selector-tag">println</span>(<span class="string">&quot;成绩是：$&#123;score&#125;&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h2><p>在基类中，使用fun声明函数时，此函数默认为final修饰，不能被子类重写，如果要允许子类重写，就要手动添加关键字open，子类重写时使用override关键字</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户基类</span></span><br><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">study</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 允许子类重写</span></span><br><span class="line">    println(<span class="string">&quot;gogogo&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类继承Person类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:<span class="type">Person</span></span>()&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">study</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 重写父类方法</span></span><br><span class="line">    println(<span class="string">&quot;hahaha&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">  <span class="keyword">val</span> ss = Student()</span><br><span class="line">  s.study()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>入股有很多相同的方法(继承或者实现自其它类)，则必须重写该方法，使用super规范去选择性的调用父类的实现</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">  <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line">    print(<span class="string">&quot;A&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="属性重写"><a href="#属性重写" class="headerlink" title="属性重写"></a>属性重写</h2><p>属性重写使用override关键字，属性必须具有兼容类型，每一个声明的属性都可以通过初始化程序或者getter方法被重写</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span>&#123;</span><br><span class="line">  <span class="keyword">open</span> <span class="keyword">val</span> x:<span class="built_in">Int</span> <span class="keyword">get</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">class1</span> : <span class="type">Foo&#123;</span></span></span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">val</span> x:<span class="built_in">Int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可用var属性来重写一个val属性，但反过来是不行的。因为val属性本身就定义了getter方法，重写为var属性会在衍生类中额外声明一个setter方法<br>可以在主构造函数中使用override关键字作为属性声明的一部分</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="symbol">Foo</span>&#123;</span><br><span class="line">  val count:Int</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="symbol">class1</span>(<span class="symbol">override</span> <span class="symbol">val</span> <span class="symbol">count:<span class="symbol">Int</span></span>):<span class="symbol">Foo</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">class</span> <span class="symbol">class2:<span class="symbol">Foo</span></span>&#123;</span><br><span class="line">  <span class="keyword">override</span> var count:Int = <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有几点需要注意：</p><ol><li><p>子类继承父类是，不能有跟父类同名的变量，除非父类中该变量为private，或者父类中该变量为open，并且子类使用override关键字重写，如下</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">open <span class="keyword">class</span> <span class="symbol">Person</span>(<span class="symbol">var</span> <span class="symbol">name:<span class="symbol">String</span>,<span class="symbol">var</span></span> <span class="symbol">age:<span class="symbol">Int</span></span>)&#123;</span><br><span class="line">  open var sex: String = <span class="string">&quot;unknow&quot;</span></span><br><span class="line">  init&#123;</span><br><span class="line">    println(<span class="string">&quot;执行父类的构造方法&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类的主构造方法的那么前面也加了var，这是不允许的，会报错</span></span><br><span class="line"><span class="keyword">class</span> <span class="symbol">Student</span>(<span class="symbol">var</span> <span class="symbol">name:<span class="symbol">String</span>,<span class="symbol">var</span></span> <span class="symbol">age:<span class="symbol">Int</span>,<span class="symbol">var</span></span> <span class="symbol">no:<span class="symbol">String</span>,<span class="symbol">var</span></span> <span class="symbol">score:<span class="symbol">Int</span></span>):<span class="symbol">Person</span>(<span class="symbol">name,<span class="symbol">age</span></span>)&#123;</span><br><span class="line">  <span class="keyword">override</span> var sex:String =<span class="string">&quot;male&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>子类不一定调用父类和接口中共同拥有的的同名方法</p></li></ol><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>Kotlin接口和java8类似，使用关键字interface关键自定义接口，允许方法有默认实现</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">func2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span>:<span class="type">MyInterface&#123;</span></span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举个例子</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// 可选的方法体</span></span><br><span class="line">        println(<span class="string">&quot;foo&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> : <span class="type">MyInterface &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// 方法体</span></span><br><span class="line">        println(<span class="string">&quot;bar&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> c =  Child()</span><br><span class="line">    c.foo();</span><br><span class="line">    c.bar();</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口中的属性"><a href="#接口中的属性" class="headerlink" title="接口中的属性"></a>接口中的属性</h2><p>接口中的属性只能是抽象的，不允许初始化值，接口不会保存属性值，实现接口是，必须重写属性</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="symbol">MyInterface</span>&#123;</span><br><span class="line">  var name:String <span class="comment">// name属性，抽象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="symbol">MyImpl:<span class="symbol">MyInterface</span></span>&#123;</span><br><span class="line">  <span class="keyword">override</span> var name:String = <span class="string">&quot;paulniu&quot;</span>  <span class="comment">// 重写属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举个例子</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name:String <span class="comment">//name 属性, 抽象的</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// 可选的方法体</span></span><br><span class="line">        println(<span class="string">&quot;foo&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> : <span class="type">MyInterface &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> name: String = <span class="string">&quot;runoob&quot;</span> <span class="comment">//重写属性</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// 方法体</span></span><br><span class="line">        println(<span class="string">&quot;bar&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> c =  Child()</span><br><span class="line">    c.foo();</span><br><span class="line">    c.bar();</span><br><span class="line">    println(c.name)</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数的重写"><a href="#函数的重写" class="headerlink" title="函数的重写"></a>函数的重写</h2><p>实现多个接口时，可能会遇到同一个方法继承多个实现类的问题，</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123; print(<span class="string">&quot;A&quot;</span>) &#125;   <span class="comment">// 已实现</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span>                  <span class="comment">// 未实现，没有方法体，是抽象的</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123; print(<span class="string">&quot;B&quot;</span>) &#125;   <span class="comment">// 已实现</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span> &#123; print(<span class="string">&quot;bar&quot;</span>) &#125; <span class="comment">// 已实现</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> : <span class="type">A &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span> &#123; print(<span class="string">&quot;bar&quot;</span>) &#125;   <span class="comment">// 重写</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> : <span class="type">A</span>, <span class="type">B &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>&lt;A&gt;.foo()</span><br><span class="line">        <span class="keyword">super</span>&lt;B&gt;.foo()</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>&lt;B&gt;.bar()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> d =  D()</span><br><span class="line">    d.foo();</span><br><span class="line">    d.bar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例中接口A和接口B都定义了foo()和bar()方法，两者都实现了foo()，B实现了bar()方法。因为C是一个实现了A的具体类，所以必须重写bar()并且实现这个抽象方法<br>然后如果我们从A和B派生D，我们需简要实现多个接口继承的所有方法，并且知名D应该如何实现他们。</p><h1 id="Kotlin的扩展"><a href="#Kotlin的扩展" class="headerlink" title="Kotlin的扩展"></a>Kotlin的扩展</h1><p>Kotlin可以对一个类的属性和方法进行扩展，且不需要继承或者使用Decorator模式<br>扩展是一种静态行为，对被扩展的类代码本身不会造成任何影响</p><h2 id="扩展函数"><a href="#扩展函数" class="headerlink" title="扩展函数"></a>扩展函数</h2><p>扩展函数可以在已有类中添加新方法，不会对原有类做出修改，扩展函数定义形式为</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> receiverType.<span class="title">functionName</span><span class="params">(params)</span></span>&#123;</span><br><span class="line">  <span class="comment">// 方法的具体实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中</p><ul><li>receiverType：表示函数的接收者，也就是函数的扩展的对象</li><li>functionName：扩展函数的名称</li><li>params：扩展函数的参数，可以是NULL</li></ul><p>一个小例子</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>(<span class="keyword">var</span> name:String)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展函数</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> User.<span class="title">Print</span><span class="params">()</span></span>&#123;</span><br><span class="line">  print(<span class="string">&quot;用户名是<span class="subst">$&#123;name&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> user = User(<span class="string">&quot;paulniu&quot;</span>)</span><br><span class="line">  user.print()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个例子，为MutableList添加一个swap函数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扩展函数swap，调换不同位置的值</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> MutableList<span class="type">&lt;Int&gt;</span>.<span class="title">swap</span><span class="params">(index1:<span class="type">Int</span>,index2:<span class="type">Int</span>)</span></span>&#123;</span><br><span class="line">  <span class="keyword">val</span> tmp = <span class="keyword">this</span>[index1]</span><br><span class="line">  <span class="keyword">this</span>[index1] = <span class="keyword">this</span>[index2]</span><br><span class="line">  <span class="keyword">this</span>[index2] = tmp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">  <span class="keyword">val</span> l = mutableListOf(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">  l.swap(<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">  println(l.toString())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>this关键字指代接收者对象</p></blockquote><p>扩展函数是静态解析的<br>扩展函数是静态解析的，并不是接受这类型的虚拟成员，在调用扩展函数时，具体被调用的是哪一个函数，有调用函数的对象表达式来决定，而不是动态的类型决定的</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:<span class="type">C</span></span>()</span><br><span class="line"><span class="function"><span class="keyword">fun</span> c.<span class="title">foo</span><span class="params">()</span></span> = <span class="string">&quot;c&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> D.<span class="title">foo</span><span class="params">()</span></span> = <span class="string">&quot;d&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printFoo</span><span class="params">(c:<span class="type">C</span>)</span></span>&#123;</span><br><span class="line">  println(c.foo())</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">  printFoo(D())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果扩展函数和成员函数一直，则使用该函数时，会优先使用成员函数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    println(<span class="string">&quot;成员函数&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> C.<span class="title">foo</span><span class="params">()</span></span>&#123;</span><br><span class="line">  println(<span class="string">&quot;扩展函数&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> c = C();</span><br><span class="line">  c.foo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果是成员函数</p></blockquote><h2 id="扩展一个空对象"><a href="#扩展一个空对象" class="headerlink" title="扩展一个空对象"></a>扩展一个空对象</h2><p>在扩展函数内，可以通过this来判断接受者是否为NULL，这样即使接收者为NULL，也是可以调用扩展函数的</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> Any?.<span class="title">toString</span><span class="params">()</span></span>:String&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span> == <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;null&quot;</span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> toString()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> t = <span class="literal">null</span></span><br><span class="line">  println(t.toString())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扩展属性<br>除了函数，Kotlin也支持属性对属性进行扩展</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">val <span class="tag">&lt;<span class="name">T</span>&gt;</span>List<span class="tag">&lt;<span class="name">T</span>&gt;</span>.lastIndex:Int</span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">  get() = size - 1</span></span><br><span class="line"><span class="template-variable">&#125;</span></span><br></pre></td></tr></table></figure><p>扩展属性允许定义在类或者Kotlin文件中，不允许定义在函数中。初始化属性因为属性没有后端字段，所以不允许被初始化，只能由现实提供的getter/setter定义</p><blockquote><p>扩展属性只能被声明为val</p></blockquote><h2 id="伴生对象的扩展"><a href="#伴生对象的扩展" class="headerlink" title="伴生对象的扩展"></a>伴生对象的扩展</h2><p>如果一个类定义有一个伴生对象，我们可以对伴生对象定义扩展函数和属性<br>伴生对象通过”类名.”的形式调用伴生对象，伴生对象声明的扩展函数，通过用类名限定符来调用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span>&#123;</span><br><span class="line">  <span class="keyword">companion</span> <span class="keyword">object</span>&#123;</span><br><span class="line">    <span class="comment">// 将被称为&quot;Companion&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> MyClass.Companion.<span class="title">foo</span><span class="params">()</span></span>&#123;</span><br><span class="line">  println(<span class="string">&quot;伴随对象的扩展函数&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> MyClass.Companion.no:<span class="built_in">Int</span></span><br><span class="line">  <span class="keyword">get</span>() = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">  println(<span class="string">&quot;no:<span class="subst">$&#123;MyClass.no&#125;</span>&quot;</span>)</span><br><span class="line">  MyClass.foo()</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="扩展的作用域"><a href="#扩展的作用域" class="headerlink" title="扩展的作用域"></a>扩展的作用域</h2><p>通常扩展函数或属性定义在顶级包下，要使用所定义包之外的一个扩展，通过import导入扩展的函数名进行使用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.expamle.paulniu</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> foo.bar.goo <span class="comment">// 导入所有名为goo的扩展</span></span><br><span class="line"><span class="keyword">import</span> foo.bar.*   <span class="comment">// 从foo.bar导入一切</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">usage</span><span class="params">(baz:<span class="type">Baz</span>)</span></span>&#123;</span><br><span class="line">  baz.goo()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> foo.bar</span><br><span class="line"><span class="function"><span class="keyword">fun</span> Baz.<span class="title">goo</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">// 方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扩展声明为成员"><a href="#扩展声明为成员" class="headerlink" title="扩展声明为成员"></a>扩展声明为成员</h2><p>在一个类内部我们可以为另一个类声明扩展<br>在这个扩展中，有多个隐含的接受者，其中扩展方法定义所在的类的实例称为分发接受者，而扩展方法的目标类型的实例被称为扩展接受者</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span>&#123;</span><br><span class="line">    println(<span class="string">&quot;D bar&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">baz</span><span class="params">()</span></span>&#123;</span><br><span class="line">    println(<span class="string">&quot;C baz&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">fun</span> D.<span class="title">foo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    bar()</span><br><span class="line">    baz()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">caller</span><span class="params">(d:<span class="type">D</span>)</span></span>&#123;</span><br><span class="line">    d.foo()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">  <span class="keyword">val</span> c:C = C()</span><br><span class="line">  <span class="keyword">val</span> d:D = D()</span><br><span class="line">  c.caller(d)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在C类内，创建D类的扩展，此时C被称为分发接受者，而D为扩展接受者，在扩展函数中，可以调用派发接受者的成员函数<br>加入在调用某一个函数，而该函数在分发接受者和扩展接受者均存在，则以扩展接受者优先，要引用分发接受者的成员可以使用this的指定语法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span> &#123; println(<span class="string">&quot;D bar&quot;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span> &#123; println(<span class="string">&quot;C bar&quot;</span>) &#125;  <span class="comment">// 与 D 类 的 bar 同名</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> D.<span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">        bar()         <span class="comment">// 调用 D.bar()，扩展接收者优先</span></span><br><span class="line">        <span class="keyword">this</span><span class="symbol">@C</span>.bar()  <span class="comment">// 调用 C.bar()</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">caller</span><span class="params">(d: <span class="type">D</span>)</span></span> &#123;</span><br><span class="line">        d.foo()   <span class="comment">// 调用扩展函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> c: C = C()</span><br><span class="line">    <span class="keyword">val</span> d: D = D()</span><br><span class="line">    c.caller(d)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以成员的形式定义的扩展函数，可以生命为open，而且可以在子类中覆盖，也就是说，在这类扩展函数的派发过程中，针对分发接受者是虚拟的，但针对扩展接受者仍然是静态的</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D1</span> : <span class="type">D</span></span>() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> D.<span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;D.foo in C&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> D1.<span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;D1.foo in C&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">caller</span><span class="params">(d: <span class="type">D</span>)</span></span> &#123;</span><br><span class="line">        d.foo()   <span class="comment">// 调用扩展函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1</span> : <span class="type">C</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> D.<span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;D.foo in C1&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> D1.<span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;D1.foo in C1&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    C().caller(D())   <span class="comment">// 输出 &quot;D.foo in C&quot;</span></span><br><span class="line">    C1().caller(D())  <span class="comment">// 输出 &quot;D.foo in C1&quot; —— 分发接收者虚拟解析</span></span><br><span class="line">    C().caller(D1())  <span class="comment">// 输出 &quot;D.foo in C&quot; —— 扩展接收者静态解析</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Kotlin数据类和密封类"><a href="#Kotlin数据类和密封类" class="headerlink" title="Kotlin数据类和密封类"></a>Kotlin数据类和密封类</h1><h2 id="数据类"><a href="#数据类" class="headerlink" title="数据类"></a>数据类</h2><p>Kotlin可以创建一个只包含数据的类，关键字为data</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data <span class="keyword">class</span> <span class="symbol">User</span>(<span class="symbol">val</span> <span class="symbol">name:<span class="symbol">String</span>,<span class="symbol">val</span></span> <span class="symbol">age:<span class="symbol">Int</span></span>)</span><br></pre></td></tr></table></figure><p>编译器会自动的从主构造函数中根据所声明的属性提取一下函数</p><ul><li>equals()/hashCode()</li><li>toString()  格式如”User(name=paulniu,age=18)”</li><li>componentN() functions对应于属性，按声明顺序排列</li><li>copy() 函数<br>如果这些函数再累中已经被明确定义了，或者从超类中继承而来，就不会再生成<br>为了保证生成代码的一致性以及有意义，数据类需要满足一下几个条件</li></ul><ol><li>主构造函数至少包含一个参数</li><li>所有的主构造函数的参数必须标识为val或者var</li><li>数据类型不可以声明为abstract，open，sealed或者inner</li><li>数据类不能继承其他类(但可以实现接口)</li></ol><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><p>复制使用copy函数，我们可以使用该函数复制对象并修改部分属性，例如上面的User类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">copy</span><span class="params">(name:<span class="type">String</span>=this.name,age:<span class="type">Int</span>=this.age)</span></span> = User(name,age)</span><br></pre></td></tr></table></figure><p>举个例子</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data <span class="keyword">class</span> <span class="symbol">User</span>(<span class="symbol">val</span> <span class="symbol">name:<span class="symbol">String</span>,<span class="symbol">val</span></span> <span class="symbol">age:<span class="symbol">Int</span></span>)</span><br><span class="line"><span class="symbol">fun</span> <span class="symbol">main</span>(<span class="symbol">args:<span class="symbol">Array</span></span>&lt;<span class="symbol">String</span>&gt;)&#123;</span><br><span class="line">  val jack = User(name = <span class="string">&quot;Jack&quot;</span>,age = <span class="number">1</span>)</span><br><span class="line">  val olderJack = jack.copy(age = <span class="number">2</span>)</span><br><span class="line">  println(jack)</span><br><span class="line">  println(olderJack)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="密封类"><a href="#密封类" class="headerlink" title="密封类"></a>密封类</h3><p>密封类用来表示受限的类继承结构：当一个值为有限几种的类型，而不能有任何其他类型时，在某种意义上，他们是枚举类的扩展，枚举类型的值集合也是受限的，但每个枚举常量只存在一个实例，而密封类的一个子类可以有包含状态的多个实例，声明一个密封类使用sealed修饰类，密封类可以有子类，但是所有子类必须要内嵌到密封类中<br>sealed不能修饰interface，abstract class</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sealed <span class="keyword">class</span> <span class="symbol">Expr</span></span><br><span class="line"><span class="symbol">data</span> <span class="symbol">class</span> <span class="symbol">Const</span>(<span class="symbol">val</span> <span class="symbol">number: <span class="symbol">Double</span></span>) : <span class="symbol">Expr</span>()</span><br><span class="line"><span class="symbol">data</span> <span class="symbol">class</span> <span class="symbol">Sum</span>(<span class="symbol">val</span> <span class="symbol">e1: <span class="symbol">Expr</span>, <span class="symbol">val</span></span> <span class="symbol">e2: <span class="symbol">Expr</span></span>) : <span class="symbol">Expr</span>()</span><br><span class="line"><span class="symbol">object</span> <span class="symbol">NotANumber</span> : <span class="symbol">Expr</span>()</span><br><span class="line"></span><br><span class="line"><span class="symbol">fun</span> <span class="symbol">eval</span>(<span class="symbol">expr: <span class="symbol">Expr</span></span>): <span class="symbol">Double</span> = <span class="symbol">when</span> (<span class="symbol">expr</span>) &#123;</span><br><span class="line">    <span class="keyword">is</span> Const -&gt; expr.number</span><br><span class="line">    <span class="keyword">is</span> Sum -&gt; eval(expr.e1) + eval(expr.e2)</span><br><span class="line">    NotANumber -&gt; Double.NaN</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用密封类的关键好处在于使用when表达式的时候，如果能够验证语句覆盖了所有情况，就不需要为该语句在添加一个else子语句了</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">eval</span><span class="params">(expr: <span class="type">Expr</span>)</span></span>: <span class="built_in">Double</span> = <span class="keyword">when</span>(expr) &#123;</span><br><span class="line">    <span class="keyword">is</span> Expr.Const -&gt; expr.number</span><br><span class="line">    <span class="keyword">is</span> Expr.Sum -&gt; eval(expr.e1) + eval(expr.e2)</span><br><span class="line">    Expr.NotANumber -&gt; <span class="built_in">Double</span>.NaN</span><br><span class="line">    <span class="comment">// 不再需要 `else` 子句，因为我们已经覆盖了所有的情况</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Kotlin泛型"><a href="#Kotlin泛型" class="headerlink" title="Kotlin泛型"></a>Kotlin泛型</h1><p>泛型，即参数化类型，将类型参数化，可以用在类，接口，方法上<br>与java一样，Kotlin也提供了泛型，为类型安全提供了保证，消除类型强转的烦恼</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Box</span>&lt;<span class="symbol">T</span>&gt;(<span class="symbol">t:<span class="symbol">T</span></span>)&#123;</span><br><span class="line">  var value = t</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建类的实例时我们需要制定类型参数</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">val <span class="type">box</span>:<span class="type">Box</span>&lt;<span class="type">Int</span>&gt; = <span class="type">Box</span>&lt;<span class="type">Int</span>&gt;(<span class="number">1</span>)</span><br><span class="line">// 或者</span><br><span class="line">val <span class="type">box</span> = Box(<span class="number">1</span>)  // 编译器会进行类型推断，<span class="number">1</span>类型为<span class="type">Int</span>，所以编译器知道哦我们要使用的是<span class="type">Box</span>&lt;<span class="type">Int</span>&gt;</span><br></pre></td></tr></table></figure><p>举个例子</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span>&lt;<span class="type">T</span>&gt;</span>(t : T) &#123;</span><br><span class="line">    <span class="keyword">var</span> value = t</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> boxInt = Box&lt;<span class="built_in">Int</span>&gt;(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">var</span> boxString = Box&lt;String&gt;(<span class="string">&quot;Runoob&quot;</span>)</span><br><span class="line"></span><br><span class="line">    println(boxInt.value)</span><br><span class="line">    println(boxString.value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义泛型类型变量可以完整的写明类型参数，如果编译器可以自动推定类型参数，也可以省略类型参数<br>Kotlin泛型函数的声明与Java相同，类型参数主要放在函数名的前面<br>在调用泛型函数时，如果可以推断出类型参数，可以直接省略泛型类型</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> age = <span class="number">23</span></span><br><span class="line">    <span class="keyword">val</span> name = <span class="string">&quot;runoob&quot;</span></span><br><span class="line">    <span class="keyword">val</span> bool = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    doPrintln(age)    <span class="comment">// 整型</span></span><br><span class="line">    doPrintln(name)   <span class="comment">// 字符串</span></span><br><span class="line">    doPrintln(bool)   <span class="comment">// 布尔型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">doPrintln</span><span class="params">(content: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">when</span> (content) &#123;</span><br><span class="line">        <span class="keyword">is</span> <span class="built_in">Int</span> -&gt; println(<span class="string">&quot;整型数字为 <span class="variable">$content</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">is</span> String -&gt; println(<span class="string">&quot;字符串转换为大写：<span class="subst">$&#123;content.toUpperCase()&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span> -&gt; println(<span class="string">&quot;T 不是整型，也不是字符串&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h4><p>我们可以使用泛型约束来设定一个给定参数允许使用的类型<br>Kotlin中使用：对泛型的类型上限进行约束<br>最常见的约束是上界</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T:Comparable&lt;T&gt;</span>&gt; <span class="title">sort</span><span class="params">(list:<span class="type">List</span>&lt;<span class="type">T</span>&gt;)</span></span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中comparable的子类型可以替换T</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sort(listOf(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))  // <span class="built_in">Int</span>类型是Comparable&lt;<span class="built_in">Int</span>&gt;的子类型</span><br><span class="line">sort(listOf(HashMap&lt;<span class="built_in">Int</span>,<span class="built_in">String</span>&gt;()))  // 错误，HashMap&lt;<span class="built_in">Int</span>,<span class="built_in">String</span>&gt;不是Comparable&lt;HashMap&lt;<span class="built_in">Int</span>,<span class="built_in">String</span>&gt;&gt;的子类型</span><br></pre></td></tr></table></figure><p>举个例子</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">copyWhenGreater</span><span class="params">(list:<span class="type">List</span>&lt;<span class="type">T</span>&gt;,threshold:<span class="type">T</span>)</span></span>:List&lt;String&gt;</span><br><span class="line">  <span class="keyword">where</span> T:CharSequence,</span><br><span class="line">        T:Comparable&lt;T&gt;&#123;</span><br><span class="line">          <span class="keyword">return</span> list.filter&#123;</span><br><span class="line">            it &gt; threshold</span><br><span class="line">          &#125;.map&#123;</span><br><span class="line">            it.toString()</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="型变"><a href="#型变" class="headerlink" title="型变"></a>型变</h3><p>Kotlin中没有通配符类型，他有两个其他类型的东西，声明处型变与类型投影</p><h4 id="声明处型变"><a href="#声明处型变" class="headerlink" title="声明处型变"></a>声明处型变</h4><p>声明处的类型变异使用协变注解修饰符：in，out，消费者in，生产者out<br>使用out使得一个类型参数协变，协变类型参数只能用作输出，可以作为返回值类型但无法作为入参的类型</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个支持协变的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>&lt;<span class="type">out A</span>&gt;</span>(<span class="keyword">val</span> a:A)&#123;</span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span>:A&#123;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> strCo:MyClass&lt;String&gt; = MyClass(<span class="string">&quot;paulniu&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> anyCo:MyClass&lt;Any&gt; = MyClass&lt;Any&gt;(<span class="string">&quot;bbbbbb&quot;</span>)</span><br><span class="line">  anyCo = strCo</span><br><span class="line">  println(anyCo.foo())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>in使得一个类型参数逆变，逆变类型参数只能作为输入，可以作为入参的类型但无法作为返回值类型</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>&lt;<span class="type">in A</span>&gt;</span>(a:A)&#123;</span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">(a:<span class="type">A</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> strDCo = MyClass(<span class="string">&quot;aaaaaa&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> anyDCo = MyClass&lt;Any&gt;(<span class="string">&quot;bbbbbbb&quot;</span>)</span><br><span class="line">  strDCo = anDCo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="星号投射"><a href="#星号投射" class="headerlink" title="星号投射"></a>星号投射</h2><p>有些时候，我们想要表示刚开始并不知道类型参数的任何信息，但仍然希望能够安全的使用他，这里所谓的安全使用是指，对泛型类型定义一个类型投射，要求这个泛型类型的所有实体实例，都是这个投射的子类型</p><ul><li>假如类型定义为Foo<out T>,其中T是一个协变的类型参数，上界为TUpper，Foo&lt;&gt;等价于Foo<out TUpper> ,它表示当T未知时，我们可以安全的从Foo&lt;&gt;中读取TUpper类型的值</li><li>假如类型定义为Foo(in T),其中T是一个反向协变的类型参数，Foo&lt;&gt;等价于Foo<inNothing>,它表示，当T未知时，我们不能安全的向Foo&lt;&gt;写入任何东西</li><li>假如类型定义为Foo<T>,其中T是一个协变的类型参数，上界为TUpper，对于读取值的场合，Foo&lt;*&gt;等价于Foo<out TUpper>，对于写入值的场合，等价于Foo<in Nothing></li></ul><p>如果一个泛型类型中存在多个类型参数，那么每个类型参数都可以单独投射，比如，如果定义类型为interface Function&lt;in T,out U&gt;,那么可以出现以下几种星号投射</p><ol><li>Function&lt;*,String&gt;  代表Function&lt;in Nothing,String&gt;</li><li>Function&lt;Int,*&gt;     代表Function&lt;Int,out Any?&gt;</li><li>function&lt;, &gt;        代表Function&lt;in Nothing,out Any?&gt;</li></ol><blockquote><p>注意：星号投射与Java的原生类型非常类似，但可以安全使用<br>其实我们可以认为*代指了所有类型，相当于Any?</p></blockquote><p>举个例子</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">A</span>&lt;<span class="symbol">T</span>&gt;(<span class="symbol">val</span> <span class="symbol">t:<span class="symbol">T</span>,<span class="symbol">val</span></span> <span class="symbol">t2:<span class="symbol">T</span>,<span class="symbol">val</span></span> <span class="symbol">t3:<span class="symbol">T</span></span>)</span><br><span class="line"><span class="symbol">class</span> <span class="symbol">Apple</span>(<span class="symbol">var</span> <span class="symbol">name:<span class="symbol">String</span></span>)</span><br><span class="line"><span class="symbol">fun</span> <span class="symbol">main</span>(<span class="symbol">args:<span class="symbol">Array</span></span>&lt;<span class="symbol">String</span>&gt;)&#123;</span><br><span class="line">  <span class="comment">// 使用类</span></span><br><span class="line">  val a1:A&lt;*&gt; = A(<span class="number">12</span>,<span class="string">&quot;String&quot;</span>,Apple(<span class="string">&quot;苹果&quot;</span>))</span><br><span class="line">  val a2:a&lt;Any?&gt; = A(<span class="number">13</span>,<span class="string">&quot;String&quot;</span>,Apple(<span class="string">&quot;苹果2&quot;</span>))</span><br><span class="line">  val apple = a1.t3</span><br><span class="line">  println(apple)</span><br><span class="line">  val apple2 = apple as Apple <span class="comment">/// 强转为Apple类型</span></span><br><span class="line">  println(apple2.name)</span><br><span class="line">  <span class="comment">// 使用数组</span></span><br><span class="line">  val lists:ArrayList&lt;*&gt; = <span class="built_in">array</span>ListOf(<span class="string">&quot;String&quot;</span>,<span class="number">1</span>,<span class="number">1.2f</span>,Apple(<span class="string">&quot;苹果&quot;</span>))</span><br><span class="line">  <span class="keyword">for</span>(item <span class="keyword">in</span> l)&#123;</span><br><span class="line">    println(item)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Kotlin枚举类"><a href="#Kotlin枚举类" class="headerlink" title="Kotlin枚举类"></a>Kotlin枚举类</h1><p>枚举类最基本的用法是实现了一个类型安全的枚举<br>枚举常量用逗号分隔，每个枚举常量都是一个对象</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="symbol">Color</span>&#123;</span><br><span class="line">  RED,BLACK,BLUE,GREEN,WHITE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="枚举初始化"><a href="#枚举初始化" class="headerlink" title="枚举初始化"></a>枚举初始化</h2><p>每一个枚举都是枚举类的实例，他们可以被初始化</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="symbol">Color</span>(<span class="symbol">val</span> <span class="symbol">rgb:<span class="symbol">Int</span></span>)&#123;</span><br><span class="line">  RED(<span class="number">0xFF0000</span>),</span><br><span class="line">  GREEN(<span class="number">0x00FF00</span>),</span><br><span class="line">  BLUE(<span class="number">0x0000FF</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认名称为枚举字符名，值从0开始，若需要指定值，则可以使用其构造函数</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="symbol">Shape</span>(<span class="symbol">value:<span class="symbol">Int</span></span>)&#123;</span><br><span class="line">  ovel(<span class="number">100</span>),</span><br><span class="line">  rectangle(<span class="number">200</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举还支持以声明自己的匿名类及相应的方法，以及覆盖基类的方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">ProtocolState</span></span>&#123;</span><br><span class="line">  WAITING&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">signal</span><span class="params">()</span></span> = TALKING</span><br><span class="line">  &#125;,</span><br><span class="line">  TALKING&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">signal</span><span class="params">()</span></span> = WAITING</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">signal</span><span class="params">()</span></span>:ProtocolState</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果枚举定义任何成员，要使用分号将成员定义中的枚举常量定义分隔开</p><h2 id="常用枚举常量"><a href="#常用枚举常量" class="headerlink" title="常用枚举常量"></a>常用枚举常量</h2><p>Kotlin中的枚举类具有合成方法，允许遍历定义的枚举常量，并通过其名称获取枚举常数</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">EnumClass</span>.</span></span>value<span class="constructor">Of(<span class="params">value</span>:String)</span>:EnumClass  <span class="comment">// 转换置顶那么为枚举类，若未匹配成功，则会抛出IllegalArgumentException</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">EnumClass</span>.</span></span>values<span class="literal">()</span>:Array&lt;EnumClass&gt;        <span class="comment">// 以数组的形式返回枚举值</span></span><br></pre></td></tr></table></figure><p>举个例子</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Color</span></span>&#123;</span><br><span class="line">  RED,BLACK,BLUE,GREEN,WHITE</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> color:Color = Color.BLUE</span><br><span class="line"></span><br><span class="line">  println(Color.values())</span><br><span class="line">  println(Color.valueOf(<span class="string">&quot;RED&quot;</span>))</span><br><span class="line">  println(color.name)</span><br><span class="line">  println(color.ordinal)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时我们可以使用enumValues<T>()和enumValueOf<T>()函数以泛型的方式访问枚举类中的常量</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">RGB</span> </span>&#123; RED, GREEN, BLUE &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;<span class="keyword">reified</span> T : Enum&lt;T&gt;</span>&gt; <span class="title">printAllValues</span><span class="params">()</span></span> &#123;</span><br><span class="line">    print(enumValues&lt;T&gt;().joinToString &#123; it.name &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    printAllValues&lt;RGB&gt;() <span class="comment">// 输出 RED, GREEN, BLUE</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Kotlin对象表达式和对象声明"><a href="#Kotlin对象表达式和对象声明" class="headerlink" title="Kotlin对象表达式和对象声明"></a>Kotlin对象表达式和对象声明</h1><p>Kotlin用对象表达式和对象象声明来实现创建一个对某个类做了轻微改动的类的对象，且不需要去声明一个新的子类</p><h2 id="对象表达式"><a href="#对象表达式" class="headerlink" title="对象表达式"></a>对象表达式</h2><p>通过对象表达式实现一个匿名内部类的对象用于方法的参数中</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">window.addMouseListener(<span class="keyword">object</span>:MouseAdapter()&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">mouseClicked</span><span class="params">(e:<span class="type">MouseEvent</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">mouseEntered</span><span class="params">(e:<span class="type">MouseEvent</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>对象可以继承于某个基类，或者实现其他接口</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>(x:<span class="built_in">Int</span>)&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">open</span> <span class="keyword">val</span> y:<span class="built_in">Int</span> = x</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> ab:A = <span class="keyword">object</span>:A(<span class="number">1</span>) ,B&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">val</span> y = <span class="number">15</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果超类型有一个构造函数，则必须传递参数给它。多个超类型和接口可以用逗号分隔<br>通过对象表达式可以越过类的定义直接得到一个对象</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">  <span class="keyword">val</span> site = <span class="keyword">object</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name:String = <span class="string">&quot;paulniu&quot;</span></span><br><span class="line">    <span class="keyword">var</span> url:String = <span class="string">&quot;www.paulniu.com&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  println(site.name)</span><br><span class="line">  println(site.url)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，匿名对象可以用作只在本地和私有作用域中声明的类型，如果你是用匿名对象最为公有函数的返回类型或者用作共有属性的类型，那么该函数或属性的实际类型会是匿名对象声明的超类型，如果你没有声明任何超类型，就会是Any，在匿名对象中添加的成员将无法访问</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">  <span class="comment">// 私有函数，所以其返回类型是匿名对象类型</span></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> = <span class="keyword">object</span>&#123;</span><br><span class="line">    <span class="keyword">val</span> x:String = <span class="string">&quot;x&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 公有函数，所以其返回类型是Any</span></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">publicFoo</span><span class="params">()</span></span> = <span class="keyword">object</span>&#123;</span><br><span class="line">    <span class="keyword">val</span> x:String = <span class="string">&quot;y&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> x1 = foo().x         <span class="comment">// 没有问题</span></span><br><span class="line">    <span class="keyword">val</span> x2 = publicFoo().x   <span class="comment">// 报错，未能解析的引用x</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在对象表达式中可以方便的访问到作用域中的其他变量</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">countClicks</span><span class="params">(window:<span class="type">JComponent</span>)</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> clickCount = <span class="number">0</span></span><br><span class="line">  <span class="keyword">var</span> enterCount = <span class="number">0</span></span><br><span class="line">  window.addMouseListener(<span class="keyword">object</span>:MouseAdapter()&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">mouseClicked</span><span class="params">(e:<span class="type">MouseEvent</span>)</span></span>&#123;</span><br><span class="line">      clickCount++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">mouseEntered</span><span class="params">(e:<span class="type">MouseEvent</span>)</span></span>&#123;</span><br><span class="line">      enterCount++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象声明"><a href="#对象声明" class="headerlink" title="对象声明"></a>对象声明</h2><p>Kotlin使用object关键字来声明一个对象<br>Kotlin中我们可以方便的通过对象声明来获取一个单例</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> DataProviderManager&#123;</span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">registerDataProvider</span><span class="params">(provider:<span class="type">DataProvider</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">val</span> allDataProviders:Collection&lt;DataProvider&gt;</span><br><span class="line">    <span class="keyword">get</span>() = <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引用该对象，我们直接使用其名称即可</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">DataProviderManager</span>.</span></span>register<span class="constructor">DataProvider(<span class="operator">...</span>)</span></span><br></pre></td></tr></table></figure><p>当然我们可以定义一个变量来获取这个对象，当我们定义两个不同的变量来获取一个对象的时候，我们并不能得到两个不同的变量，也就是说通过这种方式，我们其实实现的是单例</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> data1 = DataProviderManager</span><br><span class="line"><span class="selector-tag">var</span> data2 = DataProviderManager</span><br><span class="line">data1<span class="selector-class">.name</span> = <span class="string">&quot;test&quot;</span></span><br><span class="line"><span class="function"><span class="title">println</span><span class="params">(<span class="string">&quot;data1 name is $&#123;data2.name&#125;&quot;</span>)</span></span></span><br></pre></td></tr></table></figure><p>举个例子</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> Site&#123;</span><br><span class="line">  <span class="keyword">var</span> url:String = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">val</span> name:String = <span class="string">&quot;个人测试&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> s1 = Site</span><br><span class="line">  <span class="keyword">var</span> s2 = Site</span><br><span class="line">  s1.url = <span class="string">&quot;www.paulniu.com&quot;</span></span><br><span class="line">  println(s1.url)</span><br><span class="line">  println(s2.url)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象可以有超类型</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> DefaultListener:MouseAdapter()&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">mouseClicked</span><span class="params">(e:<span class="type">MouseEvnet</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">mouseEntered</span><span class="params">(e:<span class="type">MouseEvent</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与对象表达式不同，当对象声明在另一个类的内部时，这个对象并不能通过外部类的实例访问到该对象，而只能通过类名来访问，同样该对象也不能直接访问到外部类的方法和变量</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&quot;paulniu&quot;</span></span><br><span class="line">  <span class="keyword">object</span> DestTop&#123;</span><br><span class="line">    <span class="keyword">var</span> url =<span class="string">&quot;www.paulniu.com&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">showName</span><span class="params">()</span></span>&#123;</span><br><span class="line">      println&#123;<span class="string">&quot;desk legs <span class="variable">$name</span>&quot;</span>&#125;  <span class="comment">// 这样写是错误的，不能访问到外部类的方法和名称</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> site = Site()</span><br><span class="line">  site.DestTop.url  <span class="comment">// 错误写法，不能通过外部类的实例访问到该对象</span></span><br><span class="line">  Site.DestTop.url  <span class="comment">// 正确写法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="伴生对象"><a href="#伴生对象" class="headerlink" title="伴生对象"></a>伴生对象</h2><p>类内部的对象声明可以用companyion关键字标记，这样他就可以与外部类关联在一起，我们就可以直接通过外部类访问到对象的内部元素</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span>&#123;</span><br><span class="line">  <span class="keyword">companion</span> <span class="keyword">object</span> Factory&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">create</span><span class="params">()</span></span>:MyClass = MyClass()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> instance = MyClass.create()   <span class="comment">// 访问到对象的内部元素</span></span><br></pre></td></tr></table></figure><p>我们可以省略掉该对象的对象名，然后使用Companion替代需要声明的对象名</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span>&#123;</span><br><span class="line">  <span class="keyword">companion</span> <span class="keyword">object</span>&#123;</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：一个类中只能声明一个内部关联对象，即关键字companion只能使用一次</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Factory</span>&lt;<span class="type">T</span>&gt;</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">create</span><span class="params">()</span></span> :T</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span>&#123;</span><br><span class="line">  <span class="keyword">companion</span> <span class="keyword">object</span>:Factory&lt;MyClass&gt;&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">create</span><span class="params">()</span></span>:MyClass = MyClass()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象表达式和对象声明之间的语义差异</p><ul><li>对象表达式是在使用他们的地方立即执行的</li><li>对象声明是在第一次被访问到时延迟初始化</li><li>伴生对象的初始化是在相应的类被加载(解析)时，与java静态初始化器的语义相匹配</li></ul><h1 id="Kotlin委托"><a href="#Kotlin委托" class="headerlink" title="Kotlin委托"></a>Kotlin委托</h1><p>委托模式是软件设计模式中一项基本技巧，在委托模式中，有两个对象参与处理同一个请求，接收请求的对象将请求委托给另一个对象来处理<br>Kotlin直接支持委托模式，通过关键字by实现委托</p><h2 id="类委托"><a href="#类委托" class="headerlink" title="类委托"></a>类委托</h2><p>类的委托即一个类中定义的方法实际是调用另一个类的对象的方法来实现的</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在这个示例中，派生类Derived继承了接口Base的所有方法，并且委托一个传入的Base类的对象来执行这些方法</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Base</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现接口的被委托的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseImpl</span></span>(<span class="keyword">val</span> x:<span class="built_in">Int</span>):Base&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    print(x)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通过关键字by建立委托类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span></span>(b:Base):Base <span class="keyword">by</span> b</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">  <span class="keyword">val</span> b = BaseImpl(<span class="number">10</span>)</span><br><span class="line">  Derived(b).print()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Derived声明中，by子句表示，将b保存在Derived的对象实例内部，而且编译器将会生继承自Base接口的所有方法，并将调用转发给b</p><h2 id="属性委托"><a href="#属性委托" class="headerlink" title="属性委托"></a>属性委托</h2><p>属性委托指的是一个类的某个属性值不是在类中直接进行定义，而是将其托付给一个代理类，从而实现对该类的属性统一管理</p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val/var <span class="attribute">&lt;属性名&gt;</span>:<span class="attribute">&lt;类型&gt;</span> by <span class="attribute">&lt;表达式&gt;</span></span><br></pre></td></tr></table></figure><ol><li>var/val:属性类型(可变/只读)</li><li>属性名:属性名称</li><li>类型:属性的数据类型</li><li>表达式:委托代理类</li></ol><p>by关键字之后的表达式就是委托，属性的get()方法(以及set()方法)将委托给这个对象的getValue()和setValue()方法。属性委托不必实现任何接口，但必须提供getValue()函数(var属性，还需要setValue()函数)</p><h3 id="定义一个被委托的类"><a href="#定义一个被委托的类" class="headerlink" title="定义一个被委托的类"></a>定义一个被委托的类</h3><p>该类需要包含getValue()方法和setValue方法，且参数thisRef为进行委托的类的对象，prop为进行委托的属性的对象</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlin.reflect.KProperty</span><br><span class="line"><span class="comment">// 定义包含属性委托的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> p:String <span class="keyword">by</span> Delegate()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 委托的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Delegate</span></span>&#123;</span><br><span class="line">  <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">getValue</span><span class="params">(thisRef:<span class="type">Any</span>?,property:<span class="type">KProperty</span>&lt;*&gt;)</span></span>:String&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;<span class="variable">$thisRef</span>,这里委托了 <span class="subst">$&#123;property.name&#125;</span> 属性&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">setValue</span><span class="params">(thisRef:<span class="type">Any</span>?,property:<span class="type">KProperty</span>&lt;*&gt; ,value:<span class="type">String</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;<span class="variable">$thisRef</span>的<span class="subst">$&#123;property.name&#125;</span>属性赋值为<span class="variable">$value</span>&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">  <span class="keyword">val</span> e = Example()</span><br><span class="line">  println(e.p)     <span class="comment">// 访问该属性，调用getValue()函数</span></span><br><span class="line"></span><br><span class="line">  e.p = <span class="string">&quot;paulniu&quot;</span>  <span class="comment">// 调用setValue函数</span></span><br><span class="line">  println(e.p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="标准委托"><a href="#标准委托" class="headerlink" title="标准委托"></a>标准委托</h2><p>Kotlin的标准库中已经内置了很多工厂方法来实现属性的委托</p><h3 id="延迟属性Lazy"><a href="#延迟属性Lazy" class="headerlink" title="延迟属性Lazy"></a>延迟属性Lazy</h3><p>lazy()是一个函数，接受一个Lambda表达式作为参数，返回一个Lazy<T>实例的函数，返回的实例可以作为实现延迟属性的委托：第一次调用get()汇之星已传递给lazy()的lambda表达式并记录结果，后续调用get()只是返回记录的结果</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> lazyValue:String <span class="keyword">by</span> lazy&#123;</span><br><span class="line">  println(<span class="string">&quot;computed&quot;</span>)<span class="comment">// 第一次调用时输出，第二次调用不执行</span></span><br><span class="line">  <span class="string">&quot;hello&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">  println(lazyValue) <span class="comment">// 第一次执行，执行两次输出表达式</span></span><br><span class="line">  println(lazyValue) <span class="comment">// 第二次执行，只输出返回值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可观察属性-Observable"><a href="#可观察属性-Observable" class="headerlink" title="可观察属性 Observable"></a>可观察属性 Observable</h3><p>Observable可以用于实现观察者模式<br>Delegates.observable()函数接收两个参数，第一个是初始化值，第二个是属性变化事件的响应器(handler)<br>在属性赋值后会执行事件的响应器,它由三个参数：被赋值的属性，旧值和新值</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlin.properties.Delegates</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name:String <span class="keyword">by</span> Delegates.observable(<span class="string">&quot;初始值&quot;</span>)&#123;</span><br><span class="line">    prop,old,new -&gt;</span><br><span class="line">    println(<span class="string">&quot;旧值：<span class="variable">$old</span> -&gt; 新值：<span class="variable">$new</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">  <span class="keyword">val</span> user = User()</span><br><span class="line">  user.name = <span class="string">&quot;第一次赋值&quot;</span></span><br><span class="line">  user.name = <span class="string">&quot;第二次赋值&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="把属性存储在映射中"><a href="#把属性存储在映射中" class="headerlink" title="把属性存储在映射中"></a>把属性存储在映射中</h3><p>一个常见的用例是在一个映射map里存储属性的值，这经常出现在像解析JSON或者其他”动态”事情的应用中。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span></span>(<span class="keyword">val</span> map: Map&lt;String, Any?&gt;) &#123;</span><br><span class="line">    <span class="keyword">val</span> name: String <span class="keyword">by</span> map</span><br><span class="line">    <span class="keyword">val</span> url: String  <span class="keyword">by</span> map</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 构造函数接受一个映射参数</span></span><br><span class="line">    <span class="keyword">val</span> site = Site(mapOf(</span><br><span class="line">        <span class="string">&quot;name&quot;</span> to <span class="string">&quot;菜鸟教程&quot;</span>,</span><br><span class="line">        <span class="string">&quot;url&quot;</span>  to <span class="string">&quot;www.runoob.com&quot;</span></span><br><span class="line">    ))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 读取映射值</span></span><br><span class="line">    println(site.name)</span><br><span class="line">    println(site.url)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果使用var属性，需要把Map换成MutableMap</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">class <span class="title">Site</span><span class="params">(val map: MutableMap&lt;<span class="keyword">String</span>, Any?&gt;)</span> </span>&#123;</span><br><span class="line">    val name: <span class="keyword">String</span> by map</span><br><span class="line">    val url: <span class="keyword">String</span> by map</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">fun <span class="title">main</span><span class="params">(args: Array&lt;<span class="keyword">String</span>&gt;)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    var map:MutableMap&lt;<span class="keyword">String</span>, Any?&gt; = <span class="built_in">mutableMapOf</span>(</span><br><span class="line">            <span class="string">&quot;name&quot;</span> to <span class="string">&quot;菜鸟教程&quot;</span>,</span><br><span class="line">            <span class="string">&quot;url&quot;</span> to <span class="string">&quot;www.runoob.com&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    val site = <span class="built_in">Site</span>(map)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println</span>(site.name)</span><br><span class="line">    <span class="built_in">println</span>(site.url)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println</span>(<span class="string">&quot;--------------&quot;</span>)</span><br><span class="line">    map.<span class="built_in">put</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Google&quot;</span>)</span><br><span class="line">    map.<span class="built_in">put</span>(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;www.google.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println</span>(site.name)</span><br><span class="line">    <span class="built_in">println</span>(site.url)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Not-Null"><a href="#Not-Null" class="headerlink" title="Not Null"></a>Not Null</h3><p>notNull适用于那些无法在初始化阶段就确定属性值的场合</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>&#123;</span></span><br><span class="line">  <span class="keyword">var</span> notNullBar:<span class="built_in">String</span> <span class="keyword">by</span> Delegates.notNull&lt;<span class="built_in">String</span>&gt;()</span><br><span class="line">&#125;</span><br><span class="line">foo.notNullBar = <span class="string">&quot;bar&quot;</span></span><br><span class="line">println(foo.notNullBar)</span><br></pre></td></tr></table></figure><blockquote><p>如果属性在赋值前就被访问则会抛出异常</p></blockquote><h3 id="局部委托属性"><a href="#局部委托属性" class="headerlink" title="局部委托属性"></a>局部委托属性</h3><p>我们可以将局部变量生命成委托属性</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">example</span><span class="params">(computeFoo: () -&gt; <span class="type">Foo</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> memoizedFoo <span class="keyword">by</span> lazy(computeFoo)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (someCondition &amp;&amp; memoizedFoo.isValid()) &#123;</span><br><span class="line">        memoizedFoo.doSomething()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>memoizedFoo 变量只会在第一次访问时计算。 如果 someCondition 失败，那么该变量根本不会计算。</p></blockquote><h4 id="属性委托要求"><a href="#属性委托要求" class="headerlink" title="属性委托要求"></a>属性委托要求</h4><p>对于只读属性(val属性)，他的委托必须提供一个名为getValue的函数，该函数接收一下参数：</p><ol><li>thisRef—必须与属性所有者类型(对于扩展属性—指被扩展的类型)相同或者是他的超类</li><li>property—必须是类型KProperty&lt;*&gt;或者其超类</li></ol><p>这个函数必须返回与属性相同的类型(或者子类)<br>对于一个值可变(mutable)属性(var属性),除了getValue函数之外，他的委托还必须另外再提供一个名为setValue的函数,接收一下参数</p><ol><li>property—必须是类型KProperty&lt;*&gt;或其超类</li><li>new value—必须和属性同类型或者是他的超类</li></ol><h4 id="翻译规则"><a href="#翻译规则" class="headerlink" title="翻译规则"></a>翻译规则</h4><p>在每个委托属性的实现的背后，Kotlin 编译器都会生成辅助属性并委托给它。 例如，对于属性 prop，生成隐藏属性 prop$delegate，而访问器的代码只是简单地委托给这个附加属性：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> C &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">prop</span>: <span class="keyword">Type</span> <span class="keyword">by</span> MyDelegate()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这段是由编译器生成的相应代码：</span></span><br><span class="line"><span class="keyword">class</span> C &#123;</span><br><span class="line">    private val <span class="keyword">prop</span><span class="variable">$delegate</span> = MyDelegate()</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">prop</span>: <span class="keyword">Type</span></span><br><span class="line">        <span class="built_in">get</span>() = <span class="keyword">prop</span><span class="variable">$delegate</span>.getValue(this, this::<span class="keyword">prop</span>)</span><br><span class="line">        <span class="keyword">set</span>(value: <span class="keyword">Type</span>) = <span class="keyword">prop</span><span class="variable">$delegate</span>.setValue(this, this::<span class="keyword">prop</span>, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Kotlin 编译器在参数中提供了关于 prop 的所有必要信息：第一个参数 this 引用到外部类 C 的实例而 this::prop 是 KProperty 类型的反射对象，该对象描述 prop 自身。</p><h4 id="提供委托"><a href="#提供委托" class="headerlink" title="提供委托"></a>提供委托</h4><p>通过定义 provideDelegate 操作符，可以扩展创建属性实现所委托对象的逻辑。 如果 by 右侧所使用的对象将 provideDelegate 定义为成员或扩展函数，那么会调用该函数来 创建属性委托实例。</p><p>provideDelegate 的一个可能的使用场景是在创建属性时（而不仅在其 getter 或 setter 中）检查属性一致性。</p><p>例如，如果要在绑定之前检查属性名称，可以这样写：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResourceLoader</span>&lt;<span class="type">T</span>&gt;</span>(id: ResourceID&lt;T&gt;) &#123;</span><br><span class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">provideDelegate</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            thisRef: <span class="type">MyUI</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">            prop: <span class="type">KProperty</span>&lt;*&gt;</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>: ReadOnlyProperty&lt;MyUI, T&gt; &#123;</span><br><span class="line">        checkProperty(thisRef, prop.name)</span><br><span class="line">        <span class="comment">// 创建委托</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">checkProperty</span><span class="params">(thisRef: <span class="type">MyUI</span>, name: <span class="type">String</span>)</span></span> &#123; …… &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">bindResource</span><span class="params">(id: <span class="type">ResourceID</span>&lt;<span class="type">T</span>&gt;)</span></span>: ResourceLoader&lt;T&gt; &#123; …… &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyUI</span> </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> image <span class="keyword">by</span> bindResource(ResourceID.image_id)</span><br><span class="line">    <span class="keyword">val</span> text <span class="keyword">by</span> bindResource(ResourceID.text_id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>provideDelegate 的参数与 getValue 相同：</p><ol><li>thisRef —— 必须与 属性所有者 类型（对于扩展属性——指被扩展的类型）相同或者是它的超类型</li><li>property —— 必须是类型 KProperty&lt;*&gt; 或其超类型。<br>在创建 MyUI 实例期间，为每个属性调用 provideDelegate 方法，并立即执行必要的验证。</li></ol><p>如果没有这种拦截属性与其委托之间的绑定的能力，为了实现相同的功能， 你必须显式传递属性名，这不是很方便：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查属性名称而不使用“provideDelegate”功能</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyUI</span> </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> image <span class="keyword">by</span> bindResource(ResourceID.image_id, <span class="string">&quot;image&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> text <span class="keyword">by</span> bindResource(ResourceID.text_id, <span class="string">&quot;text&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> MyUI.<span class="title">bindResource</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        id: <span class="type">ResourceID</span>&lt;<span class="type">T</span>&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">        propertyName: <span class="type">String</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: ReadOnlyProperty&lt;MyUI, T&gt; &#123;</span><br><span class="line">   checkProperty(<span class="keyword">this</span>, propertyName)</span><br><span class="line">   <span class="comment">// 创建委托</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在生成的代码中，会调用 provideDelegate 方法来初始化辅助的 prop$delegate 属性。 比较对于属性声明 val prop: Type by MyDelegate() 生成的代码与 上面（当 provideDelegate 方法不存在时）生成的代码：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> C &#123;</span><br><span class="line">    var prop: Type by <span class="constructor">MyDelegate()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这段代码是当“provideDelegate”功能可用时</span></span><br><span class="line"><span class="comment">// 由编译器生成的代码：</span></span><br><span class="line"><span class="keyword">class</span> C &#123;</span><br><span class="line">    <span class="comment">// 调用“provideDelegate”来创建额外的“delegate”属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> prop$delegate = <span class="constructor">MyDelegate()</span>.provide<span class="constructor">Delegate(<span class="params">this</span>, <span class="params">this</span>::<span class="params">prop</span>)</span></span><br><span class="line">    <span class="keyword">val</span> prop: Type</span><br><span class="line">        get<span class="literal">()</span> = prop<span class="module-access"><span class="module"><span class="identifier">$delegate</span>.</span></span>get<span class="constructor">Value(<span class="params">this</span>, <span class="params">this</span>::<span class="params">prop</span>)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，provideDelegate 方法只影响辅助属性的创建，并不会影响为 getter 或 setter 生成的代码</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;概述&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
    <category term="kotlin" scheme="http://www.paulniu.com/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>重拾android路(三十) Android多线程</title>
    <link href="http://www.paulniu.com/2019/07/19/android-30-thread/"/>
    <id>http://www.paulniu.com/2019/07/19/android-30-thread/</id>
    <published>2019-07-19T07:27:11.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>多线程的应用在Android开发中是非常常见的，常用方法主要有</p><span id="more"></span><p><img src="/assets/thread/thread01.png" alt="常见方法"></p><h1 id="多线程基础知识"><a href="#多线程基础知识" class="headerlink" title="多线程基础知识"></a>多线程基础知识</h1><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p><img src="/assets/thread/thread02.png" alt="总纲"></p><p>定义：一个基本CPU执行单元</p><p>作用：减少程序在并发执行时所付出的时空开销，提高操作系统的并发性能</p><p>状态：拥有类似于进程的就绪、阻塞、运行3种基本状态，具体如下图</p><p><img src="/assets/thread/thread03.png" alt="线程状态"></p><h1 id="基础实用"><a href="#基础实用" class="headerlink" title="基础实用"></a>基础实用</h1><ol><li>继承Thread类</li><li>实现Runnable接口</li><li>handler</li></ol><h2 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h2><p><img src="/assets/thread/thread04.png" alt="继承Thread类的知识点"></p><p>实现步骤<br><img src="/assets/thread/thread05.png" alt="Thread类实现步骤"></p><p>具体实现代码如下，分为两种一种是通过默认写法，也就是直接新建一个类，然后让这个类继承Thread，重写run方法，第二种是以内部类的方式去实现</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 步骤1：创建线程类 （继承自Thread类）</span></span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 步骤2：复写run（），内容 = 定义线程行为</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void run()&#123;</span><br><span class="line">    ... <span class="comment">// 定义的线程行为</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 步骤3：创建线程对象，即 实例化线程类</span></span><br><span class="line">  <span class="type">MyThread</span> mt=<span class="keyword">new</span> <span class="type">MyThread</span>(“线程名称”);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 步骤4：通过 线程对象 控制线程的状态，如 运行、睡眠、挂起  / 停止</span></span><br><span class="line"><span class="comment">// 此处采用 start（）开启线程</span></span><br><span class="line">  mt.start();</span><br></pre></td></tr></table></figure><p>匿名内部类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 步骤1：采用匿名类，直接 创建 线程类的实例</span></span><br><span class="line"> <span class="keyword">new</span> <span class="function"><span class="title">Thread</span>(<span class="params"><span class="string">&quot;线程名称&quot;</span></span>)</span> &#123;</span><br><span class="line">                 <span class="comment">// 步骤2：复写run（），内容 = 定义线程行为</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123;       </span><br><span class="line">                  <span class="comment">// 步骤3：通过 线程对象 控制线程的状态，如 运行、睡眠、挂起  / 停止   </span></span><br><span class="line">                      &#125;.start();</span><br></pre></td></tr></table></figure><p>区别</p><p><img src="/assets/thread/thread06.png" alt="两种实现方法的区别"></p><h2 id="实现runnable接口"><a href="#实现runnable接口" class="headerlink" title="实现runnable接口"></a>实现runnable接口</h2><p><img src="/assets/thread/thread07.png" alt="实现Runnable接口"></p><p>实现步骤：<br><img src="/assets/thread/thread08.png" alt="实现Runnable的步骤"></p><blockquote><p>Java中真正能创建新线程的只有Thread类对象,通过实现Runnable的方式，最终还是通过Thread类对象来创建线程,所以对于 实现了Runnable接口的类，称为 线程辅助类；Thread类才是真正的线程类</p></blockquote><p>具体实现代码如下，也是分为两种，一种是默认写法，另一个是匿名类写法</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 步骤1：创建线程辅助类，实现Runnable接口</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Runnable</span></span></span>&#123;</span><br><span class="line">    ....</span><br><span class="line">    @Override</span><br><span class="line"><span class="comment">// 步骤2：复写run（），定义线程行为</span></span><br><span class="line">    <span class="keyword">public</span> void run()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 步骤3：创建线程辅助对象，即 实例化 线程辅助类</span></span><br><span class="line">  MyThread mt=<span class="keyword">new</span> <span class="type">MyThread</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 步骤4：创建线程对象，即 实例化线程类；线程类 = Thread类；</span></span><br><span class="line"><span class="comment">// 创建时通过Thread类的构造函数传入线程辅助类对象</span></span><br><span class="line"><span class="comment">// 原因：Runnable接口并没有任何对线程的支持，我们必须创建线程类（Thread类）的实例，从Thread类的一个实例内部运行</span></span><br><span class="line">  Thread td=<span class="keyword">new</span> <span class="type">Thread</span>(mt);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 步骤5：通过 线程对象 控制线程的状态，如 运行、睡眠、挂起  / 停止</span></span><br><span class="line"><span class="comment">// 当调用start（）方法时，线程对象会自动回调线程辅助类对象的run（），从而实现线程操作</span></span><br><span class="line">  td.start();</span><br></pre></td></tr></table></figure><p>匿名类实现方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 步骤1：通过匿名类 直接 创建线程辅助对象，即 实例化 线程辅助类</span></span><br><span class="line">    Runnable mt = <span class="keyword">new</span> <span class="function"><span class="title">Runnable</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                    <span class="comment">// 步骤2：复写run（），定义线程行为</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 步骤3：创建线程对象，即 实例化线程类；线程类 = Thread类；</span></span><br><span class="line">                Thread mt1 = <span class="keyword">new</span> Thread(mt, <span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">           </span><br><span class="line">                <span class="comment">// 步骤4：通过 线程对象 控制线程的状态，如 运行、睡眠、挂起  / 停止</span></span><br><span class="line">                mt1.start();</span><br></pre></td></tr></table></figure><p>两者之间的区别<br><img src="/assets/thread/thread09.png" alt="两种方式的区别"></p><p>Thread类和Runnable的两种方式的区别<br><img src="/assets/thread/thread10.png" alt="区别"></p><h2 id="handler的方式"><a href="#handler的方式" class="headerlink" title="handler的方式"></a>handler的方式</h2><p>这有一个写的很详细的，我就不再去重复了</p><p>具体请看文章：<a href="https://www.jianshu.com/p/9fe944ee02f7">Android Handler：这是一份 全面、详细的Handler机制 学习攻略</a><br>具体使用：<a href="https://www.jianshu.com/p/e172a2d58905">Android：这是一份Handler消息传递机制 的使用教程</a><br>使用问题: <a href="https://www.jianshu.com/p/ed9e15eff47a">（内存泄漏）：Android 内存泄露：详解 Handler 内存泄露的原因</a><br>工作原理：<a href="https://www.jianshu.com/p/f0b23ee5a922">Android Handler：图文解析 Handler通信机制 的工作原理</a><br>源码分析：<a href="https://www.jianshu.com/p/b4d745c7ff7a">Android Handler：手把手带你深入分析 Handler机制源码</a></p><h1 id="复合使用"><a href="#复合使用" class="headerlink" title="复合使用"></a>复合使用</h1><p>Android多线程实现的复合使用包括：</p><p>AsyncTask<br>HandlerThread<br>IntentService</p><p>称为”复用“的主要原因是：这3种方式的本质原理都是Android多线程基础实现（继承Thread类、实现Runnable接口、Handler）的组合实现</p><h2 id="AsyncTask"><a href="#AsyncTask" class="headerlink" title="AsyncTask"></a>AsyncTask</h2><p><img src="/assets/thread/thread11.png" alt="AsyncTask"></p><p>具体使用 &amp; 实例讲解：<a href="https://www.jianshu.com/p/ee1342fcf5e7">Android 多线程：手把手教你使用AsyncTask</a></p><p>工作原理 &amp; 源码分析：<a href="https://www.jianshu.com/p/37502bbbb25a">Android 多线程：AsyncTask的原理 及其源码分析</a></p><h2 id="HandlerThread"><a href="#HandlerThread" class="headerlink" title="HandlerThread"></a>HandlerThread</h2><p><img src="/assets/thread/thread12.png" alt="HandlerThread"></p><p>具体使用 &amp; 实例讲解：<a href="https://www.jianshu.com/p/9c10beaa1c95">Android多线程：手把手教你使用HandlerThread</a></p><p>工作原理 &amp; 源码分析：<a href="https://www.jianshu.com/p/4a8dc2f50ae6">Android多线程：这是一份详细的HandlerThread源码分析攻略</a></p><h2 id="IntentService"><a href="#IntentService" class="headerlink" title="IntentService"></a>IntentService</h2><p><img src="/assets/thread/thread13.png" alt="IntentService"></p><p>具体使用 &amp; 实例讲解：<a href="https://www.jianshu.com/p/af62781fefba">Android多线程：IntentService使用教程（含实例讲解）</a></p><p>工作原理 &amp; 源码分析：<a href="https://www.jianshu.com/p/8a3c44a9173a">Android多线程：这是一份全面 &amp; 详细的IntentService源码分析指南</a></p><h1 id="高级实用"><a href="#高级实用" class="headerlink" title="高级实用"></a>高级实用</h1><p>Android多线程的高级使用主要是线程池（ThreadPool）。</p><p><img src="/assets/thread/thread14.png" alt="ThreadPool"></p><p><img src="https://www.jianshu.com/p/0e4a5e70bf0e" alt="使用"></p><h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><p><img src="/assets/thread/thread15.png" alt="对比"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://juejin.im/post/5d12c1c66fb9a07ee30e2821">android多线程编程指南</a><br><a href="https://www.jianshu.com/p/834f336855c4">android多线程Thread类的使用</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;多线程的应用在Android开发中是非常常见的，常用方法主要有&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
    <category term="thread" scheme="http://www.paulniu.com/tags/thread/"/>
    
  </entry>
  
  <entry>
    <title>重拾android路(二十九) Realm数据库</title>
    <link href="http://www.paulniu.com/2019/07/14/android-29-realm/"/>
    <id>http://www.paulniu.com/2019/07/14/android-29-realm/</id>
    <published>2019-07-14T03:13:26.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Realm简介</p><span id="more"></span><p>数据库Realm，是用来替代sqlite的一种解决方案，它有一套自己的数据库存储引擎，比sqlite更轻量级，拥有更快的速度，并且具有很多现代数据库的特性，比如支持JSON，流式api，数据变更通知，自动数据同步,简单身份验证，访问控制，事件处理，最重要的是跨平台，目前已有Java，Objective C，Swift，React-Native，Xamarin这五种实现。</p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><ol><li><p>在项目中build文件加上</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line"> <span class="keyword">repositories</span> &#123;</span><br><span class="line">     jcenter()</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">dependencies</span> &#123;</span><br><span class="line">     ...</span><br><span class="line">     <span class="keyword">classpath</span> <span class="string">&quot;io.realm:realm-gradle-plugin:1.2.0&quot;</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>如下图所示：<br><img src="/assets/realm/realm01.png" alt="配置在build"></p></li><li><p>在app的build文件中加入如下内容</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">apply</span> plugin: <span class="string">&#x27;realm-android&#x27;</span></span><br></pre></td></tr></table></figure><p>如下图所示<br><img src="/assets/realm/realm02.png" alt="配置在app中的build"></p></li></ol><h1 id="初始化Realm"><a href="#初始化Realm" class="headerlink" title="初始化Realm"></a>初始化Realm</h1><ol><li>在Application中初始化Realm</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  public void onCreate() &#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate();</span><br><span class="line">    <span class="type">Realm</span>.init(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在Application的onCreate方法中对Realm进行初始化</li></ol><ul><li>使用默认配置</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  public void onCreate() &#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate();</span><br><span class="line">    <span class="comment">// The Realm file will be located in Context.getFilesDir() with name &quot;default.realm&quot;</span></span><br><span class="line">    <span class="type">Realm</span>.init(<span class="keyword">this</span>);</span><br><span class="line">    <span class="type">RealmConfiguration</span> config = <span class="keyword">new</span> <span class="type">RealmConfiguration</span>.<span class="type">Builder</span>().build();</span><br><span class="line">    <span class="type">Realm</span>.setDefaultConfiguration(config);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用默认配置</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span> </span><br><span class="line">  public void onCreate() &#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate();</span><br><span class="line">    <span class="type">Realm</span>.init(<span class="keyword">this</span>);</span><br><span class="line">    <span class="type">RealmConfiguration</span> config = <span class="keyword">new</span>  <span class="type">RealmConfiguration</span>.<span class="type">Builder</span>()</span><br><span class="line">                                         .name(<span class="string">&quot;myRealm.realm&quot;</span>)</span><br><span class="line">                                         .deleteRealmIfMigrationNeeded()</span><br><span class="line">                                         .build();</span><br><span class="line">    <span class="type">Realm</span>.setDefaultConfiguration(config);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是我的配置：<br><img src="/assets/realm/realm03.png" alt="Realm配置"></p><h1 id="创建实体"><a href="#创建实体" class="headerlink" title="创建实体"></a>创建实体</h1><ol><li>创建一个类继承RealmObject</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AffairModel</span> <span class="keyword">extends</span> <span class="title">RealmObject</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PrimaryKey</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String affairNote;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> affairTime = <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> affairType = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAffairNote</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> affairNote;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAffairNote</span><span class="params">(String affairNote)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.affairNote = affairNote;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getAffairTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> affairTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAffairTime</span><span class="params">(<span class="keyword">long</span> affairTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.affairTime = affairTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAffairType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> affairType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAffairType</span><span class="params">(<span class="keyword">int</span> affairType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.affairType = affairType;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果存在多对多的关系</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Contact</span> <span class="keyword">extends</span> <span class="title">RealmObject</span> </span>&#123;</span><br><span class="line">    public <span class="type">String</span> name;</span><br><span class="line">    public <span class="type">RealmList</span>&lt;<span class="type">Email</span>&gt; emails;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Email</span> <span class="keyword">extends</span> <span class="title">RealmObject</span> </span>&#123;</span><br><span class="line">    public <span class="type">String</span> address;</span><br><span class="line">    public boolean active;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>其他相关说明</li></ol><ul><li>支持数据类型</li></ul><p>boolean, byte, short, int, long, float, double, String, Date and byte[]<br>在Realm中byte, short, int, long最终都被映射成long类型</p><ul><li>注解说明</li></ul><h4 id="PrimaryKey"><a href="#PrimaryKey" class="headerlink" title="@PrimaryKey"></a>@PrimaryKey</h4><p>①字段必须是String、 integer、byte、short、 int、long 以及它们的封装类Byte, Short, Integer, and Long</p><p>②使用了该注解之后可以使用copyToRealmOrUpdate()方法，通过主键查询它的对象，如果查询到了，则更新它，否则新建一个对象来代替。</p><p>③使用了该注解将默认设置（@index）注解</p><p>④使用了该注解之后，创建和更新数据将会慢一点，查询数据会快一点。</p><h4 id="Required"><a href="#Required" class="headerlink" title="@Required"></a>@Required</h4><p>数据不能为null</p><h4 id="Ignore"><a href="#Ignore" class="headerlink" title="@Ignore"></a>@Ignore</h4><p>忽略，即该字段不被存储到本地</p><h4 id="Index"><a href="#Index" class="headerlink" title="@Index"></a>@Index</h4><p>为这个字段添加一个搜索引擎，这将使插入数据变慢、数据增大，但是查询会变快。建议在需要优化读取性能的情况下使用。</p><h1 id="数据库操作-增删改查-非异步操作"><a href="#数据库操作-增删改查-非异步操作" class="headerlink" title="数据库操作(增删改查) 非异步操作"></a>数据库操作(增删改查) 非异步操作</h1><h2 id="曾"><a href="#曾" class="headerlink" title="曾"></a>曾</h2><h3 id="事务操作一"><a href="#事务操作一" class="headerlink" title="事务操作一"></a>事务操作一</h3><p>创建一个对象，并进行存储</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Realm realm=<span class="module-access"><span class="module"><span class="identifier">Realm</span>.</span></span>get<span class="constructor">DefaultInstance()</span>;</span><br><span class="line">realm.<span class="keyword">begin</span><span class="constructor">Transaction()</span>;</span><br><span class="line">User user = realm.create<span class="constructor">Object(User.<span class="params">class</span>)</span>; <span class="comment">// Create a new object</span></span><br><span class="line">user.set<span class="constructor">Name(<span class="string">&quot;John&quot;</span>)</span>;</span><br><span class="line">user.set<span class="constructor">Email(<span class="string">&quot;john@corporation.com&quot;</span>)</span>;</span><br><span class="line">realm.commit<span class="constructor">Transaction()</span>;</span><br></pre></td></tr></table></figure><p>复制一对象进行存储</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Realm realm=<span class="module-access"><span class="module"><span class="identifier">Realm</span>.</span></span>get<span class="constructor">DefaultInstance()</span>;</span><br><span class="line"> </span><br><span class="line">User user = <span class="keyword">new</span> <span class="constructor">User(<span class="string">&quot;John&quot;</span>)</span>;</span><br><span class="line">user.set<span class="constructor">Email(<span class="string">&quot;john@corporation.com&quot;</span>)</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Copy the object to Realm. Any further changes must happen on realmUser</span></span><br><span class="line">realm.<span class="keyword">begin</span><span class="constructor">Transaction()</span>;</span><br><span class="line">realm.copy<span class="constructor">ToRealm(<span class="params">user</span>)</span>;</span><br><span class="line">realm.commit<span class="constructor">Transaction()</span>;</span><br></pre></td></tr></table></figure><h3 id="事务操作二"><a href="#事务操作二" class="headerlink" title="事务操作二"></a>事务操作二</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Realm  mRealm=Realm.getDefaultInstance();</span><br><span class="line"> </span><br><span class="line">final <span class="keyword">User</span> <span class="keyword">user</span> = <span class="built_in">new</span> <span class="keyword">User</span>(&quot;John&quot;);</span><br><span class="line"><span class="keyword">user</span>.setEmail(&quot;john@corporation.com&quot;);</span><br><span class="line"> </span><br><span class="line">mRealm.executeTransaction(<span class="built_in">new</span> Realm.<span class="keyword">Transaction</span>() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            <span class="built_in">public</span> <span class="type">void</span> <span class="keyword">execute</span>(Realm realm) &#123;</span><br><span class="line">            </span><br><span class="line">            realm.copyToRealm(<span class="keyword">user</span>);</span><br><span class="line">               </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Realm  mRealm=<span class="module-access"><span class="module"><span class="identifier">Realm</span>.</span></span>get<span class="constructor">DefaultInstance()</span>;</span><br><span class="line"> </span><br><span class="line">    final RealmResults&lt;Dog&gt; dogs=  mRealm.where(<span class="module-access"><span class="module"><span class="identifier">Dog</span>.</span></span><span class="keyword">class</span>).find<span class="constructor">All()</span>;</span><br><span class="line"> </span><br><span class="line">        mRealm.execute<span class="constructor">Transaction(<span class="params">new</span> Realm.Transaction()</span> &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void execute(Realm realm) &#123;</span><br><span class="line">            </span><br><span class="line">                Dog dog=dogs.get(<span class="number">5</span>);</span><br><span class="line">                dog.delete<span class="constructor">FromRealm()</span>;</span><br><span class="line">                <span class="comment">//删除第一个数据</span></span><br><span class="line">                dogs.delete<span class="constructor">FirstFromRealm()</span>;</span><br><span class="line">                <span class="comment">//删除最后一个数据</span></span><br><span class="line">                dogs.delete<span class="constructor">LastFromRealm()</span>;</span><br><span class="line">                <span class="comment">//删除位置为1的数据</span></span><br><span class="line">                dogs.delete<span class="constructor">FromRealm(1)</span>;</span><br><span class="line">                <span class="comment">//删除所有数据</span></span><br><span class="line">                dogs.delete<span class="constructor">AllFromRealm()</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><blockquote><p>同样也可以使用同上的beginTransaction和commitTransaction方法进行删除</p></blockquote><h2 id="改"><a href="#改" class="headerlink" title="改"></a>改</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Realm  mRealm=<span class="module-access"><span class="module"><span class="identifier">Realm</span>.</span></span>get<span class="constructor">DefaultInstance()</span>;</span><br><span class="line"> </span><br><span class="line">Dog dog = mRealm.where(<span class="module-access"><span class="module"><span class="identifier">Dog</span>.</span></span><span class="keyword">class</span>).equal<span class="constructor">To(<span class="string">&quot;id&quot;</span>, <span class="params">id</span>)</span>.find<span class="constructor">First()</span>;</span><br><span class="line">mRealm.<span class="keyword">begin</span><span class="constructor">Transaction()</span>;</span><br><span class="line">dog.set<span class="constructor">Name(<span class="params">newName</span>)</span>;</span><br><span class="line">mRealm.commit<span class="constructor">Transaction()</span>;</span><br></pre></td></tr></table></figure><blockquote><p>也可以用事物块来更新数据</p></blockquote><h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><h3 id="查询全部"><a href="#查询全部" class="headerlink" title="查询全部"></a>查询全部</h3><p>查询结果为RealmResults</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;Dog&gt; query<span class="constructor">AllDog()</span> &#123;</span><br><span class="line">        Realm  mRealm=<span class="module-access"><span class="module"><span class="identifier">Realm</span>.</span></span>get<span class="constructor">DefaultInstance()</span>;</span><br><span class="line">    </span><br><span class="line">        RealmResults&lt;Dog&gt; dogs = mRealm.where(<span class="module-access"><span class="module"><span class="identifier">Dog</span>.</span></span><span class="keyword">class</span>).find<span class="constructor">All()</span>;</span><br><span class="line">        </span><br><span class="line">        return mRealm.copy<span class="constructor">FromRealm(<span class="params">dogs</span>)</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public Dog query<span class="constructor">DogById(String <span class="params">id</span>)</span> &#123;</span><br><span class="line">        Realm  mRealm=<span class="module-access"><span class="module"><span class="identifier">Realm</span>.</span></span>get<span class="constructor">DefaultInstance()</span>;</span><br><span class="line">    </span><br><span class="line">        Dog dog = mRealm.where(<span class="module-access"><span class="module"><span class="identifier">Dog</span>.</span></span><span class="keyword">class</span>).equal<span class="constructor">To(<span class="string">&quot;id&quot;</span>, <span class="params">id</span>)</span>.find<span class="constructor">First()</span>;</span><br><span class="line">        return dog;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>常见的条件如下（详细资料请查官方文档）：</p><p>between(), greaterThan(), lessThan(), greaterThanOrEqualTo() &amp; lessThanOrEqualTo()</p><p>equalTo() &amp; notEqualTo()</p><p>contains(), beginsWith() &amp; endsWith()</p><p>isNull() &amp; isNotNull()</p><p>isEmpty() &amp; isNotEmpty()</p><h3 id="对查询结果进行排序"><a href="#对查询结果进行排序" class="headerlink" title="对查询结果进行排序"></a>对查询结果进行排序</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * query （查询所有）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Dog&gt; queryAllDog() &#123;</span><br><span class="line">        RealmResults&lt;Dog&gt; dogs = mRealm.where(Dog.<span class="keyword">class</span>).<span class="keyword">findAll</span>();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 对查询结果，按Id进行排序，只能对查询结果进行排序</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//增序排列</span></span><br><span class="line">        dogs=dogs.<span class="keyword">sort</span>(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="comment">//降序排列</span></span><br><span class="line">        dogs=dogs.<span class="keyword">sort</span>(<span class="string">&quot;id&quot;</span>, <span class="keyword">Sort</span>.DESCENDING);</span><br><span class="line">        <span class="keyword">return</span> mRealm.copyFromRealm(dogs);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="其他查询"><a href="#其他查询" class="headerlink" title="其他查询"></a>其他查询</h3><p>sum，min，max，average只支持整型数据字段</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">**<span class="operator"></span></span><br><span class="line"><span class="operator">     *  </span>查询平均年龄</span><br><span class="line">     */</span><br><span class="line">    <span class="keyword">private</span> void get<span class="constructor">AverageAge()</span> &#123;</span><br><span class="line">         double avgAge=  mRealm.where(<span class="module-access"><span class="module"><span class="identifier">Dog</span>.</span></span><span class="keyword">class</span>).find<span class="constructor">All()</span>.average(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  查询总年龄</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> void get<span class="constructor">SumAge()</span> &#123;</span><br><span class="line">      Number sum=  mRealm.where(<span class="module-access"><span class="module"><span class="identifier">Dog</span>.</span></span><span class="keyword">class</span>).find<span class="constructor">All()</span>.sum(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        <span class="built_in">int</span> sumAge=sum.<span class="built_in">int</span><span class="constructor">Value()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  查询最大年龄</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> void get<span class="constructor">MaxId()</span>&#123;</span><br><span class="line">      Number max=  mRealm.where(<span class="module-access"><span class="module"><span class="identifier">Dog</span>.</span></span><span class="keyword">class</span>).find<span class="constructor">All()</span>.max(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        <span class="built_in">int</span> maxAge=max.<span class="built_in">int</span><span class="constructor">Value()</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="数据库操作-增删改查-异步操作"><a href="#数据库操作-增删改查-异步操作" class="headerlink" title="数据库操作(增删改查)  异步操作"></a>数据库操作(增删改查)  异步操作</h1><p>大多数情况下，Realm的增删改查操作足够快，可以在UI线程中执行操作。但是如果遇到较复杂的增删改查，或增删改查操作的数据较多时，就可以子线程进行操作。</p><h2 id="异步增"><a href="#异步增" class="headerlink" title="异步增"></a>异步增</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> void add<span class="constructor">Cat(<span class="params">final</span> Cat <span class="params">cat</span>)</span> &#123;</span><br><span class="line">      RealmAsyncTask  addTask=  mRealm.execute<span class="constructor">TransactionAsync(<span class="params">new</span> Realm.Transaction()</span> &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void execute(Realm realm) &#123;</span><br><span class="line">                realm.copy<span class="constructor">ToRealm(<span class="params">cat</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="keyword">new</span> Realm.Transaction.<span class="constructor">OnSuccess()</span> &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void on<span class="constructor">Success()</span> &#123;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">ToastUtil</span>.</span></span>show<span class="constructor">ShortToast(<span class="params">mContext</span>,<span class="string">&quot;收藏成功&quot;</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="keyword">new</span> Realm.Transaction.<span class="constructor">OnError()</span> &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void on<span class="constructor">Error(Throwable <span class="params">error</span>)</span> &#123;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">ToastUtil</span>.</span></span>show<span class="constructor">ShortToast(<span class="params">mContext</span>,<span class="string">&quot;收藏失败&quot;</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>最后在销毁Activity或Fragment时，要取消掉异步任务</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">void</span> <span class="function"><span class="title">onDestroy</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">       <span class="keyword">if</span> (addTask!=<span class="literal">null</span>&amp;&amp;!addTask.isCancelled())&#123;</span><br><span class="line">            addTask.cancel();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="异步删"><a href="#异步删" class="headerlink" title="异步删"></a>异步删</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> void delete<span class="constructor">Cat(<span class="params">final</span> String <span class="params">id</span>, <span class="params">final</span> ImageView <span class="params">imageView</span>)</span>&#123;</span><br><span class="line">      RealmAsyncTask  deleteTask=   mRealm.execute<span class="constructor">TransactionAsync(<span class="params">new</span> Realm.Transaction()</span> &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void execute(Realm realm) &#123;</span><br><span class="line">                Cat cat=realm.where(<span class="module-access"><span class="module"><span class="identifier">Cat</span>.</span></span><span class="keyword">class</span>).equal<span class="constructor">To(<span class="string">&quot;id&quot;</span>,<span class="params">id</span>)</span>.find<span class="constructor">First()</span>;</span><br><span class="line">                cat.delete<span class="constructor">FromRealm()</span>;</span><br><span class="line"> </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="keyword">new</span> Realm.Transaction.<span class="constructor">OnSuccess()</span> &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void on<span class="constructor">Success()</span> &#123;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">ToastUtil</span>.</span></span>show<span class="constructor">ShortToast(<span class="params">mContext</span>,<span class="string">&quot;取消收藏成功&quot;</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="keyword">new</span> Realm.Transaction.<span class="constructor">OnError()</span> &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void on<span class="constructor">Error(Throwable <span class="params">error</span>)</span> &#123;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">ToastUtil</span>.</span></span>show<span class="constructor">ShortToast(<span class="params">mContext</span>,<span class="string">&quot;取消收藏失败&quot;</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>最后在销毁Activity或Fragment时，要取消掉异步任务</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">void</span> <span class="function"><span class="title">onDestroy</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">       <span class="keyword">if</span> (deleteTask!=<span class="literal">null</span>&amp;&amp;!addTask.isCancelled())&#123;</span><br><span class="line">            deleteTask.cancel();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="异步改"><a href="#异步改" class="headerlink" title="异步改"></a>异步改</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">RealmAsyncTask  updateTask=   mRealm.execute<span class="constructor">TransactionAsync(<span class="params">new</span> Realm.Transaction()</span> &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void execute(Realm realm) &#123;</span><br><span class="line">                Cat cat=realm.where(<span class="module-access"><span class="module"><span class="identifier">Cat</span>.</span></span><span class="keyword">class</span>).equal<span class="constructor">To(<span class="string">&quot;id&quot;</span>,<span class="params">mId</span>)</span>.find<span class="constructor">First()</span>;</span><br><span class="line">                cat.set<span class="constructor">Name(<span class="params">name</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="keyword">new</span> Realm.Transaction.<span class="constructor">OnSuccess()</span> &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void on<span class="constructor">Success()</span> &#123;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">ToastUtil</span>.</span></span>show<span class="constructor">ShortToast(UpdateCatActivity.<span class="params">this</span>,<span class="string">&quot;更新成功&quot;</span>)</span>;</span><br><span class="line">             </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="keyword">new</span> Realm.Transaction.<span class="constructor">OnError()</span> &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void on<span class="constructor">Error(Throwable <span class="params">error</span>)</span> &#123;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">ToastUtil</span>.</span></span>show<span class="constructor">ShortToast(UpdateCatActivity.<span class="params">this</span>,<span class="string">&quot;失败成功&quot;</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>最后在销毁Activity或Fragment时，要取消掉异步任务</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">void</span> <span class="function"><span class="title">onDestroy</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">       <span class="keyword">if</span> (updateTask!=<span class="literal">null</span>&amp;&amp;!addTask.isCancelled())&#123;</span><br><span class="line">            updateTask.cancel();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="异步查"><a href="#异步查" class="headerlink" title="异步查"></a>异步查</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">RealmResults&lt;Cat&gt;   cats=mRealm.where(<span class="module-access"><span class="module"><span class="identifier">Cat</span>.</span></span><span class="keyword">class</span>).find<span class="constructor">AllAsync()</span>;</span><br><span class="line">        cats.add<span class="constructor">ChangeListener(<span class="params">new</span> RealmChangeListener&lt;RealmResults&lt;Cat&gt;&gt;()</span> &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void on<span class="constructor">Change(RealmResults&lt;Cat&gt; <span class="params">element</span>)</span> &#123;</span><br><span class="line">               element= element.sort(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                List&lt;Cat&gt; datas=mRealm.copy<span class="constructor">FromRealm(<span class="params">element</span>)</span>;</span><br><span class="line">              </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>最后在销毁Activity或Fragment时，要取消掉异步任务</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="built_in">void</span> <span class="function"><span class="title">onDestroy</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">       <span class="built_in">super</span>.onDestroy();</span><br><span class="line">       cats.removeChangeListeners();</span><br><span class="line"> </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="使用json"><a href="#使用json" class="headerlink" title="使用json"></a>使用json</h1><p>在实际开发中我们和json打交道的机会比较多，所以直接从json去创建对象是十分有用的，下面的代码片段展示了怎么去用。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> void testAddFromJson() &#123;</span><br><span class="line"></span><br><span class="line">   realm.executeTransaction(new <span class="type">Realm</span>.<span class="type">Transaction</span>() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> void execute(<span class="type">Realm</span> realm) &#123;</span><br><span class="line">            <span class="type">String</span> json <span class="operator">=</span> <span class="string">&quot;&#123;<span class="subst">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line">                    <span class="string">&quot;    <span class="subst">\&quot;</span>id<span class="subst">\&quot;</span>: <span class="subst">\&quot;</span>uuid1<span class="subst">\&quot;</span>,<span class="subst">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line">                    <span class="string">&quot;    <span class="subst">\&quot;</span>name<span class="subst">\&quot;</span>: <span class="subst">\&quot;</span>solid<span class="subst">\&quot;</span>,<span class="subst">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line">                    <span class="string">&quot;    <span class="subst">\&quot;</span>age<span class="subst">\&quot;</span>: 20<span class="subst">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line">                    <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">            <span class="type">String</span> jsons <span class="operator">=</span> <span class="string">&quot;[<span class="subst">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line">                    <span class="string">&quot;    &#123;<span class="subst">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line">                    <span class="string">&quot;        <span class="subst">\&quot;</span>id<span class="subst">\&quot;</span>: <span class="subst">\&quot;</span>uuid1<span class="subst">\&quot;</span>,<span class="subst">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line">                    <span class="string">&quot;        <span class="subst">\&quot;</span>name<span class="subst">\&quot;</span>: <span class="subst">\&quot;</span>solid<span class="subst">\&quot;</span>,<span class="subst">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line">                    <span class="string">&quot;        <span class="subst">\&quot;</span>age<span class="subst">\&quot;</span>: 20<span class="subst">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line">                    <span class="string">&quot;    &#125;,<span class="subst">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line">                    <span class="string">&quot;    &#123;<span class="subst">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line">                    <span class="string">&quot;        <span class="subst">\&quot;</span>id<span class="subst">\&quot;</span>: <span class="subst">\&quot;</span>uuid2<span class="subst">\&quot;</span>,<span class="subst">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line">                    <span class="string">&quot;        <span class="subst">\&quot;</span>name<span class="subst">\&quot;</span>: <span class="subst">\&quot;</span>jhack<span class="subst">\&quot;</span>,<span class="subst">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line">                    <span class="string">&quot;        <span class="subst">\&quot;</span>age<span class="subst">\&quot;</span>: 21<span class="subst">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line">                    <span class="string">&quot;    &#125;,<span class="subst">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line">                    <span class="string">&quot;    &#123;<span class="subst">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line">                    <span class="string">&quot;        <span class="subst">\&quot;</span>id<span class="subst">\&quot;</span>: <span class="subst">\&quot;</span>uuid3<span class="subst">\&quot;</span>,<span class="subst">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line">                    <span class="string">&quot;        <span class="subst">\&quot;</span>name<span class="subst">\&quot;</span>: <span class="subst">\&quot;</span>tom<span class="subst">\&quot;</span>,<span class="subst">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line">                    <span class="string">&quot;        <span class="subst">\&quot;</span>age<span class="subst">\&quot;</span>: 22<span class="subst">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line">                    <span class="string">&quot;    &#125;<span class="subst">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line">                    <span class="string">&quot;]&quot;</span>;</span><br><span class="line">            <span class="comment">//realm.createObjectFromJson(User.class, json);</span></span><br><span class="line">            realm.createAllFromJson(<span class="type">User</span>.class, jsons);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数据模型改变"><a href="#数据模型改变" class="headerlink" title="数据模型改变"></a>数据模型改变</h1><p>开发中数据模型不可能从一开始创建了，就保证后面的开发过程中不会更改，对于Realm如果其中的某个实体类改变了，而我们没有做任何的处理，就会报错，如果还处于应用的开发的初期，这无所谓，直接清空数据即可，但是如果应用已经发布了，我们就需要去寻找一种解决方案了。</p><p>这里的解决方案如下：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMigration</span> <span class="keyword">implements</span> <span class="title">RealmMigration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">migrate</span><span class="params">(DynamicRealm realm, <span class="keyword">long</span> oldVersion, <span class="keyword">long</span> newVersion)</span> </span>&#123;</span><br><span class="line">        Log.e(MainActivity.TAG, <span class="string">&quot;oldVersion:&quot;</span> + oldVersion + <span class="string">&quot; newVersion:&quot;</span> + newVersion);</span><br><span class="line"> </span><br><span class="line">        RealmSchema schema = realm.getSchema();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (newVersion == <span class="number">2</span>) &#123;</span><br><span class="line">            schema.get(<span class="string">&quot;User&quot;</span>)</span><br><span class="line">                    .addField(<span class="string">&quot;desc&quot;</span>, String.class);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj <span class="keyword">instanceof</span> MyMigration;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">hashCode</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在用Realm进行操作之前需要对Realm作相关的配置操作，Realm中所有的写操作都必须在事务中进行，不然就会报错， 记得在Activity的onDestory中调用realm.close()释放资源。</p></blockquote><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/dengpeng_/article/details/54895066">android之Realm数据库使用</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Realm简介&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
    <category term="realm" scheme="http://www.paulniu.com/tags/realm/"/>
    
  </entry>
  
  <entry>
    <title>android奇技淫巧 10 SoftInputMode属性介绍</title>
    <link href="http://www.paulniu.com/2019/07/12/android-tools-10/"/>
    <id>http://www.paulniu.com/2019/07/12/android-tools-10/</id>
    <published>2019-07-12T14:42:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>android软键盘属性SoftInputMode属性设置介绍</p><span id="more"></span><p>SoftInputMode用来设置软键盘的各种属性.有两种方式可以设置，第一种是在清单配置文件也就是AndroidManifest.xml文件，另一种也就是在java代码中动态设置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> 第一种  xml清单文件中进行设置</span><br><span class="line"> android:windowSoftInputMode=<span class="string">&quot;adjustResize&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>第二种  代码设置 (在Activity对象中  可以调用  getWindow()  方法   )</span><br><span class="line">getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE | WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN );</span><br></pre></td></tr></table></figure><p>windowSoftInputMode共有9个取值：<br>stateUnspecified，stateUnchanged，stateHidden，stateAlwaysHidden，stateVisible，stateAlwaysVisible，adjustUnspecified，adjustResize，adjustPan。<br>这9个取值可以划分成两大类 ： StateXXX 类型，和AdjustXXX类型。<br>其中StateXXX类型的设置主要与软键盘的显示有关（例如 刚进入界面的时候软键盘是否显示）<br>而AdjustXXX类型主要涉及到软键盘弹出时候界面的调整（例如 在回复评论信息的时候我们希望软键盘弹出的时候能够把底下的EditText输入框也顶上去）</p><h2 id="stateXXX各种类型"><a href="#stateXXX各种类型" class="headerlink" title="stateXXX各种类型"></a>stateXXX各种类型</h2><h4 id="stateUnspecified"><a href="#stateUnspecified" class="headerlink" title="stateUnspecified"></a>stateUnspecified</h4><p>这是系统默认的设置，系统会根据界面要求来显示软键盘，一般来说软键盘是不会自动弹出的，但是当有获得焦点的输入框有滚动需求时候就会自动弹出软键盘（例如EditText外面嵌套了ScrollView，并且EditText获得焦点）。</p><h4 id="stateUnchanged"><a href="#stateUnchanged" class="headerlink" title="stateUnchanged"></a>stateUnchanged</h4><p>Unchanged就是不改变的意思，在这里的使用的一种情况就是，当前的activiy已经弹出了软键盘，当进入到新界面时候，软键盘仍然是弹出的状态。如果之前是隐藏的那么跳转的新界面软键盘也是隐藏的，保持不变（Unchanged）。</p><h4 id="stateHidden"><a href="#stateHidden" class="headerlink" title="stateHidden"></a>stateHidden</h4><p>这种设置下，进入界面时候，软键盘都是隐藏的。</p><h4 id="stateAlwaysHidden"><a href="#stateAlwaysHidden" class="headerlink" title="stateAlwaysHidden"></a>stateAlwaysHidden</h4><h4 id="stateVisible"><a href="#stateVisible" class="headerlink" title="stateVisible"></a>stateVisible</h4><p>在一般情动情况下会弹出软键盘，计时没有输入框EditText</p><h4 id="stateAlwaysVisible"><a href="#stateAlwaysVisible" class="headerlink" title="stateAlwaysVisible"></a>stateAlwaysVisible</h4><p>这个属性与上一个<pre>stateAlwaysVisible</pre>类似，不过有一些小区别，设置为stateVisible时候，如果从一个没有软键盘弹出的界面返回到当前界面时候是不会弹出软键盘的，但是设置为stateAlwaysVisible模式，即使返回之前的那个界面没有软键盘弹出，退回到当前界面的时候软键盘也是会弹起的，这也就是  AlwaysVisible 。</p><h2 id="adjustXXX各种类型"><a href="#adjustXXX各种类型" class="headerlink" title="adjustXXX各种类型"></a>adjustXXX各种类型</h2><p>上面的是关于软键盘弹出的时机，也就是说控制软键盘是否弹出来的。现在的<pre>adjustXXX</pre>表示的是软键盘显示的时候对于整个页面的影响。</p><h4 id="adjustUnspecified"><a href="#adjustUnspecified" class="headerlink" title="adjustUnspecified"></a>adjustUnspecified</h4><p>这是系统默认的设置，系统会根据界面选择不同的模式。如果界面里面有可以滚动的控件，比如ScrowView，系统会减小可以滚动的界面的大小，从而保证即使软键盘显示出来了，也能够看到所有的内容。如果布局里面没有滚动的控件，那么软键盘可能就会盖住一些内容。</p><h4 id="justResize"><a href="#justResize" class="headerlink" title="justResize"></a>justResize</h4><p>这是比较常用的用来调整输入框位置的属性，一般设置为这个属性就可以实现底部输入框被顶上去的效果。<br>这是由于软键盘是一个Dialog，也就是一个Window，Window可以说是View的一个容器，我们自己编写的布局文件所生成的View都是在与Activity绑定的那个Window之中，当软键盘弹出的时候，整个屏幕就被切分成了两部分，上面的View布局和下面的软键盘，这时候上面的根View会调整自己的大小（压缩自己）来适应这种变化，之后会从View的根部重新请求测量、布局、绘制。这时候软键盘的上面就成了新的底部，输入框在软键盘上面重新绘制自己，直观上就变成了输入框被软键盘给顶上去了。</p><h4 id="justPan"><a href="#justPan" class="headerlink" title="justPan"></a>justPan</h4><p>这种模式与adajustResize的区别就在于视图View不会重新调整自己的高度，而是选择向上滚动一段距离，来让下面的输入框显示出来。当然带来的问题可能就是顶部的ActionBar等View会被顶出视线外。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.jianshu.com/p/3d5d5d60d336">SoftInputMode属性介绍</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;android软键盘属性SoftInputMode属性设置介绍&lt;/p&gt;</summary>
    
    
    
    
    <category term="-android" scheme="http://www.paulniu.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>android奇技淫巧 09 gradle统一配置版本</title>
    <link href="http://www.paulniu.com/2019/07/11/android-tools-09/"/>
    <id>http://www.paulniu.com/2019/07/11/android-tools-09/</id>
    <published>2019-07-11T14:42:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>在项目开发中，随着项目的逐渐庞大，引用的依赖库也会随之增多，那么我们需要有一个文件来统一管理gradl的版本</p><span id="more"></span><p>在Project/build.gradle中定义，在module/build.gradle中使用<br>最终的效果如图所示：</p><p><img src="/assets/tools/tools-gradle-01.png" alt="gradle同一版本配置"></p><p>我们可以单独配置一个config.gradle的文件，在这个文件中，将我们所有需要使用到的版本进行统一管理</p><ol><li><p>在project层级下新建一个名为config.gradle的文件，这个文件就是我们需要配置版本的地方</p></li><li><p>在配置文件中我们书写一下代码，如下所示：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> gradle全局配置文件</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 定义所有的project参数</span><br><span class="line">ext &#123;</span><br><span class="line"></span><br><span class="line">    android = [</span><br><span class="line">            compileSdk : <span class="number">28</span>,</span><br><span class="line">            buildTools : <span class="string">&quot;28.0.3&quot;</span>,</span><br><span class="line">            minSdk     : <span class="number">19</span>,</span><br><span class="line">            minLimitSdk: <span class="number">15</span>,  <span class="regexp">//</span> 限制低版本用户安装</span><br><span class="line">            targetSdk  : <span class="number">28</span>,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    dependencies = [</span><br><span class="line">            <span class="regexp">//</span> app依赖库</span><br><span class="line">            junit                : <span class="string">&#x27;4.12&#x27;</span>,</span><br><span class="line">            supportLibraryVersion: <span class="string">&#x27;27.1.1&#x27;</span>,</span><br><span class="line">            supportParentVersion : <span class="string">&#x27;25.3.1&#x27;</span>,</span><br><span class="line">            <span class="regexp">//</span> 自己的依赖库</span><br><span class="line">            IYingLibrary         : <span class="string">&#x27;0.0.7&#x27;</span>,</span><br><span class="line">            <span class="regexp">//</span> 第三方依赖库</span><br><span class="line">            <span class="regexp">//</span> 检测内存泄漏</span><br><span class="line">            leakcanary           : <span class="string">&#x27;1.5.4&#x27;</span>,</span><br><span class="line">            <span class="regexp">//</span> 高德地图</span><br><span class="line">            amapLocation         : <span class="string">&#x27;latest.integration&#x27;</span>,</span><br><span class="line">            <span class="regexp">//</span> Logger日志</span><br><span class="line">            log                  : <span class="string">&#x27;2.2.0&#x27;</span>,</span><br><span class="line">            <span class="regexp">//</span> RxPermission</span><br><span class="line">            rxpermission         : <span class="string">&#x27;0.10.2&#x27;</span>,</span><br><span class="line">            <span class="regexp">//</span> Glide</span><br><span class="line">            glide                : <span class="string">&#x27;4.9.0&#x27;</span>,</span><br><span class="line">            glidecompiler        : <span class="string">&#x27;4.9.0&#x27;</span>,</span><br><span class="line">            <span class="regexp">//</span> rxjava rxAndroid</span><br><span class="line">            rxjava               : <span class="string">&#x27;2.2.7&#x27;</span>,</span><br><span class="line">            rxAndroid            : <span class="string">&#x27;2.0.1&#x27;</span></span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在project层级下的build.gradle文件中将config.gradle引入到该文件中，如下所示</p></li></ol><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">apply</span> <span class="keyword">from</span>: <span class="string">&#x27;config.gradle&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="/assets/tools/tools-gradle-02.png" alt="将配置文件引入到build.gradle文件中"></p><ol start="4"><li>引用</li></ol><p>在引用的时候分为两种，一种是系统配置，如minSdk，另外一种是依赖，比如我们引入rxJava</p><ul><li><p>数字引入</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compileSdkVersion rootProject<span class="selector-class">.ext</span><span class="selector-class">.android</span>.compileSd</span><br></pre></td></tr></table></figure></li><li><p>第三方库版本号引入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">api <span class="string">&quot;com.android.support:appcompat-v7:<span class="variable">$rootProject</span>.ext.dependencies.supportLibraryVersion&quot;</span></span><br></pre></td></tr></table></figure></li></ul><p>最终的效果如下图所示<br><img src="/assets/tools/tools-gradle-03.png" alt="module中使用"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在项目开发中，随着项目的逐渐庞大，引用的依赖库也会随之增多，那么我们需要有一个文件来统一管理gradl的版本&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>android奇技淫巧 08 Android 焦点问题</title>
    <link href="http://www.paulniu.com/2019/07/07/android-tools-08/"/>
    <id>http://www.paulniu.com/2019/07/07/android-tools-08/</id>
    <published>2019-07-07T14:27:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间在做公司的项目的时候，有一个布局文件的焦点一直被另外一个空间所获取到，在开发的过程中要做很多操作。虽然最后解决了，但是问题总是不太理想，所以，趁着这个时间把android关于焦点的问题复习一下。</p><span id="more"></span><h1 id="获取焦点的前提"><a href="#获取焦点的前提" class="headerlink" title="获取焦点的前提"></a>获取焦点的前提</h1><ol><li>view.isFocuseable返回true，或者在触摸模式中view.isfocusableInTouchMode也要返回true</li><li>控件必须可见</li><li>控件相关的父控件，包括祖父控件等，viewGroup.getDescendantFocusability()不能使ViewGroup.FOCUS_BLOCK_DESCENDANTS</li></ol><h1 id="View"><a href="#View" class="headerlink" title="View"></a>View</h1><h2 id="获取焦点"><a href="#获取焦点" class="headerlink" title="获取焦点"></a>获取焦点</h2><p>调用view.requestFocus()系列方法</p><h2 id="进入view-requestFocusNoSearch"><a href="#进入view-requestFocusNoSearch" class="headerlink" title="进入view.requestFocusNoSearch"></a>进入view.requestFocusNoSearch</h2><p>在该方法中会对控件的当前状态进行判断, 如果不符合获取焦点的前提则直接返回false告知调用方, 控件不会获取焦点</p><p>只要符合前提就会继续执行, 最终必定返回true, 不论当前控件的焦点状态是否有改变</p><h2 id="符合前提则进入-View-handleFocusGainInternal"><a href="#符合前提则进入-View-handleFocusGainInternal" class="headerlink" title="符合前提则进入 View#handleFocusGainInternal"></a>符合前提则进入 View#handleFocusGainInternal</h2><p>如果控件已经持有焦点, 则不会做任何事情, 直接结束流程</p><p>如果没有焦点,</p><ul><li><p>改变焦点标志位, 此时View#isFocused就会返回true了</p></li><li><p>通过ViewParent#requestChildFocus通知父控件即将获取焦点</p></li><li><p>通知其他部件焦点状态发生变化(略, 本文不关心)</p></li><li><p>触发OnGlobalFocusChangeListener的回调</p></li><li><p>触发OnFocusChangeListener回调</p></li><li><p>重绘, 结束流程</p></li></ul><h2 id="清除焦点"><a href="#清除焦点" class="headerlink" title="清除焦点"></a>清除焦点</h2><p>调用View#clearFocus主动放弃焦点</p><p>如果控件本身没有焦点, 则什么都不会发生</p><p>如果控件持有焦点</p><ul><li><p>改变焦点标志位</p></li><li><p>通过ViewParent#clearChildFocus通知父控件, 当前控件放弃焦点</p></li><li><p>触发OnFocusChangeListener回调</p></li><li><p>调用当前控件的根控件(rootView)的requestFocus方法</p></li><li><p>如果步骤4中没有找到新的焦点控件, 则触发OnGlobalFocusChangeListener的回调, 注: 如果找到新的焦点控件, 那么新的控件获取焦点的过程中就会回调OnGlobalFocusChangeListener, 所以这里只有没找到才进行步骤5</p></li></ul><p>注: 由上流程可以知道, 如果根控件查找控件的时候找到的控件还是这个控件, 那么OnFocusChangeListener就会被调用两次, 先失去焦点, 然后又获取到焦点</p><h1 id="ViewGroup"><a href="#ViewGroup" class="headerlink" title="ViewGroup"></a>ViewGroup</h1><h2 id="焦点分发策略-DescendantFocusability"><a href="#焦点分发策略-DescendantFocusability" class="headerlink" title="焦点分发策略 DescendantFocusability"></a>焦点分发策略 DescendantFocusability</h2><ul><li><p>FOCUS_BLOCK_DESCENDANTS: 拦截焦点, 直接自己尝试获取焦点</p></li><li><p>FOCUS_BEFORE_DESCENDANTS: 首先自己尝试获取焦点, 如果自己不能获取焦点, 则尝试让子控件获取焦点</p></li><li><p>FOCUS_AFTER_DESCENDANTS: 首先尝试把焦点给子控件, 如果所有子控件都不要, 则自己尝试获取焦点</p></li></ul><h2 id="获取焦点-1"><a href="#获取焦点-1" class="headerlink" title="获取焦点"></a>获取焦点</h2><p>根据焦点分发策略决定下面两个方法的调用顺序</p><h2 id="通过view-requestFocus-获取焦点"><a href="#通过view-requestFocus-获取焦点" class="headerlink" title="通过view#requestFocus()获取焦点"></a>通过view#requestFocus()获取焦点</h2><p>把ViewGroup看作View, 直接走View获取焦点的流程来获取焦点</p><h2 id="进入-onRequestFocusInDescendants"><a href="#进入-onRequestFocusInDescendants" class="headerlink" title="进入 onRequestFocusInDescendants"></a>进入 onRequestFocusInDescendants</h2><p>可以传入方向来改变遍历的顺序, 默认是从0递增</p><p>遍历子控件, 调用子控件的View#requestFocus来尝试把焦点给可见的子控件, 某个子控件成功获取到焦点后, 停止遍历</p><p>注: 重写该方法可以改变ViewGroup分发焦点给子控件的行为, 例如遍历顺序</p><h2 id="清除焦点-1"><a href="#清除焦点-1" class="headerlink" title="清除焦点"></a>清除焦点</h2><p>如果焦点控件不是它的子控件, 那么直接把当前的ViewGroup看作View走View#clearFocus流程, 反之则调用焦点控件的View#clearFocus.</p><p>注: 区别在于重新分发焦点时的选择范围.</p><h2 id="viewParent"><a href="#viewParent" class="headerlink" title="viewParent"></a>viewParent</h2><p>ViewParent是一个接口, 表示了一个父控件应该具备的功能, ViewGroup实现了该接口.</p><p>与焦点相关的接口有4个</p><h2 id="clearChildFocus"><a href="#clearChildFocus" class="headerlink" title="clearChildFocus"></a>clearChildFocus</h2><p>当子控件主动放弃焦点的时候会通过这个方法通知父控件.</p><p>在ViewGroup的默认实现中, 会置空当前焦点控件, 表示该父控件下没有子控件获取焦点, 接着把这个事件通知给上级父控件.</p><p>注1: 这个方法名有点让人误解, 应该把这个方法看作一个回调, 表明了一个状态, 在这个方法中并没有做清除焦点的操作, 实际的清除动作是在View#clearFocus中完成的, 这个方法也是在这个流程中被调用的. 而且是在子控件已经放弃焦点后调用.<br>注2: 区分主动放弃和因为其他控件获取了焦点而被动丢失焦点的情况</p><h2 id="requestChildFocus"><a href="#requestChildFocus" class="headerlink" title="requestChildFocus"></a>requestChildFocus</h2><p>当子控件获取了焦点后, 通过这个方法通知父控件. 同clearChildFocus类似, 应该把这个方法看作是一个回调.</p><p>在ViewGroup的默认实现中, 因为同时只会有一个焦点, 因此在这里应该把旧焦点清除掉, 大致流程如下</p><p>如果焦点分发策略为FOCUS_BLOCK_DESCENDANTS则什么也不干</p><p>如果父控件自身有焦点, 通过View#unFocus清除焦点</p><p>如果父控件当前已经有焦点控件, 并且和新的控件不一致, 那么通过View#unFocus清除旧焦点控件的焦点</p><p>向上传递这个事件</p><h2 id="内部清除焦点-View-unFocus"><a href="#内部清除焦点-View-unFocus" class="headerlink" title="内部清除焦点 View#unFocus"></a>内部清除焦点 View#unFocus</h2><p>这个方法和View#clearFocus相同点在于都会执行View#clearFocusInternal方法, 区别在于unFocus只会执行clearFocus中, 上文清除焦点中提到的1, 3步骤, 因此不会通知父控件, 不会触犯requestChildFocus回调, 因为这个方法是在子控件被动失去焦点时调用的, 所以也不会触发焦点分发.</p><p>因此新旧焦点切换的大致流程是</p><ul><li><p>新焦点控件获取焦点</p></li><li><p>新焦点控件通知父控件</p></li><li><p>父控件清除旧焦点控件的焦点</p></li><li><p>旧焦点控件回调OnFocusChangeListener</p></li><li><p>触发OnGlobalFocusChangeListener的回调</p></li><li><p>新焦点控件回调OnFocusChangeListener</p></li></ul><h2 id="focusableViewAvailable"><a href="#focusableViewAvailable" class="headerlink" title="focusableViewAvailable"></a>focusableViewAvailable</h2><p>通知父控件, 子控件的状态发生改变, 从不能获取焦点, 变成可能可以获取焦点.</p><p>有两种情况会被调用</p><ul><li><p>子控件从unFocusable变为focusable</p></li><li><p>子控件从不可见变为可见, 即使它不是focusable也会调用, 因此它的子控件可能可以获取焦点.</p></li></ul><p>而ViewGroup中的默认实现只是在符合条件的情况下把这个事件向上传递给自己的父控件.</p><ul><li>focusSearch(View, int)</li></ul><p>查找指定方向中最近的, 想要获取焦点的控件.</p><p>这个方法直接决定了焦点的移动规则, 非常重要.</p><p>在ViewGroup的默认实现中, 会一直向上传递, 直到根控件, 接着调用FocusFinder#findNextFocus方法查找合适的控件. 稍后再分析这个方法.</p><blockquote><p>View中有一个同名的方法focusSearch(int), 该方法直接调用了父控件的focusSearch(View, int)来查找下一个焦点控件</p></blockquote><h2 id="findNextFocus"><a href="#findNextFocus" class="headerlink" title="findNextFocus"></a>findNextFocus</h2><p>查找步骤大致如下</p><h3 id="手动指定"><a href="#手动指定" class="headerlink" title="手动指定"></a>手动指定</h3><p>如果有通过android:nextFocusDown等手动指定控件, 则返回对应方向的控件</p><h3 id="动态计算"><a href="#动态计算" class="headerlink" title="动态计算"></a>动态计算</h3><ul><li><p>获取所有可以获取焦点的控件的集合</p></li><li><p>计算相对当前焦点控件的坐标</p></li><li><p>根据方向选择合适的控件</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;前段时间在做公司的项目的时候，有一个布局文件的焦点一直被另外一个空间所获取到，在开发的过程中要做很多操作。虽然最后解决了，但是问题总是不太理想，所以，趁着这个时间把android关于焦点的问题复习一下。&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>android奇技淫巧 07 Android APK体积优化</title>
    <link href="http://www.paulniu.com/2019/07/04/android-tools-07/"/>
    <id>http://www.paulniu.com/2019/07/04/android-tools-07/</id>
    <published>2019-07-04T13:44:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>一般APK体积优化可以从以下几个方面入手</p><span id="more"></span><ol><li>svg的使用和优化</li><li>Tint着色器的使用和优化</li><li>资源打包配置优化</li><li>动态库的打包配置优化</li><li>移除无用的资源(物理删除和非物理删除)</li><li>代码混淆</li><li>webp转化(api等级18)</li><li>资源混淆</li></ol><h1 id="SVG的使用和优化"><a href="#SVG的使用和优化" class="headerlink" title="SVG的使用和优化"></a>SVG的使用和优化</h1><blockquote><p>首先我们下来了解一下什么是svg，svg其实就是可以缩放的缩略图。其实就是在不同地方显示不同大小</p></blockquote><p>在自己做一些小项目的时候，我都会从<a href="https://www.iconfont.cn/">阿里矢量图</a>中去查找，至于具体怎么下载，大家可以去尝试一下。下载下来之后就是一个.svg的文件。我们可以通过Android studio引入矢量图。</p><p>具体的操作步骤如下：<br>res –&gt; new –&gt; vector Asset</p><p>如图所示：</p><p><img src="/assets/tools/tools-apk-01.png" alt="将矢量图引入到Android studio中"></p><p>之后就会有一个弹窗，如图</p><p><img src="/assets/tools/tools-apk-02.png" alt="矢量图引入弹窗"></p><p>在Asset Type中第一个选项表示的是系统图标，第二个表示的是本地图标。这样我们就会生成一个.xml结尾的图标。里面的代码大致是这个样子的(不同的图片会有差别)</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 矢量图生成的代码</span></span><br><span class="line">&lt;vector xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    android:width=<span class="string">&quot;24dp&quot;</span></span><br><span class="line">    android:height=<span class="string">&quot;24dp&quot;</span></span><br><span class="line">    android:viewportWidth=<span class="string">&quot;24.0&quot;</span></span><br><span class="line">    android:viewportHeight=<span class="string">&quot;24.0&quot;</span>&gt;</span><br><span class="line">    &lt;path</span><br><span class="line">        android:fillColor=<span class="string">&quot;#FF000000&quot;</span></span><br><span class="line">        android:pathData=<span class="string">&quot;M20,11H7.83l5.59,-5.59L12,4l-8,8 8,8 1.41,-1.41L7.83,13H20v-2z&quot;</span> /&gt;</span><br><span class="line">&lt;/vector&gt;</span><br></pre></td></tr></table></figure><p>具体里面的语法结构我也不太清楚，不过能够大致猜出一些标签的含义。<br>在使用的时候跟之前使用图片的方式也不太一样。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> 矢量图的使用</span><br><span class="line">app:srcCompat=<span class="string">&quot;@drawable/ic_arror_back_black&quot;</span></span><br></pre></td></tr></table></figure><p>首先svg是可缩放矢量图，所以我们在项目中只要添加一张svg，就可以在不同的地方使用，并且在使用的时候可以根据不同的大小显示出不同的样式，这样可以大大减少图片资源带来的APK体积增加。</p><p>但是只有这些是不行的，因为我们的Android要适配，我们在app-&gt;build.gradle中的defaultConfig标签中添加如下的内容</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span><span class="number">5.0</span>的兼容适配</span><br><span class="line">       <span class="regexp">//</span><span class="number">5.0</span>以下 将svg图片生成指定维度的png图片,下面写几个就会生成几个相应的图片</span><br><span class="line">       vectorDrawables.generatedDensities(<span class="string">&#x27;xhdpi&#x27;</span>,<span class="string">&#x27;xxhdpi&#x27;</span>)</span><br><span class="line">       <span class="regexp">//</span><span class="number">5.0</span>以上 以上使用support-v7进行兼容</span><br><span class="line">       vectorDrawables.useSupportLibrary = true</span><br></pre></td></tr></table></figure><p>这个是我找到的解决方案，但是我编译了一下试了试。如果我单写顶上那一句，会在相应的文件夹下生成出图片，但是加上后面这句，相应的图片就没有了！我就好奇了，为什么呢？然后我找到了相应的手机试了一下，加不加上面这句没有什么卵用！我是在19版本上测试的！找这样的手机真心费劲，要不是我父母我还真找不到！！！所以呢？大家斟酌一下吧！！！</p><p>这个问题，大神们早就帮我们解决了！！！</p><p>下面这个是一个批量转换工具！话说没有什么事情能难倒程序员！！！(对我失效)<br>MegatronKing/SVG-Android<br>下载这个jar包-&gt;svg2vector-cli-1.0.1.jar</p><p>然后一波小命令！！！咔咔咔</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">java -jar svg2vector-cli-1.0.1.jar -d D:\svg -o D:\vector</span><br><span class="line"></span><br><span class="line">    -<span class="ruby">d 指定svg文件所在目录</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">f 指定当个svg文件</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">h 设置转换后svg高</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">w 设置转换后svg宽</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">o 输出android vector图像目录</span></span><br></pre></td></tr></table></figure><p>然后转换完成，然后复制就好了！！！</p><h1 id="Tint着色器的使用与优化"><a href="#Tint着色器的使用与优化" class="headerlink" title="Tint着色器的使用与优化"></a>Tint着色器的使用与优化</h1><blockquote><p>大家在开发的时候不知道有没有过这种体验！在使用状态选择器的时候，需要使用两张一样颜色不同的相同图片？其实使用tint属性完全可以搞定(但是这里指的是纯色的那种图片，那种花花绿绿的你还是乖乖弄吧，除非你想把他变成纯色！)</p></blockquote><p>其实很简单，在展示图片的地方添加</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">app:</span>tint=<span class="string">&quot;颜色值&quot;</span></span><br></pre></td></tr></table></figure><p>这样就可以改变图片的颜色，那么状态选择器呢？怎么用呢？其实很简单了！下面我们来看代码！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/ic_arrow_back_black_24dp&quot;</span> <span class="attr">android:state_pressed</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/ic_arrow_back_black_24dp&quot;</span> <span class="attr">android:state_pressed</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里我们会发现在摁下和松开的两种状态使用的同样的资源文件，别着急，我们接着往下看</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:color</span>=<span class="string">&quot;@android:color/white&quot;</span> <span class="attr">android:state_pressed</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:color</span>=<span class="string">&quot;@android:color/black&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其实原理是这样的，状态选择器的话呢？只要你通过tint的状态选择器改变图片的颜色就可以了！</p><p>但是这里面有几个点需要注意下：</p><p>颜色的那个状态选择器要方法color文件夹下；<br>设置tint的时候要使用app为前缀，否则5.0以下的会报错；<br>如果你设置的是svg的图片要使用srcCompat如果是正常图片使用src就好了。<br>基本上这层优化就到这里了！</p><h1 id="资源打包配置优化"><a href="#资源打包配置优化" class="headerlink" title="资源打包配置优化"></a>资源打包配置优化</h1><p>其实这个标题说的有点大，其实就是删除不必要的语言！！！<br>可能你们没有留意过，在你用Android Studio查看你的apk的时候，会看到这样的东西</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一般APK体积优化可以从以下几个方面入手&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>android奇技淫巧 06 Android 代码重构场景</title>
    <link href="http://www.paulniu.com/2019/07/03/android-tools-06/"/>
    <id>http://www.paulniu.com/2019/07/03/android-tools-06/</id>
    <published>2019-07-03T14:40:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>重构可以是修改变量名、重新安排目录这样简单的物理重构，也可以是抽取子函数、精简冗余设计这样稍许复杂的逻辑重构。但均不改变现有代码的功能。</p><span id="more"></span><h1 id="了解敌人——丑陋的代码"><a href="#了解敌人——丑陋的代码" class="headerlink" title="了解敌人——丑陋的代码"></a>了解敌人——丑陋的代码</h1><ol><li>臃肿的类<br>开发者缺乏对最基本的编码原则，即“单一职责原则”（SRP）的理解。开发者不去思考这些功能是不是应该放在这同一个类中，导致这些类会变得很臃肿，造成一个类几千行，让下一个接盘侠欲哭无泪。</li><li>臃肿的方法<br>好几十上百行的一个函数堆在一块，用面向过程的思想来写代码。</li><li>函数参数过多<br>函数参数过多会导致调用者对方法难以理解，参数弄混。想象一下一个函数连续传5个int值参数，能分清谁是谁吗?建议可以将参数组成一个对象传入。</li><li>层层嵌套的判断<br>如果逻辑不复杂尽量减少if-else的分支包裹，他人太难阅读。比如不满足条件了直接return，不走其他代码，这样可以减少一层嵌套。</li><li>满篇跑的常量值<br>一个类里面出现各种未命名的常量值。0，1，200等等铺天盖地。这种状态码意义改了，改代码会把你改哭的。难道就不能先声明一个统一的常量变量来使用吗。</li><li>模棱两可的命名<br>不能根据名字一眼看懂它的功能的命名不是一个好命名。当然生僻的单词除外。模糊的，没有功能意义的命名会给阅读造成很大困难。</li></ol><h1 id="重构之道"><a href="#重构之道" class="headerlink" title="重构之道"></a>重构之道</h1><ol><li>分拆大函数：Break Method<br>当函数比较大了，就可以根据功能节点分拆成多个小函数，也许其中的小函数还可以公用。比如结算购物车，包括计算各类商品的总价，再计算折扣，再计算满减优惠，如果一个方法执行完，那么别人要只要逻辑就要从头到尾读一遍。而分别拆分成三个，一眼就能看出这段逻辑先后做了什么。写方法切忌一口吃一个胖子。</li><li>封装到父类：<br>如果多各类要执行相似的功能和代码，可以把该方法放到它们的父类中，或者提取出来成业务工具类。</li><li>Move Method—-方法迁移<br>遵守“单一职责”原则，当类中的方法不适合放在当前类中时，就应该为该方法寻找合适下家。移到与方法耦合大的类中。当一个方法被其他类使用比在它所在类中的使用还要频繁时，我们就需要使用迁移方法重构了——将方法迁移到更频繁地使用它的类中。</li><li>Move Field—-搬移字段<br>当在一个类中的某一个字段，被另一个类的对象频繁使用时，我们就应该考虑将这个字段的位置进行更改了</li><li>Extract Class—-提炼类<br>一个类如果过于复杂，做了好多的事情，违背了“单一职责”的原则，所以需要将其可以独立的模块进行拆分，当然有可能由一个类拆分出多个类。<br>对类的细化也是为了减少代码的重复性，以及提高代码的复用性，便于代码的维护。</li><li>提升方法、字段（Pull Up Method）<br>将方法向继承链上层迁移的过程。用于一个方法被多个实现者使用时。在继承的体系中，当多个类使用了相同或类似的方法，就可以考虑将该方法抽取到基类，没有基类就创建一个。字段提升同方法。</li><li>降低方法<br>即父类抽象方法让多个子类实现。多个子类有相同的功能但是有各个具体的实现方法，那么这种封装就可以用多态性了，父类创建一个抽象方法，将方法实现降低到子类。</li><li>重复代码的提炼<br>有时候为了赶项目进度，尽快完成功能，会偷懒将实现功能的一片代码复制一遍，直接套用。这种把多余的删掉，保留一个，也许只需传一两个参数就可以封成一个方法供多处调用。</li><li>重命名变量（类、方法、变量）<br>这个很重要，可以不夸张地说，命名的水平就体现了编程能力的高低。在重构的过程中，当发现类名，方法名在当前版本不符合它的功能含义，就该考虑对其重新命名。</li><li>补加注释<br>对于全局变量，公用函数，逻辑复杂的地方添加注释，弥补之前的遗漏。<br>将较长的判断或代码运算用临时变脸暂存</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(stateCode = OK &amp;&amp; datas != <span class="literal">null</span> &amp;&amp; canShow)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">Math</span>.random((num1-num2)*num3)</span>)</span></span><br></pre></td></tr></table></figure><p>如上这种长长的判断条件和参数会使 这种代码应该先将if判断条件写成一个变量，放入变量判断，将function参数写一个局部变量保存结果，再传入方法。</p><ul><li><p>使用泛型封装成统一的方法或类</p></li><li><p>函数要避免过多的参数造成阅读的复杂性</p></li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestPhoneThirdRegister</span><span class="params">(<span class="keyword">String</span> loginway, <span class="keyword">String</span> nickname, <span class="keyword">String</span> openId, <span class="keyword">String</span> token, <span class="keyword">String</span> expires, <span class="keyword">String</span> phone, <span class="keyword">final</span> CallBackimpl callBackimpl)</span></span></span><br></pre></td></tr></table></figure><p>用这样的方法直接传参数就太长了，严重降低代码可读性。我们可以将参数变量写到一个实体类中，通过构造方法初始化对象属性值，只需要传递一个对象就搞定，也解决了增减参数带来的变动问题。</p><ul><li>嵌套条件分支优化</li></ul><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">if</span>()&#123;</span></span><br><span class="line"><span class="function">           <span class="title">if</span>()&#123;</span></span><br><span class="line"><span class="function">               <span class="title">if</span>()&#123;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">               &#125;</span></span><br><span class="line"><span class="function">           &#125;</span></span><br><span class="line"><span class="function">       &#125;<span class="variable"><span class="keyword">else</span></span>&#123;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">       &#125;</span></span><br></pre></td></tr></table></figure><p>相信大家也见识过不少这样的箭头代码，像怎么也解不开的死结。遇到这种代码，一定要尽可能要优化。通常做法：判断语句，if条件成立，执行代码块，诶，这样就生成了一个嵌套层级。<br>优化的核心思想：直接判断不满足的条件，if条件成立，直接return，尽快跳出方法来减少嵌套的层级。<br>第二种：将条件判读合并</p><ul><li>尽量避免双重否定的条件</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">boolean</span> <span class="function"><span class="title">isChecked</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>()&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>一个条件方法</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">if</span><span class="params">(!isChecked()</span></span>)&#123;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后用否定来判断这个条件，这样可能会一时之间转变不过来导致条件判断反了。当然头脑灵活的忽略这条。</p><ul><li>去除东北乱炖的Util类<br>当我们在写代码中偶然间需要抽出公用方法时，一时之间找不到合适的类去放置，然后就随意地放进了XXUtil或XXManager类中。长此以往，该类所含功能越来越杂，dp和px转化在其中，屏幕尺寸相关方法在其中，日期转化在其中，加密的索性也放在其中，那有无网络，网络类型判断也加入吧。这不就像垃圾场了吗，各类杂物都堆在其中，不符合单一职责原则，应该按照如上的功能块分解成多个职责单一的类。类多不要紧，关键要做到职责单一。</li><li>将满篇跑的魔鬼数字和字符串用定义的常量表示。<br>如果只是某个类或者某个模块需要用到该常量，就声明到对应类中。如果是全局项目都会用到的常量，就提升到项目的常量配置文件中。</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://mp.weixin.qq.com/s/zJGIEKuQgcSJmdBXLO_b4A">代码重构的场景总结</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;重构可以是修改变量名、重新安排目录这样简单的物理重构，也可以是抽取子函数、精简冗余设计这样稍许复杂的逻辑重构。但均不改变现有代码的功能。&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Flutter (一)  Flutter基础介绍</title>
    <link href="http://www.paulniu.com/2019/07/02/flutter-01/"/>
    <id>http://www.paulniu.com/2019/07/02/flutter-01/</id>
    <published>2019-07-02T12:31:11.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>简介</p><span id="more"></span><p>Flutter是谷歌的移动UI框架，可以快速在iOS和Android上构建高质量的原生用户界面。 Flutter可以与现有的代码一起工作。在全世界，Flutter正在被越来越多的开发者和组织使用，并且Flutter是完全免费、开源的<br><a href="https://flutter.dev/">Flutter Dev</a></p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>我使用的是Mac系统，其实不管是Windows系统还是Linux系统，配置环境都是比较简单的。可以在网上找到相关的教程，这里我就不再赘述。如果你也是Mac系统，可以参考博客<a href="https://www.jianshu.com/p/b50a92afbef1">Flutter的环境配置</a></p><p>当然还有另外一种方式，就是首先你的电脑里要安装Android studio，然后再插件中搜索Flutter，安装完成之后，重启Android Studio，你就会在主界面中发现有这么一个创建Flutter的选项，如图</p><p><img src="/assets/flutter_01/flutter01.png"></p><p>选中这个选项，进入到如图所示的页面</p><p><img src="/assets/flutter_01/flutter02.png" alt="安装FlutterSDK"></p><p>在这里我们因为没有安装过Flutter的SDK，所以直接选中安装按钮即可，系统会自动帮我们下载好SDK，并且配置好。下载的速度可能会有点慢，当然我们可以使用VPN，这个情况就因人而异了。我使用的是第一种方法，在官网下载好SDK的压缩文件，自己通过解压，配置环境变量，就可以使用了。</p><p>安装并且配置好环境之后，在终端中输入: flutter -h 如果现实如下图所示的内容，就表示你的环境已经搭建好了</p><p><img src="/assets/flutter_01/flutter03.png" alt="检测FlutterSDK"></p><p>这里的截图比较少，其实后面还有很多的内容，包括Flutter常用的一些命令，都会在这里显示出来。</p><p>紧接着我们可以检查一下当前的环境，因为Flutter不仅可以满足Android开发，还可以同时满足IOS开发，那么我们有没有将相应的开发环境配置好呢？需要让Flutter帮我们检测一下，检测的命令就是：flutter doctor</p><p><img src="/assets/flutter_01/flutter04.png" alt="flutter doctor"></p><p>这里我的电脑里还有一些配置没有安装完成 有！或者 x 符号的表示内容没有安装完成。</p><p>首先运行这句：flutter doctor –android-licenses</p><p><img src="/assets/flutter_01/flutter05.png" alt="flutter doctor --android-licenses"></p><p>这里面会有几个地方需要我们同意的，其实直接输入y，即可。</p><p>最后的样式就是这样的</p><p><img src="/assets/flutter_01/flutter06.png"></p><p>表示对于Android部分的内容是没问题的了。</p><p>紧接着做其他的部分，可能根据每个人电脑的配置而进行修改。或者你可以直接根据提示进行修改如下图：</p><p><img src="/assets/flutter_01/flutter07.png" alt="需要修改的内容"></p><p>这个过程可能会比较慢，请耐心等待，或者你可以在晚上的时候让他自己去下载，然后我们去休息。过程中如果出现什么错误，一般会给出修改的提示，然后按照提示修改即可，如果遇到一些比较难缠的问题，只能去google了。</p><h1 id="配置编辑器"><a href="#配置编辑器" class="headerlink" title="配置编辑器"></a>配置编辑器</h1><p>使用android Studio进行开发比较简单，我这里介绍的是VSCode的方式</p><h2 id="安装Flutter插件"><a href="#安装Flutter插件" class="headerlink" title="安装Flutter插件"></a>安装Flutter插件</h2><ol><li>启动VSCode</li><li>调用View&gt;Command Palette…</li><li>输入 ‘install’, 然后选择 Extensions: Install Extension action</li><li>在右侧输入框Flutter 选择其中的install安装即可</li><li>重启VSCode</li></ol><p>通过Flutter Doctor验证设置</p><p>调用 View&gt;Command Palette…<br>输入 ‘doctor’, 然后选择 ‘Flutter: Run Flutter Doctor’ action<br>查看“OUTPUT”窗口中的输出是否有问题</p><h1 id="一个Demo"><a href="#一个Demo" class="headerlink" title="一个Demo"></a>一个Demo</h1><h2 id="创建Flutter-App"><a href="#创建Flutter-App" class="headerlink" title="创建Flutter App"></a>创建Flutter App</h2><p>创建一个简单的、基于模板的Flutter应用程序，这里我把它命名为Flutter_Demo<br><img src="/assets/flutter_01/flutter08.png" alt="创建Flutter"></p><p>下一步，选择Flutter Application<br><img src="/assets/flutter_01/flutter09.png"></p><p>下一步，设置项目名称和路径<br><img src="/assets/flutter_01/flutter10.png"></p><p>下一步，设置包名<br><img src="/assets/flutter_01/flutter11.png"></p><p>等待Android Studio帮我们生成好项目即可。项目结构如下所示：<br><img src="/assets/flutter_01/flutter12.png" alt="Flutter项目结构"></p><p>在这个项目中，我们有很多包，可能特别多的内容会导致我们在刚开始学习的时候，总是不知所措，所以，我们先看一些比较关键的部分，后面的内容，慢慢来。</p><p>首先我们找到lib文件夹，这个文件夹就是我们在写项目的时候的主体功能文件夹，也就是说我们一般情况下所有的逻辑代码都会放在这里。<br><img src="/assets/flutter_01/flutter13.png" alt="Flutter项目的lib"></p><p>在这个lib文件夹中只有一个文件—main.dart,它里面的代码如下所示</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="symbol">&#x27;package</span>:flutter/material.dart&#x27;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(<span class="type">MyApp</span>());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="comment">// This widget is the root of your application.</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="type">Widget</span> build(<span class="type">BuildContext</span> context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">MaterialApp</span>(</span><br><span class="line">      title: <span class="symbol">&#x27;Flutter</span> <span class="type">Demo</span>&#x27;,</span><br><span class="line">      theme: <span class="type">ThemeData</span>(</span><br><span class="line">        <span class="comment">// This is the theme of your application.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Try running your application with &quot;flutter run&quot;. You&#x27;ll see the</span></span><br><span class="line">        <span class="comment">// application has a blue toolbar. Then, without quitting the app, try</span></span><br><span class="line">        <span class="comment">// changing the primarySwatch below to Colors.green and then invoke</span></span><br><span class="line">        <span class="comment">// &quot;hot reload&quot; (press &quot;r&quot; in the console where you ran &quot;flutter run&quot;,</span></span><br><span class="line">        <span class="comment">// or simply save your changes to &quot;hot reload&quot; in a Flutter IDE).</span></span><br><span class="line">        <span class="comment">// Notice that the counter didn&#x27;t reset back to zero; the application</span></span><br><span class="line">        <span class="comment">// is not restarted.</span></span><br><span class="line">        primarySwatch: <span class="type">Colors</span>.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: <span class="type">MyHomePage</span>(title: <span class="symbol">&#x27;Flutter</span> <span class="type">Demo</span> <span class="type">Home</span> <span class="type">Page</span>&#x27;),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="type">MyHomePage</span>(&#123;<span class="type">Key</span> key, <span class="keyword">this</span>.title&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This widget is the home page of your application. It is stateful, meaning</span></span><br><span class="line">  <span class="comment">// that it has a State object (defined below) that contains fields that affect</span></span><br><span class="line">  <span class="comment">// how it looks.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// This class is the configuration for the state. It holds the values (in this</span></span><br><span class="line">  <span class="comment">// case the title) provided by the parent (in this case the App widget) and</span></span><br><span class="line">  <span class="comment">// used by the build method of the State. Fields in a Widget subclass are</span></span><br><span class="line">  <span class="comment">// always marked &quot;final&quot;.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="type">String</span> title;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyHomePageState createState() =&gt; _MyHomePageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyHomePageState</span> <span class="keyword">extends</span> <span class="title">State&lt;MyHomePage&gt;</span> </span>&#123;</span><br><span class="line">  int _counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  void _incrementCounter() &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      <span class="comment">// This call to setState tells the Flutter framework that something has</span></span><br><span class="line">      <span class="comment">// changed in this State, which causes it to rerun the build method below</span></span><br><span class="line">      <span class="comment">// so that the display can reflect the updated values. If we changed</span></span><br><span class="line">      <span class="comment">// _counter without calling setState(), then the build method would not be</span></span><br><span class="line">      <span class="comment">// called again, and so nothing would appear to happen.</span></span><br><span class="line">      _counter++;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="type">Widget</span> build(<span class="type">BuildContext</span> context) &#123;</span><br><span class="line">    <span class="comment">// This method is rerun every time setState is called, for instance as done</span></span><br><span class="line">    <span class="comment">// by the _incrementCounter method above.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// The Flutter framework has been optimized to make rerunning build methods</span></span><br><span class="line">    <span class="comment">// fast, so that you can just rebuild anything that needs updating rather</span></span><br><span class="line">    <span class="comment">// than having to individually change instances of widgets.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="type">Scaffold</span>(</span><br><span class="line">      appBar: <span class="type">AppBar</span>(</span><br><span class="line">        <span class="comment">// Here we take the value from the MyHomePage object that was created by</span></span><br><span class="line">        <span class="comment">// the App.build method, and use it to set our appbar title.</span></span><br><span class="line">        title: <span class="type">Text</span>(widget.title),</span><br><span class="line">      ),</span><br><span class="line">      body: <span class="type">Center</span>(</span><br><span class="line">        <span class="comment">// Center is a layout widget. It takes a single child and positions it</span></span><br><span class="line">        <span class="comment">// in the middle of the parent.</span></span><br><span class="line">        child: <span class="type">Column</span>(</span><br><span class="line">          <span class="comment">// Column is also layout widget. It takes a list of children and</span></span><br><span class="line">          <span class="comment">// arranges them vertically. By default, it sizes itself to fit its</span></span><br><span class="line">          <span class="comment">// children horizontally, and tries to be as tall as its parent.</span></span><br><span class="line">          <span class="comment">//</span></span><br><span class="line">          <span class="comment">// Invoke &quot;debug painting&quot; (press &quot;p&quot; in the console, choose the</span></span><br><span class="line">          <span class="comment">// &quot;Toggle Debug Paint&quot; action from the Flutter Inspector in Android</span></span><br><span class="line">          <span class="comment">// Studio, or the &quot;Toggle Debug Paint&quot; command in Visual Studio Code)</span></span><br><span class="line">          <span class="comment">// to see the wireframe for each widget.</span></span><br><span class="line">          <span class="comment">//</span></span><br><span class="line">          <span class="comment">// Column has various properties to control how it sizes itself and</span></span><br><span class="line">          <span class="comment">// how it positions its children. Here we use mainAxisAlignment to</span></span><br><span class="line">          <span class="comment">// center the children vertically; the main axis here is the vertical</span></span><br><span class="line">          <span class="comment">// axis because Columns are vertical (the cross axis would be</span></span><br><span class="line">          <span class="comment">// horizontal).</span></span><br><span class="line">          mainAxisAlignment: <span class="type">MainAxisAlignment</span>.center,</span><br><span class="line">          children: &lt;<span class="type">Widget</span>&gt;[</span><br><span class="line">            <span class="type">Text</span>(</span><br><span class="line">              <span class="symbol">&#x27;You</span> have pushed the button <span class="keyword">this</span> many times:&#x27;,</span><br><span class="line">            ),</span><br><span class="line">            <span class="type">Text</span>(</span><br><span class="line">              &#x27;$_counter&#x27;,</span><br><span class="line">              style: <span class="type">Theme</span>.of(context).textTheme.display1,</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: <span class="type">FloatingActionButton</span>(</span><br><span class="line">        onPressed: _incrementCounter,</span><br><span class="line">        tooltip: <span class="symbol">&#x27;Incremen</span>t&#x27;,</span><br><span class="line">        child: <span class="type">Icon</span>(<span class="type">Icons</span>.add),</span><br><span class="line">      ), <span class="comment">// This trailing comma makes auto-formatting nicer for build methods.</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然内容很多，但是里面每个函数的意义和作用都在里面说明的很详细，所以这里我就介绍了。<br>值得注意的是，Flutter使用的是Dart语言开发的，这样我们就需要学习一门新的语言，但是Dart语言很简单，基本上两三天就能上手，抽空我会在去把Dart语言总结一下。<br>首先我们来运行一下这个应用程序。这里我使用的是Android虚拟机。运行之后的效果如下图所示</p><p><img src="/assets/flutter_01/flutter14.png" alt="Flutter运行结果"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;简介&lt;/p&gt;</summary>
    
    
    
    
    <category term="flutter" scheme="http://www.paulniu.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>android奇技淫巧 05 Android targetSdkVersion 升级到 26 总结</title>
    <link href="http://www.paulniu.com/2019/07/01/android-tools-05/"/>
    <id>http://www.paulniu.com/2019/07/01/android-tools-05/</id>
    <published>2019-07-01T14:44:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于各个应用市场要求，需要在 2019年5月1日 之前把 target 升级到 26。所以对本公司全网的 App 和可能影响到的相关 SDK 做一个升级。本文主要记录此次升级的过程和解决的一些问题。</p><span id="more"></span><p>其实升级 target 技术含量不是很高，但是因为涉及到库（100 多个 SDK）和人员，依赖有点多，涉及到公司所有业务的 App, 而且改动的地方和细节也有多，很容易出现考虑不全，导致线上问题。<br>主要过程为以下几步：<br>查看官方文档<br>找下「轮子」，选择一个合适自己的「轮子」， 优化「轮子」<br>修改对应的模块和 App，并接入到相关的业务方<br>遇到的问题，解决问题<br>查看官方文档<br>因为公司的 App、组件、模块都是基于 target 22 和 support 24 进行开发的，所以要看下官方文档 releases/platforms 和 libraries/support-library 相关的文档，从中找到影响点。我们受影响主要有 2 个方面：<br>一、运行时权限申请，(这个是大头)<br>二、其他问题<br>找轮子<br>因为第一个权限问题是比较普遍的，所以应该有相关的开源项目支持，为了效率，我们就不重复制造轮子。参考各个比较流行的开源方案，做了一下对比：<br>相关库<br>需要修改 Activity 或者 Fragment<br>设置界面跳转<br><img src="/assets/tools/tools-sdk-01.png" alt="动态申请权限对比"><br>通过以上对比，我们决定使用 AndPermission 的方案，因为这个对于我们现有 App 的侵入是最少的，改动点比较少，而且支持 Appliction 传入（其实当使用 Application 传入时候，会有问题，后面再说）。<br>说下 AndPermission<br>当时的考虑点是我们公司很多 SDK 设计的时候是没有 Activity 的引用。但是我们的 SDK, 基本有个 Application 这个引用的，所以选择了一个能够支持传入 Applicaiton 就能够判断权限回调的库。为什么 AndPermission 能够支持呢？因为 AndPermission 在权限校验的时候会启动 PermissionActivity，并且加上了 intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);，所有的权限请求都是在这个 PermissionActivity 处理，而且改动也比较少。<br>AndPermission 这个库的动态权限请求具体过程大伙可以看下 AndPermission 这个库的源码。使用方式如下：<br><img src="/assets/tools/tools-sdk-02.png"><br>从 API 调用来看是十分简单好用的。然后我又仔细看了一下它的实现过程，发现了有些不符合我们产品需求的地方：<br>业务方接入需要简单，需要有一套默认的权限申请失败提示框<br>弹框提醒权限必须是 Activity 的。但是 AndPermission 是支持 Application 传入的，那么就会有问题<br>比如我用户点击某个按钮导致后面的方法链中有可能连续调用多次的权限请求，那么就可能一次会弹出很多个框<br>这样我们就需要在 AndPermission 基础上进行改造，做出适合自己的动态权限库。我们自定义了默认的 onDenied (申请权限失败后的回调)。这样业务方就不需要关心失败后怎么提示了，只要关心成功后把之前的业务逻辑放到成功后这里执行就好了。权限申请失败提示框，用来启动一个 Activity 来 show 这个 Dialog，这样即使在前面传入的是 Application 的 context 也是没有问题了。对于多次请求权限导致多次弹框的问题，我们在 AndPermission 的基础上添加的请求队列，只有上一个权限请求处理完成后，才进行下一次权限请求，这样的话，即使用户一次行为的方法链过程中有很多次请求也不会多次弹框。然后当我用队列管理请求权限的时候，很怕某个权限阻塞了，或者出了未知异常，所以我对每次权限加入过程做了超时处理。以上几点是对于自己业务场景的几点考虑，进行的改造。<br>修改各个 SDK 和 App<br>U51AndPermission SDK 已经生成了，那接下来就是怎么集成到各个 SDK 和 App 中了。首先我们要知道，我们的 App 哪些地方有可能调用到了需要权限请求的 API。如果要人工去看效率实在是太低了。我们有 100 多个库，不可能把库看完且不出错。所以我们使用了之前同事的一个插件去扫描相关的 API，用来定位到可能出现权限的类在哪里，用的是哪个库。这样就提高了准确率和效率。<br>这个是我们插件需要搜索的 API<br><img src="/assets/tools/tools-sdk-03.png"><br>以下是部分搜索结果<br><img src="/assets/tools/tools-sdk-04.png"><br>按照这种方法，我们本需要处理 100 多个类库的，现在只有 20 个不到。一下子少了 4 倍的工作量，而且相对准确。<br>App 「必选权限」方案选择和问题处理<br>很多 App 启动的时候需要一些必选权限的，我们的 App 也是一样的，需要在 App 启动的时候验证一个必选权限。如果有必选权限，那么提示用户授权，如果不授权，那么就不能够继续使用我们的产品了。所以进入 App 主要功能前，需要一个前置的拦截。考虑过 2 种方案：<br>方案一、在 Applicaiton 的 onCreate 方法中去申请必选权限，让启动 Activity 等待 Application 中权限申请好了，再用消息(EventBus) 通知 启动 Activity 继续走下去的流程<br>方案二、新建一个新的 启动 Activity，在这个 Activity 中做申请权限，申请完后再去启动之前老的启动 Activity<br>和对接的业务方讨论，他们选择了第一种方案， 这么做的原因也是因为我们很多 SDK 的初始化代码在 Appliction 中，我们必须要在初始化 SDK 之前就应该把必要权限拿到。如果选择第二种，那么我们的初始化代码需要移动到新的启动 Activity 中，这样改动风险有点高。<br>接入代码如下：<br><img src="/assets/tools/tools-sdk-05.png"><br>对接完后有几个我们遇到的问题需要提下：<br>问题一、 因为在 App 启动的时候，如果没有必要权限，那么就会有弹框让用户设置权限，这时候用户点击 “设置”，就会跳转到 App 设置权限页面，当用户授权回来的时候，有部分手机会出现黑屏。导致黑屏的原因是 U51Permission 传入进去的 context 是 Application。如果是 Activity 就不会黑屏。所以解决方法是使用 Activity 去请求权限，回调方式是使用 Application.registerActivityLifecycleCallbacks，如下<br><img src="/assets/tools/tools-sdk-06.png"><br>问题二、 因为我们有些逻辑是放到前后台切换的代码里面的，前后切换的主要用主要用到 Application.registerActivityLifecycleCallbacks 这个回调，根据 Activity 的生命周期统计来切换前后台(前后台的切换逻辑是使用统计 activity 的个数来实现的)；所以 Application.registerActivityLifecycleCallbacks 这个操作应该是在 启动 Activity 之前就应该被注册。但是在申请必要权限的时候，我先启动 Activity 后再去注册这个 callback 的，所以导致启动 Activity 不在计算范围内，导致前后台的调用逻辑不准确，业务逻辑处理时机不对的问题。后来我们使用一个自己的 registerActivityLifecycleCallbacks，命名 MyActivityLifecycleCallbacks，在 Application 一开始启动的时候就注册了，然后把后面其他需要注册的地方放到 MyActivityLifecycleCallbacks 中，由它统一通知其他需要前后台的回调。<br>替换之前<br><img src="/assets/tools/tools-sdk-07.png"><br>替换之后<br><img src="/assets/tools/tools-sdk-08.png"><br>可以看出来替换后改动代码很少，而且所有的前后台切换都会统一到自己的 MyActivityLifecycleCallbacks 里面进行集中管理。<br>其他问题<br>还有其他相关问题，网上都能够找到，我就列举一下，大家自己注意一下就好了：<br>Android 7.0 相机相关问题<br>需要显示的注册广播<br>黑白名单限制， debug 包会有弹框提示，release包是没有的；但是这个需要注意，以后可能会有问题；也可以用扫描工具扫描一下这份名单<br>悬浮框实现的 LayoutParams.TYPE变动<br>android.os.FileUriExposedException 的异常，文件共享的限制和第 1 条一样<br>Sevices.startService 有些手机会奔溃，这个我们的 App 之前就处理过了<br>vivo 手机相机权限问题<br>NotificationManager 应该使用 builder 去创建，需要有个 channel， Android 8.0 的修改<br>荣耀 8 手机，scrollView 嵌套 recycleView 显示不全的问题<br>Toast 相关的问题<br>总结<br>以上就是本次升级需要的修改点了，剩下的还有测试、灰度和正式上线。从整个适配过程来看，这个需求其实不是很难，但是从改动的点来说，沟通协调能力要求还是很高的，会涉及到大部分客户端开发、测试和产品。<br>对于改造升级大范围的基础库，每个环节尽量多思考和团队成员多讨论，切记不要一个人闷头就是干。但也不要过多的担心，需要胆大心细，这样才能把事情推进下去。好了，target 28 的适配也马上要来了。<br>作者介绍<br>Mr.Jie，51信用卡客户端基础组 Android 开发工程师，目前主要负责客户端创新项目相关技术演进工作</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;由于各个应用市场要求，需要在 2019年5月1日 之前把 target 升级到 26。所以对本公司全网的 App 和可能影响到的相关 SDK 做一个升级。本文主要记录此次升级的过程和解决的一些问题。&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>android奇技淫巧 04 超简单实现Android自定义Toast</title>
    <link href="http://www.paulniu.com/2019/07/01/android-tools-04/"/>
    <id>http://www.paulniu.com/2019/07/01/android-tools-04/</id>
    <published>2019-07-01T12:44:10.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android自定义Toast</p><span id="more"></span><p>Bamboy的自定义Toast，（</p><p>以下称作“BToast”）<br>特点在于使用简单，<br>并且自带两种样式：<br>1)普通的文字样式；<br>2)带图标样式。<br>其中图标有√和×两种图标。</p><p>BToast还有另外一个特点就是：<br>系统自带Toast采用的是队列的方式，<br>等当前Toast消失后，<br>下一个Toast才能显示出来；<br>而BToast会把当前Toast顶掉，<br>直接显示最新的Toast。</p><p>简单三步，<br>我们现在就开始自定义一下吧！</p><p>（一）、Layout：<br>要自定义Toast，<br>首先我们需要一个XML布局。</p><p>但是在布局之前我们需要三个资源文件，<br>分别是背景、√和×。</p><p>背景可以用XML画出来：<br>toast_back.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">&quot;12dp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">&quot;#CC000000&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br></pre></td></tr></table></figure><p>√和×就最好用图片啦，<br>源码里面有这两张图片，<br>这里就不贴出来了。</p><p>现在就可以写布局了：<br>toast_layout.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:background</span>=<span class="string">&quot;@drawable/toast_back&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:gravity</span>=<span class="string">&quot;center_vertical&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:padding</span>=<span class="string">&quot;13dp&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/toast_img&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@drawable/toast_y&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_horizontal&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">&quot;5dp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/toast_text&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_horizontal&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginRight</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;#FFFFFF&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;17sp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>所需要的XML现在已经OK，<br>剩下的就是Java部分了。</p><p>（二）、Java：<br>写一个BToast类，继承Toast、<br>成员变量自身单例、<br>还有构造函数：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">BToast</span> <span class="keyword">extends</span> <span class="title">Toast</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Toast单例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> static <span class="type">BToast</span> toast;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public <span class="type">BToast</span>(<span class="type">Context</span> context) &#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了实现可以吧当前Toast顶下去的需求，<br>我们需要重写几个方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 隐藏当前Toast</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">cancelToast</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (toast != <span class="literal">null</span>) &#123;</span><br><span class="line">toast.cancel();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">cancel</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="built_in">super</span>.cancel();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">show</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="built_in">super</span>.show();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>现在我们就可以写我们的逻辑了，</p><p>首先当然是引入我们的布局咯：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化Toast</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param context 上下文</span></span><br><span class="line"><span class="comment">     * @param text    显示的文本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> static void init<span class="constructor">Toast(Context <span class="params">context</span>, CharSequence <span class="params">text</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">cancel<span class="constructor">Toast()</span>;</span><br><span class="line"></span><br><span class="line">toast = <span class="keyword">new</span> <span class="constructor">BToast(<span class="params">context</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取LayoutInflater对象</span></span><br><span class="line">LayoutInflater inflater = </span><br><span class="line">    (LayoutInflater) context.get<span class="constructor">SystemService(Context.LAYOUT_INFLATER_SERVICE)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由layout文件创建一个View对象</span></span><br><span class="line">View layout = inflater.inflate(<span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>layout.toast_layout, null);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 吐司上的图片</span></span><br><span class="line">toast_img = (ImageView) layout.find<span class="constructor">ViewById(R.<span class="params">id</span>.<span class="params">toast_img</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 吐司上的文字</span></span><br><span class="line">TextView toast_text = (TextView) layout.find<span class="constructor">ViewById(R.<span class="params">id</span>.<span class="params">toast_text</span>)</span>;</span><br><span class="line">toast_text.set<span class="constructor">Text(<span class="params">text</span>)</span>;</span><br><span class="line">toast.set<span class="constructor">View(<span class="params">layout</span>)</span>;</span><br><span class="line">toast.set<span class="constructor">Gravity(Gravity.CENTER, 0, 70)</span>;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>一切准备工作都已就绪，<br>接下来就是显示Toast的方法了：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图标状态 不显示图标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> static final <span class="built_in">int</span> TYPE_HIDE = -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图标状态 显示√</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> static final <span class="built_in">int</span> TYPE_TRUE = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图标状态 显示×</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> static final <span class="built_in">int</span> TYPE_FALSE = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显示Toast</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param context 上下文</span></span><br><span class="line"><span class="comment">     * @param text    显示的文本</span></span><br><span class="line"><span class="comment">     * @param time    显示时长</span></span><br><span class="line"><span class="comment">     * @param imgType 图标状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> static void show<span class="constructor">Toast(Context <span class="params">context</span>, CharSequence <span class="params">text</span>, <span class="params">int</span> <span class="params">time</span>, <span class="params">int</span> <span class="params">imgType</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化一个新的Toast对象</span></span><br><span class="line">        init<span class="constructor">Toast(<span class="params">context</span>, <span class="params">text</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置显示时长</span></span><br><span class="line">        <span class="keyword">if</span> (time<span class="operator"> == </span>Toast.LENGTH_LONG) &#123;</span><br><span class="line">toast.set<span class="constructor">Duration(Toast.LENGTH_LONG)</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">toast.set<span class="constructor">Duration(Toast.LENGTH_SHORT)</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断图标是否该显示，显示√还是×</span></span><br><span class="line">        <span class="keyword">if</span> (imgType<span class="operator"> == </span>TYPE_HIDE) &#123;</span><br><span class="line">toast_img.set<span class="constructor">Visibility(View.GONE)</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (imgType<span class="operator"> == </span>TYPE_TRUE) &#123;</span><br><span class="line">    toast_img.set<span class="constructor">BackgroundResource(R.<span class="params">drawable</span>.<span class="params">toast_y</span>)</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    toast_img.set<span class="constructor">BackgroundResource(R.<span class="params">drawable</span>.<span class="params">toast_n</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">toast_img.set<span class="constructor">Visibility(View.VISIBLE)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动画</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">ObjectAnimator</span>.</span></span><span class="keyword">of</span><span class="constructor">Float(<span class="params">toast_img</span>, <span class="string">&quot;rotationY&quot;</span>, 0, 360)</span>.set<span class="constructor">Duration(1700)</span>.start<span class="literal">()</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 显示Toast</span></span><br><span class="line">        toast.show<span class="literal">()</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>就是这么简单。</p><p>细心的朋友可能发现了，<br>这个方法是private的，<br>先别产生疑虑，<br>听我慢慢道来。</p><p>写到这里，<br>其实你可以直接把这个方法改成Public，<br>这样的话现在就已经大功告成了，<br>但是这样的话与原生Toast使用起来有什么区别？<br>还是需要写那么长一串参数，<br>唯一的好处就是不用写.show()了。</p><p>咱们现在做的事情叫“自定义”，<br>“自定义”的意思就是我们自己定义规则，<br>既然如此，<br>我们何不提升一下“用户体验”呢？<br>何况这个“用户”还是我们自己。</p><p>废话不多说，<br>我们开始进行最后一步。</p><p>(三）、升华：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 显示一个纯文本吐司</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * @param context 上下文</span></span><br><span class="line"><span class="comment">    * @param text    显示的文本</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   public static void show<span class="constructor">Text(Context <span class="params">context</span>, CharSequence <span class="params">text</span>)</span> &#123;</span><br><span class="line">       show<span class="constructor">Toast(<span class="params">context</span>, <span class="params">text</span>, Toast.LENGTH_SHORT, TYPE_HIDE)</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 显示一个带图标的吐司</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * @param context   上下文</span></span><br><span class="line"><span class="comment">    * @param text      显示的文本</span></span><br><span class="line"><span class="comment">    * @param isSucceed 显示【对号图标】还是【叉号图标】</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   public static void show<span class="constructor">Text(Context <span class="params">context</span>, CharSequence <span class="params">text</span>, <span class="params">boolean</span> <span class="params">isSucceed</span>)</span> &#123;</span><br><span class="line">       show<span class="constructor">Toast(<span class="params">context</span>, <span class="params">text</span>, Toast.LENGTH_SHORT, <span class="params">isSucceed</span> ? TYPE_TRUE : TYPE_FALSE)</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 显示一个纯文本吐司</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * @param context 上下文</span></span><br><span class="line"><span class="comment">    * @param text    显示的文本</span></span><br><span class="line"><span class="comment">    * @param time    持续的时间</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   public static void show<span class="constructor">Text(Context <span class="params">context</span>, CharSequence <span class="params">text</span>, <span class="params">int</span> <span class="params">time</span>)</span> &#123;</span><br><span class="line">       show<span class="constructor">Toast(<span class="params">context</span>, <span class="params">text</span>, <span class="params">time</span>, TYPE_HIDE)</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 显示一个带图标的吐司</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * @param context   上下文</span></span><br><span class="line"><span class="comment">    * @param text      显示的文本</span></span><br><span class="line"><span class="comment">    * @param time      持续的时间</span></span><br><span class="line"><span class="comment">    * @param isSucceed 显示【对号图标】还是【叉号图标】</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   public static void show<span class="constructor">Text(Context <span class="params">context</span>, CharSequence <span class="params">text</span>, <span class="params">int</span> <span class="params">time</span>, <span class="params">boolean</span> <span class="params">isSucceed</span>)</span> &#123;</span><br><span class="line">       show<span class="constructor">Toast(<span class="params">context</span>, <span class="params">text</span>, <span class="params">time</span>, <span class="params">isSucceed</span> ? TYPE_TRUE : TYPE_FALSE)</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>简简单单几个方法，<br>用户体验瞬间直线飙升，<br>来看一下使用的时候：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public void click(View view) &#123;</span><br><span class="line">        switch (view.get<span class="constructor">Id()</span>) &#123;</span><br><span class="line">case <span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>id.btn_text:</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">BToast</span>.</span></span>show<span class="constructor">Text(<span class="params">this</span>, <span class="string">&quot;简单提示&quot;</span>)</span>;</span><br><span class="line">    break;</span><br><span class="line"></span><br><span class="line">case <span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>id.btn_text_true:</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">BToast</span>.</span></span>show<span class="constructor">Text(<span class="params">this</span>, <span class="string">&quot;简单提示 正确图标&quot;</span>, <span class="params">true</span>)</span>;</span><br><span class="line">    break;</span><br><span class="line"></span><br><span class="line">case <span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>id.btn_text_false:</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">BToast</span>.</span></span>show<span class="constructor">Text(<span class="params">this</span>, <span class="string">&quot;简单提示 错误图标&quot;</span>, <span class="params">false</span>)</span>;</span><br><span class="line">    break;</span><br><span class="line"></span><br><span class="line">case <span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>id.btn_text_long:</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">BToast</span>.</span></span>show<span class="constructor">Text(<span class="params">this</span>, <span class="string">&quot;简单提示 长~ &quot;</span>, Toast.LENGTH_LONG)</span>;</span><br><span class="line">    break;</span><br><span class="line"></span><br><span class="line">case <span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>id.btn_text_true_long:</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">BToast</span>.</span></span>show<span class="constructor">Text(<span class="params">this</span>, <span class="string">&quot;简单提示 正确图标 长~ &quot;</span>, Toast.LENGTH_LONG, <span class="params">true</span>)</span>;</span><br><span class="line">    break;</span><br><span class="line"></span><br><span class="line">case <span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>id.btn_text_false_long:</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">BToast</span>.</span></span>show<span class="constructor">Text(<span class="params">this</span>, <span class="string">&quot;简单提示 错误图标 长~ &quot;</span>, Toast.LENGTH_LONG, <span class="params">false</span>)</span>;</span><br><span class="line">    break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Android自定义Toast&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>重拾android路(二十七) Notification</title>
    <link href="http://www.paulniu.com/2019/06/16/android-28-notification/"/>
    <id>http://www.paulniu.com/2019/06/16/android-28-notification/</id>
    <published>2019-06-16T11:44:50.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近公司要求把IM这一模块重写一遍，然后使用MQTT的方式实现消息的收发功能。这个内容我后面在总结，今天先看一下另外一个模块。这个内容的需求是这样的，要求在MQTT收到消息之后，在通知栏显示消息内容，其实就是需要有一个通知栏可以显示IM消息。所以趁着这个时间，再把Notification的知识点总结一下。<br>这里我觉得代码上的实现总是比较简单，我会在最后把代码的思路交代一下，而前面的篇幅主要用来描述，Notification的机制</p><span id="more"></span><h1 id="什么是Notification机制"><a href="#什么是Notification机制" class="headerlink" title="什么是Notification机制"></a>什么是Notification机制</h1><p>Notification，中文名翻译为通知，每个 app 可以自定义通知的样式和内容等，它会显示在系统的通知栏等区域。用户可以打开抽屉式通知栏查看通知的详细信息。在实际生活中，Android Notification 机制有很广泛的应用，例如 IM app 的新消息通知，资讯 app 的新闻推送等等</p><blockquote><p>源码分析的时候主要是以Android7.0为主</p></blockquote><h1 id="Notification的发送逻辑"><a href="#Notification的发送逻辑" class="headerlink" title="Notification的发送逻辑"></a>Notification的发送逻辑</h1><p>一般来说，如果我们自己的 app 想发送一条新的 Notification，可以参照以下代码</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">NotificationCompat.Builder mBuilder =</span><br><span class="line">       <span class="keyword">new</span> <span class="type">NotificationCompat</span>.Builder(<span class="built_in">this</span>)</span><br><span class="line">       .setSmallIcon(R.drawable.notification_icon)</span><br><span class="line">       .setWhen(System.currentTimeMillis())</span><br><span class="line">       .setContentTitle(<span class="string">&quot;Test Notification Title&quot;</span>)</span><br><span class="line">       .setContentText(<span class="string">&quot;Test Notification Content!&quot;</span>);</span><br><span class="line">Intent resultIntent = <span class="keyword">new</span> <span class="type">Intent</span>(<span class="built_in">this</span>, ResultActivity.class);</span><br><span class="line"></span><br><span class="line">PendingIntent contentIntent =</span><br><span class="line">       PendingIntent.getActivity(</span><br><span class="line">           <span class="built_in">this</span>, </span><br><span class="line">           <span class="number">0</span>, </span><br><span class="line">           resultIntent, </span><br><span class="line">           PendingIntent.FLAG_UPDATE_CURRENT</span><br><span class="line">       );</span><br><span class="line">mBuilder.setContentIntent(resultPendingIntent);</span><br><span class="line">NotificationManager mNotificationManager =</span><br><span class="line">   (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line"><span class="comment">// mId allows you to update the notification later on.</span></span><br><span class="line">mNotificationManager.notify(mId, mBuilder.build());</span><br></pre></td></tr></table></figure><p>可以看到，我们通过 NotificationCompat.Builder 新建了一个 Notification 对象，最后通过 NotificationManager#notify() 方法将 Notification 发送出去</p><h1 id="NotificationManager-notify"><a href="#NotificationManager-notify" class="headerlink" title="NotificationManager#notify()"></a>NotificationManager#notify()</h1><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> notify(<span class="built_in">int</span> id, Notification notification)</span><br><span class="line">&#123;</span><br><span class="line">   notify(<span class="keyword">null</span>, id, notification);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略部分注释</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> notify(<span class="keyword">String</span> tag, <span class="built_in">int</span> id, Notification notification)</span><br><span class="line">&#123;</span><br><span class="line">   notifyAsUser(tag, id, notification, <span class="keyword">new</span> UserHandle(UserHandle.myUserId()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @hide</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> notifyAsUser(<span class="keyword">String</span> tag, <span class="built_in">int</span> id, Notification notification, UserHandle user)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">int</span>[] idOut = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">1</span>];</span><br><span class="line">   INotificationManager service = getService();</span><br><span class="line">   <span class="keyword">String</span> pkg = mContext.getPackageName();</span><br><span class="line">   <span class="comment">// Fix the notification as best we can.</span></span><br><span class="line">   Notification.addFieldsFromContext(mContext, notification);</span><br><span class="line">   <span class="keyword">if</span> (notification.sound != <span class="keyword">null</span>) &#123;</span><br><span class="line">       notification.sound = notification.sound.getCanonicalUri();</span><br><span class="line">       <span class="keyword">if</span> (StrictMode.vmFileUriExposureEnabled()) &#123;</span><br><span class="line">           notification.sound.checkFileUriExposed(<span class="string">&quot;Notification.sound&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   fixLegacySmallIcon(notification, pkg);</span><br><span class="line">   <span class="keyword">if</span> (mContext.getApplicationInfo().targetSdkVersion &gt; Build.VERSION_CODES.LOLLIPOP_MR1) &#123;</span><br><span class="line">       <span class="keyword">if</span> (notification.getSmallIcon() == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Invalid notification (no valid small icon): &quot;</span></span><br><span class="line">                   + notification);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (localLOGV) Log.v(TAG, pkg + <span class="string">&quot;: notify(&quot;</span> + id + <span class="string">&quot;, &quot;</span> + notification + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">   <span class="keyword">final</span> Notification <span class="built_in">copy</span> = Builder.maybeCloneStrippedForDelivery(notification);</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="comment">// !!!</span></span><br><span class="line">       service.enqueueNotificationWithTag(pkg, mContext.getOpPackageName(), tag, id,</span><br><span class="line">               <span class="built_in">copy</span>, idOut, user.getIdentifier());</span><br><span class="line">       <span class="keyword">if</span> (localLOGV &amp;&amp; id != idOut[<span class="number">0</span>]) &#123;</span><br><span class="line">           Log.v(TAG, <span class="string">&quot;notify: id corrupted: sent &quot;</span> + id + <span class="string">&quot;, got back &quot;</span> + idOut[<span class="number">0</span>]);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">       <span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，到最后会调用 service.enqueueNotificationWithTag() 方法，这里的是 service 是 INotificationManager 接口。如果熟悉 AIDL 等系统相关运行机制的话，就可以看出这里是代理类调用了代理接口的方法，实际方法实现是在 NotificationManagerService 当中</p><h1 id="NotificationManagerService-enqueueNotificationWithTag"><a href="#NotificationManagerService-enqueueNotificationWithTag" class="headerlink" title="NotificationManagerService#enqueueNotificationWithTag()"></a>NotificationManagerService#enqueueNotificationWithTag()</h1><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> enqueueNotificationWithTag(<span class="keyword">String</span> pkg, <span class="keyword">String</span> opPkg, <span class="keyword">String</span> tag, <span class="built_in">int</span> id,</span><br><span class="line">        Notification notification, <span class="built_in">int</span>[] idOut, <span class="built_in">int</span> userId) <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">   enqueueNotificationInternal(pkg, opPkg, Binder.getCallingUid(),</span><br><span class="line">           Binder.getCallingPid(), tag, id, notification, idOut, userId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> enqueueNotificationInternal(<span class="keyword">final</span> <span class="keyword">String</span> pkg, <span class="keyword">final</span> <span class="keyword">String</span> opPkg, <span class="keyword">final</span> <span class="built_in">int</span> callingUid,</span><br><span class="line">       <span class="keyword">final</span> <span class="built_in">int</span> callingPid, <span class="keyword">final</span> <span class="keyword">String</span> tag, <span class="keyword">final</span> <span class="built_in">int</span> id, <span class="keyword">final</span> Notification notification,</span><br><span class="line">       <span class="built_in">int</span>[] idOut, <span class="built_in">int</span> incomingUserId) &#123;</span><br><span class="line">   <span class="keyword">if</span> (DBG) &#123;</span><br><span class="line">       Slog.v(TAG, <span class="string">&quot;enqueueNotificationInternal: pkg=&quot;</span> + pkg + <span class="string">&quot; id=&quot;</span> + id</span><br><span class="line">            + <span class="string">&quot; notification=&quot;</span> + notification);</span><br><span class="line">   &#125;</span><br><span class="line">   checkCallerIsSystemOrSameApp(pkg);</span><br><span class="line">   <span class="keyword">final</span> <span class="built_in">boolean</span> isSystemNotification = isUidSystem(callingUid) || (<span class="string">&quot;android&quot;</span>.equals(pkg));</span><br><span class="line">   <span class="keyword">final</span> <span class="built_in">boolean</span> isNotificationFromListener = mListeners.isListenerPackage(pkg);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">final</span> <span class="built_in">int</span> userId = ActivityManager.handleIncomingUser(callingPid,</span><br><span class="line">           callingUid, incomingUserId, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="string">&quot;enqueueNotification&quot;</span>, pkg);</span><br><span class="line">   <span class="keyword">final</span> UserHandle user = <span class="keyword">new</span> UserHandle(userId);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Fix the notification as best we can.</span></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="keyword">final</span> ApplicationInfo ai = getContext().getPackageManager().getApplicationInfoAsUser(</span><br><span class="line">               pkg, PackageManager.MATCH_DEBUG_TRIAGED_MISSING,</span><br><span class="line">               (userId == UserHandle.USER_ALL) ? UserHandle.USER_SYSTEM : userId);</span><br><span class="line">       Notification.addFieldsFromContext(ai, userId, notification);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (NameNotFoundException e) &#123;</span><br><span class="line">       Slog.e(TAG, <span class="string">&quot;Cannot create a context for sending app&quot;</span>, e);</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   mUsageStats.registerEnqueuedByApp(pkg);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (pkg == <span class="keyword">null</span> || notification == <span class="keyword">null</span>) &#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;null not allowed: pkg=&quot;</span> + pkg</span><br><span class="line">            + <span class="string">&quot; id=&quot;</span> + id + <span class="string">&quot; notification=&quot;</span> + notification);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">final</span> StatusBarNotification n = <span class="keyword">new</span> StatusBarNotification(</span><br><span class="line">           pkg, opPkg, id, tag, callingUid, callingPid, <span class="number">0</span>, notification,</span><br><span class="line">           user);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Limit the number of notifications that any given package except the android</span></span><br><span class="line">   <span class="comment">// package or a registered listener can enqueue.  Prevents DOS attacks and deals with leaks.</span></span><br><span class="line">   <span class="keyword">if</span> (!isSystemNotification &amp;&amp; !isNotificationFromListener) &#123;</span><br><span class="line">       <span class="keyword">synchronized</span> (mNotificationList) &#123;</span><br><span class="line">           <span class="keyword">if</span>(mNotificationsByKey.<span class="built_in">get</span>(n.getKey()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="comment">// this is an update, rate limit updates only</span></span><br><span class="line">               <span class="keyword">final</span> <span class="built_in">float</span> appEnqueueRate = mUsageStats.getAppEnqueueRate(pkg);</span><br><span class="line">               <span class="keyword">if</span> (appEnqueueRate &gt; mMaxPackageEnqueueRate) &#123;</span><br><span class="line">                   mUsageStats.registerOverRateQuota(pkg);</span><br><span class="line">                   <span class="keyword">final</span> <span class="keyword">long</span> now = SystemClock.elapsedRealtime();</span><br><span class="line">                   <span class="keyword">if</span> ((now - mLastOverRateLogTime) &gt; MIN_PACKAGE_OVERRATE_LOG_INTERVAL) &#123;</span><br><span class="line">                       Slog.e(TAG, <span class="string">&quot;Package enqueue rate is &quot;</span> + appEnqueueRate</span><br><span class="line">                               + <span class="string">&quot;. Shedding events. package=&quot;</span> + pkg);</span><br><span class="line">                           mLastOverRateLogTime = now;</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="keyword">return</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">final</span> <span class="built_in">int</span> N = mNotificationList.<span class="built_in">size</span>();</span><br><span class="line">           <span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">               <span class="keyword">final</span> NotificationRecord r = mNotificationList.<span class="built_in">get</span>(i);</span><br><span class="line">               <span class="keyword">if</span> (r.sbn.getPackageName().equals(pkg) &amp;&amp; r.sbn.getUserId() == userId) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (r.sbn.getId() == id &amp;&amp; TextUtils.equals(r.sbn.getTag(), tag)) &#123;</span><br><span class="line">                       <span class="keyword">break</span>;  <span class="comment">// Allow updating existing notification</span></span><br><span class="line">                   &#125;</span><br><span class="line">                   count++;</span><br><span class="line">                   <span class="keyword">if</span> (count &gt;= MAX_PACKAGE_NOTIFICATIONS) &#123;</span><br><span class="line">                       mUsageStats.registerOverCountQuota(pkg);</span><br><span class="line">                       Slog.e(TAG, <span class="string">&quot;Package has already posted &quot;</span> + count</span><br><span class="line">                               + <span class="string">&quot; notifications.  Not showing more.  package=&quot;</span> + pkg);</span><br><span class="line">                       <span class="keyword">return</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Whitelist pending intents.</span></span><br><span class="line">   <span class="keyword">if</span> (notification.allPendingIntents != <span class="keyword">null</span>) &#123;</span><br><span class="line">       <span class="keyword">final</span> <span class="built_in">int</span> intentCount = notification.allPendingIntents.<span class="built_in">size</span>();</span><br><span class="line">       <span class="keyword">if</span> (intentCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">final</span> ActivityManagerInternal am = LocalServices</span><br><span class="line">                   .getService(ActivityManagerInternal.class);</span><br><span class="line">           <span class="keyword">final</span> <span class="keyword">long</span> duration = LocalServices.getService(</span><br><span class="line">                   DeviceIdleController.LocalService.class).getNotificationWhitelistDuration();</span><br><span class="line">           <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; intentCount; i++) &#123;</span><br><span class="line">               PendingIntent pendingIntent = notification.allPendingIntents.valueAt(i);</span><br><span class="line">               <span class="keyword">if</span> (pendingIntent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   am.setPendingIntentWhitelistDuration(pendingIntent.getTarget(), duration);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Sanitize inputs</span></span><br><span class="line">   notification.priority = clamp(notification.priority, Notification.PRIORITY_MIN,</span><br><span class="line">           Notification.PRIORITY_MAX);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// setup local book-keeping</span></span><br><span class="line">   <span class="keyword">final</span> NotificationRecord r = <span class="keyword">new</span> NotificationRecord(getContext(), n);</span><br><span class="line">   mHandler.post(<span class="keyword">new</span> EnqueueNotificationRunnable(userId, r));</span><br><span class="line"></span><br><span class="line">   idOut[<span class="number">0</span>] = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里代码比较多，但通过注释可以清晰地理清整个逻辑：</p><ol><li>首先检查通知发起者是系统进程或者是查看发起者发送的是否是同个 app 的通知信息，否则抛出异常；</li><li>除了系统的通知和已注册的监听器允许入队列外，其他 app 的通知都会限制通知数上限和通知频率上限；</li><li>将 notification 的 PendingIntent 加入到白名单；</li><li>将之前的 notification 进一步封装为 StatusBarNotification 和 NotificationRecord，最后封装到一个异步线程 EnqueueNotificationRunnable 中</li></ol><p>这里有一个点，就是 mHandler，涉及到切换线程，我们先跟踪一下 mHandler 是在哪个线程被创建。</p><p>mHandler 是 WorkerHandler 类的一个实例，在 NotificationManagerService#onStart() 方法中被创建，而 NotificationManagerService 是系统 Service，所以 EnqueueNotificationRunnable 的 run 方法会运行在 system_server 的主线程</p><h1 id="NotificationManagerService-EnqueueNotificationRunnable-run"><a href="#NotificationManagerService-EnqueueNotificationRunnable-run" class="headerlink" title="NotificationManagerService.EnqueueNotificationRunnable#run()"></a>NotificationManagerService.EnqueueNotificationRunnable#run()</h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void run<span class="literal">()</span> &#123;</span><br><span class="line">   synchronized(mNotificationList) &#123;</span><br><span class="line">       <span class="comment">// 省略代码</span></span><br><span class="line">       <span class="keyword">if</span> (notification.get<span class="constructor">SmallIcon()</span> != null) &#123;</span><br><span class="line">           StatusBarNotification oldSbn = (old != null) ? old.sbn : null;</span><br><span class="line">           mListeners.notify<span class="constructor">PostedLocked(<span class="params">n</span>, <span class="params">oldSbn</span>)</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="module-access"><span class="module"><span class="identifier">Slog</span>.</span></span>e(TAG, <span class="string">&quot;Not posting notification without small icon: &quot;</span> + notification);</span><br><span class="line">           <span class="keyword">if</span> (old != null<span class="operator"> &amp;&amp; </span>!old.isCanceled) &#123;</span><br><span class="line">               mListeners.notify<span class="constructor">RemovedLocked(<span class="params">n</span>)</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// ATTENTION: in a future release we will bail out here</span></span><br><span class="line">           <span class="comment">// so that we do not play sounds, show lights, etc. for invalid</span></span><br><span class="line">           <span class="comment">// notifications</span></span><br><span class="line">           <span class="module-access"><span class="module"><span class="identifier">Slog</span>.</span></span>e(TAG, <span class="string">&quot;WARNING: In a future release this will crash the app: &quot;</span> + n.get<span class="constructor">PackageName()</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       buzz<span class="constructor">BeepBlinkLocked(<span class="params">r</span>)</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>省略的代码主要的工作是提取 notification 相关的属性，同时通知 notification ranking service，有新的 notification 进来，然后对所有 notification 进行重新排序；</li><li>然后到最后会调用 mListeners.notifyPostedLocked() 方法。这里 mListeners 是 NotificationListeners 类的一个实例</li></ol><h1 id="NotificationManagerService-NotificationListeners-notifyPostedLocked-gt-NotificationManagerService-NotificationListeners-notifyPosted"><a href="#NotificationManagerService-NotificationListeners-notifyPostedLocked-gt-NotificationManagerService-NotificationListeners-notifyPosted" class="headerlink" title="NotificationManagerService.NotificationListeners#notifyPostedLocked()-&gt; NotificationManagerService.NotificationListeners#notifyPosted()"></a>NotificationManagerService.NotificationListeners#notifyPostedLocked()-&gt; NotificationManagerService.NotificationListeners#notifyPosted()</h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">public void notify<span class="constructor">PostedLocked(StatusBarNotification <span class="params">sbn</span>, StatusBarNotification <span class="params">oldSbn</span>)</span> &#123;</span><br><span class="line">   <span class="comment">// Lazily initialized snapshots of the notification.</span></span><br><span class="line">   TrimCache trimCache = <span class="keyword">new</span> <span class="constructor">TrimCache(<span class="params">sbn</span>)</span>;</span><br><span class="line">   <span class="keyword">for</span> (final ManagedServiceInfo info: mServices) &#123;</span><br><span class="line">       boolean sbnVisible = is<span class="constructor">VisibleToListener(<span class="params">sbn</span>, <span class="params">info</span>)</span>;</span><br><span class="line">       boolean oldSbnVisible = oldSbn != null ? is<span class="constructor">VisibleToListener(<span class="params">oldSbn</span>, <span class="params">info</span>)</span> : <span class="literal">false</span>;</span><br><span class="line">       <span class="comment">// This notification hasn&#x27;t been and still isn&#x27;t visible -&gt; ignore.</span></span><br><span class="line">       <span class="keyword">if</span> (!oldSbnVisible<span class="operator"> &amp;&amp; </span>!sbnVisible) &#123;</span><br><span class="line">           continue;</span><br><span class="line">       &#125;</span><br><span class="line">       final NotificationRankingUpdate update = make<span class="constructor">RankingUpdateLocked(<span class="params">info</span>)</span>;</span><br><span class="line">       <span class="comment">// This notification became invisible -&gt; remove the old one.</span></span><br><span class="line">       <span class="keyword">if</span> (oldSbnVisible<span class="operator"> &amp;&amp; </span>!sbnVisible) &#123;</span><br><span class="line">           final StatusBarNotification oldSbnLightClone = oldSbn.clone<span class="constructor">Light()</span>;</span><br><span class="line">           mHandler.post(<span class="keyword">new</span> <span class="constructor">Runnable()</span> &#123;</span><br><span class="line">               @Override</span><br><span class="line">               public void run<span class="literal">()</span> &#123;</span><br><span class="line">                   notify<span class="constructor">Removed(<span class="params">info</span>, <span class="params">oldSbnLightClone</span>, <span class="params">update</span>)</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">           continue;</span><br><span class="line">       &#125;</span><br><span class="line">       final StatusBarNotification sbnToPost = trimCache.<span class="constructor">ForListener(<span class="params">info</span>)</span>;</span><br><span class="line">       mHandler.post(<span class="keyword">new</span> <span class="constructor">Runnable()</span> &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void run<span class="literal">()</span> &#123;</span><br><span class="line">               notify<span class="constructor">Posted(<span class="params">info</span>, <span class="params">sbnToPost</span>, <span class="params">update</span>)</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> void notify<span class="constructor">Posted(<span class="params">final</span> ManagedServiceInfo <span class="params">info</span>, <span class="params">final</span> StatusBarNotification <span class="params">sbn</span>, NotificationRankingUpdate <span class="params">rankingUpdate</span>)</span> &#123;</span><br><span class="line">   final INotificationListener listener = (INotificationListener) info.service;</span><br><span class="line">   StatusBarNotificationHolder sbnHolder = <span class="keyword">new</span> <span class="constructor">StatusBarNotificationHolder(<span class="params">sbn</span>)</span>;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       listener.on<span class="constructor">NotificationPosted(<span class="params">sbnHolder</span>, <span class="params">rankingUpdate</span>)</span>;</span><br><span class="line">   &#125; catch (RemoteException ex) &#123;</span><br><span class="line">       <span class="module-access"><span class="module"><span class="identifier">Log</span>.</span></span>e(TAG, <span class="string">&quot;unable to notify listener (posted): &quot;</span> + listener, ex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>调用到最后会执行 listener.onNotificationPosted() 方法。通过全局搜索得知，listener 类型是 NotificationListenerService.NotificationListenerWrapper 的代理对象</p><h1 id="NotificationListenerService-NotificationListenerWrapper-onNotificationPosted"><a href="#NotificationListenerService-NotificationListenerWrapper-onNotificationPosted" class="headerlink" title="NotificationListenerService.NotificationListenerWrapper#onNotificationPosted()"></a>NotificationListenerService.NotificationListenerWrapper#onNotificationPosted()</h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public void on<span class="constructor">NotificationPosted(IStatusBarNotificationHolder <span class="params">sbnHolder</span>, NotificationRankingUpdate <span class="params">update</span>)</span> &#123;</span><br><span class="line">   StatusBarNotification sbn;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       sbn = sbnHolder.get<span class="literal">()</span>;</span><br><span class="line">   &#125; catch (RemoteException e) &#123;</span><br><span class="line">       <span class="module-access"><span class="module"><span class="identifier">Log</span>.</span></span>w(TAG, <span class="string">&quot;onNotificationPosted: Error receiving StatusBarNotification&quot;</span>, e);</span><br><span class="line">       return;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="comment">// convert icon metadata to legacy format for older clients</span></span><br><span class="line">       create<span class="constructor">LegacyIconExtras(<span class="params">sbn</span>.<span class="params">getNotification</span>()</span>);</span><br><span class="line">       maybe<span class="constructor">PopulateRemoteViews(<span class="params">sbn</span>.<span class="params">getNotification</span>()</span>);</span><br><span class="line">   &#125; catch (IllegalArgumentException e) &#123;</span><br><span class="line">       <span class="comment">// warn and drop corrupt notification</span></span><br><span class="line">       <span class="module-access"><span class="module"><span class="identifier">Log</span>.</span></span>w(TAG, <span class="string">&quot;onNotificationPosted: can&#x27;t rebuild notification from &quot;</span> + sbn.get<span class="constructor">PackageName()</span>);</span><br><span class="line">       sbn = null;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// protect subclass from concurrent modifications of (@link mNotificationKeys&#125;.</span></span><br><span class="line">   synchronized(mLock) &#123;</span><br><span class="line">       apply<span class="constructor">UpdateLocked(<span class="params">update</span>)</span>;</span><br><span class="line">       <span class="keyword">if</span> (sbn != null) &#123;</span><br><span class="line">           SomeArgs args = <span class="module-access"><span class="module"><span class="identifier">SomeArgs</span>.</span></span>obtain<span class="literal">()</span>;</span><br><span class="line">           args.arg1 = sbn;</span><br><span class="line">           args.arg2 = mRankingMap;</span><br><span class="line">           mHandler.obtain<span class="constructor">Message(MyHandler.MSG_ON_NOTIFICATION_POSTED, <span class="params">args</span>)</span>.send<span class="constructor">ToTarget()</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">// still pass along the ranking map, it may contain other information</span></span><br><span class="line">           mHandler.obtain<span class="constructor">Message(MyHandler.MSG_ON_NOTIFICATION_RANKING_UPDATE, <span class="params">mRankingMap</span>)</span>.send<span class="constructor">ToTarget()</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里在一开始会从 sbnHolder 中获取到 sbn 对象，sbn 隶属于 StatusBarNotificationHolder 类，继承于 IStatusBarNotificationHolder.Stub 对象。注意到这里捕获了一个 RemoteException，猜测涉及到跨进程调用，但我们不知道这段代码是在哪个进程中执行的，所以在这里暂停跟踪代码。</p><p>笔者之前是通过向系统发送通知的方式跟踪源码，发现走不通。故个人尝试从另一个角度入手，即系统接收我们发过来的通知并显示到通知栏这个方式入手跟踪代码</p><h1 id="系统如何显示-Notification，即对于系统端来说，Notification-的接收逻辑"><a href="#系统如何显示-Notification，即对于系统端来说，Notification-的接收逻辑" class="headerlink" title="系统如何显示 Notification，即对于系统端来说，Notification 的接收逻辑"></a>系统如何显示 Notification，即对于系统端来说，Notification 的接收逻辑</h1><p>系统显示 Notification 的过程，猜测是在 PhoneStatusBar.java 中，因为系统启动的过程中，会启动 SystemUI 进程，初始化整个 Android 显示的界面，包括系统通知栏。</p><h2 id="PhoneStatusBar-start-gt-BaseStatusBar-start"><a href="#PhoneStatusBar-start-gt-BaseStatusBar-start" class="headerlink" title="PhoneStatusBar#start() -&gt; BaseStatusBar#start()"></a>PhoneStatusBar#start() -&gt; BaseStatusBar#start()</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">start</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">   <span class="comment">// 省略代码</span></span><br><span class="line">   <span class="comment">// Set up the initial notification state.</span></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       mNotificationListener.registerAsSystemService(mContext,</span><br><span class="line">               <span class="keyword">new</span> ComponentName(mContext.getPackageName(), getClass().getCanonicalName()),</span><br><span class="line">               UserHandle.USER_ALL);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">       Log.e(TAG, <span class="string">&quot;Unable to register notification listener&quot;</span>, e);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 省略代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码中，会调用 NotificationListenerService#registerAsSystemService() 方法，涉及到我们之前跟踪代码的类。我们继续跟进去看一下。</p><h2 id="NotificationListenerService-registerAsSystemService"><a href="#NotificationListenerService-registerAsSystemService" class="headerlink" title="NotificationListenerService#registerAsSystemService()"></a>NotificationListenerService#registerAsSystemService()</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">registerAsSystemService</span><span class="params">(Context context, ComponentName componentName,</span></span></span><br><span class="line"><span class="params"><span class="function">       <span class="keyword">int</span> currentUser)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (mWrapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">       mWrapper = <span class="keyword">new</span> NotificationListenerWrapper();</span><br><span class="line">   &#125;</span><br><span class="line">   mSystemContext = context;</span><br><span class="line">   INotificationManager noMan = getNotificationInterface();</span><br><span class="line">   mHandler = <span class="keyword">new</span> MyHandler(context.getMainLooper());</span><br><span class="line">   mCurrentUser = currentUser;</span><br><span class="line">   noMan.registerListener(mWrapper, componentName, currentUser);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里会初始化一个 NotificationListenerWrapper 和 mHandler。由于这是在 SystemUI 进程中去调用此方法将 NotificationListenerService 注册为系统服务，所以在前面分析的那里：</p><p>NotificationListenerService.NotificationListenerWrapper#onNotificationPosted()，这段代码是运行在 SystemUI 进程，而 mHandler 则是运行在 SystemUI 主线程上的 Handler。所以，onNotificationPosted() 是运行在 SystemUI 进程中，它通过 sbn 从 system_server 进程中获取到 sbn 对象。下一步是通过 mHandler 处理消息，查看 NotificationListenerService.MyHandler#handleMessage() 方法，得知当 message.what 为 MSG_ON_NOTIFICATION_POSTED 时，调用的是 onNotificationPosted() 方法</p><p>但是，NotificationListenerService 是一个抽象类，onNotificationPosted() 为空方法，真正的实现是它的实例类。<br>观察到之前 BaseStatusBar#start() 中，是调用了 mNotificationListener.registerAsSystemService() 方法。那么，mNotificationListener 是在哪里进行初始化呢？</p><h2 id="BaseStatusBar-mNotificationListener-onNotificationPosted"><a href="#BaseStatusBar-mNotificationListener-onNotificationPosted" class="headerlink" title="BaseStatusBar.mNotificationListener#onNotificationPosted"></a>BaseStatusBar.mNotificationListener#onNotificationPosted</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> final NotificationListenerService mNotificationListener = <span class="keyword">new</span> <span class="constructor">NotificationListenerService()</span> &#123;</span><br><span class="line">   <span class="comment">// 省略代码</span></span><br><span class="line">   </span><br><span class="line">   @Override</span><br><span class="line">   public void on<span class="constructor">NotificationPosted(<span class="params">final</span> StatusBarNotification <span class="params">sbn</span>, <span class="params">final</span> RankingMap <span class="params">rankingMap</span>)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (DEBUG) <span class="module-access"><span class="module"><span class="identifier">Log</span>.</span></span>d(TAG, <span class="string">&quot;onNotificationPosted: &quot;</span> + sbn);</span><br><span class="line">       <span class="keyword">if</span> (sbn != null) &#123;</span><br><span class="line">           mHandler.post(<span class="keyword">new</span> <span class="constructor">Runnable()</span> &#123;</span><br><span class="line">               @Override</span><br><span class="line">               public void run<span class="literal">()</span> &#123;</span><br><span class="line">                   process<span class="constructor">ForRemoteInput(<span class="params">sbn</span>.<span class="params">getNotification</span>()</span>);</span><br><span class="line">                   String key = sbn.get<span class="constructor">Key()</span>;</span><br><span class="line">                   mKeysKeptForRemoteInput.remove(key);</span><br><span class="line">                   boolean isUpdate = mNotificationData.get(key) != null;</span><br><span class="line">                   <span class="comment">// In case we don&#x27;t allow child notifications, we ignore children of</span></span><br><span class="line">                   <span class="comment">// notifications that have a summary, since we&#x27;re not going to show them</span></span><br><span class="line">                   <span class="comment">// anyway. This is true also when the summary is canceled,</span></span><br><span class="line">                   <span class="comment">// because children are automatically canceled by NoMan in that case.</span></span><br><span class="line">                   <span class="keyword">if</span> (!ENABLE_CHILD_NOTIFICATIONS<span class="operator"> &amp;&amp; </span>mGroupManager.is<span class="constructor">ChildInGroupWithSummary(<span class="params">sbn</span>)</span>) &#123;</span><br><span class="line">                       <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">                           <span class="module-access"><span class="module"><span class="identifier">Log</span>.</span></span>d(TAG, <span class="string">&quot;Ignoring group child due to existing summary: &quot;</span> + sbn);</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="comment">// Remove existing notification to avoid stale data.</span></span><br><span class="line">                       <span class="keyword">if</span> (isUpdate) &#123;</span><br><span class="line">                           remove<span class="constructor">Notification(<span class="params">key</span>, <span class="params">rankingMap</span>)</span>;</span><br><span class="line">                       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                           mNotificationData.update<span class="constructor">Ranking(<span class="params">rankingMap</span>)</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                       return;</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="keyword">if</span> (isUpdate) &#123;</span><br><span class="line">                       update<span class="constructor">Notification(<span class="params">sbn</span>, <span class="params">rankingMap</span>)</span>;</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       add<span class="constructor">Notification(<span class="params">sbn</span>, <span class="params">rankingMap</span>, <span class="params">null</span> <span class="operator">/</span><span class="operator">*</span> <span class="params">oldEntry</span> <span class="operator">*</span><span class="operator">/</span> )</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 省略代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>通过上述代码，我们知道了在 BaseStatusBar.java 中，创建了 NotificationListenerService 的实例对象，实现了 onNotificationPost() 这个抽象方法；</li><li>在 onNotificationPost() 中，通过 handler 进行消息处理，最终调用 addNotification() 方法</li></ol><h2 id="PhoneStatusBar-addNotification"><a href="#PhoneStatusBar-addNotification" class="headerlink" title="PhoneStatusBar#addNotification()"></a>PhoneStatusBar#addNotification()</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void add<span class="constructor">Notification(StatusBarNotification <span class="params">notification</span>, RankingMap <span class="params">ranking</span>, Entry <span class="params">oldEntry</span>)</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (DEBUG) <span class="module-access"><span class="module"><span class="identifier">Log</span>.</span></span>d(TAG, <span class="string">&quot;addNotification key=&quot;</span> + notification.get<span class="constructor">Key()</span>);</span><br><span class="line">   mNotificationData.update<span class="constructor">Ranking(<span class="params">ranking</span>)</span>;</span><br><span class="line">   Entry shadeEntry = create<span class="constructor">NotificationViews(<span class="params">notification</span>)</span>;</span><br><span class="line">   <span class="keyword">if</span> (shadeEntry<span class="operator"> == </span>null) &#123;</span><br><span class="line">       return;</span><br><span class="line">   &#125;</span><br><span class="line">   boolean isHeadsUped = should<span class="constructor">Peek(<span class="params">shadeEntry</span>)</span>;</span><br><span class="line">   <span class="keyword">if</span> (isHeadsUped) &#123;</span><br><span class="line">       mHeadsUpManager.show<span class="constructor">Notification(<span class="params">shadeEntry</span>)</span>;</span><br><span class="line">       <span class="comment">// Mark as seen immediately</span></span><br><span class="line">       set<span class="constructor">NotificationShown(<span class="params">notification</span>)</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (!isHeadsUped<span class="operator"> &amp;&amp; </span>notification.get<span class="constructor">Notification()</span>.fullScreenIntent != null) &#123;</span><br><span class="line">       <span class="keyword">if</span> (should<span class="constructor">SuppressFullScreenIntent(<span class="params">notification</span>.<span class="params">getKey</span>()</span>)) &#123;</span><br><span class="line">           <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">               <span class="module-access"><span class="module"><span class="identifier">Log</span>.</span></span>d(TAG, <span class="string">&quot;No Fullscreen intent: suppressed by DND: &quot;</span> + notification.get<span class="constructor">Key()</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mNotificationData.get<span class="constructor">Importance(<span class="params">notification</span>.<span class="params">getKey</span>()</span>) &lt; NotificationListenerService.Ranking.IMPORTANCE_MAX) &#123;</span><br><span class="line">           <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">               <span class="module-access"><span class="module"><span class="identifier">Log</span>.</span></span>d(TAG, <span class="string">&quot;No Fullscreen intent: not important enough: &quot;</span> + notification.get<span class="constructor">Key()</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">// Stop screensaver if the notification has a full-screen intent.</span></span><br><span class="line">           <span class="comment">// (like an incoming phone call)</span></span><br><span class="line">           awaken<span class="constructor">Dreams()</span>;</span><br><span class="line">           <span class="comment">// not immersive &amp; a full-screen alert should be shown</span></span><br><span class="line">           <span class="keyword">if</span> (DEBUG) <span class="module-access"><span class="module"><span class="identifier">Log</span>.</span></span>d(TAG, <span class="string">&quot;Notification has fullScreenIntent; sending fullScreenIntent&quot;</span>);</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="module-access"><span class="module"><span class="identifier">EventLog</span>.</span></span>write<span class="constructor">Event(EventLogTags.SYSUI_FULLSCREEN_NOTIFICATION, <span class="params">notification</span>.<span class="params">getKey</span>()</span>);</span><br><span class="line">               notification.get<span class="constructor">Notification()</span>.fullScreenIntent.send<span class="literal">()</span>;</span><br><span class="line">               shadeEntry.notify<span class="constructor">FullScreenIntentLaunched()</span>;</span><br><span class="line">               <span class="module-access"><span class="module"><span class="identifier">MetricsLogger</span>.</span></span>count(mContext, <span class="string">&quot;note_fullscreen&quot;</span>, <span class="number">1</span>);</span><br><span class="line">           &#125; catch (PendingIntent.CanceledException e) &#123;&#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// !!!</span></span><br><span class="line">   add<span class="constructor">NotificationViews(<span class="params">shadeEntry</span>, <span class="params">ranking</span>)</span>;</span><br><span class="line">   <span class="comment">// Recalculate the position of the sliding windows and the titles.</span></span><br><span class="line">   set<span class="constructor">AreThereNotifications()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个方法中，最关键的方法是最后的 addNotificationViews() 方法。调用这个方法之后，你创建的 Notification 才会被添加到系统通知栏上</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>这里我创建了一个Notification管理类，通过单例构建一个管理类对象，当我们需要显示或者清除通知时，直接调用里面的方法即可<br>主要代码：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> PushNotificationManager extends ContextWrapper &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> static Context mContext;</span><br><span class="line">    <span class="keyword">private</span> NotificationManager notificationManager;</span><br><span class="line">    <span class="keyword">private</span> Notification.Builder notification;</span><br><span class="line"></span><br><span class="line">    public static String NOTIFICATION_STATIC_ID = <span class="string">&quot;1001&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> static String NOTIFICATION_STATIC_NAME = <span class="string">&quot;新消息通知&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> static <span class="built_in">int</span> NOTIFICATION_CHANNEL_ID = <span class="number">0x100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="constructor">PushNotificationManager(Context <span class="params">context</span>)</span> &#123;</span><br><span class="line">        super(context);</span><br><span class="line">        <span class="comment">// 在构造方法中，声明NotificationManager对象</span></span><br><span class="line">        <span class="keyword">if</span> (null<span class="operator"> == </span>notificationManager<span class="operator"> &amp;&amp; </span>null != context) &#123;</span><br><span class="line">            notificationManager = (NotificationManager) context.get<span class="constructor">SystemService(Context.NOTIFICATION_SERVICE)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断当前SDK是否大于26</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> boolean check<span class="constructor">SdkVersionMoreO()</span> &#123;</span><br><span class="line">        return Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建Notification对象，针对Android8.0以下</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> void create<span class="constructor">PushNotificationAfter3(String <span class="params">content</span>, ImDownMessageModel <span class="params">model</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (model<span class="operator"> == </span>null) return;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (null<span class="operator"> == </span>notificationManager) &#123;</span><br><span class="line">                notificationManager = (NotificationManager) mContext.get<span class="constructor">SystemService(Context.NOTIFICATION_SERVICE)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            notification = <span class="keyword">new</span> Notification.<span class="constructor">Builder(<span class="params">mContext</span>)</span></span><br><span class="line">                    .set<span class="constructor">SmallIcon(R.<span class="params">mipmap</span>.<span class="params">ic_launcher</span>)</span></span><br><span class="line">                    .set<span class="constructor">ContentTitle(<span class="params">mContext</span>.<span class="params">getString</span>(R.<span class="params">string</span>.<span class="params">app_name</span>)</span>)</span><br><span class="line">                    .set<span class="constructor">ContentText(<span class="params">content</span>)</span></span><br><span class="line">                    .set<span class="constructor">Priority(Notification.PRIORITY_HIGH)</span></span><br><span class="line">                    .set<span class="constructor">When(System.<span class="params">currentTimeMillis</span>()</span>)</span><br><span class="line">                    .set<span class="constructor">ContentIntent(<span class="params">initJumpAction</span>(<span class="params">model</span>.<span class="params">from</span>)</span>)</span><br><span class="line">                    .set<span class="constructor">Ongoing(<span class="params">false</span>)</span></span><br><span class="line">                    .set<span class="constructor">AutoCancel(<span class="params">true</span>)</span>;</span><br><span class="line">            <span class="built_in">int</span> default_setting = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 根据设置决定是否给出提示音和震动效果</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">EditSharedPreferences</span>.</span></span>get<span class="constructor">NotifySound()</span><span class="operator"> &amp;&amp; </span><span class="module-access"><span class="module"><span class="identifier">EditSharedPreferences</span>.</span></span>get<span class="constructor">NotifyVibrator()</span>) &#123;</span><br><span class="line">                default_setting = Notification.DEFAULT_SOUND <span class="pattern-match">| <span class="constructor">Notification</span>.<span class="constructor">DEFAULT_VIBRATE</span>;</span></span><br><span class="line"><span class="pattern-match">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="constructor">EditSharedPreferences</span>.get<span class="constructor">NotifySound()</span> <span class="operator">&amp;&amp;</span> !<span class="constructor">EditSharedPreferences</span>.get<span class="constructor">NotifyVibrator()</span>) &#123;</span></span><br><span class="line"><span class="pattern-match">                default<span class="constructor">_setting</span> = <span class="constructor">Notification</span>.<span class="constructor">DEFAULT_SOUND</span>;</span></span><br><span class="line"><span class="pattern-match">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="constructor">EditSharedPreferences</span>.get<span class="constructor">NotifyVibrator()</span> <span class="operator">&amp;&amp;</span> !<span class="constructor">EditSharedPreferences</span>.get<span class="constructor">NotifySound()</span>) &#123;</span></span><br><span class="line"><span class="pattern-match">                default<span class="constructor">_setting</span> = <span class="constructor">Notification</span>.<span class="constructor">DEFAULT_VIBRATE</span>;</span></span><br><span class="line"><span class="pattern-match">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="constructor">EditSharedPreferences</span>.get<span class="constructor">NotifySound()</span> <span class="operator">&amp;&amp;</span> !<span class="constructor">EditSharedPreferences</span>.get<span class="constructor">NotifyVibrator()</span>) &#123;</span></span><br><span class="line"><span class="pattern-match">                default<span class="constructor">_setting</span> = 0;</span></span><br><span class="line"><span class="pattern-match">            &#125;</span></span><br><span class="line"><span class="pattern-match">            notification.set<span class="constructor">Defaults(<span class="params">default_setting</span>)</span>;</span></span><br><span class="line"><span class="pattern-match">            notification<span class="constructor">Manager</span>.notify(<span class="constructor">NOTIFICATION_CHANNEL_ID</span>, notification.build());</span></span><br><span class="line"><span class="pattern-match">        &#125; catch (<span class="constructor">Exception</span> ex) &#123;</span></span><br><span class="line"><span class="pattern-match">            <span class="constructor">UtilityException</span>.catch<span class="constructor">Exception(<span class="params">ex</span>)</span>;</span></span><br><span class="line"><span class="pattern-match">        &#125;</span></span><br><span class="line"><span class="pattern-match">    &#125;</span></span><br><span class="line"><span class="pattern-match"></span></span><br><span class="line"><span class="pattern-match">    <span class="operator">/</span><span class="operator">**</span></span></span><br><span class="line"><span class="pattern-match">     <span class="operator">*</span> 创建<span class="constructor">Notification</span>对象，针对<span class="constructor">Android8</span>.0以上</span></span><br><span class="line"><span class="pattern-match">     <span class="operator">*</span><span class="operator">/</span></span></span><br><span class="line"><span class="pattern-match">    @<span class="constructor">RequiresApi(<span class="params">api</span> = Build.VERSION_CODES.O)</span></span></span><br><span class="line"><span class="pattern-match">    <span class="keyword">private</span> void create<span class="constructor">PushNotificationAfter8(String <span class="params">content</span>, ImDownMessageModel <span class="params">model</span>)</span> &#123;</span></span><br><span class="line"><span class="pattern-match">        <span class="keyword">if</span> (model <span class="operator">==</span> null) return;</span></span><br><span class="line"><span class="pattern-match">        <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="pattern-match">            <span class="keyword">if</span> (null <span class="operator">==</span> notification<span class="constructor">Manager</span>) &#123;</span></span><br><span class="line"><span class="pattern-match">                notification<span class="constructor">Manager</span> = (<span class="constructor">NotificationManager</span>) m<span class="constructor">Context</span>.get<span class="constructor">SystemService(Context.NOTIFICATION_SERVICE)</span>;</span></span><br><span class="line"><span class="pattern-match">            &#125;</span></span><br><span class="line"><span class="pattern-match">            <span class="constructor">NotificationChannel</span> m<span class="constructor">Channel</span> = <span class="keyword">new</span> <span class="constructor">NotificationChannel(NOTIFICATION_STATIC_ID, NOTIFICATION_STATIC_NAME, NotificationManager.IMPORTANCE_DEFAULT)</span>;</span></span><br><span class="line"><span class="pattern-match">            notification<span class="constructor">Manager</span>.create<span class="constructor">NotificationChannel(<span class="params">mChannel</span>)</span>;</span></span><br><span class="line"><span class="pattern-match">            notification = <span class="keyword">new</span> <span class="constructor">Notification</span>.<span class="constructor">Builder(<span class="params">mContext</span>, NOTIFICATION_STATIC_ID)</span></span></span><br><span class="line"><span class="pattern-match">                    .set<span class="constructor">ContentTitle(<span class="params">mContext</span>.<span class="params">getString</span>(R.<span class="params">string</span>.<span class="params">app_name</span>)</span>)</span></span><br><span class="line"><span class="pattern-match">                    .set<span class="constructor">ContentText(<span class="params">content</span>)</span></span></span><br><span class="line"><span class="pattern-match">                    .set<span class="constructor">SmallIcon(R.<span class="params">mipmap</span>.<span class="params">ic_launcher_small</span>)</span></span></span><br><span class="line"><span class="pattern-match">                    .set<span class="constructor">Color(<span class="params">mContext</span>.<span class="params">getColor</span>(R.<span class="params">color</span>.<span class="params">_e64448</span>)</span>)</span></span><br><span class="line"><span class="pattern-match">                    .set<span class="constructor">When(System.<span class="params">currentTimeMillis</span>()</span>)</span></span><br><span class="line"><span class="pattern-match">                    .set<span class="constructor">AutoCancel(<span class="params">true</span>)</span></span></span><br><span class="line"><span class="pattern-match">                    .set<span class="constructor">Priority(Notification.PRIORITY_HIGH)</span></span></span><br><span class="line"><span class="pattern-match">                    .set<span class="constructor">Ongoing(<span class="params">false</span>)</span></span></span><br><span class="line"><span class="pattern-match">                    .set<span class="constructor">ContentIntent(<span class="params">initJumpAction</span>(<span class="params">model</span>.<span class="params">from</span>)</span>)</span></span><br><span class="line"><span class="pattern-match">                    .set<span class="constructor">Defaults(Notification.DEFAULT_ALL)</span>;</span></span><br><span class="line"><span class="pattern-match">            <span class="operator">/</span><span class="operator">/</span>发送</span></span><br><span class="line"><span class="pattern-match">            notification<span class="constructor">Manager</span>.notify(<span class="constructor">NOTIFICATION_CHANNEL_ID</span>, notification.build());</span></span><br><span class="line"><span class="pattern-match">        &#125; catch (<span class="constructor">Exception</span> ex) &#123;</span></span><br><span class="line"><span class="pattern-match">            <span class="constructor">UtilityException</span>.catch<span class="constructor">Exception(<span class="params">ex</span>)</span>;</span></span><br><span class="line"><span class="pattern-match">        &#125;</span></span><br><span class="line"><span class="pattern-match">    &#125;</span></span><br><span class="line"><span class="pattern-match"></span></span><br><span class="line"><span class="pattern-match">    <span class="operator">/</span><span class="operator">**</span></span></span><br><span class="line"><span class="pattern-match">     <span class="operator">*</span> 显示<span class="constructor">Notification</span>对象</span></span><br><span class="line"><span class="pattern-match">     <span class="operator">*</span></span></span><br><span class="line"><span class="pattern-match">     <span class="operator">*</span> @param content 通知栏中的content</span></span><br><span class="line"><span class="pattern-match">     <span class="operator">*</span> @param model</span></span><br><span class="line"><span class="pattern-match">     <span class="operator">*</span><span class="operator">/</span></span></span><br><span class="line"><span class="pattern-match">    <span class="keyword">private</span> void show<span class="constructor">PushNotification(String <span class="params">content</span>, ImDownMessageModel <span class="params">model</span>)</span> &#123;</span></span><br><span class="line"><span class="pattern-match">        <span class="keyword">if</span> (check<span class="constructor">SdkVersionMoreO()</span>) &#123;</span></span><br><span class="line"><span class="pattern-match">            create<span class="constructor">PushNotificationAfter8(<span class="params">content</span>, <span class="params">model</span>)</span>;</span></span><br><span class="line"><span class="pattern-match">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="pattern-match">            create<span class="constructor">PushNotificationAfter3(<span class="params">content</span>, <span class="params">model</span>)</span>;</span></span><br><span class="line"><span class="pattern-match">        &#125;</span></span><br><span class="line"><span class="pattern-match">    &#125;</span></span><br><span class="line"><span class="pattern-match"></span></span><br><span class="line"><span class="pattern-match">    <span class="operator">/</span><span class="operator">**</span></span></span><br><span class="line"><span class="pattern-match">     <span class="operator">*</span> 清除<span class="constructor">Notification</span>对象</span></span><br><span class="line"><span class="pattern-match">     <span class="operator">*</span><span class="operator">/</span></span></span><br><span class="line"><span class="pattern-match">    public void clear<span class="constructor">PushNotification()</span> &#123;</span></span><br><span class="line"><span class="pattern-match">        <span class="keyword">if</span> (notification<span class="constructor">Manager</span> != null) &#123;</span></span><br><span class="line"><span class="pattern-match">            notification<span class="constructor">Manager</span>.cancel(<span class="constructor">NOTIFICATION_CHANNEL_ID</span>);</span></span><br><span class="line"><span class="pattern-match">        &#125;</span></span><br><span class="line"><span class="pattern-match">    &#125;</span></span><br><span class="line"><span class="pattern-match"></span></span><br><span class="line"><span class="pattern-match">    <span class="operator">/</span><span class="operator">**</span></span></span><br><span class="line"><span class="pattern-match">     <span class="operator">*</span> 初始化跳转<span class="constructor">PendingIntent</span></span></span><br><span class="line"><span class="pattern-match">     <span class="operator">*</span><span class="operator">/</span></span></span><br><span class="line"><span class="pattern-match">    <span class="keyword">private</span> <span class="constructor">PendingIntent</span> init<span class="constructor">JumpAction(String <span class="params">fromUid</span>)</span> &#123;</span></span><br><span class="line"><span class="pattern-match">        <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="pattern-match">            <span class="constructor">ChatActivityExtraModel</span> model = <span class="keyword">new</span> <span class="constructor">ChatActivityExtraModel()</span>;</span></span><br><span class="line"><span class="pattern-match">            model.uid = from<span class="constructor">Uid</span>;</span></span><br><span class="line"><span class="pattern-match">            <span class="constructor">Intent</span> intent = <span class="constructor">ChatActivity</span>.get<span class="constructor">Intent(<span class="params">mContext</span>, <span class="params">model</span>)</span>;</span></span><br><span class="line"><span class="pattern-match">            intent.add<span class="constructor">Flags(Intent.FLAG_ACTIVITY_NEW_TASK)</span>;           <span class="operator">/</span><span class="operator">/</span>添加为栈顶<span class="constructor">Activity</span></span></span><br><span class="line"><span class="pattern-match">            <span class="constructor">PendingIntent</span> result<span class="constructor">PendingIntent</span> = <span class="constructor">PendingIntent</span>.get<span class="constructor">Activity(<span class="params">mContext</span>, -1, <span class="params">intent</span>, PendingIntent.FLAG_UPDATE_CURRENT)</span>;</span></span><br><span class="line"><span class="pattern-match">            return result<span class="constructor">PendingIntent</span>;</span></span><br><span class="line"><span class="pattern-match">        &#125; catch (<span class="constructor">Exception</span> ex) &#123;</span></span><br><span class="line"><span class="pattern-match">            <span class="constructor">UtilityException</span>.catch<span class="constructor">Exception(<span class="params">ex</span>)</span>;</span></span><br><span class="line"><span class="pattern-match">        &#125;</span></span><br><span class="line"><span class="pattern-match">        return null;</span></span><br><span class="line"><span class="pattern-match">    &#125;</span></span><br><span class="line"><span class="pattern-match"></span></span><br><span class="line"><span class="pattern-match">    <span class="operator">/</span><span class="operator">**</span></span></span><br><span class="line"><span class="pattern-match">     <span class="operator">*</span> 添加通知栏消息</span></span><br><span class="line"><span class="pattern-match">     <span class="operator">*</span></span></span><br><span class="line"><span class="pattern-match">     <span class="operator">*</span> @param unread<span class="constructor">Info</span> 未读消息信息</span></span><br><span class="line"><span class="pattern-match">     <span class="operator">*</span> @param model      最后一条消息</span></span><br><span class="line"><span class="pattern-match">     <span class="operator">*</span><span class="operator">/</span></span></span><br><span class="line"><span class="pattern-match">    public void add<span class="constructor">PushNotification(<span class="params">final</span> UnreadInfo <span class="params">unreadInfo</span>, <span class="params">final</span> ImDownMessageModel <span class="params">model</span>)</span> &#123;</span></span><br><span class="line"><span class="pattern-match">        <span class="keyword">if</span> (unread<span class="constructor">Info</span> <span class="operator">==</span> null <span class="operator">||</span> unread<span class="constructor">Info</span>.un<span class="constructor">ReadUsers</span> &lt;= 0)</span></span><br><span class="line"><span class="pattern-match">            return;</span></span><br><span class="line"><span class="pattern-match"></span></span><br><span class="line"><span class="pattern-match">        <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="pattern-match">            final <span class="constructor">String</span> message<span class="constructor">Text</span> = <span class="constructor">IMContentConverter</span>.get<span class="constructor">ShortText(<span class="params">model</span>)</span>;</span></span><br><span class="line"><span class="pattern-match">            <span class="keyword">if</span> (!<span class="constructor">UtilitySecurity</span>.is<span class="constructor">Empty(<span class="params">messageText</span>)</span>) &#123;</span></span><br><span class="line"><span class="pattern-match">                <span class="constructor">ImHelper</span>.get<span class="constructor">ImInfoByData(<span class="params">model</span>.<span class="params">from</span>, <span class="params">new</span> ILoadImInfo()</span> &#123;</span></span><br><span class="line"><span class="pattern-match">                    @<span class="constructor">Override</span></span></span><br><span class="line"><span class="pattern-match">                    public void <span class="constructor">LoadSuccess(ChatTitleModel <span class="params">chatTitleModel</span>)</span> &#123;</span></span><br><span class="line"><span class="pattern-match">                        <span class="keyword">if</span> (chat<span class="constructor">TitleModel</span> <span class="operator">==</span> null <span class="operator">||</span> <span class="constructor">UtilitySecurity</span>.is<span class="constructor">Empty(<span class="params">chatTitleModel</span>.<span class="params">name</span>)</span>)</span></span><br><span class="line"><span class="pattern-match">                            return;</span></span><br><span class="line"><span class="pattern-match">                        show<span class="constructor">PushNotification(<span class="params">chatTitleModel</span>.<span class="params">name</span> + RRApplication.<span class="params">getAppContext</span>()</span>.get<span class="constructor">String(R.<span class="params">string</span>.<span class="params">im_showText_maohao</span>)</span> + message<span class="constructor">Text</span>, model);</span></span><br><span class="line"><span class="pattern-match">                    &#125;</span></span><br><span class="line"><span class="pattern-match"></span></span><br><span class="line"><span class="pattern-match">                    @<span class="constructor">Override</span></span></span><br><span class="line"><span class="pattern-match">                    public void <span class="constructor">LoadFail()</span> &#123;</span></span><br><span class="line"><span class="pattern-match"></span></span><br><span class="line"><span class="pattern-match">                    &#125;</span></span><br><span class="line"><span class="pattern-match">                &#125;);</span></span><br><span class="line"><span class="pattern-match">            &#125;</span></span><br><span class="line"><span class="pattern-match">        &#125; catch (<span class="constructor">Exception</span> ex) &#123;</span></span><br><span class="line"><span class="pattern-match">            <span class="constructor">UtilityException</span>.catch<span class="constructor">Exception(<span class="params">ex</span>)</span>;</span></span><br><span class="line"><span class="pattern-match">        &#125;</span></span><br><span class="line"><span class="pattern-match">    &#125;</span></span><br><span class="line"><span class="pattern-match"></span></span><br><span class="line"><span class="pattern-match">    <span class="operator">/</span><span class="operator">**</span></span></span><br><span class="line"><span class="pattern-match">     <span class="operator">*</span> <span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span>匿名内部类构造单例模式 开始<span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span></span></span><br><span class="line"><span class="pattern-match">     <span class="operator">*</span><span class="operator">/</span></span></span><br><span class="line"><span class="pattern-match">    public static <span class="constructor">PushNotificationManager</span> get<span class="constructor">Instance(Context <span class="params">context</span>)</span> &#123;</span></span><br><span class="line"><span class="pattern-match">        m<span class="constructor">Context</span> = context;</span></span><br><span class="line"><span class="pattern-match">        return <span class="constructor">PushNotificationManagerHolder</span>.instance;</span></span><br><span class="line"><span class="pattern-match">    &#125;</span></span><br><span class="line"><span class="pattern-match"></span></span><br><span class="line"><span class="pattern-match">    <span class="keyword">private</span> static <span class="keyword">class</span> <span class="constructor">PushNotificationManagerHolder</span> &#123;</span></span><br><span class="line"><span class="pattern-match">        <span class="keyword">private</span> static final <span class="constructor">PushNotificationManager</span> instance = <span class="keyword">new</span> <span class="constructor">PushNotificationManager(<span class="params">mContext</span>)</span>;</span></span><br><span class="line"><span class="pattern-match">    &#125;</span></span><br><span class="line"><span class="pattern-match">    <span class="operator">/</span><span class="operator">**</span></span></span><br><span class="line"><span class="pattern-match">     <span class="operator">*</span> <span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span>匿名内部类构造单例模式 结束<span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span></span></span><br><span class="line"><span class="pattern-match">     <span class="operator">*</span><span class="operator">/</span></span></span><br><span class="line"><span class="pattern-match">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近公司要求把IM这一模块重写一遍，然后使用MQTT的方式实现消息的收发功能。这个内容我后面在总结，今天先看一下另外一个模块。这个内容的需求是这样的，要求在MQTT收到消息之后，在通知栏显示消息内容，其实就是需要有一个通知栏可以显示IM消息。所以趁着这个时间，再把Notification的知识点总结一下。&lt;br&gt;这里我觉得代码上的实现总是比较简单，我会在最后把代码的思路交代一下，而前面的篇幅主要用来描述，Notification的机制&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>android-interview-2019(年中)</title>
    <link href="http://www.paulniu.com/2019/06/15/android-interview-2019/"/>
    <id>http://www.paulniu.com/2019/06/15/android-interview-2019/</id>
    <published>2019-06-15T11:16:29.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>在2019年元旦之前，在网络上，各大媒体中都在说2019资本寒冬即将到来。对于在资本寒冬出来找工作的同学确实需要很大的勇气和资本，像我这样的二把刀，真的不敢做这个决定。但是秉着居安思危的思想，我觉得在2019年年中的时候，还是有必要把android的面试题总结一下，因为我觉得这个对于对于我们学习知识，查漏补缺都是受益匪浅。</p><span id="more"></span><p>先说几件大事，说不定以后真的会应验。中美贸易战，华为被美国制裁，然后一大批美国公司，都开始对华为采取各种各样的小动作，其中就包括Google公司宣布，不再为华为手机提供Google服务。这个对于中国大陆的华为手机用户来说，问题不大，毕竟我们是不使用Google服务的。但是，对于华为的海外市场来说，打击确实不小，因为在国外，Google全家桶还是决定手机各方面服务的一个非常关键的软件。不过为了解决和应对突发情况，华为一直在开发自己的手机系统。也就在前不久，就把新系统发布出来了，鸿蒙。据听闻，兼容Android系统，但是需要使用C语言开发。我也是道听途说，所以，这里先说以后国内的软件开发，不会C语言真的是寸步难行。</p><p>所以，和以往的面试总结有区别，今年我总结的面试题里面会添加一些C语言面试题，希望对以后会有帮助</p><p>2019年06月16日20:23:38<br>突然发现有点多了，然后真的有点多，希望今年能够总结完吧，慢慢来。<br>🐂🐂🐂</p><p>内容主要分为一下几个部分：</p><ol><li>Android基础面试题(三年以上必须全部掌握，否则不好意思，真的不够资格)</li><li>Android高级开发面试题(正在努力中)</li><li>Java面试题</li><li>跨平台开发(RN)</li><li>Java面试题</li><li>C/C++面试题</li></ol><h1 id="Android面试题"><a href="#Android面试题" class="headerlink" title="Android面试题"></a>Android面试题</h1><p>主要包括Android基础，特别是一些源码分析，原理等，如果想去大公司面试，这些是必问的(oh my god.作为一个从没有去过大厂的人，我有什么资格在这里BB，😄，尴尬而不失礼貌的微笑)</p><h2 id="Android基础知识点"><a href="#Android基础知识点" class="headerlink" title="Android基础知识点"></a>Android基础知识点</h2><ol><li>四大组件是什么</li><li>四大组件的生命周期和简单用法</li><li>Activity之间的通信方式</li><li>Activity各种情况下的生命周期</li><li>横竖屏切换的时候，Activity 各种情况下的生命周期</li><li>Activity与Fragment之间生命周期比较</li><li>Activity上有Dialog的时候按Home键时的生命周期</li><li>两个Activity 之间跳转时必然会执行的是哪几个方法？</li><li>前台切换到后台，然后再回到前台，Activity生命周期回调方法。弹出Dialog，生命值周期回调方法。</li><li>Activity的四种启动模式对比</li><li>Activity状态保存于恢复</li><li>fragment各种情况下的生命周期</li><li>Fragment状态保存startActivityForResult是哪个类的方法，在什么情况下使用？</li><li>如何实现Fragment的滑动？</li><li>fragment之间传递数据的方式？</li><li>Activity 怎么和Service 绑定？</li><li>怎么在Activity 中启动自己对应的Service？</li><li>service和activity怎么进行数据交互？</li><li>Service的开启方式</li><li>请描述一下Service 的生命周期</li><li>谈谈你对ContentProvider的理解</li><li>说说ContentProvider、ContentResolver、ContentObserver 之间的关系</li><li>请描述一下广播BroadcastReceiver的理解</li><li>广播的分类</li><li>广播使用的方式和场景</li><li>在manifest 和代码中如何注册和使用BroadcastReceiver?</li><li>本地广播和全局广播有什么差别？</li><li>BroadcastReceiver，LocalBroadcastReceiver 区别</li><li>AlertDialog,popupWindow,Activity区别</li><li>Application 和 Activity 的 Context 对象的区别</li><li>Android属性动画特性</li><li>如何导入外部数据库?</li><li>LinearLayout、RelativeLayout、FrameLayout的特性及对比，并介绍使用场景。</li><li>谈谈对接口与回调的理解</li><li>回调的原理</li><li>写一个回调demo</li><li>介绍下SurfView</li><li>RecycleView的使用</li><li>序列化的作用，以及Android两种序列化的区别</li><li>差值器</li><li>估值器</li><li>Android中数据存储方式</li></ol><h2 id="android源码相关"><a href="#android源码相关" class="headerlink" title="android源码相关"></a>android源码相关</h2><ol start="43"><li>Android动画框架实现原理</li><li>Android各个版本API的区别</li><li>Requestlayout，onlayout，onDraw，DrawChild区别与联系</li><li>invalidate和postInvalidate的区别及使用</li><li>Activity-Window-View三者的差别</li><li>谈谈对Volley的理解</li><li>如何优化自定义View</li><li>低版本SDK如何实现高版本api？</li><li>描述一次网络请求的流程</li><li>HttpUrlConnection 和 okhttp关系</li><li>Bitmap对象的理解</li><li>looper架构</li><li>ActivityThread，AMS，WMS的工作原理</li><li>自定义View如何考虑机型适配</li><li>自定义View的事件</li><li>AstncTask+HttpClient 与 AsyncHttpClient有什么区别？</li><li>LaunchMode应用场景</li><li>AsyncTask 如何使用?</li><li>SpareArray原理</li><li>请介绍下ContentProvider 是如何实现数据共享的？</li><li>AndroidService与Activity之间通信的几种方式</li><li>IntentService原理及作用是什么？</li><li>说说Activity、Intent、Service 是什么关系</li><li>ApplicationContext和ActivityContext的区别</li><li>SP是进程同步的吗?有什么方法做到同步？</li><li>谈谈多线程在Android中的使用</li><li>进程和 Application 的生命周期</li><li>封装View的时候怎么知道view的大小</li><li>RecycleView原理</li><li>AndroidManifest的作用与理解</li></ol><h2 id="常见的一些原理性问题"><a href="#常见的一些原理性问题" class="headerlink" title="常见的一些原理性问题"></a>常见的一些原理性问题</h2><ol start="73"><li>Handler机制和底层实现</li><li>Handler、Thread和HandlerThread的差别</li><li>handler发消息给子线程，looper怎么启动？</li><li>关于Handler，在任何地方new Handler 都是什么线程下?</li><li>ThreadLocal原理，实现及如何保证Local属性？</li><li>请解释下在单线程模型中Message、Handler、Message Queue、Looper之间的关系</li><li>请描述一下View事件传递分发机制</li><li>Touch事件传递流程</li><li>事件分发中的onTouch 和onTouchEvent 有什么区别，又该如何使用？</li><li>View和ViewGroup分别有哪些事件分发相关的回调方法</li><li>View刷新机制</li><li>View绘制流程</li><li>自定义控件原理</li><li>自定义View如何提供获取View属性的接口？</li><li>Android代码中实现WAP方式联网</li><li>AsyncTask机制</li><li>AsyncTask原理及不足</li><li>如何取消AsyncTask？</li><li>为什么不能在子线程更新UI？</li><li>ANR产生的原因是什么？</li><li>ANR定位和修正</li><li>oom是什么？</li><li>什么情况导致oom？</li><li>有什么解决方法可以避免OOM？</li><li>Oom 是否可以try catch？为什么？</li><li>内存泄漏是什么？</li><li>什么情况导致内存泄漏？</li><li>如何防止线程的内存泄漏？</li><li>内存泄露场的解决方法</li><li>内存泄漏和内存溢出区别？</li><li>LruCache默认缓存大小</li><li>ContentProvider的权限管理(解答：读写分离，权限控制-精确到表级，URL控制)</li><li>如何通过广播拦截和abort一条短信？</li><li>广播是否可以请求网络？</li><li>广播引起anr的时间限制是多少？</li><li>计算一个view的嵌套层级</li><li>Activity栈</li><li>Android线程有没有上限？</li><li>线程池有没有上限？</li><li>ListView重用的是什么？</li><li>Android为什么引入Parcelable？</li><li>有没有尝试简化Parcelable的使用？</li></ol><h2 id="开发中遇到的一些问题"><a href="#开发中遇到的一些问题" class="headerlink" title="开发中遇到的一些问题"></a>开发中遇到的一些问题</h2><ol start="115"><li>ListView 中图片错位的问题是如何产生的?</li><li>混合开发有了解吗？</li><li>知道哪些混合开发的方式？说出它们的优缺点和各自使用场景？（解答：比如:RN，weex，H5，小程序，WPA等。做Android的了解一些前- 端js等还是很有好处的)；</li><li>11屏幕适配的处理技巧都有哪些?</li><li>服务器只提供数据接收接口，在多线程或多进程条件下，如何保证数据的有序到达？</li><li>动态布局的理解</li><li>怎么去除重复代码？</li><li>画出 Android 的大体架构图</li><li>Recycleview和ListView的区别</li><li>ListView图片加载错乱的原理和解决方案</li><li>动态权限适配方案，权限组的概念</li><li>Android系统为什么会设计ContentProvider？</li><li>下拉状态栏是不是影响activity的生命周期</li><li>如果在onStop的时候做了网络请求，onResume的时候怎么恢复？</li><li>Bitmap 使用时候注意什么？</li><li>Bitmap的recycler()</li><li>Android中开启摄像头的主要步骤</li><li>ViewPager使用细节，如何设置成每次只初始化当前的Fragment，其他的不初始化？</li><li>点击事件被拦截，但是想传到下面的View，如何操作？</li><li>微信主页面的实现方式</li><li>微信上消息小红点的原理</li><li>CAS介绍（这是阿里巴巴的面试题，我不是很了解，可以参考博客: CAS简介）</li></ol><h1 id="Android高级开发面试"><a href="#Android高级开发面试" class="headerlink" title="Android高级开发面试"></a>Android高级开发面试</h1><p>这里讲的是大公司需要用到的一些高端Android技术，这里专门整理了一个文档，希望大家都可以看看。这些题目有点技术含量，需要好点时间去研究一下的</p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><ol><li>图片库对比</li><li>图片库的源码分析</li><li>图片框架缓存实现</li><li>LRUCache原理</li><li>图片加载原理</li><li>自己去实现图片库，怎么做？</li><li>Glide源码解析</li><li>Glide使用什么缓存？</li><li>Glide内存缓存如何控制大小？</li></ol><h2 id="网络和安全机制"><a href="#网络和安全机制" class="headerlink" title="网络和安全机制"></a>网络和安全机制</h2><ol><li>网络框架对比和源码分析</li><li>自己去设计网络请求框架，怎么做？</li><li>okhttp源码</li><li>网络请求缓存处理，okhttp如何处理网络缓存的</li><li>从网络加载一个10M的图片，说下注意事项</li><li>TCP的3次握手和四次挥手</li><li>TCP与UDP的区别</li><li>TCP与UDP的应用</li><li>HTTP协议</li><li>HTTP1.0与2.0的区别</li><li>HTTP报文结构</li><li>HTTP与HTTPS的区别以及如何实现安全性</li><li>如何验证证书的合法性?</li><li>https中哪里用了对称加密，哪里用了非对称加密，对加密算法（如RSA）等是否有了解?</li><li>client如何确定自己发送的消息被server收到?</li><li>谈谈你对WebSocket的理解</li><li>WebSocket与socket的区别</li><li>谈谈你对安卓签名的理解。</li><li>请解释安卓为啥要加签名机制?</li><li>视频加密传输</li><li>App 是如何沙箱化，为什么要这么做？</li><li>权限管理系统（底层的权限是如何进行 grant 的）？</li></ol><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ol><li>sqlite升级，增加字段的语句</li><li>数据库框架对比和源码分析</li><li>数据库的优化</li><li>数据库数据迁移问题</li></ol><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ol><li>排序算法有哪些？</li><li>最快的排序算法是哪个？</li><li>手写一个冒泡排序</li><li>手写快速排序代码</li><li>快速排序的过程、时间复杂度、空间复杂度</li><li>手写堆排序</li><li>堆排序过程、时间复杂度及空间复杂度</li><li>写出你所知道的排序算法及时空复杂度，稳定性</li><li>二叉树给出根节点和目标节点，找出从根节点到目标节点的路径</li><li>给阿里2万多名员工按年龄排序应该选择哪个算法？</li><li>GC算法(各种算法的优缺点以及应用场景)</li><li>蚁群算法与蒙特卡洛算法</li><li>子串包含问题(KMP 算法)写代码实现</li><li>一个无序，不重复数组，输出N个元素，使得N个元素的和相加为M，给出时间复杂度、空间复杂度。手写算法</li><li>万亿级别的两个URL文件A和B，如何求出A和B的差集C(提示：Bit映射-&gt;hash分组-&gt;多文件读写效率-&gt;磁盘寻址以及应用层面对寻址的优化)</li><li>百度POI中如何试下查找最近的商家功能(提示：坐标镜像+R树)。</li><li>两个不重复的数组集合中，求共同的元素。</li><li>两个不重复的数组集合中，这两个集合都是海量数据，内存中放不下，怎么求共同的元素？</li><li>一个文件中有100万个整数，由空格分开，在程序中判断用户输入的整数是否在此文件中。说出最优的方法</li><li>一张Bitmap所占内存以及内存占用的计算</li><li>2000万个整数，找出第五十大的数字？</li><li>烧一根不均匀的绳，从头烧到尾总共需要1个小时。现在有若干条材质相同的绳子，问如何用烧绳的方法来计时一个小时十五分钟呢？</li><li>求1000以内的水仙花数以及40亿以内的水仙花数</li><li>5枚硬币，2正3反如何划分为两堆然后通过翻转让两堆中正面向上的硬8币和反面向上的硬币个数相同</li><li>时针走一圈，时针分针重合几次</li><li>N*N的方格纸,里面有多少个正方形</li><li>x个苹果，一天只能吃一个、两个、或者三个，问多少天可以吃完？</li></ol><h2 id="插件化、模块化、组件化、热修复、增量更新、Gradle"><a href="#插件化、模块化、组件化、热修复、增量更新、Gradle" class="headerlink" title="插件化、模块化、组件化、热修复、增量更新、Gradle"></a>插件化、模块化、组件化、热修复、增量更新、Gradle</h2><ol><li>对热修复和插件化的理解</li><li>插件化原理分析</li><li>模块化实现（好处，原因）</li><li>热修复,插件化</li><li>项目组件化的理解</li><li>描述清点击 Android Studio 的 build 按钮后发生了什么</li></ol><h2 id="框架和设计模式"><a href="#框架和设计模式" class="headerlink" title="框架和设计模式"></a>框架和设计模式</h2><ol><li>谈谈你对Android设计模式的理解</li><li>MVC MVP MVVM原理和区别</li><li>你所知道的设计模式有哪些？</li><li>项目中常用的设计模式</li><li>手写生产者/消费者模式</li><li>写出观察者模式的代码</li><li>适配器模式，装饰者模式，外观模式的异同？</li><li>用到的一些开源框架，介绍一个看过源码的，内部实现过程。</li><li>谈谈对RxJava的理解</li><li>RxJava的功能与原理实现</li><li>RxJava的作用，与平时使用的异步操作来比的优缺点</li><li>说说EventBus作用，实现方式，代替EventBus的方式</li><li>从0设计一款App整体架构，如何去做？</li><li>说一款你认为当前比较火的应用并设计(比如：直播APP，P2P金融，小视频等)</li><li>谈谈对java状态机理解</li><li>Fragment如果在Adapter中使用应该如何解耦？</li><li>Binder机制及底层实现</li><li>对于应用更新这块是如何做的？(解答：灰度，强制更新，分区域更新)？</li><li>实现一个Json解析器(可以通过正则提高速度)</li><li>统计启动时长,标准</li></ol><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><ol><li>如何对Android 应用进行性能分析以及优化?</li><li>ddms 和 traceView</li><li>性能优化如何分析systrace？</li><li>用IDE如何分析内存泄漏？</li><li>Java多线程引发的性能问题，怎么解决？</li><li>启动页白屏及黑屏解决？</li><li>启动太慢怎么解决？</li><li>怎么保证应用启动不卡顿？</li><li>App启动崩溃异常捕捉</li><li>自定义View注意事项</li><li>现在下载速度很慢,试从网络协议的角度分析原因,并优化(提示：网络的5层都可以涉及)。</li><li>Https请求慢的解决办法（提示：DNS，携带数据，直接访问IP）</li><li>如何保持应用的稳定性</li><li>RecyclerView和ListView的性能对比</li><li>ListView的优化</li><li>RecycleView优化</li><li>View渲染</li><li>Bitmap如何处理大图，如一张30M的大图，如何预防OOM</li><li>java中的四种引用的区别以及使用场景</li><li>强引用置为null，会不会被回收？</li></ol><h2 id="NDK-JNI-Binder-AIDL-跨进程通信"><a href="#NDK-JNI-Binder-AIDL-跨进程通信" class="headerlink" title="NDK JNI Binder AIDL 跨进程通信"></a>NDK JNI Binder AIDL 跨进程通信</h2><ol><li>请介绍一下NDK</li><li>什么是NDK库?</li><li>jni用过吗？</li><li>如何在jni中注册native函数，有几种注册方式?</li><li>Java如何调用c、c++语言？</li><li>jni如何调用java层代码？</li><li>进程间通信的方式？</li><li>Binder机制</li><li>简述IPC？</li><li>什么是AIDL？</li><li>AIDL解决了什么问题？</li><li>AIDL如何使用？</li><li>Android 上的 Inter-Process-Communication 跨进程通信时如何工作的？</li><li>多进程场景遇见过么？</li><li>Android进程分类？</li><li>进程和 Application 的生命周期？</li><li>进程调度</li><li>谈谈对进程共享和线程安全的认识</li><li>谈谈对多进程开发的理解以及多进程应用场景</li><li>什么是协程？</li></ol><h2 id="FrameWork层-ROM定制"><a href="#FrameWork层-ROM定制" class="headerlink" title="FrameWork层  ROM定制"></a>FrameWork层  ROM定制</h2><ol><li>java虚拟机的特性</li><li>谈谈对jvm的理解</li><li>JVM内存区域，开线程影响哪块内存</li><li>对Dalvik、ART虚拟机有什么了解？</li><li>Art和Dalvik对比</li><li>虚拟机原理，如何自己设计一个虚拟机(内存管理，类加载，双亲委派)</li><li>谈谈你对双亲委派模型理解</li><li>JVM内存模型，内存区域</li><li>类加载机制</li><li>谈谈对ClassLoader(类加载器)的理解</li><li>谈谈对动态加载（OSGI）的理解</li><li>内存对象的循环引用及避免</li><li>内存回收机制、GC回收策略、GC原理时机以及GC对象</li><li>垃圾回收机制与调用System.gc()区别</li><li>Ubuntu编译安卓系统</li><li>系统启动流程是什么？（提示：Zygote进程 –&gt; SystemServer进程 –&gt; 各种系统服务 –&gt; 应用进程）</li><li>大体说清一个应用程序安装到手机上时发生了什么</li><li>简述Activity启动全部过程</li><li>App启动流程，从点击桌面开始</li><li>逻辑地址与物理地址，为什么使用逻辑地址？</li><li>Android为每个应用程序分配的内存大小是多少？</li><li>Android中进程内存的分配，能不能自己分配定额内存？</li><li>进程保活的方式</li><li>如何保证一个后台服务不被杀死？（相同问题：如何保证service在后台不被kill？）比较省电的方式是什么？</li><li>App中唤醒其他进程的实现方式</li></ol><h1 id="Java面试题"><a href="#Java面试题" class="headerlink" title="Java面试题"></a>Java面试题</h1><p>目前来说，Android开发的主流语言依然是Java，因为把java作为开发语言，可以为程序员提供多种可能性</p><h2 id="Java基础面试知识点"><a href="#Java基础面试知识点" class="headerlink" title="Java基础面试知识点"></a>Java基础面试知识点</h2><ol><li>java中==和equals和hashCode的区别</li><li>int、char、long各占多少字节数</li><li>int与integer的区别</li><li>探探对java多态的理解</li><li>String、StringBuffer、StringBuilder区别</li><li>什么是内部类？内部类的作用</li><li>抽象类和接口区别</li><li>抽象类的意义</li><li>抽象类与接口的应用场景</li><li>抽象类是否可以没有方法和属性？</li><li>接口的意义</li><li>泛型中extends和super的区别</li><li>父类的静态方法能否被子类重写</li><li>进程和线程的区别</li><li>final，finally，finalize的区别</li><li>序列化的方式</li><li>Serializable 和Parcelable 的区别</li><li>静态属性和静态方法是否可以被继承？是否可以被重写？以及原因？</li><li>静态内部类的设计意图</li><li>成员内部类、静态内部类、局部内部类和匿名内部类的理解，以及项目中的应用</li><li>谈谈对kotlin的理解</li><li>闭包和局部内部类的区别</li><li>string 转换成 integer的方式及原理</li></ol><h2 id="Java深入面试题"><a href="#Java深入面试题" class="headerlink" title="Java深入面试题"></a>Java深入面试题</h2><ol><li>哪些情况下的对象会被垃圾回收机制处理掉？</li><li>讲一下常见编码方式？</li><li>utf-8编码中的中文占几个字节；int型几个字节？</li><li>静态代理和动态代理的区别，什么场景使用？</li><li>Java的异常体系</li><li>谈谈你对解析与分派的认识。</li><li>修改对象A的equals方法的签名，那么使用HashMap存放这个对象实例的时候，会调用哪个equals方法？</li><li>Java中实现多态的机制是什么？</li><li>如何将一个Java对象序列化到文件里？</li><li>说说你对Java反射的理解</li><li>说说你对Java注解的理解</li><li>说说你对依赖注入的理解</li><li>说一下泛型原理，并举例说明</li><li>Java中String的了解</li><li>String为什么要设计成不可变的？</li><li>Object类的equal和hashCode方法重写，为什么？</li></ol><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><ol><li>常用数据结构简介</li><li>并发集合了解哪些？</li><li>列举java的集合以及集合之间的继承关系</li><li>集合类以及集合框架</li><li>容器类介绍以及之间的区别（容器类估计很多人没听这个词，Java容器主要可以划分为4个部分：List列表、Set集合、Map映射、工具类（Iterator迭代器、Enumeration枚举类、Arrays和Collections），具体的可以看看这篇博文 Java容器类）</li><li>List,Set,Map的区别</li><li>List和Map的实现方式以及存储方式</li><li>HashMap的实现原理</li><li>HashMap数据结构？</li><li>HashMap源码理解</li><li>HashMap如何put数据（从HashMap源码角度讲解）？</li><li>HashMap怎么手写实现？</li><li>ConcurrentHashMap的实现原理</li><li>ArrayMap和HashMap的对比</li><li>HashTable实现原理</li><li>TreeMap具体实现</li><li>HashMap和HashTable的区别</li><li>HashMap与HashSet的区别</li><li>HashSet与HashMap怎么判断集合元素重复？</li><li>集合Set实现Hash怎么防止碰撞</li><li>ArrayList和LinkedList的区别，以及应用场景</li><li>数组和链表的区别</li><li>二叉树的深度优先遍历和广度优先遍历的具体实现</li><li>堆的结构</li><li>堆和树的区别</li><li>堆和栈在内存中的区别是什么(解答提示：可以从数据结构方面以及实际实现方面两个方面去回答)？</li><li>什么是深拷贝和浅拷贝</li><li>手写链表逆序代码</li><li>讲一下对树，B+树的理解</li><li>讲一下对图的理解</li><li>判断单链表成环与否？</li><li>链表翻转（即：翻转一个单项链表）</li><li>合并多个单有序链表（假设都是递增的）</li></ol><h2 id="线程-多线程-线程池"><a href="#线程-多线程-线程池" class="headerlink" title="线程 多线程 线程池"></a>线程 多线程 线程池</h2><ol><li>开启线程的三种方式？</li><li>线程和进程的区别？</li><li>为什么要有线程，而不是仅仅用进程？</li><li>run()和start()方法区别</li><li>如何控制某个方法允许并发访问线程的个数？</li><li>在Java中wait和seelp方法的不同；</li><li>谈谈wait/notify关键字的理解</li><li>什么导致线程阻塞？</li><li>线程如何关闭？</li><li>讲一下java中的同步的方法</li><li>数据一致性如何保证？</li><li>如何保证线程安全？</li><li>如何实现线程同步？</li><li>两个进程同时要求写或者读，能不能实现？如何防止进程的同步？</li><li>线程间操作List</li><li>Java中对象的生命周期</li><li>Synchronized用法</li><li>synchronize的原理</li><li>谈谈对Synchronized关键字，类锁，方法锁，重入锁的理解</li><li>static synchronized 方法的多线程访问和作用</li><li>同一个类里面两个synchronized方法，两个线程同时访问的问题</li><li>volatile的原理</li><li>谈谈volatile关键字的用法</li><li>谈谈volatile关键字的作用</li><li>谈谈NIO的理解</li><li>synchronized 和volatile 关键字的区别</li><li>synchronized与Lock的区别</li><li>ReentrantLock 、synchronized和volatile比较</li><li>ReentrantLock的内部实现</li><li>lock原理</li><li>死锁的四个必要条件？</li><li>怎么避免死锁？</li><li>对象锁和类锁是否会互相影响？</li><li>什么是线程池，如何使用?</li><li>Java的并发、多线程、线程模型</li><li>谈谈对多线程的理解</li><li>多线程有什么要注意的问题？</li><li>谈谈你对并发编程的理解并举例说明</li><li>谈谈你对多线程同步机制的理解？</li><li>如何保证多线程读写文件的安全？</li><li>多线程断点续传原理</li><li>断点续传的实现</li></ol><h1 id="跨平台开发面试题"><a href="#跨平台开发面试题" class="headerlink" title="跨平台开发面试题"></a>跨平台开发面试题</h1><ol><li>flutter</li><li>Html5项目实战</li><li>HTML&amp;CSS&amp;JavaScript 实战</li><li>WordPress搭建网站项目实战</li><li>前端Vue架构</li><li>前端样式开发</li><li>Weex内置能力</li><li>Weex原生应用</li><li>Weex扩展框架</li><li>WeexUI架构</li><li>介绍你做过的哪些项目</li><li>都使用过哪些框架、平台？</li><li>都使用过哪些自定义控件？</li><li>研究比较深入的领域有哪些？</li><li>对业内信息的关注渠道有哪些？</li><li>最近都读哪些书？</li><li>有没有什么开源项目？</li><li>自己最擅长的技术点，最感兴趣的技术领域和技术点</li><li>项目中用了哪些开源库，如何避免因为引入开源库而导致的安全性和稳定性问题</li></ol><h1 id="C-C-面试题"><a href="#C-C-面试题" class="headerlink" title="C/C++面试题"></a>C/C++面试题</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;在2019年元旦之前，在网络上，各大媒体中都在说2019资本寒冬即将到来。对于在资本寒冬出来找工作的同学确实需要很大的勇气和资本，像我这样的二把刀，真的不敢做这个决定。但是秉着居安思危的思想，我觉得在2019年年中的时候，还是有必要把android的面试题总结一下，因为我觉得这个对于对于我们学习知识，查漏补缺都是受益匪浅。&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
    <category term="面试" scheme="http://www.paulniu.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>android奇技淫巧 03 RecyclerView分组悬浮列表</title>
    <link href="http://www.paulniu.com/2019/06/13/android-tools-03/"/>
    <id>http://www.paulniu.com/2019/06/13/android-tools-03/</id>
    <published>2019-06-13T14:40:20.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>列表展示是在开发中经常使用到的功能，通常通过ListView或RecyclerView控件来实现。但是在列表展示中可能会碰到这样的需求，要求对列表进行分组展示，魅族都有标题itemview和内容itemview两部分组成。下面的是效果图：</p><span id="more"></span><p>LinearLayoutManager:<br><img src="" alt="LinearLayoutManager"></p><p>GridLayoutManager:<br><img src="" alt="GridLayoutManager"></p><p>具体实现</p><p>其实我们都知道在RecyclerView中有一个叫做RecyclerView.ItemDecoration的对象。这个对象一般是表示对RecyclerView的item的修饰。通过这个对象我们可以给每一个item添加修饰样式，比如padding，或者分割线等。这里我们其实就是通过RecyclerView.ItemDecoration来实现悬浮样式的。</p><p>首先我们来看一下在RecyclerView.ItemDecoration中的几个函数</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 可以通过重写这个函数给RecyclerView绘制任意合适的decorations(装饰)</span></span><br><span class="line"><span class="comment">* 会在RecyclerView item绘制之前绘制。可以认为是绘制在RecyclerView的下面</span></span><br><span class="line"><span class="comment">* 会在RecyclerView类的onDraw()里面调用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">public void on<span class="constructor">Draw(Canvas <span class="params">c</span>, RecyclerView <span class="params">parent</span>, RecyclerView.State <span class="params">state</span>)</span> &#123;</span><br><span class="line">on<span class="constructor">Draw(<span class="params">c</span>, <span class="params">parent</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* deprecated掉的函数我们不管，忽视掉，不建议使用了</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">@Deprecated</span><br><span class="line">public void on<span class="constructor">Draw(Canvas <span class="params">c</span>, RecyclerView <span class="params">parent</span>)</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 可以通过重写这个函数给RecyclerView绘制任意合适的decorations(装饰)</span></span><br><span class="line"><span class="comment">* 会在RecyclerView item绘制之后绘制。可以认为是绘制在RecyclerView的上面(在上面在盖一层)</span></span><br><span class="line"><span class="comment">* 会在RecyclerView类的super.draw()之后调用,</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">public void on<span class="constructor">DrawOver(Canvas <span class="params">c</span>, RecyclerView <span class="params">parent</span>, RecyclerView.State <span class="params">state</span>)</span> &#123;</span><br><span class="line">on<span class="constructor">DrawOver(<span class="params">c</span>, <span class="params">parent</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* deprecated掉的函数不建议使用了，忽视掉</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">@Deprecated</span><br><span class="line">public void on<span class="constructor">DrawOver(Canvas <span class="params">c</span>, RecyclerView <span class="params">parent</span>)</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* deprecated掉的函数不建议使用了，忽视掉</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">@Deprecated</span><br><span class="line">public void get<span class="constructor">ItemOffsets(Rect <span class="params">outRect</span>, <span class="params">int</span> <span class="params">itemPosition</span>, RecyclerView <span class="params">parent</span>)</span> &#123;</span><br><span class="line">outRect.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 给RecyclerView　item对应的每个view增加一些offsets(你可以这么认为item对应的view外面还有一层布局，给这个布局增加padding)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">public void get<span class="constructor">ItemOffsets(Rect <span class="params">outRect</span>, View <span class="params">view</span>, RecyclerView <span class="params">parent</span>, RecyclerView.State <span class="params">state</span>)</span> &#123;</span><br><span class="line">get<span class="constructor">ItemOffsets(<span class="params">outRect</span>, ((RecyclerView.LayoutParams)</span> view.get<span class="constructor">LayoutParams()</span>).get<span class="constructor">ViewLayoutPosition()</span>, parent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里我们发现ItemDecoration为我们提供了三个方法，分别是onDraw(),onDrawOver(),getItemOffsets()，这几个对象从字面上我们基本上也能猜出个大概。getItemOffsets()函数是在每一个子View测量的时候调用的，用来设定每个子View的offset(间距).onDraw()方法是在RecyclerView中的onDraw方法是会调用。onDrawOver()方法会在RecyclerView中的onDraw方法中调用。其中onDraw()方法和onDrawOver()都是在RecyclerView中的onDraw方法中调用，我们可以认为，onDraw是在RecyclerView的View绘制时调用，onDrawOver方法是在RecyclerView的内容绘制完成之后调用。相当于绘制RecyclerView的上一层视图。</p><p>通过对 RecyclerView.ItemDecoration 类的简单分析，再结合我们分组固定标题 View 的需求，我们是要把每个分组的标题 View 固定在顶部，恩，那肯定是在要绘制在RecyclerView层之上的吧，和RecyclerView.ItemDecoration里面的onDrawOver()函数正好对应上了</p><p>首先，既然有些标题是要固定的，那咱们一定要明确的知道哪些position位置对应的view是标题吧，只能通过adapter做文章了，所有我们就有了一个基础的PinnedHeaderAdapter，代码如下</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PinnedHeaderAdapter&lt;VH</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder&gt;</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter&lt;VH&gt;</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 判断该position对应的位置是要固定</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @param position adapter position</span></span><br><span class="line"><span class="comment">* @return true or false</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">public <span class="keyword">abstract</span> boolean isPinnedPosition(int position);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，RecyclerView.ItemDecoration里面的onDrawOver()函数里面我们做好三件事情就好了:第一，找到当前界面要一直固定在顶部的 View、第二，把找到固定在顶部的 View 画在 RecyclerView 的顶部、第三，当将要到达顶部的标题 View 和已经画在顶部的 View 相遇的时候顶部 view 上移的问题。这三个问题实现起来也不复杂，所以这里我们就直接贴代码了，毕竟代码才是王道吗</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 把要固定的View绘制在上层</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">@Override</span><br><span class="line">public void on<span class="constructor">DrawOver(Canvas <span class="params">c</span>, RecyclerView <span class="params">parent</span>, RecyclerView.State <span class="params">state</span>)</span> &#123;</span><br><span class="line">super.on<span class="constructor">DrawOver(<span class="params">c</span>, <span class="params">parent</span>, <span class="params">state</span>)</span>;</span><br><span class="line"><span class="comment">//确保是PinnedHeaderAdapter的adapter,确保有View</span></span><br><span class="line"><span class="keyword">if</span> (parent.get<span class="constructor">Adapter()</span> instanceof PinnedHeaderAdapter<span class="operator"> &amp;&amp; </span>parent.get<span class="constructor">ChildCount()</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">PinnedHeaderAdapter adapter = (PinnedHeaderAdapter) parent.get<span class="constructor">Adapter()</span>;</span><br><span class="line"><span class="comment">//找到要固定的pin view</span></span><br><span class="line">View firstView = parent.get<span class="constructor">ChildAt(0)</span>;</span><br><span class="line"><span class="built_in">int</span> firstAdapterPosition = parent.get<span class="constructor">ChildAdapterPosition(<span class="params">firstView</span>)</span>;</span><br><span class="line"><span class="built_in">int</span> pinnedHeaderPosition = get<span class="constructor">PinnedHeaderViewPosition(<span class="params">firstAdapterPosition</span>, <span class="params">adapter</span>)</span>;</span><br><span class="line"><span class="keyword">if</span> (pinnedHeaderPosition != -<span class="number">1</span>) &#123;</span><br><span class="line">RecyclerView.ViewHolder pinnedHeaderViewHolder = adapter.on<span class="constructor">CreateViewHolder(<span class="params">parent</span>, <span class="params">adapter</span>.<span class="params">getItemViewType</span>(<span class="params">pinnedHeaderPosition</span>)</span>);</span><br><span class="line">adapter.on<span class="constructor">BindViewHolder(<span class="params">pinnedHeaderViewHolder</span>, <span class="params">pinnedHeaderPosition</span>)</span>;</span><br><span class="line"><span class="comment">//要固定的view</span></span><br><span class="line">View pinnedHeaderView = pinnedHeaderViewHolder.itemView;</span><br><span class="line">ensure<span class="constructor">PinnedHeaderViewLayout(<span class="params">pinnedHeaderView</span>, <span class="params">parent</span>)</span>;</span><br><span class="line"><span class="built_in">int</span> sectionPinOffset = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> index = <span class="number">0</span>; index &lt; parent.get<span class="constructor">ChildCount()</span>; index++) &#123;</span><br><span class="line"><span class="keyword">if</span> (adapter.is<span class="constructor">PinnedPosition(<span class="params">parent</span>.<span class="params">getChildAdapterPosition</span>(<span class="params">parent</span>.<span class="params">getChildAt</span>(<span class="params">index</span>)</span>))) &#123;</span><br><span class="line">View sectionView = parent.get<span class="constructor">ChildAt(<span class="params">index</span>)</span>;</span><br><span class="line"><span class="built_in">int</span> sectionTop = sectionView.get<span class="constructor">Top()</span>;</span><br><span class="line"><span class="built_in">int</span> pinViewHeight = pinnedHeaderView.get<span class="constructor">Height()</span>;</span><br><span class="line"><span class="keyword">if</span> (sectionTop &lt; pinViewHeight<span class="operator"> &amp;&amp; </span>sectionTop &gt; <span class="number">0</span>) &#123;</span><br><span class="line">sectionPinOffset = sectionTop - pinViewHeight;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">int</span> saveCount = c.save<span class="literal">()</span>;</span><br><span class="line">c.translate(<span class="number">0</span>, sectionPinOffset);</span><br><span class="line">c.clip<span class="constructor">Rect(0, 0, <span class="params">parent</span>.<span class="params">getWidth</span>()</span>, pinnedHeaderView.get<span class="constructor">MeasuredHeight()</span>);</span><br><span class="line">pinnedHeaderView.draw(c);</span><br><span class="line">c.restore<span class="constructor">ToCount(<span class="params">saveCount</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;列表展示是在开发中经常使用到的功能，通常通过ListView或RecyclerView控件来实现。但是在列表展示中可能会碰到这样的需求，要求对列表进行分组展示，魅族都有标题itemview和内容itemview两部分组成。下面的是效果图：&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>android奇技淫巧 02 无限循环RecyclerView</title>
    <link href="http://www.paulniu.com/2019/06/12/android-tools-02/"/>
    <id>http://www.paulniu.com/2019/06/12/android-tools-02/</id>
    <published>2019-06-12T14:44:20.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>项目中要实现横向列表的无限循环滚动，自然而然想到了RecyclerView，但我们常用的RecyclerView是不支持无限循环滚动的，所以就需要一些办法让它能够无限循环</p><span id="more"></span><h1 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h1><p>对adapter进行修改<br>网上大部分博客的解决方案都是这种方案，对Adapter做修改。具体如下</p><p>首先，让 Adapter 的 getItemCount() 方法返回 Integer.MAX_VALUE，使得position数据达到很大很大；</p><p>其次，在 onBindViewHolder() 方法里对position参数取余运算，拿到position对应的真实数据索引，然后对itemView绑定数据</p><p>最后，在初始化RecyclerView的时候，让其滑动到指定位置，如 Integer.MAX_VALUE/2，这样就不会滑动到边界了，如果用户一根筋，真的滑动到了边界位置，再加一个判断，如果当前索引是0，就重新动态调整到初始位置</p><p>这个方案是挺简单，但并不完美。一是对我们的数据和索引做了计算操作，二是如果滑动到边界，再动态调整到中间，会有一个不明显的卡顿操作，使得滑动不是很顺畅。所以，直接看方案二。</p><h1 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h1><p>自定义LayoutManager，修改RecyclerView的布局方式<br>这个算得上是一劳永逸的解决方案了，也是我今天要详细介绍的方案。我们都知道，RecyclerView的数据绑定是通过Adapter来处理的，而排版方式以及View的回收控制等，则是通过LayoutManager来实现的，因此我们直接修改itemView的排版方式就可以实现我们的目标，让RecyclerView无限循环。</p><h2 id="自定义LayoutManager"><a href="#自定义LayoutManager" class="headerlink" title="自定义LayoutManager"></a>自定义LayoutManager</h2><ol><li>创建自定义LayoutManager<br>首先，自定义 LooperLayoutManager 继承自 RecyclerView.LayoutManager，然后需要实现抽象方法 generateDefaultLayoutParams()，这个方法的作用是给 itemView 设置默认的LayoutParams，直接返回如下就行<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LooperLayoutManager</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">LayoutManager</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">    public <span class="type">RecyclerView</span>.<span class="type">LayoutParams</span> generateDefaultLayoutParams() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">RecyclerView</span>.<span class="type">LayoutParams</span>(<span class="type">ViewGroup</span>.<span class="type">LayoutParams</span>.<span class="type">WRAP_CONTENT</span>,</span><br><span class="line">                <span class="type">ViewGroup</span>.<span class="type">LayoutParams</span>.<span class="type">WRAP_CONTENT</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>打开滚动开关<br>接着，对滚动方向做处理，重写canScrollHorizontally()方法，打开横向滚动开关。注意我们是实现横向无限循环滚动，所以实现此方法，如果要对垂直滚动做处理，则要实现canScrollVertically()方法<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="function"><span class="title">canScrollHorizontally</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li>对RecyclerView进行初始化布局<br>以上两部是基础工作，接下来，重写 onLayoutChildren() 方法，开始对itemView初始化布局<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">@<span class="function">Override</span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLayoutChildren</span><span class="params">(RecyclerView.Recycler recycler, RecyclerView.State state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">getItemCount</span>() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//标注1.如果当前时准备状态，直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (state.<span class="built_in">isPreLayout</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//标注2.将视图分离放入scrap缓存中，以准备重新对view进行排版</span></span><br><span class="line">        <span class="built_in">detachAndScrapAttachedViews</span>(recycler);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> autualWidth = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">getItemCount</span>(); i++) &#123;</span><br><span class="line">            <span class="comment">//标注3.初始化，将在屏幕内的view填充</span></span><br><span class="line">            View itemView = recycler.<span class="built_in">getViewForPosition</span>(i);</span><br><span class="line">            <span class="built_in">addView</span>(itemView);</span><br><span class="line">            <span class="comment">//标注4.测量itemView的宽高</span></span><br><span class="line">            <span class="built_in">measureChildWithMargins</span>(itemView, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">int</span> width = <span class="built_in">getDecoratedMeasuredWidth</span>(itemView);</span><br><span class="line">            <span class="keyword">int</span> height = <span class="built_in">getDecoratedMeasuredHeight</span>(itemView);</span><br><span class="line">            <span class="comment">//标注5.根据itemView的宽高进行布局</span></span><br><span class="line">            <span class="built_in">layoutDecorated</span>(itemView, autualWidth, <span class="number">0</span>, autualWidth + width, height);</span><br><span class="line"></span><br><span class="line">            autualWidth += width;</span><br><span class="line">            <span class="comment">//标注6.如果当前布局过的itemView的宽度总和大于RecyclerView的宽，则不再进行布局</span></span><br><span class="line">            <span class="keyword">if</span> (autualWidth &gt; <span class="built_in">getWidth</span>()) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>onLayoutChildren() 方法顾名思义，就是对所有的 itemView 进行布局，一般会在初始化和调用 Adapter 的 notifyDataSetChanged() 方法时调用。代码思路已经注释的很清楚了，其中有几个方法需要简单提下：</li></ol><p>标注2处 detachAndScrapAttachedViews(recycler) 方法会将所有的 itemView 从View树中全部detach，然后放入scrap缓存中。了解过RecyclerView的同学应该知道，RecyclerView是有一个二级缓存的，一级缓存是 scrap 缓存,二级缓存是 recycler 缓存，其中从View树上detach的View会放入scrap缓存里，调用removeView()删除的View会放入recycler缓存中。</p><p>标注3处 recycler.getViewForPosition(i)  方法会从缓存中拿到对应索引的 itemView，这个方法内部会先从 scrap 缓存中取 itemView，如果没有则从 recycler 缓存中取，如果还没有则调用 adapter 的 onCreateViewHolder() 去创建 itemView。<br>标注5处 layoutDecorated() 方法会对 itemView 进行布局排版，这里可以看出来，我们是根据宽依次往父容器的右边排下去，直到下一个 itemView的顶点位置超过了RecyclerView 的宽度<br>4. 对RecyclerView进行滚动和回收itemView处理<br>对RecyclerView的子item进行排版布局后，运行一下效果就会出现了，不过这时候我们滑动列表会发现滑动后变成空白了，所以就该对滑动操作进行处理了。<br>前面说过,我们打开了横向滚动的开关，所以对应的，我们要重写 scrollHorizontallyBy()方法进行横向滑动操作。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public <span class="built_in">int</span> scroll<span class="constructor">HorizontallyBy(<span class="params">int</span> <span class="params">dx</span>, RecyclerView.Recycler <span class="params">recycler</span>, RecyclerView.State <span class="params">state</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//标注1.横向滑动的时候，对左右两边按顺序填充itemView</span></span><br><span class="line">        <span class="built_in">int</span> travl = fill(dx, recycler, state);</span><br><span class="line">        <span class="keyword">if</span> (travl<span class="operator"> == </span><span class="number">0</span>) &#123;</span><br><span class="line">            return <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.滑动</span></span><br><span class="line">        offset<span class="constructor">ChildrenHorizontal(-<span class="params">travl</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.回收已经不可见的itemView</span></span><br><span class="line">        recycler<span class="constructor">HideView(<span class="params">dx</span>, <span class="params">recycler</span>, <span class="params">state</span>)</span>;</span><br><span class="line">        return travl;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到，滑动逻辑很简单，总结为三步：</p><ul><li>横向滑动的时候，对左右两边按顺序填充itemView</li><li>滑动itemView</li><li>回收已经不可见的itemView</li></ul><p>首先第一步，滑动的时候调用自定义的 fill() 方法，对左右两边进行填充。还没忘了，我们是来实现循环滑动的，所以这一步尤其重要，先看代码</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 左右滑动的时候，填充</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> fill(<span class="built_in">int</span> dx, RecyclerView.Recycler recycler, RecyclerView.State state) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dx &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//标注1.向左滚动</span></span><br><span class="line">            View lastView = get<span class="constructor">ChildAt(<span class="params">getChildCount</span>()</span> - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (lastView<span class="operator"> == </span>null) &#123;</span><br><span class="line">                return <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">int</span> lastPos = get<span class="constructor">Position(<span class="params">lastView</span>)</span>;</span><br><span class="line">            <span class="comment">//标注2.可见的最后一个itemView完全滑进来了，需要补充新的</span></span><br><span class="line">            <span class="keyword">if</span> (lastView.get<span class="constructor">Right()</span> &lt; get<span class="constructor">Width()</span>) &#123;</span><br><span class="line">                View scrap = null;</span><br><span class="line">                <span class="comment">//标注3.判断可见的最后一个itemView的索引，</span></span><br><span class="line">                <span class="comment">// 如果是最后一个，则将下一个itemView设置为第一个，否则设置为当前索引的下一个</span></span><br><span class="line">                <span class="keyword">if</span> (lastPos<span class="operator"> == </span>get<span class="constructor">ItemCount()</span> - <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (looperEnable) &#123;</span><br><span class="line">                        scrap = recycler.get<span class="constructor">ViewForPosition(0)</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        dx = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    scrap = recycler.get<span class="constructor">ViewForPosition(<span class="params">lastPos</span> + 1)</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (scrap<span class="operator"> == </span>null) &#123;</span><br><span class="line">                    return dx;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//标注4.将新的itemViewadd进来并对其测量和布局</span></span><br><span class="line">                add<span class="constructor">View(<span class="params">scrap</span>)</span>;</span><br><span class="line">                measure<span class="constructor">ChildWithMargins(<span class="params">scrap</span>, 0, 0)</span>;</span><br><span class="line">                <span class="built_in">int</span> width = get<span class="constructor">DecoratedMeasuredWidth(<span class="params">scrap</span>)</span>;</span><br><span class="line">                <span class="built_in">int</span> height = get<span class="constructor">DecoratedMeasuredHeight(<span class="params">scrap</span>)</span>;</span><br><span class="line">                layout<span class="constructor">Decorated(<span class="params">scrap</span>,<span class="params">lastView</span>.<span class="params">getRight</span>()</span>, <span class="number">0</span>,</span><br><span class="line">                        lastView.get<span class="constructor">Right()</span> + width, height);</span><br><span class="line">                return dx;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//向右滚动</span></span><br><span class="line">            View firstView = get<span class="constructor">ChildAt(0)</span>;</span><br><span class="line">            <span class="keyword">if</span> (firstView<span class="operator"> == </span>null) &#123;</span><br><span class="line">                return <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">int</span> firstPos = get<span class="constructor">Position(<span class="params">firstView</span>)</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (firstView.get<span class="constructor">Left()</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                View scrap = null;</span><br><span class="line">                <span class="keyword">if</span> (firstPos<span class="operator"> == </span><span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (looperEnable) &#123;</span><br><span class="line">                        scrap = recycler.get<span class="constructor">ViewForPosition(<span class="params">getItemCount</span>()</span> - <span class="number">1</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        dx = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    scrap = recycler.get<span class="constructor">ViewForPosition(<span class="params">firstPos</span> - 1)</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (scrap<span class="operator"> == </span>null) &#123;</span><br><span class="line">                    return <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                add<span class="constructor">View(<span class="params">scrap</span>, 0)</span>;</span><br><span class="line">                measure<span class="constructor">ChildWithMargins(<span class="params">scrap</span>,0,0)</span>;</span><br><span class="line">                <span class="built_in">int</span> width = get<span class="constructor">DecoratedMeasuredWidth(<span class="params">scrap</span>)</span>;</span><br><span class="line">                <span class="built_in">int</span> height = get<span class="constructor">DecoratedMeasuredHeight(<span class="params">scrap</span>)</span>;</span><br><span class="line">                layout<span class="constructor">Decorated(<span class="params">scrap</span>, <span class="params">firstView</span>.<span class="params">getLeft</span>()</span> - width, <span class="number">0</span>,</span><br><span class="line">                        firstView.get<span class="constructor">Left()</span>, height);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return dx;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>首先分为两部分，往左填充或是往右填充，dx为将要滑动的距离，如果 dx &gt; 0，则是往左边滑动，则需要判断右边的边界，如果最后一个itemView完全显示出来后，在右边填充一个新的itemView。</p><p>看标注3，往右边填充的时候需要检测当前最后一个可见itemView的索引，如果索引是最后一个，则需要新填充的itemView为第0个，这样就可以实现往左边滑动时候无限循环了。然后将需要新填充的itemView进行测量布局操作，将填充进去了。</p><p>同理，往右滑动的逻辑跟往左滑动相似,就不一一再阐述了。</p><p>第二步：填充完新的itemView后，就开始进行滑动了，这里直接调用 LayoutManager 的 offsetChildrenHorizontal() 方法滑动-travl 距离，travl 是通过fill方法计算出来的，通常情况下都为 dx，只有当滑动到最后一个itemView，并且循环滚动开关没有打开的时候才为0，也就是不滚动了。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.滚动</span></span><br><span class="line">       offset<span class="constructor">ChildrenHorizontal(<span class="params">travl</span> <span class="operator">*</span> -1)</span>;</span><br></pre></td></tr></table></figure><p>第三步：回收已经不可见的itemView。只有对不可见的itemView进行回收，才能做到回收利用，防止内存爆增。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回收界面不可见的view</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> void recycler<span class="constructor">HideView(<span class="params">int</span> <span class="params">dx</span>, RecyclerView.Recycler <span class="params">recycler</span>, RecyclerView.State <span class="params">state</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; get<span class="constructor">ChildCount()</span>; i++) &#123;</span><br><span class="line">            View view = get<span class="constructor">ChildAt(<span class="params">i</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span> (view<span class="operator"> == </span>null) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (dx &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//标注1.向左滚动，移除左边不在内容里的view</span></span><br><span class="line">                <span class="keyword">if</span> (view.get<span class="constructor">Right()</span> &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    remove<span class="constructor">AndRecycleView(<span class="params">view</span>, <span class="params">recycler</span>)</span>;</span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">Log</span>.</span></span>d(TAG, <span class="string">&quot;循环: 移除 一个view  childCount=&quot;</span> + get<span class="constructor">ChildCount()</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//标注2.向右滚动，移除右边不在内容里的view</span></span><br><span class="line">                <span class="keyword">if</span> (view.get<span class="constructor">Left()</span> &gt; get<span class="constructor">Width()</span>) &#123;</span><br><span class="line">                    remove<span class="constructor">AndRecycleView(<span class="params">view</span>, <span class="params">recycler</span>)</span>;</span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">Log</span>.</span></span>d(TAG, <span class="string">&quot;循环: 移除 一个view  childCount=&quot;</span> + get<span class="constructor">ChildCount()</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>遍历所有添加进 RecyclerView 里的item，然后根据 itemView 的顶点位置进行判断，移除不可见的item。移除 itemView 调用 removeAndRecycleView(view, recycler) 方法，会对移除的item进行回收，然后存入 RecyclerView 的缓存里。</p><p>至此，一个可以实现左右无限循环的LayoutManager就实现了，调用方式跟通常我们用RrcyclerView没有任何区别，只需要给 RecyclerView 设置 LayoutManager 时指定我们的LayoutManager，如下</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">recyclerView.set<span class="constructor">Adapter(<span class="params">new</span> MyAdapter()</span>);</span><br><span class="line">       LooperLayoutManager layoutManager = <span class="keyword">new</span> <span class="constructor">LooperLayoutManager()</span>;</span><br><span class="line">       layoutManager.set<span class="constructor">LooperEnable(<span class="params">true</span>)</span>;</span><br><span class="line">       recyclerView.set<span class="constructor">LayoutManager(<span class="params">layoutManager</span>)</span>;</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://juejin.im/post/5cfa198ff265da1b8c197c2f">无限循环RecyclerView完美实现</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;项目中要实现横向列表的无限循环滚动，自然而然想到了RecyclerView，但我们常用的RecyclerView是不支持无限循环滚动的，所以就需要一些办法让它能够无限循环&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>android奇技淫巧 01 Coordinatorlayout+appbarLayout</title>
    <link href="http://www.paulniu.com/2019/06/12/android-tools-01/"/>
    <id>http://www.paulniu.com/2019/06/12/android-tools-01/</id>
    <published>2019-06-12T14:40:20.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在好多的App中都会有折叠式布局，给用户提供了很好的体验，其实就是通过Coordinatorlayout + AppbarLayout + CollapsingToolbarLayout三个部分组成的。以前自己学习这个技巧的时候，都是拿来主义，能用就好，对于其中的具体内容并不是非常关心，因为毕竟大部分时间还是要出效果，至于原理，项目是不会在乎的。但是别人不在乎，我们不能不在乎，学到的就是自己的。</p><span id="more"></span><p>这里我会把这三个部分一一拆分，逐一分析，尽量一篇文章搞定</p><h1 id="Toolbar"><a href="#Toolbar" class="headerlink" title="Toolbar"></a>Toolbar</h1><p>从android3.0之后出现了ActionBar，但是这个效果不理想，颜色难看，布局也无法定制，还不如自己写一个ActionBar的好，</p><p>使用方式：</p><ol><li>首先在Activity主题里面将默认Actionbar改为NoActionbar<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;style <span class="attribute">name</span>=<span class="string">&quot;AppTheme&quot;</span> <span class="attribute">parent</span>=<span class="string">&quot;Theme.AppCompat.Light.NoActionBar&quot;</span>&gt;</span><br></pre></td></tr></table></figure></li><li>绑定toolbar，通过setSupportActionBar(toolbar)设置toolbar为标题栏</li><li>设置常用属性：<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">toolbar.set<span class="constructor">NavigationIcon(<span class="params">int</span> <span class="params">resId</span>)</span>;</span><br><span class="line">toolbar.set<span class="constructor">Logo(<span class="params">int</span> <span class="params">resId</span>)</span>;</span><br><span class="line">toolbar.set<span class="constructor">Title(<span class="string">&quot;&quot;</span>)</span>;</span><br><span class="line">toolbar.set<span class="constructor">Subtitle(<span class="string">&quot;&quot;</span>)</span>;</span><br><span class="line">toolbar.set<span class="constructor">OnMenuItemClickListener(Toolbar.OnMenuItemClickListener <span class="params">listener</span>)</span>;</span><br></pre></td></tr></table></figure></li><li>引用菜单<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> <span class="function"><span class="title">onCreateOptionsMenu</span>(<span class="params">Menu menu</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 引入options菜单</span></span><br><span class="line">    getMenuInflater().inflate(R.menu.menu,menu);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在menu文件夹中设置菜单<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">&quot;@+id/menu_01&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">&quot;菜单1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:icon</span>=<span class="string">&quot;@mipmap/icon_menu_01&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:showAsAction</span>=<span class="string">&quot;collapseActionView&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">&quot;@+id/menu_02&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">&quot;菜单2&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:icon</span>=<span class="string">&quot;@mipmap/icon_menu_02&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:showAsAction</span>=<span class="string">&quot;collapseActionView&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>对于showAsAction的可选参数如下：</li></ol><ul><li>ifRoom 会显示在item中，如果空间不足会将后面的item收起来，如果已经有了4个或者4个以上的item则会隐藏在溢出列表中</li><li>never 永远不会显示，只会在藏出列表中显示，而且只显示标题，所以在定义item的时候，最好把标题都带上</li><li>always 无论是否超出空间都会显示</li><li>withText withText值示意Action bar要显示文本标题。Action bar会尽可能的显示这个标题，但是，如果图标有效并且受到Action bar空间的限制，文本标题有可能显示不全</li><li>collapseActionView 声明了这个操作视窗应该被折叠到一个按钮中，当用户选择这个按钮时，这个操作视窗展开。否则，这个操作视窗在默认的情况下是可见的，并且即便在用于不适用的时候，也要占据操作栏的有效空间<br>或者我们可以直接在布局文件中添加Toolbar标签<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.v7.widget.Toolbar</span><br><span class="line"><span class="symbol">android:</span>id=<span class="string">&quot;@+id/toolbar&quot;</span></span><br><span class="line"><span class="symbol">android:</span>layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line"><span class="symbol">android:</span>layout_height=<span class="string">&quot;?attr/actionBarSize&quot;</span></span><br><span class="line"><span class="symbol">app:</span>layout_collapseMode=<span class="string">&quot;pin&quot;</span></span><br><span class="line"><span class="symbol">app:</span>popupTheme=<span class="string">&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span> &gt;</span><br><span class="line"></span><br><span class="line">&lt;TextView</span><br><span class="line"><span class="symbol">android:</span>id=<span class="string">&quot;@+id/tv1&quot;</span></span><br><span class="line"><span class="symbol">android:</span>layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line"><span class="symbol">android:</span>layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line"><span class="symbol">android:</span><span class="keyword">text</span>=<span class="string">&quot;返回&quot;</span></span><br><span class="line"><span class="symbol">android:</span>textSize=<span class="string">&quot;13sp&quot;</span></span><br><span class="line"><span class="symbol">android:</span>textColor=<span class="string">&quot;@android:color/white&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;TextView</span><br><span class="line"><span class="symbol">android:</span>id=<span class="string">&quot;@+id/tv2&quot;</span></span><br><span class="line"><span class="symbol">android:</span>layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line"><span class="symbol">android:</span>layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line"><span class="symbol">android:</span>layout_gravity=<span class="string">&quot;right&quot;</span></span><br><span class="line"><span class="symbol">android:</span>layout_centerHorizontal=<span class="string">&quot;true&quot;</span></span><br><span class="line"><span class="symbol">android:</span>layout_marginRight=<span class="string">&quot;6dp&quot;</span></span><br><span class="line"><span class="symbol">android:</span>gravity=<span class="string">&quot;center&quot;</span></span><br><span class="line"><span class="symbol">android:</span>padding=<span class="string">&quot;4dp&quot;</span></span><br><span class="line"><span class="symbol">android:</span>textColor=<span class="string">&quot;#fff&quot;</span></span><br><span class="line"><span class="symbol">android:</span>textSize=<span class="string">&quot;14sp&quot;</span></span><br><span class="line"><span class="symbol">android:</span><span class="keyword">text</span>=<span class="string">&quot;菜单&quot;</span>/&gt;</span><br><span class="line">&lt;/android.support.v7.widget.Toolbar&gt;</span><br></pre></td></tr></table></figure><h1 id="Coordinatorlayout"><a href="#Coordinatorlayout" class="headerlink" title="Coordinatorlayout"></a>Coordinatorlayout</h1>作用：协调子view的相互关系，比如位置、大小，就像有几个调皮孩子的爸爸，要管管孩子的行为<br><img src="/assets/tips/tip_coordinator_01.jpg" alt="Behavior"><br>开Coordinatorlayout看，Behavior是CoordinatorLayout的一个泛型抽象内部类,所以给子view添加layout_behavior属性是来自于它<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.design.widget.CoordinatorLayout xmlns:tools=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="line"><span class="symbol">xmlns:</span>android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line"><span class="symbol">android:</span>layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line"><span class="symbol">android:</span>layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line"><span class="symbol">android:</span>id=<span class="string">&quot;@+id/coordinatorLayout&quot;</span></span><br><span class="line"><span class="symbol">xmlns:</span>app=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="line"><span class="symbol">tools:</span>context=<span class="string">&quot;com.example.md.mdview.CoordinatorLayoutActivity&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;View</span><br><span class="line"><span class="symbol">android:</span>id=<span class="string">&quot;@+id/view_girl&quot;</span></span><br><span class="line"><span class="symbol">android:</span>layout_width=<span class="string">&quot;70dp&quot;</span></span><br><span class="line"><span class="symbol">android:</span>layout_height=<span class="string">&quot;70dp&quot;</span></span><br><span class="line"><span class="symbol">android:</span>layout_marginLeft=<span class="string">&quot;200dp&quot;</span></span><br><span class="line"><span class="symbol">android:</span>background=<span class="string">&quot;@mipmap/make_music_voice_changer_female&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;View</span><br><span class="line"><span class="symbol">android:</span>id=<span class="string">&quot;@+id/view_uncle&quot;</span></span><br><span class="line"><span class="symbol">android:</span>layout_width=<span class="string">&quot;100dp&quot;</span></span><br><span class="line"><span class="symbol">android:</span>layout_height=<span class="string">&quot;100dp&quot;</span></span><br><span class="line"><span class="symbol">android:</span>background=<span class="string">&quot;@mipmap/make_music_voice_changer_uncle&quot;</span></span><br><span class="line"><span class="symbol">app:</span>layout_behavior=<span class="string">&quot;com.paulniu.RunBehavior&quot;</span>/&gt;</span><br><span class="line">&lt;/android.support.design.widget.CoordinatorLayout&gt;</span><br></pre></td></tr></table></figure>这里提供了一个小例子，布局：两个子view，操作viewgirl，viewuncle也会相应跟着走，这就要写一个联动关系，用自定义Behavior实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunBehavior</span> <span class="keyword">extends</span> <span class="title">CoordinatorLayout</span>.<span class="title">Behavior</span>&lt;<span class="title">View</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RunBehavior</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(context, attrs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onDependentViewChanged</span><span class="params">(CoordinatorLayout parent, View child, View dependency)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> top = dependency.getTop();</span><br><span class="line"><span class="keyword">int</span> left = dependency.getLeft();</span><br><span class="line"></span><br><span class="line">ViewGroup.MarginLayoutParams params = (ViewGroup.MarginLayoutParams) child.getLayoutParams();</span><br><span class="line">params.topMargin = top - <span class="number">400</span>;</span><br><span class="line">params.leftMargin = left;</span><br><span class="line">child.setLayoutParams(params);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">layoutDependsOn</span><span class="params">(CoordinatorLayout parent, View child, View dependency)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>public boolean layoutDependsOn(CoordinatorLayout parent, View child, View dependency)  方法：<br>根据条件过滤判断返回值，返回true联动，返回flase不联动，即behavior不生效<br>public boolean onDependentViewChanged(CoordinatorLayout parent, View child, View dependency)<br>当 dependency这个哥哥发生变化时， 另一个child弟弟也要跟着去玩<br>一个view根据另一个view的变化而变化，  dependency被 child监听<br>功能是child的y值永远比dependency大400像素<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">app:</span>layout_behavior=<span class="string">&quot;com.example.md.mdview.RunBehavior&quot;</span></span><br></pre></td></tr></table></figure>这里一定要写上带参数的构造方法，因为coordinatorlayout是根据反射（所以是包名.类名路径）获取这个behavior，是从这个构造方法获得对象的，否则会出错<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line"><span class="function"><span class="keyword">public</span> boolean <span class="title">onTouch</span>(<span class="params">View v, MotionEvent <span class="keyword">event</span></span>)</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> (<span class="keyword">event</span>.getAction())&#123;</span><br><span class="line"><span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line"><span class="keyword">params</span>.leftMargin = (<span class="built_in">int</span>) (<span class="keyword">event</span>.getX() - viewGirl.getMeasuredWidth() / <span class="number">2</span>);</span><br><span class="line"><span class="keyword">params</span>.topMargin = (<span class="built_in">int</span>) (<span class="keyword">event</span>.getY() - viewGirl.getMeasuredHeight() / <span class="number">2</span>);</span><br><span class="line">viewGirl.setLayoutParams(<span class="keyword">params</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line"><span class="keyword">params</span>.leftMargin = (<span class="built_in">int</span>) (<span class="keyword">event</span>.getX() - viewGirl.getMeasuredWidth() / <span class="number">2</span>);</span><br><span class="line"><span class="keyword">params</span>.topMargin = (<span class="built_in">int</span>) (<span class="keyword">event</span>.getY() - viewGirl.getMeasuredHeight() / <span class="number">2</span>);</span><br><span class="line">viewGirl.setLayoutParams(<span class="keyword">params</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>最后是在界面监听手指的位置，给viewGirl设置手指的位置，viewgril变化了，viewuncle也就随之变化了</li></ul><p>好，在会了Coordinatorlayout的用法，最外层父布局有了，该添加两个子view了。这里里面分别加入AppbarLayout和NestedScrollView作子view，给NestedScrollView加上behavior,就可以让AppbarLayout跟随NestedScrollView的Behavior联动。Android已经自带了app:layout_behavior=”@string/appbar_scrolling_view_behavior”，只要滚动发生，就会给自己的子view（if instance of Appbarlayout）添加滚动事件。不明白这俩控件紧接着看后面讲解。<br>当前布局变为:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;android<span class="selector-class">.support</span><span class="selector-class">.design</span><span class="selector-class">.widget</span><span class="selector-class">.CoordinatorLayout</span></span><br><span class="line">android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">xmlns:app=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="line">android:orientation=<span class="string">&quot;vertical&quot;</span></span><br><span class="line">xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;android<span class="selector-class">.support</span><span class="selector-class">.design</span><span class="selector-class">.widget</span><span class="selector-class">.AppBarLayout</span></span><br><span class="line">android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">android:layout_height=<span class="string">&quot;wrap_content&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;android<span class="selector-class">.support</span><span class="selector-class">.v7</span><span class="selector-class">.widget</span><span class="selector-class">.Toolbar</span></span><br><span class="line">android:id=<span class="string">&quot;@+id/toolbar&quot;</span></span><br><span class="line">android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">android:layout_height=<span class="string">&quot;50dp&quot;</span></span><br><span class="line">android:<span class="attribute">background</span>=<span class="string">&quot;#0e932e&quot;</span></span><br><span class="line">app:layout_collapseMode=<span class="string">&quot;pin&quot;</span>/&gt;</span><br><span class="line">&lt;/android<span class="selector-class">.support</span><span class="selector-class">.design</span><span class="selector-class">.widget</span>.CollapsingToolbarLayout&gt;</span><br><span class="line"></span><br><span class="line">&lt;/android<span class="selector-class">.support</span><span class="selector-class">.design</span><span class="selector-class">.widget</span>.AppBarLayout&gt;</span><br><span class="line"></span><br><span class="line">&lt;android<span class="selector-class">.support</span><span class="selector-class">.v4</span><span class="selector-class">.widget</span><span class="selector-class">.NestedScrollView</span></span><br><span class="line">android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">app:layout_behavior=<span class="string">&quot;@string/appbar_scrolling_view_behavior&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;TextView</span><br><span class="line">android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">android:textSize=<span class="string">&quot;20sp&quot;</span></span><br><span class="line">android:textColor=<span class="string">&quot;#000&quot;</span></span><br><span class="line">android:<span class="attribute">padding</span>=<span class="string">&quot;10dp&quot;</span></span><br><span class="line">android:text=<span class="string">&quot;&quot;</span>/&gt;</span><br><span class="line">&lt;/android<span class="selector-class">.support</span><span class="selector-class">.v4</span><span class="selector-class">.widget</span>.NestedScrollView&gt;</span><br><span class="line"></span><br><span class="line">&lt;/android<span class="selector-class">.support</span><span class="selector-class">.design</span><span class="selector-class">.widget</span>.CoordinatorLayout&gt;</span><br></pre></td></tr></table></figure><h1 id="NestedScrollView"><a href="#NestedScrollView" class="headerlink" title="NestedScrollView"></a>NestedScrollView</h1><p>NestedScrolling机制能够让父View和子View在滚动式进行配合，其基本流程如下：<br>当子view开始滚动之前，可以通知父View，让其先于自己进行滚动；<br>子View自己进行滚动；子view滚动之后，还可以通知父view继续滚动。<br>而要实现这样的交互机制，首先父view要实现NestedScrollingParent接口，而子View需要实现NestedScrollingChild接口，在这套机制中子View是发起者，父view是接受回调并做出响应的<br>下面是几个关键的类和接口</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* NestedScrollView is just like &#123;<span class="doctag">@link</span> android.widget.ScrollView&#125;, but it supports acting</span></span><br><span class="line"><span class="comment">* as both a nested scrolling parent and child on both new and old versions of Android.</span></span><br><span class="line"><span class="comment">* Nested scrolling is enabled by default.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NestedScrollView</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> <span class="keyword">implements</span> <span class="title">NestedScrollingParent</span>,</span></span><br><span class="line"><span class="class"><span class="title">NestedScrollingChild</span>, <span class="title">ScrollingView</span> </span>&#123;</span><br><span class="line"><span class="built_in">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ANIMATED_SCROLL_GAP = <span class="number">250</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">static</span> <span class="keyword">final</span> <span class="keyword">float</span> MAX_SCROLL_FACTOR = <span class="number">0.5</span>f;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">static</span> <span class="keyword">final</span> <span class="keyword">String</span> TAG = <span class="string">&quot;NestedScrollView&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Interface definition for a callback to be invoked when the scroll</span></span><br><span class="line"><span class="comment">* X or Y positions of a view change.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* &lt;p&gt;This version of the interface works on all versions of Android, back to API v4.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@see</span> #setOnScrollChangeListener(OnScrollChangeListener)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnScrollChangeListener</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Called when the scroll position of a view changes.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> v The view whose scroll position has changed.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> scrollX Current horizontal scroll origin.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> scrollY Current vertical scroll origin.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> oldScrollX Previous horizontal scroll origin.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> oldScrollY Previous vertical scroll origin.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">void</span> onScrollChange(NestedScrollView v, <span class="keyword">int</span> scrollX, <span class="keyword">int</span> scrollY,</span><br><span class="line"><span class="keyword">int</span> oldScrollX, <span class="keyword">int</span> oldScrollY);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> long mLastScroll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Rect mTempRect = <span class="keyword">new</span> Rect();</span><br><span class="line"><span class="keyword">private</span> OverScroller mScroller;</span><br><span class="line"><span class="keyword">private</span> EdgeEffect mEdgeGlowTop;</span><br><span class="line"><span class="keyword">private</span> EdgeEffect mEdgeGlowBottom;</span><br><span class="line">······</span><br></pre></td></tr></table></figure><p>//主要接口<br>NestedScrollingChild<br>NestedScrollingParent<br>//帮助类<br>NestedScrollingChildHelper<br>NestedScrollingParentHelper</p><h1 id="AppbarLayout"><a href="#AppbarLayout" class="headerlink" title="AppbarLayout"></a>AppbarLayout</h1><p>继承自Linearlayout，且方向是vertical，它可以让你定制当某个可滚动View的滚动手势发生变化时，其内部的子View实现何种动作。<br>AppBarLayout子View的动作<br>内部的子View通过在布局中加app:layout_scrollFlags设置执行的动作</p><ul><li>·scroll  :子view会跟随滚动事件一起滚动，相当于添加到scrollview头部</li><li>·enterAlways  :只要屏幕下滑，view就会立即拉下出来。</li><li>·snap ：这个属性让控件变得有弹性,如果控件下拉了75%的高度，就会自动展开，如果只有25%显示，就会反弹回去关闭。（去试试支付宝首页吧，就是加了弹性这个效果）</li><li>·exitUntilCollapsed  ：当scrollview滑到订部，再将子view折叠起来</li></ul><p>可以给ViewPager设置行为，就不需要使用NestedScrollView的滑动，实现与AppBarLayout联动。<br>app:layout_behavior=”@string/appbar_scrolling_view_behavior”<br>setExpande(boolean )  设置展开和关闭状态，默认有开关动画</p><h1 id="CollapsingToolbarLayout"><a href="#CollapsingToolbarLayout" class="headerlink" title="CollapsingToolbarLayout"></a>CollapsingToolbarLayout</h1><p>CollapsingToolbarLayout作用是提供了一个可以折叠的Toolbar，它继承自FrameLayout。<br>CollapsingToolbarLayout属性   含义<br>app:title   设置标题<br>app:collapsedTitleGravity=”center”  设置标题位置<br>app:contentScrim    设置折叠时toolbar的颜色，默认是colorPrimary的色值<br>app:statusBarScrim  设置折叠时状态栏的颜色 ，默认是colorPrimaryDark的色值<br>app:layout_collapseParallaxMultiplier   设置视差<br>app:layout_collapseMode=”parallax”  视差模式，在折叠的时候会有个视差折叠的效果<br>app:layout_collapseMode=”pin”   固定模式，在折叠的时候最后固定在顶端<br>使用示例：让图片折叠，让toolbar固定</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;android<span class="selector-class">.support</span><span class="selector-class">.design</span><span class="selector-class">.widget</span><span class="selector-class">.AppBarLayout</span></span><br><span class="line">android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">android:layout_height=<span class="string">&quot;wrap_content&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;android<span class="selector-class">.support</span><span class="selector-class">.design</span><span class="selector-class">.widget</span><span class="selector-class">.CollapsingToolbarLayout</span></span><br><span class="line">android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">app:layout_scrollFlags=<span class="string">&quot;scroll|exitUntilCollapsed&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;ImageView</span><br><span class="line">android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">android:layout_height=<span class="string">&quot;200dp&quot;</span></span><br><span class="line">android:<span class="attribute">background</span>=<span class="string">&quot;@mipmap/bg&quot;</span></span><br><span class="line">app:layout_collapseMode=<span class="string">&quot;parallax&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;android<span class="selector-class">.support</span><span class="selector-class">.v7</span><span class="selector-class">.widget</span><span class="selector-class">.Toolbar</span></span><br><span class="line">android:id=<span class="string">&quot;@+id/toolbar&quot;</span></span><br><span class="line">android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">android:minHeight=<span class="string">&quot;50dp&quot;</span></span><br><span class="line">android:<span class="attribute">background</span>=<span class="string">&quot;#000&quot;</span></span><br><span class="line">app:layout_collapseMode=<span class="string">&quot;pin&quot;</span>/&gt;</span><br><span class="line">&lt;/android<span class="selector-class">.support</span><span class="selector-class">.design</span><span class="selector-class">.widget</span>.CollapsingToolbarLayout&gt;</span><br><span class="line"></span><br><span class="line">&lt;/android<span class="selector-class">.support</span><span class="selector-class">.design</span><span class="selector-class">.widget</span>.AppBarLayout&gt;</span><br></pre></td></tr></table></figure><p>添加flags可以设置系统状态栏为透明，如果最顶上是背景这样用效果更佳</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">get<span class="constructor">Window()</span>.add<span class="constructor">Flags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS)</span>;</span><br><span class="line">set<span class="constructor">ContentView(R.<span class="params">layout</span>.<span class="params">activity_main</span>)</span>;</span><br></pre></td></tr></table></figure><p>实现toolbar渐变颜色：AppbarLayout提供了滑动偏移监听，偏移量除以appbar总高度可以得到当前滑动百分比。注意：这个verticalOffset是0或者负数，需要转绝对值</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">appbarLayout.add<span class="constructor">OnOffsetChangedListener(<span class="params">new</span> AppBarLayout.OnOffsetChangedListener()</span> &#123;</span><br><span class="line">@Override</span><br><span class="line">public void on<span class="constructor">OffsetChanged(AppBarLayout <span class="params">appBarLayout</span>, <span class="params">int</span> <span class="params">verticalOffset</span>)</span> &#123;</span><br><span class="line"><span class="comment">//verticalOffset始终为0以下的负数</span></span><br><span class="line"><span class="built_in">float</span> percent = (<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>abs(verticalOffset<span class="operator"> * </span><span class="number">1.0</span>f)/appBarLayout.get<span class="constructor">TotalScrollRange()</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;现在好多的App中都会有折叠式布局，给用户提供了很好的体验，其实就是通过Coordinatorlayout + AppbarLayout + CollapsingToolbarLayout三个部分组成的。以前自己学习这个技巧的时候，都是拿来主义，能用就好，对于其中的具体内容并不是非常关心，因为毕竟大部分时间还是要出效果，至于原理，项目是不会在乎的。但是别人不在乎，我们不能不在乎，学到的就是自己的。&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>重拾android路(二十四) Android自定义键盘</title>
    <link href="http://www.paulniu.com/2019/05/08/android-25-keyboard/"/>
    <id>http://www.paulniu.com/2019/05/08/android-25-keyboard/</id>
    <published>2019-05-08T03:27:11.000Z</published>
    <updated>2021-06-21T09:30:28.202Z</updated>
    
    <content type="html"><![CDATA[<p>目前公司项目集成的是阿里云旺的IM通信系统，这套系统现在已经过时了，而且项目组已经不再维护了。所以决定将IM模块重新设置一遍。然后在这个过程中，我负责了聊天键盘的操作，这个过程让我对键盘和语音播放的内容有了进一步的认识，写篇博客，记录一下</p><span id="more"></span><h1 id="IMChatPanel"><a href="#IMChatPanel" class="headerlink" title="IMChatPanel"></a>IMChatPanel</h1><p>聊天系统中的软键盘，这个模块的重点在于显示键盘和显示扩展模块。想说一下我的思路:<br>我们想完成一个移植性比较高的聊天键盘，所以我们需要将键盘中的操作都已接口的形式暴露出来，包括表情的点击事件，语音录制，拍照等功能。<br>除此之外，我们还要想着将键盘的高度和系统软键盘的高度保持一致。那么下面我们一步一步的实现我们的功能</p><h2 id="创建输入框基本布局页面"><a href="#创建输入框基本布局页面" class="headerlink" title="创建输入框基本布局页面"></a>创建输入框基本布局页面</h2><p>首先我们创建一个名为IMChatPanelView的类作为我们的软键盘自定义view。因为这里我们想要实现的效果是上面有一个输入框，下面是软键盘的扩展，所以这里我们直接采用线性布局，让IMChatPanelView继承自LinearLayout。通过LayoutInflate引入一个xml文件作为基本布局，布局的文件比较简单，我们直接看代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/includeChatKeyboardBar&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">layout</span>=<span class="string">&quot;@layout/view_chat_keyboard_bar&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_above</span>=<span class="string">&quot;@+id/llFcExpandContainer&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--更多页面的容器，用来放置表情，更多，语音Fragment--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/rlVckExpandContainer&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#FFFFFF&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:visibility</span>=<span class="string">&quot;gone&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里我们会发现，外层是一个LinearLayout，里面有两个子view，一个是<code>include</code>另外一个是<code>RelativeLayout</code>。其中<code>RelativeLayout</code>是专门用来存放软键盘扩展的，比如表情，更多的页面，我们通过Fragment引入到这个RelativeLayout中。再来看一下我们引入的<code>include</code>布局中有的内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/llVckbContainer&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;#FFFFFF&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">&quot;center_vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center_vertical&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--常用语--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/tvVckbPhrase&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginBottom</span>=<span class="string">&quot;7dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;7dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginStart</span>=<span class="string">&quot;7dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;7dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;@drawable/bg_button_square_rededge_selector&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:gravity</span>=<span class="string">&quot;center_vertical&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:paddingBottom</span>=<span class="string">&quot;7dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:paddingLeft</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:paddingRight</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:paddingTop</span>=<span class="string">&quot;7dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@string/chat_keyboard_phrase_txt&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">&quot;#f04d52&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;12sp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--输入框--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">com.renrui.job.widget.im.chatkeyboard.IMChatPanelEditTextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/etVckbInput&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_centerVertical</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginBottom</span>=<span class="string">&quot;7dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;7dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;7dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;@drawable/bg_chatting_keyboard_input&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:maxLength</span>=<span class="string">&quot;1024&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:maxLines</span>=<span class="string">&quot;4&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:minHeight</span>=<span class="string">&quot;32dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:padding</span>=<span class="string">&quot;4dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;16sp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:visibility</span>=<span class="string">&quot;visible&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--显示和隐藏表情--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">CheckBox</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/cbVckbSmily&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;27dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;27dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_gravity</span>=<span class="string">&quot;right|center_vertical&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;7dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;@drawable/chatting_expand_bar_smily_selector&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:button</span>=<span class="string">&quot;@null&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/flVckbAddSendContainer&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;7dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginRight</span>=<span class="string">&quot;7dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--显示和隐藏更多--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">CheckBox</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/cbVckbMore&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;27dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;27dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:background</span>=<span class="string">&quot;@drawable/chatting_expand_bar_more_selector&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:button</span>=<span class="string">&quot;@null&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:visibility</span>=<span class="string">&quot;visible&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--发送按钮--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/btnVckbSendBtn&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;30dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:background</span>=<span class="string">&quot;@drawable/chatting_expand_bar_send_btn&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:clickable</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:singleLine</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;@string/button_send&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;#ffffff&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;12sp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:visibility</span>=<span class="string">&quot;gone&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;1dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#C4C7C9&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这段代码中，除了输入框之后，都是我们在日常开发中会使用到的控件，里面的布局和使用方法，我们略过，只看一下输入框。这个输入框里我们其实做的东西比不多，只是监听了系统的复制粘贴等操作。具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Desc: 自定义输入框，为了实现监听剪切板复制粘贴操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IMChatPanelEditTextView</span> <span class="keyword">extends</span> <span class="title">AppCompatEditText</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 剪切板操作接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnClipKeyboardDelegateCallback</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onPaste</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line">    <span class="keyword">private</span> OnClipKeyboardDelegateCallback mClipKeyboardCallback;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IMChatPanelEditTextView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IMChatPanelEditTextView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IMChatPanelEditTextView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClipKeyboardCallback</span><span class="params">(OnClipKeyboardDelegateCallback callback)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mClipKeyboardCallback = callback;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输入框菜单操作 包括了复制 粘贴等</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTextContextMenuItem</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id == android.R.id.paste) &#123;</span><br><span class="line">            <span class="comment">// 粘贴</span></span><br><span class="line">            <span class="keyword">if</span> (mClipKeyboardCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mClipKeyboardCallback.onPaste();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTextContextMenuItem(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了布局文件之后，我们只需要在initView的时候，通过<code>mRoot = LayoutInflater.from(mContext).inflate(R.layout.view_chat_keyboard, this);</code>这句代码引入，就可以获取当前页面的rootView了。至于后面的比如控件实例化，添加点击事件，我们就不再一一赘述。</p><h2 id="设置RelativeLayout"><a href="#设置RelativeLayout" class="headerlink" title="设置RelativeLayout"></a>设置RelativeLayout</h2><p>上面我们说了，RelativeLayout主要是用来切换不同的场景的，以方便可以显示表情，另外一方面可以完成动态添加Fragment。<br>主要代码：</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;目前公司项目集成的是阿里云旺的IM通信系统，这套系统现在已经过时了，而且项目组已经不再维护了。所以决定将IM模块重新设置一遍。然后在这个过程中，我负责了聊天键盘的操作，这个过程让我对键盘和语音播放的内容有了进一步的认识，写篇博客，记录一下&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>重拾android路(二十五) Android动画</title>
    <link href="http://www.paulniu.com/2019/04/08/android-26-anim/"/>
    <id>http://www.paulniu.com/2019/04/08/android-26-anim/</id>
    <published>2019-04-08T03:27:11.000Z</published>
    <updated>2021-06-21T09:30:32.003Z</updated>
    
    <content type="html"><![CDATA[<p>总的来说Android的动画一共分为三种，分别是间补动画，帧动画和属性动画。间补动画和帧动画比较简单，这里会简单介绍，对于属性动画，可能会说的更多一些</p><span id="more"></span><h1 id="间补动画-Tween"><a href="#间补动画-Tween" class="headerlink" title="间补动画(Tween)"></a>间补动画(Tween)</h1><p>所谓的间补动画，就是指改变了当前图像的显示位置，样式和形式，但是对于组件的本身来说依然是保持原来的样子。举个例子来说就是如果我们通过间补动画将一个ImageView进行了移动，表面上看上去我们的ImageView是发生了移动，但是实际上，只是显示的改变，实际位置还是保留在原地，如果想要针对这个ImageView触发一些点击滑动事件，触发点还在原来的位置上。</p><blockquote><p>间补动画分为以下几个内容：平移，旋转，缩放和透明度</p></blockquote><p>位移改变的动画。创建动画时只需要指定动画开始的位置(以x，y坐标展示)，结束时的位置，并指出动画持续的时间即可<br>这里我们需要知道，基本上间补动画都是通过XML文件完成的操作，所以这里我们直接使用。需要将所需要的XML文件放在res/anim文件夹下</p><h3 id="淡入淡出"><a href="#淡入淡出" class="headerlink" title="淡入淡出"></a>淡入淡出</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alpha</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:duration</span>=<span class="string">&quot;1000&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:fromAlpha</span>=<span class="string">&quot;1.0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:interpolator</span>=<span class="string">&quot;@android:anim/accelerate_decelerate_interpolator&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:toAlpha</span>=<span class="string">&quot;0.0&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>这里的interpolator 表示插值器，表示的是当前动画变化的速度。可以通过 @android:anim 来选择不同的插值器。</p><h3 id="放缩"><a href="#放缩" class="headerlink" title="放缩"></a>放缩</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml <span class="attribute">version</span>=<span class="string">&quot;1.0&quot;</span> <span class="attribute">encoding</span>=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;scale xmlns:<span class="attribute">android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    android:<span class="attribute">duration</span>=<span class="string">&quot;1000&quot;</span></span><br><span class="line">    android:<span class="attribute">fromXScale</span>=<span class="string">&quot;0.0&quot;</span></span><br><span class="line">    android:<span class="attribute">fromYScale</span>=<span class="string">&quot;0.0&quot;</span></span><br><span class="line">    android:<span class="attribute">pivotX</span>=<span class="string">&quot;50%&quot;</span></span><br><span class="line">    android:<span class="attribute">pivotY</span>=<span class="string">&quot;50%&quot;</span></span><br><span class="line">    android:<span class="attribute">toXScale</span>=<span class="string">&quot;1.0&quot;</span></span><br><span class="line">    android:<span class="attribute">toYScale</span>=<span class="string">&quot;1.0&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h3 id="平移"><a href="#平移" class="headerlink" title="平移"></a>平移</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rotate</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:fromDegree</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:toDegree</span>=<span class="string">&quot;1800&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:pivotX</span> = <span class="string">&quot;50%&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:pivotY</span>=<span class="string">&quot;50%&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:duration</span> = <span class="string">&quot;3000&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><p>pivot 这个属性主要是在translate 和 scale 动画中，这两种动画都牵扯到view 的“物理位置“发生变化，所以需要一个参考点。而pivotX和pivotY就共同决定了这个点；它的值可以是float或者是百分比数值。<br>以 pivotX 为例，说明其取不同的值的含义：<br>10:距离动画所在view自身左边缘10像素<br>10% :距离动画所在view自身左边缘 的距离是整个view宽度的10%<br>10%p:距离动画所在view父控件左边缘的距离是整个view宽度的10%</p><h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">rotate</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromDegrees</span>=<span class="string">&quot;float&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toDegrees</span>=<span class="string">&quot;float&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pivotX</span>=<span class="string">&quot;50%&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pivotY</span>=<span class="string">&quot;50%&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>这样定义完成之后，就可以直接使用了</p><p>一个小例子<br>动画资源</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:interpolator</span>=<span class="string">&quot;@android:anim/accelerate_decelerate_interpolator&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scale</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">&quot;3000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromXScale</span>=<span class="string">&quot;0.0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromYScale</span>=<span class="string">&quot;0.0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pivotX</span>=<span class="string">&quot;50%&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pivotY</span>=<span class="string">&quot;50%&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toXScale</span>=<span class="string">&quot;1.0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toYScale</span>=<span class="string">&quot;1.0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">alpha</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">&quot;3000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromAlpha</span>=<span class="string">&quot;1.0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toAlpha</span>=<span class="string">&quot;0.5&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rotate</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromDegrees</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toDegrees</span>=<span class="string">&quot;720&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pivotX</span> = <span class="string">&quot;50%&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pivotY</span>=<span class="string">&quot;50%&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span> = <span class="string">&quot;3000&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">translate</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromXDelta</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toXDelta</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromYDelta</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toYDelta</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以使用java代码实现</p><h3 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Animation translateAnimation = new TranslateAnimation(<span class="number">0</span>，<span class="number">500</span>，<span class="number">0</span>，<span class="number">500</span>);</span><br><span class="line">        <span class="regexp">//</span> 创建平移动画的对象：平移动画对应的Animation子类为TranslateAnimation</span><br><span class="line">        <span class="regexp">//</span> 参数分别是：</span><br><span class="line">        <span class="regexp">//</span> <span class="number">1</span>. fromXDelta ：视图在水平方向x 移动的起始值</span><br><span class="line">        <span class="regexp">//</span> <span class="number">2</span>. toXDelta ：视图在水平方向x 移动的结束值</span><br><span class="line">        <span class="regexp">//</span> <span class="number">3</span>. fromYDelta ：视图在竖直方向y 移动的起始值</span><br><span class="line">        <span class="regexp">//</span> <span class="number">4</span>. toYDelta：视图在竖直方向y 移动的结束值</span><br><span class="line">        translateAnimation.setDuration(<span class="number">3000</span>);</span><br><span class="line">        <span class="regexp">//</span> 播放动画直接 startAnimation(translateAnimation)</span><br><span class="line">        <span class="regexp">//</span>如：</span><br><span class="line">        mButton.startAnimation(translateAnimation);</span><br></pre></td></tr></table></figure><h3 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Animation scaleAnimation= new ScaleAnimation(<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>,Animation.RELATIVE_TO_SELF,<span class="number">0.5</span>f,Animation.RELATIVE_TO_SELF,<span class="number">0.5</span>f);</span><br><span class="line">        <span class="regexp">//</span> <span class="number">1</span>. fromX ：动画在水平方向X的结束缩放倍数</span><br><span class="line">        <span class="regexp">//</span> <span class="number">2</span>. toX ：动画在水平方向X的结束缩放倍数</span><br><span class="line">        <span class="regexp">//</span> <span class="number">3</span>. fromY ：动画开始前在竖直方向Y的起始缩放倍数</span><br><span class="line">        <span class="regexp">//</span> <span class="number">4</span>. toY：动画在竖直方向Y的结束缩放倍数</span><br><span class="line">        <span class="regexp">//</span> <span class="number">5</span>. pivotXType:缩放轴点的x坐标的模式</span><br><span class="line">        <span class="regexp">//</span> <span class="number">6</span>. pivotXValue:缩放轴点x坐标的相对值</span><br><span class="line">        <span class="regexp">//</span> <span class="number">7</span>. pivotYType:缩放轴点的y坐标的模式</span><br><span class="line">        <span class="regexp">//</span> <span class="number">8</span>. pivotYValue:缩放轴点y坐标的相对值</span><br><span class="line">        <span class="regexp">//</span> pivotXType = Animation.ABSOLUTE:缩放轴点的x坐标 =  View左上角的原点 在x方向 加上 pivotXValue数值的点(y方向同理)</span><br><span class="line">        <span class="regexp">//</span> pivotXType = Animation.RELATIVE_TO_SELF:缩放轴点的x坐标 = View左上角的原点 在x方向 加上 自身宽度乘上pivotXValue数值的值(y方向同理)</span><br><span class="line">        <span class="regexp">//</span> pivotXType = Animation.RELATIVE_TO_PARENT:缩放轴点的x坐标 = View左上角的原点 在x方向 加上 父控件宽度乘上pivotXValue数值的值 (y方向同理)</span><br><span class="line">        scaleAnimation.setDuration(<span class="number">3000</span>);</span><br><span class="line">        <span class="regexp">//</span> 使用</span><br><span class="line">        mButton.startAnimation(scaleAnimation);</span><br></pre></td></tr></table></figure><h3 id="旋转-1"><a href="#旋转-1" class="headerlink" title="旋转"></a>旋转</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Animation rotateAnimation = new RotateAnimation(<span class="number">0</span>,<span class="number">270</span>,Animation.RELATIVE_TO_SELF,<span class="number">0.5</span>f,Animation.RELATIVE_TO_SELF,<span class="number">0.5</span>f);</span><br><span class="line">        <span class="regexp">//</span> <span class="number">1</span>. fromDegrees ：动画开始时 视图的旋转角度(正数 = 顺时针，负数 = 逆时针)</span><br><span class="line">        <span class="regexp">//</span> <span class="number">2</span>. toDegrees ：动画结束时 视图的旋转角度(正数 = 顺时针，负数 = 逆时针)</span><br><span class="line">        <span class="regexp">//</span> <span class="number">3</span>. pivotXType：旋转轴点的x坐标的模式</span><br><span class="line">        <span class="regexp">//</span> <span class="number">4</span>. pivotXValue：旋转轴点x坐标的相对值</span><br><span class="line">        <span class="regexp">//</span> <span class="number">5</span>. pivotYType：旋转轴点的y坐标的模式</span><br><span class="line">        <span class="regexp">//</span> <span class="number">6</span>. pivotYValue：旋转轴点y坐标的相对值</span><br><span class="line">        <span class="regexp">//</span> pivotXType = Animation.ABSOLUTE:旋转轴点的x坐标 =  View左上角的原点 在x方向 加上 pivotXValue数值的点(y方向同理)</span><br><span class="line">        <span class="regexp">//</span> pivotXType = Animation.RELATIVE_TO_SELF:旋转轴点的x坐标 = View左上角的原点 在x方向 加上 自身宽度乘上pivotXValue数值的值(y方向同理)</span><br><span class="line">        <span class="regexp">//</span> pivotXType = Animation.RELATIVE_TO_PARENT:旋转轴点的x坐标 = View左上角的原点 在x方向 加上 父控件宽度乘上pivotXValue数值的值 (y方向同理)</span><br><span class="line">        rotateAnimation.setDuration(<span class="number">3000</span>);</span><br><span class="line">        mButton.startAnimation(rotateAnimation);</span><br></pre></td></tr></table></figure><h3 id="淡入淡出-1"><a href="#淡入淡出-1" class="headerlink" title="淡入淡出"></a>淡入淡出</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Animation alphaAnimation = <span class="keyword">new</span> <span class="constructor">AlphaAnimation(1,0)</span>;</span><br><span class="line">        <span class="comment">// 1. fromAlpha:动画开始时视图的透明度(取值范围: -1 ~ 1)</span></span><br><span class="line">        <span class="comment">// 2. toAlpha:动画结束时视图的透明度(取值范围: -1 ~ 1)</span></span><br><span class="line">        alphaAnimation.set<span class="constructor">Duration(3000)</span>;</span><br><span class="line">        mButton.start<span class="constructor">Animation(<span class="params">alphaAnimation</span>)</span>;</span><br></pre></td></tr></table></figure><h3 id="组合动画"><a href="#组合动画" class="headerlink" title="组合动画"></a>组合动画</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span> 组合动画设置</span><br><span class="line">        AnimationSet <span class="keyword">set</span>Animation = new AnimationSet<span class="params">(true)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="string">//</span> 特别说明以下情况</span><br><span class="line">        <span class="string">//</span> 因为在下面的旋转动画设置了无限循环<span class="params">(<span class="attr">RepeatCount</span> = INFINITE)</span></span><br><span class="line">        <span class="string">//</span> 所以动画不会结束，而是无限循环</span><br><span class="line">        <span class="string">//</span> 所以组合动画的下面两行设置是无效的</span><br><span class="line">        <span class="keyword">set</span>Animation.<span class="keyword">set</span>RepeatMode<span class="params">(Animation.RESTART)</span>;</span><br><span class="line">        <span class="keyword">set</span>Animation.<span class="keyword">set</span>RepeatCount<span class="params">(1)</span>;<span class="string">//</span> 设置了循环一次,但无效</span><br><span class="line"></span><br><span class="line">        <span class="string">//</span> 旋转动画</span><br><span class="line">        Animation rotate = new RotateAnimation<span class="params">(0,360,Animation.RELATIVE_TO_SELF,0.5f,Animation.RELATIVE_TO_SELF,0.5f)</span>;</span><br><span class="line">        rotate.<span class="keyword">set</span>Duration<span class="params">(1000)</span>;</span><br><span class="line">        rotate.<span class="keyword">set</span>RepeatMode<span class="params">(Animation.RESTART)</span>;</span><br><span class="line">        rotate.<span class="keyword">set</span>RepeatCount<span class="params">(Animation.INFINITE)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="string">//</span> 平移动画</span><br><span class="line">        Animation translate = new TranslateAnimation<span class="params">(TranslateAnimation.RELATIVE_TO_PARENT,-0.5f,</span></span><br><span class="line"><span class="params">                TranslateAnimation.RELATIVE_TO_PARENT,0.5f,</span></span><br><span class="line"><span class="params">                TranslateAnimation.RELATIVE_TO_SELF,0</span></span><br><span class="line"><span class="params">                ,TranslateAnimation.RELATIVE_TO_SELF,0)</span>;</span><br><span class="line">        translate.<span class="keyword">set</span>Duration<span class="params">(10000)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="string">//</span> 透明度动画</span><br><span class="line">        Animation alpha = new AlphaAnimation<span class="params">(1,0)</span>;</span><br><span class="line">        alpha.<span class="keyword">set</span>Duration<span class="params">(3000)</span>;</span><br><span class="line">        alpha.<span class="keyword">set</span>StartOffset<span class="params">(7000)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="string">//</span> 缩放动画</span><br><span class="line">        Animation scale1 = new ScaleAnimation<span class="params">(1,0.5f,1,0.5f,Animation.RELATIVE_TO_SELF,0.5f,Animation.RELATIVE_TO_SELF,0.5f)</span>;</span><br><span class="line">        scale1.<span class="keyword">set</span>Duration<span class="params">(1000)</span>;</span><br><span class="line">        scale1.<span class="keyword">set</span>StartOffset<span class="params">(4000)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="string">//</span> 将创建的子动画添加到组合动画里</span><br><span class="line">        <span class="keyword">set</span>Animation.addAnimation<span class="params">(alpha)</span>;</span><br><span class="line">        <span class="keyword">set</span>Animation.addAnimation<span class="params">(rotate)</span>;</span><br><span class="line">        <span class="keyword">set</span>Animation.addAnimation<span class="params">(translate)</span>;</span><br><span class="line">        <span class="keyword">set</span>Animation.addAnimation<span class="params">(scale1)</span>;</span><br><span class="line">        <span class="string">//</span> 使用</span><br><span class="line">        mButton.startAnimation<span class="params">(setAnimation)</span>;</span><br></pre></td></tr></table></figure><p>有时候我们会有一些需求，如当动画执行完成之后，需要跳转页面，所以我们需要监听动画状态</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Animation</span><span class="selector-class">.addListener</span>(new AnimatorListener() &#123;</span><br><span class="line">          <span class="variable">@Override</span></span><br><span class="line">          public void onAnimationStart(Animation animation) &#123;</span><br><span class="line">              <span class="comment">//动画开始时执行</span></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">           <span class="variable">@Override</span></span><br><span class="line">          public void onAnimationRepeat(Animation animation) &#123;</span><br><span class="line">              <span class="comment">//动画重复时执行</span></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">         <span class="variable">@Override</span></span><br><span class="line">          public void onAnimationCancel()(Animation animation) &#123;</span><br><span class="line">              <span class="comment">//动画取消时执行</span></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="variable">@Override</span></span><br><span class="line">          public void onAnimationEnd(Animation animation) &#123;</span><br><span class="line">              <span class="comment">//动画结束时执行</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure><h3 id="自定义间补动画"><a href="#自定义间补动画" class="headerlink" title="自定义间补动画"></a>自定义间补动画</h3><p>Android 提供了 Animation 作为补间动画抽象基类，而且为该抽象基类提供了 AlphaAnimation、RotationAnimation、ScaleAnimation、TranslateAnimation 四个实现类，这四个实现类只是补间动画的基本形式：透明度、旋转、缩放、位移。但是要实现复杂的动画，就需要继承 Animation。继承 Animation 类关键是要重写一个方法：</p><p>applyTransformation(float interpolatedTime,Transformation t)<br>interploatedTime: 代表了动画的时间进行比。不管动画实际的持续时间如何，当动画播放时，该参数总是从 0 到 1。</p><p>Transformation t:该参数代表了补间动画在不同时刻对图形或组件的变形程度。<br>在实现自定义动画的关键就是重写 applyTransformation 方法时 根据 interpolatedTime 时间来动态地计算动画对图片或视图的变形程度。<br>Transformation 代表了对图片或者视图的变形，该对象封装了一个 Matrix 对象，对它所包装了 Matrix 进行位移、倾斜、旋转等变换时，Transformation 将会控制对应的图片或视图进行相应的变换。<br>为了控制图片或者 View 进行三维空间的变换，还需要借助于 Android 提供的一个 Camera，这个 Camera 并非代表手机摄像头，而是空间变换工具。作用类似于 Matrix，其常用方法如下：<br>getMatrix(Matrix matrix)：将 Camera 所做的变换应用到指定的  matrix 上。<br>rotateX(float deg):将组件沿 X 轴旋转。<br>rotateY(float deg):将组件沿 Y 轴旋转。<br>rotateZ(float deg):将组件沿 Z 轴旋转。<br>translate(float x,float y,float z):目标组件在三维空间里变换。<br>applyToCanvas(Canvas canvas):把 Camera 所做的变换应用到 Canvas 上.<br><img src="/assets/anim/anim01.png" alt="动画坐标系">实现自定义间补动画</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> CustomAnimation extends Animation &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> centerX;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> centerY;</span><br><span class="line">    <span class="comment">// 定义动画的持续事件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> duration;</span><br><span class="line">    <span class="keyword">private</span> Camera camera = <span class="keyword">new</span> <span class="constructor">Camera()</span>;</span><br><span class="line">    public <span class="constructor">CustomAnimation(<span class="params">float</span> <span class="params">x</span>,<span class="params">float</span> <span class="params">y</span>,<span class="params">int</span> <span class="params">duration</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        this.centerX = x;</span><br><span class="line">        this.centerY = y;</span><br><span class="line">        this.duration = duration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void initialize(<span class="built_in">int</span> width, <span class="built_in">int</span> height, <span class="built_in">int</span> parentWidth, <span class="built_in">int</span> parentHeight) &#123;</span><br><span class="line">        super.initialize(width, height, parentWidth, parentHeight);</span><br><span class="line">        <span class="comment">//设置动画的持续时间</span></span><br><span class="line">        set<span class="constructor">Duration(<span class="params">duration</span>)</span>;</span><br><span class="line">        <span class="comment">//设置动画结束后保留效果</span></span><br><span class="line">        set<span class="constructor">FillAfter(<span class="params">true</span>)</span>;</span><br><span class="line">        set<span class="constructor">Interpolator(<span class="params">new</span> LinearInterpolator()</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void apply<span class="constructor">Transformation(<span class="params">float</span> <span class="params">interpolatedTime</span>, Transformation <span class="params">t</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//super.applyTransformation(interpolatedTime, t);</span></span><br><span class="line">        camera.save<span class="literal">()</span>;</span><br><span class="line">        <span class="comment">// 根据 interpolatedTime 时间来控制X,Y,Z 上偏移</span></span><br><span class="line">        camera.translate(<span class="number">100.0</span>f - <span class="number">100.</span>f<span class="operator"> * </span>interpolatedTime,<span class="number">150.0</span>f<span class="operator"> * </span>interpolatedTime - <span class="number">150</span>,<span class="number">80.0</span>f - <span class="number">80.0</span>f<span class="operator"> * </span>interpolatedTime);</span><br><span class="line">        <span class="comment">// 根据 interploatedTime 设置在 X 轴 和 Y 轴旋转</span></span><br><span class="line">        camera.rotate<span class="constructor">X(360 <span class="operator">*</span> <span class="params">interpolatedTime</span>)</span>;</span><br><span class="line">        camera.rotate<span class="constructor">Y(360 <span class="operator">*</span> <span class="params">interpolatedTime</span>)</span>;</span><br><span class="line">        <span class="comment">// 获取 Transformation 参数的 Matrix 对象</span></span><br><span class="line">        Matrix matrix = t.get<span class="constructor">Matrix()</span>;</span><br><span class="line">        camera.get<span class="constructor">Matrix(<span class="params">matrix</span>)</span>;</span><br><span class="line">        matrix.pre<span class="constructor">Translate(-<span class="params">centerX</span>,-<span class="params">centerY</span>)</span>;</span><br><span class="line">        matrix.post<span class="constructor">Translate(<span class="params">centerX</span>,<span class="params">centerY</span>)</span>;</span><br><span class="line">        camera.restore<span class="literal">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用的时候直接调用即可</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">linearLayout.start<span class="constructor">Animation(<span class="params">new</span> CustomAnimation(<span class="params">metrics</span>.<span class="params">xdpi</span><span class="operator">/</span>2,<span class="params">metrics</span>.<span class="params">ydpi</span><span class="operator">/</span>2,3500)</span>);</span><br></pre></td></tr></table></figure><h1 id="逐帧动画"><a href="#逐帧动画" class="headerlink" title="逐帧动画"></a>逐帧动画</h1><p>逐帧动画的原理就是把一系列的静态动画按照一定的顺序播放，形成的动画效果，这种动画在以前的加载动画中会出现</p><h3 id="利用XML实现逐帧动画"><a href="#利用XML实现逐帧动画" class="headerlink" title="利用XML实现逐帧动画"></a>利用XML实现逐帧动画</h3><p>逐帧动画通常是采用 XML 资源进行定义的，需要在 animation-list …/&gt; 标签下使用 &lt;item …/&gt; 子元素标签定义动画的全部帧，并指定各帧的持续时间。<br>定义逐帧动画的语法格式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">animation-list</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">android:oneshot</span>=<span class="string">&quot;true|false&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">&quot;&quot;</span> <span class="attr">android:duration</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">animation-list</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中android:oneshot控制该动画是否循环播放。如果为true，动画将不会循环播放， 否则该动画将会循环播放</p><p>创建一个XML文件放在res/drawable文件夹中<br>这里定义动画的每一帧，素材图片放在drawable文件中</p><p>frame_anim.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">animation-list</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:oneshot</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/frame01&quot;</span> <span class="attr">android:duration</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/frame02&quot;</span> <span class="attr">android:duration</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/frame03&quot;</span> <span class="attr">android:duration</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/frame04&quot;</span> <span class="attr">android:duration</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/frame05&quot;</span> <span class="attr">android:duration</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/frame06&quot;</span> <span class="attr">android:duration</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/frame07&quot;</span> <span class="attr">android:duration</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/frame08&quot;</span> <span class="attr">android:duration</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/frame09&quot;</span> <span class="attr">android:duration</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/frame10&quot;</span> <span class="attr">android:duration</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/frame11&quot;</span> <span class="attr">android:duration</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/frame12&quot;</span> <span class="attr">android:duration</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/frame13&quot;</span> <span class="attr">android:duration</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/frame14&quot;</span> <span class="attr">android:duration</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/frame15&quot;</span> <span class="attr">android:duration</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/frame16&quot;</span> <span class="attr">android:duration</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/frame17&quot;</span> <span class="attr">android:duration</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/frame18&quot;</span> <span class="attr">android:duration</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">animation-list</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在布局文件中直接将AnimationDrawable作为背景</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span> <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_centerHorizontal</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/frame_image&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;200dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;200dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@drawable/frame_animation&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentBottom</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_margin</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">&quot;20dp&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/frame_start&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:onClick</span>=<span class="string">&quot;start&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;start&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/frame_stop&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:onClick</span>=<span class="string">&quot;stop&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;stop&quot;</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在Activity中直接使用即可</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ImageView frame_image;</span><br><span class="line">    AnimationDrawable animationDrawable;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">void</span> <span class="function"><span class="title">onCreate</span>(<span class="params"><span class="meta">@Nullable</span> Bundle savedInstanceState</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_frame_animation);</span><br><span class="line">        frame_image = findViewById(R.id.frame_image);</span><br><span class="line">        <span class="comment">// 获取 AnimationDrawable 对象</span></span><br><span class="line">         animationDrawable = (AnimationDrawable) frame_image.getBackground();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">start</span>(<span class="params">View view</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 开始播放</span></span><br><span class="line">        animationDrawable.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">stop</span>(<span class="params">View view</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//停止播放</span></span><br><span class="line">        animationDrawable.stop();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>同时我们可以通过java代码实现逐帧动画</p><ol><li>首先创建AnimationDrawable对象<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">animationDrawable = <span class="keyword">new</span> <span class="constructor">AnimationDrawable()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i<span class="operator"> ++ </span>)&#123;</span><br><span class="line">        <span class="built_in">int</span> id = get<span class="constructor">Resources()</span>.get<span class="constructor">Identifier(<span class="string">&quot;frame0&quot;</span> + <span class="params">i</span>, <span class="string">&quot;drawable&quot;</span>, <span class="params">getPackageName</span>()</span>);</span><br><span class="line">        Drawable drawable = get<span class="constructor">Resources()</span>.get<span class="constructor">Drawable(<span class="params">id</span>)</span>;</span><br><span class="line">        animationDrawable.add<span class="constructor">Frame(<span class="params">drawable</span>, 100)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">10</span>; i &lt; <span class="number">19</span>; i ++)&#123;</span><br><span class="line">        <span class="built_in">int</span> id = get<span class="constructor">Resources()</span>.get<span class="constructor">Identifier(<span class="string">&quot;frame&quot;</span> + <span class="params">i</span>, <span class="string">&quot;drawable&quot;</span>, <span class="params">getPackageName</span>()</span>);</span><br><span class="line">        Drawable drawable = get<span class="constructor">Resources()</span>.get<span class="constructor">Drawable(<span class="params">id</span>)</span>;</span><br><span class="line">        animationDrawable.add<span class="constructor">Frame(<span class="params">drawable</span>, 100)</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>控制播放和停止<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 开始播放</span></span><br><span class="line">   <span class="comment">// animationDrawable.start();</span></span><br><span class="line"></span><br><span class="line">    animationDrawable.<span class="built_in">setOneShot</span>(<span class="literal">true</span>);</span><br><span class="line">    frame_image.<span class="built_in">setImageDrawable</span>(animationDrawable);</span><br><span class="line">    <span class="comment">// 获取资源对象</span></span><br><span class="line">    animationDrawable.<span class="built_in">stop</span>();</span><br><span class="line">    <span class="comment">// 特别注意：在动画start()之前要先stop()，不然在第一次动画之后会停在最后一帧，这样动画就只会触发一次</span></span><br><span class="line">    animationDrawable.<span class="built_in">start</span>();</span><br><span class="line">    <span class="comment">// 启动动画</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line">    <span class="comment">//停止播放</span></span><br><span class="line">   <span class="comment">// animationDrawable.stop();</span></span><br><span class="line">    animationDrawable.<span class="built_in">setOneShot</span>(<span class="literal">true</span>);</span><br><span class="line">    frame_image.<span class="built_in">setImageDrawable</span>(animationDrawable);</span><br><span class="line">    animationDrawable.<span class="built_in">stop</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>完整代码如下：<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> FrameAnimation extends AppCompatActivity &#123;</span><br><span class="line">    ImageView frame_image;</span><br><span class="line">    AnimationDrawable animationDrawable;</span><br><span class="line">    @Override</span><br><span class="line">    protected void on<span class="constructor">Create(@Nullable Bundle <span class="params">savedInstanceState</span>)</span> &#123;</span><br><span class="line">        super.on<span class="constructor">Create(<span class="params">savedInstanceState</span>)</span>;</span><br><span class="line">        set<span class="constructor">ContentView(R.<span class="params">layout</span>.<span class="params">activity_frame_animation</span>)</span>;</span><br><span class="line">        frame_image = find<span class="constructor">ViewById(R.<span class="params">id</span>.<span class="params">frame_image</span>)</span>;</span><br><span class="line">        <span class="comment">// 获取 AnimationDrawable 对象</span></span><br><span class="line">        <span class="comment">// animationDrawable = (AnimationDrawable) frame_image.getBackground();</span></span><br><span class="line"></span><br><span class="line">        animationDrawable = <span class="keyword">new</span> <span class="constructor">AnimationDrawable()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i<span class="operator"> ++ </span>)&#123;</span><br><span class="line">            <span class="built_in">int</span> id = get<span class="constructor">Resources()</span>.get<span class="constructor">Identifier(<span class="string">&quot;frame0&quot;</span> + <span class="params">i</span>, <span class="string">&quot;drawable&quot;</span>, <span class="params">getPackageName</span>()</span>);</span><br><span class="line">            Drawable drawable = get<span class="constructor">Resources()</span>.get<span class="constructor">Drawable(<span class="params">id</span>)</span>;</span><br><span class="line">            animationDrawable.add<span class="constructor">Frame(<span class="params">drawable</span>, 100)</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">10</span>; i &lt; <span class="number">19</span>; i ++)&#123;</span><br><span class="line">            <span class="built_in">int</span> id = get<span class="constructor">Resources()</span>.get<span class="constructor">Identifier(<span class="string">&quot;frame&quot;</span> + <span class="params">i</span>, <span class="string">&quot;drawable&quot;</span>, <span class="params">getPackageName</span>()</span>);</span><br><span class="line">            Drawable drawable = get<span class="constructor">Resources()</span>.get<span class="constructor">Drawable(<span class="params">id</span>)</span>;</span><br><span class="line">            animationDrawable.add<span class="constructor">Frame(<span class="params">drawable</span>, 100)</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void start(View view)&#123;</span><br><span class="line">        <span class="comment">// 开始播放</span></span><br><span class="line">       <span class="comment">// animationDrawable.start();</span></span><br><span class="line"></span><br><span class="line">        animationDrawable.set<span class="constructor">OneShot(<span class="params">true</span>)</span>;</span><br><span class="line">        frame_image.set<span class="constructor">ImageDrawable(<span class="params">animationDrawable</span>)</span>;</span><br><span class="line">        <span class="comment">// 获取资源对象</span></span><br><span class="line">        animationDrawable.stop<span class="literal">()</span>;</span><br><span class="line">        <span class="comment">// 特别注意：在动画start()之前要先stop()，不然在第一次动画之后会停在最后一帧，这样动画就只会触发一次</span></span><br><span class="line">        animationDrawable.start<span class="literal">()</span>;</span><br><span class="line">        <span class="comment">// 启动动画</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void stop(View view)&#123;</span><br><span class="line">        <span class="comment">//停止播放</span></span><br><span class="line">       <span class="comment">// animationDrawable.stop();</span></span><br><span class="line">        animationDrawable.set<span class="constructor">OneShot(<span class="params">true</span>)</span>;</span><br><span class="line">        frame_image.set<span class="constructor">ImageDrawable(<span class="params">animationDrawable</span>)</span>;</span><br><span class="line">        animationDrawable.stop<span class="literal">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="属性动画"><a href="#属性动画" class="headerlink" title="属性动画"></a>属性动画</h1><p>从Android3.0之后，Android引入了新的动画系统，也就是属性动画，属性动画可以弥补补间动画的一些不足，基本上可以完全替代补间动画。在补间动画中，我们可以通过android.view.animation包下的类和方法帮我们实现多种操作，其实已经是比较完善的，但是在一些特殊的情况下，补间动画并不能满足我们的实际需要，特别是这里说一个，所有的补间动画，虽然在UI效果上是移动了，但是实际上，他在View树中的位置是不变的，也就是说，如果我们想再给这个组件添加点击事件，当我们的动画执行完成之后，点击组件是得不到事件响应的，只有点击组件原来的位置才能响应事件。也就是我看来补间动画最大的缺陷。而属性动画可以很好的避免这样的情况。注意，此处补间动画所有的操作都是针对View的。也就是说，我们是针对一个Button，一个ImageView进行操作。<br>属性动画机制已经不再是针对于View来设计的了，也不限定于只能实现移动、缩放、旋转和淡入淡出这几种动画操作，同时也不再只是一种视觉上的动画效果了。它实际上是一种不断地对值进行操作的机制，并将值赋值到指定对象的指定属性上，可以是任意对象的任意属性。所以我们仍然可以将一个View进行移动或者缩放，但同时也可以对自定义View中的Point对象进行动画操作了。我们只需要告诉系统动画的运行时长，需要执行哪种类型的动画，以及动画的初始值和结束值，剩下的工作就可以全部交给系统去完成了</p><h2 id="ValueAnimator"><a href="#ValueAnimator" class="headerlink" title="ValueAnimator"></a>ValueAnimator</h2><p>ValueAnimator是整个属性动画机制当中最核心的一个类，前面我们已经提到了，属性动画的运行机制是通过不断地对值进行操作来实现的，而初始值和结束值之间的动画过渡就是由ValueAnimator这个类来负责计算的。它的内部使用一种时间循环的机制来计算值与值之间的动画过渡，我们只需要将初始值和结束值提供给ValueAnimator，并且告诉它动画所需运行的时长，那么ValueAnimator就会自动帮我们完成从初始值平滑地过渡到结束值这样的效果。除此之外，ValueAnimator还负责管理动画的播放次数、播放模式、以及对动画设置监听器等，确实是一个非常重要的类。<br>一个小例子，我们想要将一个值从0过渡到1，耗时300毫秒</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ValueAnimator anim = <span class="module-access"><span class="module"><span class="identifier">ValueAnimator</span>.</span></span><span class="keyword">of</span><span class="constructor">Float(0f, 1f)</span>;  </span><br><span class="line">anim.set<span class="constructor">Duration(300)</span>;  </span><br><span class="line">anim.start<span class="literal">()</span>;  </span><br></pre></td></tr></table></figure><p>我们只需要调用ValueAnimator中的ofFloat方法就可以构建一个ValueAnimator对象，ofFloat方法允许传入多个float类型的值，然后这些值就是我们过度的值。再通过setDuration方法设置过度需要的时间，这样姐可以了。最后再通过start方法启动动画即可。之后我们通过注册一个监听器设置基本的操作</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ValueAnimator anim = <span class="module-access"><span class="module"><span class="identifier">ValueAnimator</span>.</span></span><span class="keyword">of</span><span class="constructor">Float(0f, 1f)</span>;  </span><br><span class="line">anim.set<span class="constructor">Duration(300)</span>;  </span><br><span class="line">anim.add<span class="constructor">UpdateListener(<span class="params">new</span> ValueAnimator.AnimatorUpdateListener()</span> &#123;  </span><br><span class="line">    @Override  </span><br><span class="line">    public void on<span class="constructor">AnimationUpdate(ValueAnimator <span class="params">animation</span>)</span> &#123;  </span><br><span class="line">        <span class="built_in">float</span> currentValue = (<span class="built_in">float</span>) animation.get<span class="constructor">AnimatedValue()</span>;  </span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Log</span>.</span></span>d(<span class="string">&quot;TAG&quot;</span>, <span class="string">&quot;cuurent value is &quot;</span> + currentValue);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;);  </span><br><span class="line">anim.start<span class="literal">()</span>;</span><br></pre></td></tr></table></figure><p>可以看到，这里我们通过addUpdateListener()方法来添加一个动画的监听器，在动画执行的过程中会不断地进行回调，我们只需要在回调方法当中将当前的值取出并打印出来，就可以知道动画有没有真正运行了<br>同时我们还可以使用传递多个参数，如传入多个值，那么动画的变化时一样的</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ValueAnimator</span> anim = ValueAnimator.ofFloat(<span class="number">0</span>f, <span class="number">5</span>f, <span class="number">3</span>f, <span class="number">10</span>f);  </span><br><span class="line"><span class="attribute">anim</span>.setDuration(<span class="number">5000</span>);  </span><br><span class="line"><span class="attribute">anim</span>.start();  </span><br></pre></td></tr></table></figure><p>如果我们只需要执行的是int类型，则可以使用ofInt方法。<br>除此之外还有一些别的常用方法，如setStartDelay，设置延时开始动画的时间，setRepeatCount设置动画重复的次数，setRepeatMode设置重复的模式，RESTART重头开始，REVERSE倒着播放。</p><h2 id="ObjectAnimator"><a href="#ObjectAnimator" class="headerlink" title="ObjectAnimator"></a>ObjectAnimator</h2><p>一般情况下，我们通过使用ValueAnimator对值进行平滑过渡，使用的情况比不是非常多，而ObjectAnimator使用的就比较多了。他可以对任意对象的任意值机型操作。虽然说ObjectAnimator使用的情况更多，但是他也是继承自ValueAnimator对象的。<br>一个小例子，如果我们想要TextView在5秒钟从常规变到透明，在从透明变到常规，就可以使用下面的代码</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ObjectAnimator animator = <span class="module-access"><span class="module"><span class="identifier">ObjectAnimator</span>.</span></span><span class="keyword">of</span><span class="constructor">Float(<span class="params">textview</span>, <span class="string">&quot;alpha&quot;</span>, 1f, 0f, 1f)</span>;  </span><br><span class="line">animator.set<span class="constructor">Duration(5000)</span>;  </span><br><span class="line">animator.start<span class="literal">()</span>; </span><br></pre></td></tr></table></figure><p>可以看到，我们还是调用了ofFloat()方法来去创建一个ObjectAnimator的实例，只不过ofFloat()方法当中接收的参数有点变化了。这里第一个参数要求传入一个object对象，我们想要对哪个对象进行动画操作就传入什么，这里我传入了一个textview。第二个参数是想要对该对象的哪个属性进行动画操作，由于我们想要改变TextView的不透明度，因此这里传入”alpha”。后面的参数就是不固定长度了，想要完成什么样的动画就传入什么值，这里传入的值就表示将TextView从常规变换成全透明，再从全透明变换成常规。之后调用setDuration()方法来设置动画的时长，然后调用start()方法启动动画</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ObjectAnimator animator = <span class="module-access"><span class="module"><span class="identifier">ObjectAnimator</span>.</span></span><span class="keyword">of</span><span class="constructor">Float(<span class="params">textview</span>, <span class="string">&quot;rotation&quot;</span>, 0f, 360f)</span>;  </span><br><span class="line">animator.set<span class="constructor">Duration(5000)</span>;  </span><br><span class="line">animator.start<span class="literal">()</span>; </span><br></pre></td></tr></table></figure><p>如果我们想要把textView移除屏幕，再移动回来</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">float</span> curTranslationX = textview.get<span class="constructor">TranslationX()</span>;  </span><br><span class="line">ObjectAnimator animator = <span class="module-access"><span class="module"><span class="identifier">ObjectAnimator</span>.</span></span><span class="keyword">of</span><span class="constructor">Float(<span class="params">textview</span>, <span class="string">&quot;translationX&quot;</span>, <span class="params">curTranslationX</span>, -500f, <span class="params">curTranslationX</span>)</span>;  </span><br><span class="line">animator.set<span class="constructor">Duration(5000)</span>;  </span><br><span class="line">animator.start<span class="literal">()</span>;  </span><br></pre></td></tr></table></figure><p>我们还可以对TextView进行缩放操作</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ObjectAnimator animator = <span class="module-access"><span class="module"><span class="identifier">ObjectAnimator</span>.</span></span><span class="keyword">of</span><span class="constructor">Float(<span class="params">textview</span>, <span class="string">&quot;scaleY&quot;</span>, 1f, 3f, 1f)</span>;  </span><br><span class="line">animator.set<span class="constructor">Duration(5000)</span>;  </span><br><span class="line">animator.start<span class="literal">()</span>;</span><br></pre></td></tr></table></figure><p>其实看到这里我们会发现，其实很多情况下对第二个参数的使用会有一定的疑问，我们这里是用过的有scaleX,scaleY,translationX,translationY,alpha，那么这些字符串是有什么特殊的含义吗？其实是肯定的。查看TextView的源码，我们会发现，在TextView中，我们根本就额没有类似alpha这样的属性，那么到底是如何操作，使TextView实现了透明的效果呢？</p><blockquote><p>textview对象需要根据alpha属性值的改变来不断刷新界面的显示，从而让用户可以看出淡入淡出的动画效果<br>其实ObjectAnimator内部的工作机制并不是直接对我们传入的属性名进行操作的，而是会去寻找这个属性名对应的get和set方法，因此alpha属性所对应的get和set方法应该就是<br>public void setAlpha(float value);<br>public float getAlpha();<br>这两个方法是由View对象提供的</p></blockquote><h2 id="组合动画-1"><a href="#组合动画-1" class="headerlink" title="组合动画"></a>组合动画</h2><p>独立的动画能够实现的视觉效果毕竟是相当有限的，因此将多个动画组合到一起播放就显得尤为重要。Android团队在设计属性动画的时候也充分考虑到了组合动画的功能，因此提供了一套非常丰富的API来让我们将多个动画组合到一起</p><p>实现组合动画功能主要需要借助AnimatorSet这个类，这个类提供了一个play()方法，如果我们向这个方法中传入一个Animator对象(ValueAnimator或ObjectAnimator)将会返回一个AnimatorSet.Builder的实例，AnimatorSet.Builder中包括以下四个方法</p><ul><li>after(Animator anim)   将现有动画插入到传入的动画之后执行</li><li>after(long delay)   将现有动画延迟指定毫秒后执行</li><li>before(Animator anim)   将现有动画插入到传入的动画之前执行</li><li>with(Animator anim)   将现有动画和传入的动画同时执行</li></ul><p>这里我们可以让TextView实现先从屏幕外移动到屏幕内，然后在旋转的过程中完成淡入淡出效果</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ObjectAnimator moveIn = <span class="module-access"><span class="module"><span class="identifier">ObjectAnimator</span>.</span></span><span class="keyword">of</span><span class="constructor">Float(<span class="params">textview</span>, <span class="string">&quot;translationX&quot;</span>, -500f, 0f)</span>;  </span><br><span class="line">ObjectAnimator rotate = <span class="module-access"><span class="module"><span class="identifier">ObjectAnimator</span>.</span></span><span class="keyword">of</span><span class="constructor">Float(<span class="params">textview</span>, <span class="string">&quot;rotation&quot;</span>, 0f, 360f)</span>;  </span><br><span class="line">ObjectAnimator fadeInOut = <span class="module-access"><span class="module"><span class="identifier">ObjectAnimator</span>.</span></span><span class="keyword">of</span><span class="constructor">Float(<span class="params">textview</span>, <span class="string">&quot;alpha&quot;</span>, 1f, 0f, 1f)</span>;  </span><br><span class="line">AnimatorSet animSet = <span class="keyword">new</span> <span class="constructor">AnimatorSet()</span>;  </span><br><span class="line">animSet.play(rotate).<span class="keyword">with</span>(fadeInOut).after(moveIn);  </span><br><span class="line">animSet.set<span class="constructor">Duration(5000)</span>;  </span><br><span class="line">animSet.start<span class="literal">()</span>;</span><br></pre></td></tr></table></figure><p>我们也可以换一种思路：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public void rotatey<span class="constructor">AnimRuns(<span class="params">final</span> View <span class="params">view</span>)</span> &#123;</span><br><span class="line">        ObjectAnimator anim = <span class="module-access"><span class="module"><span class="identifier">ObjectAnimator</span>.</span></span>off<span class="constructor">Float(<span class="params">view</span>,<span class="string">&quot;npl&quot;</span>,1.0f,0.0f)</span>;       </span><br><span class="line">　　　　 anim.set<span class="constructor">Duration(500)</span>;        </span><br><span class="line">         anim.start<span class="literal">()</span>;</span><br><span class="line">        anim.add<span class="constructor">UpdateListener(<span class="params">new</span> AnimatorUpdateListener()</span> &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void on<span class="constructor">AnimationUpdate(ValueAnimator <span class="params">animation</span>)</span> &#123;</span><br><span class="line">                <span class="built_in">float</span> cVal = (Float) animation.get<span class="constructor">AnimatedValue()</span>;</span><br><span class="line">                view.set<span class="constructor">Alpha(<span class="params">cVal</span>)</span>;</span><br><span class="line">                view.set<span class="constructor">ScaleX(<span class="params">cVal</span>)</span>;</span><br><span class="line">                view.set<span class="constructor">ScaleY(<span class="params">cVal</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里我们只需要将属性类型写进去，至于具体的操作，我们是在onAnimationUpdate方法中设置的。<br>再换一种方法实现：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void property<span class="constructor">ValuesHolder(View <span class="params">view</span>)</span> &#123;</span><br><span class="line">        PropertyValuesHolder pvhX = <span class="module-access"><span class="module"><span class="identifier">PropertyValuesHolder</span>.</span></span><span class="keyword">of</span><span class="constructor">Float(<span class="string">&quot;alpha&quot;</span>, 1f, 0f, 1f)</span>;</span><br><span class="line">        PropertyValuesHolder pvhY = <span class="module-access"><span class="module"><span class="identifier">PropertyValuesHolder</span>.</span></span><span class="keyword">of</span><span class="constructor">Float(<span class="string">&quot;scaleX&quot;</span>, 1f, 0, 1f)</span>;</span><br><span class="line">        PropertyValuesHolder pvhZ = <span class="module-access"><span class="module"><span class="identifier">PropertyValuesHolder</span>.</span></span><span class="keyword">of</span><span class="constructor">Float(<span class="string">&quot;scaleY&quot;</span>, 1f, 0, 1f)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">ObjectAnimator</span>.</span></span><span class="keyword">of</span><span class="constructor">PropertyValuesHolder(<span class="params">view</span>, <span class="params">pvhX</span>, <span class="params">pvhY</span>, <span class="params">pvhZ</span>)</span>.set<span class="constructor">Duration(1000)</span>.start<span class="literal">()</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Animator监听器"><a href="#Animator监听器" class="headerlink" title="Animator监听器"></a>Animator监听器</h2><p>在很多时候，我们希望可以监听到动画的各种事件，比如动画何时开始，何时结束，然后在开始或者结束的时候去执行一些逻辑处理。这个功能是完全可以实现的，Animator类当中提供了一个addListener()方法，这个方法接收一个AnimatorListener，我们只需要去实现这个AnimatorListener就可以监听动画的各种事件了<br>ObjectAnimator是继承自ValueAnimator的，而ValueAnimator又是继承自Animator的，因此不管是ValueAnimator还是ObjectAnimator都是可以使用addListener()这个方法的。另外AnimatorSet也是继承自Animator的，因此addListener()这个方法算是个通用的方法<br>添加一个监听器的代码如下：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">anim</span><span class="selector-class">.addListener</span>(new AnimatorListener() &#123;  </span><br><span class="line">    <span class="variable">@Override</span>  </span><br><span class="line">    public void onAnimationStart(Animator animation) &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="variable">@Override</span>  </span><br><span class="line">    public void onAnimationRepeat(Animator animation) &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="variable">@Override</span>  </span><br><span class="line">    public void onAnimationEnd(Animator animation) &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="variable">@Override</span>  </span><br><span class="line">    public void onAnimationCancel(Animator animation) &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我们需要实现接口中的四个方法，onAnimationStart()方法会在动画开始的时候调用，onAnimationRepeat()方法会在动画重复执行的时候调用，onAnimationEnd()方法会在动画结束的时候调用，onAnimationCancel()方法会在动画被取消的时候调用.但是也许很多时候我们并不想要监听那么多个事件，可能我只想要监听动画结束这一个事件，那么每次都要将四个接口全部实现一遍就显得非常繁琐。没关系，为此Android提供了一个适配器类，叫作AnimatorListenerAdapter，使用这个类就可以解决掉实现接口繁琐的问题了，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">anim.addListener(<span class="keyword">new</span> <span class="function"><span class="title">AdimatorAdapter</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><p>在这个Adapter中，我们是需要重写我们自己所使用的方法即可。</p><h2 id="使用XML实现动画效果"><a href="#使用XML实现动画效果" class="headerlink" title="使用XML实现动画效果"></a>使用XML实现动画效果</h2><p>我们可以使用代码来编写所有的动画功能，这也是最常用的一种做法。不过，过去的补间动画除了使用代码编写之外也是可以使用XML编写的，因此属性动画也提供了这一功能，即通过XML来完成和代码一样的属性动画功能。</p><p>通过XML来编写动画可能会比通过代码来编写动画要慢一些，但是在重用方面将会变得非常轻松，比如某个将通用的动画编写到XML里面，我们就可以在各个界面当中轻松去重用它。</p><p>如果想要使用XML来编写动画，首先要在res目录下面新建一个animator文件夹，所有属性动画的XML文件都应该存放在这个文件夹当中。然后在XML文件中我们一共可以使用如下三种标签</p><ul><li><animator> 对应代码中的ValueAnimator</li><li><objectAnimator>  对应代码中的ObjectAnimator</li><li><set>  对应代码中的AnimatorSet</li></ul><p>这里我们现实的是从0到100的平滑过渡</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;animator xmlns:<span class="attribute">android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>  </span><br><span class="line">    android:<span class="attribute">valueFrom</span>=<span class="string">&quot;0&quot;</span>  </span><br><span class="line">    android:<span class="attribute">valueTo</span>=<span class="string">&quot;100&quot;</span>  </span><br><span class="line">    android:<span class="attribute">valueType</span>=<span class="string">&quot;intType&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>这里我们实现的是透明度的从100%到0的变化</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;objectAnimator xmlns:<span class="attribute">android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>  </span><br><span class="line">    android:<span class="attribute">valueFrom</span>=<span class="string">&quot;1&quot;</span>  </span><br><span class="line">    android:<span class="attribute">valueTo</span>=<span class="string">&quot;0&quot;</span>  </span><br><span class="line">    android:<span class="attribute">valueType</span>=<span class="string">&quot;floatType&quot;</span>  </span><br><span class="line">    android:<span class="attribute">propertyName</span>=<span class="string">&quot;alpha&quot;</span>/&gt;  </span><br></pre></td></tr></table></figure><p>同时使用XML进行组合动画操作，将TextView从屏幕外移入，然后旋转，并且在旋转的过程中添加淡入淡出效果</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:ordering</span>=<span class="string">&quot;sequentially&quot;</span> &gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">objectAnimator</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">&quot;2000&quot;</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:propertyName</span>=<span class="string">&quot;translationX&quot;</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:valueFrom</span>=<span class="string">&quot;-500&quot;</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:valueTo</span>=<span class="string">&quot;0&quot;</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:valueType</span>=<span class="string">&quot;floatType&quot;</span> &gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">objectAnimator</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span> <span class="attr">android:ordering</span>=<span class="string">&quot;together&quot;</span> &gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">objectAnimator</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:duration</span>=<span class="string">&quot;3000&quot;</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:propertyName</span>=<span class="string">&quot;rotation&quot;</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:valueFrom</span>=<span class="string">&quot;0&quot;</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:valueTo</span>=<span class="string">&quot;360&quot;</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:valueType</span>=<span class="string">&quot;floatType&quot;</span> &gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">objectAnimator</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span> <span class="attr">android:ordering</span>=<span class="string">&quot;sequentially&quot;</span> &gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">objectAnimator</span>  </span></span><br><span class="line"><span class="tag">                <span class="attr">android:duration</span>=<span class="string">&quot;1500&quot;</span>  </span></span><br><span class="line"><span class="tag">                <span class="attr">android:propertyName</span>=<span class="string">&quot;alpha&quot;</span>  </span></span><br><span class="line"><span class="tag">                <span class="attr">android:valueFrom</span>=<span class="string">&quot;1&quot;</span>  </span></span><br><span class="line"><span class="tag">                <span class="attr">android:valueTo</span>=<span class="string">&quot;0&quot;</span>  </span></span><br><span class="line"><span class="tag">                <span class="attr">android:valueType</span>=<span class="string">&quot;floatType&quot;</span> &gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">objectAnimator</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">objectAnimator</span>  </span></span><br><span class="line"><span class="tag">                <span class="attr">android:duration</span>=<span class="string">&quot;1500&quot;</span>  </span></span><br><span class="line"><span class="tag">                <span class="attr">android:propertyName</span>=<span class="string">&quot;alpha&quot;</span>  </span></span><br><span class="line"><span class="tag">                <span class="attr">android:valueFrom</span>=<span class="string">&quot;0&quot;</span>  </span></span><br><span class="line"><span class="tag">                <span class="attr">android:valueTo</span>=<span class="string">&quot;1&quot;</span>  </span></span><br><span class="line"><span class="tag">                <span class="attr">android:valueType</span>=<span class="string">&quot;floatType&quot;</span> &gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">objectAnimator</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后在我们的XML文件编写完成之后，在使用如下代码即可</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Animator animator = <span class="module-access"><span class="module"><span class="identifier">AnimatorInflater</span>.</span></span>load<span class="constructor">Animator(<span class="params">context</span>, R.<span class="params">animator</span>.<span class="params">anim_file</span>)</span>;  </span><br><span class="line">animator.set<span class="constructor">Target(<span class="params">view</span>)</span>;  </span><br><span class="line">animator.start<span class="literal">()</span>;  </span><br></pre></td></tr></table></figure><h2 id="属性动画的高级操作"><a href="#属性动画的高级操作" class="headerlink" title="属性动画的高级操作"></a>属性动画的高级操作</h2><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.cnblogs.com/ldq2016/p/5407061.html">Android三种动画</a><br><a href="https://www.jianshu.com/p/2412d00a0ce4">Android属性动画</a><br><a href="https://www.jianshu.com/p/609b6d88798d">Android动画总结</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;总的来说Android的动画一共分为三种，分别是间补动画，帧动画和属性动画。间补动画和帧动画比较简单，这里会简单介绍，对于属性动画，可能会说的更多一些&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>重拾android路(二十三) Android推送集成</title>
    <link href="http://www.paulniu.com/2019/02/08/android-24-push/"/>
    <id>http://www.paulniu.com/2019/02/08/android-24-push/</id>
    <published>2019-02-08T03:27:11.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>目前所在的公司让我把之前项目中的推送重新整理一下。因为现在的需求是在应用被后台杀死的情况下，依然可以推送消息，那么只是单一的使用一个推送工具是无法实现的，比如友盟。那么就需要同时集成Umeng，华为，小米，Oppo等手机厂商提供的PushSDK。这本来是简简单单的一件事，突然之后，工作量无形之后增大。不过好在经过一段时间的尝试，终于集成成功，今天把这个历程记录下来，方面以后查看。</p><span id="more"></span><h1 id="Umeng"><a href="#Umeng" class="headerlink" title="Umeng"></a>Umeng</h1><p>这个是官方网址，里面介绍的还算是比较详细，所以还是把官网地址粘出来:<a href="https://www.umeng.com/push">官网地址</a><br>在官网中，集成友盟推送的方式有两种，一种是通过gradle的maven仓库，另外一种是通过jar包引入的方式。这里我直接选择第一种，因为感觉gradle至少不用来回拷贝jar包，在更新的时候，直接更改Gradle依赖的版本既可。这里官方还非常贴心的给出了一个官方的<a href="https://download.umeng.com/online/2018/12/20181228110151948.zip">demo</a>。结合官方的例子，集成Umeng推送的步骤如下所示</p><blockquote><p>关于Appkey的申请等工作，这里就不在叙述，具体内容请参看官方文档</p></blockquote><h2 id="接入SDK"><a href="#接入SDK" class="headerlink" title="接入SDK"></a>接入SDK</h2><p>接入SDK时需要在gradle的文件中，添加如下代码，然后重新编译既可</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span>PushSDK必须依赖基础组件库，所以需要加入对应依赖</span><br><span class="line">compile <span class="string">&#x27;com.umeng.umsdk:common:1.5.4&#x27;</span></span><br><span class="line"><span class="regexp">//</span>PushSDK必须依赖utdid库，所以需要加入对应依赖</span><br><span class="line">compile <span class="string">&#x27;com.umeng.umsdk:utdid:1.1.5.3&#x27;</span></span><br><span class="line"><span class="regexp">//</span>PushSDK</span><br><span class="line">compile <span class="string">&#x27;com.umeng.umsdk:push:5.0.2&#x27;</span></span><br></pre></td></tr></table></figure><p>这里使用了三个依赖，其中第一个和第二个是公共库，只要接入Umeng的内容，不管是推送，还是数据统计，都需要引入的内容。第三个是Umeng推送需要依赖的内容。这里使用的是当前的最新版5.0.2.<br>在执行编译之前，需要在项目的build.gradle中添加maven库，具体代码如下：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">buildscript</span> &#123;</span><br><span class="line">    <span class="variable">repositories</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">google</span>()</span></span><br><span class="line">        <span class="function"><span class="title">jcenter</span>()</span></span><br><span class="line">        <span class="variable">maven</span> &#123; <span class="variable">url</span> <span class="string">&#x27;https://dl.bintray.com/umsdk/release&#x27;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">dependencies</span> &#123;</span><br><span class="line">        <span class="variable">classpath</span> <span class="string">&#x27;com.android.tools.build:gradle:3.1.4&#x27;</span></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE</span>: Do not place your application dependencies here; they belong</span></span><br><span class="line">        <span class="comment">// in the individual module build.gradle files</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">allprojects</span> &#123;</span><br><span class="line">    <span class="variable">repositories</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">google</span>()</span></span><br><span class="line">        <span class="function"><span class="title">jcenter</span>()</span></span><br><span class="line">        <span class="function"><span class="title">mavenCentral</span>()</span></span><br><span class="line">        <span class="variable">maven</span> &#123; <span class="variable">url</span> <span class="string">&#x27;https://dl.bintray.com/umsdk/release&#x27;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在执行完成之后，就可以开始编译了。</p><h2 id="基础接口引入"><a href="#基础接口引入" class="headerlink" title="基础接口引入"></a>基础接口引入</h2><p>这里的基础接口只是能实现基本的推送接收功能，比如获取一个从控制台推送的推送。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>必须在项目中重新自定义Application，并且在自定义的Application中的onCreate方法中添加推送的注册等操作，具体如下所示</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void onCreate() &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        initPush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> void initPush() &#123;</span><br><span class="line">        <span class="type">UMConfigure</span>.init(<span class="keyword">this</span>, <span class="type">UMENG_APPKEY</span>, <span class="type">UMENG_APPCHANNEL</span>, <span class="type">UMConfigure</span>.<span class="type">DEVICE_TYPE_PHONE</span>, <span class="type">UMENG_APPSECRET</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中</p><p>UMENG_APPKEY，UMENG_APPSECRET是我们在注册账号时Umeng官方为我们的应用分配的，直接使用即可。</p><p>UMENG_CHANNEL是渠道名称。</p><p>UMConfigure.DEVICE_TYPE_PHONE表示的是设配类型是手机，除此之外还有UMConfigure.DEVICE_TYPE_BOX表示设备类型是盒子。</p><p>在执行初始化之后，我们的基本操作完成了，但是为了后面能够更好的使用推送，我们需要执行下面更多的操作。</p><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p>我们需要通过Umeng向Umeng官方注册，其实也就是告诉Umeng控制台，这里我们是有一个手机设备需要接受推送消息的。并且在注册成功之后，获取注册的DeviceToken。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">onCreate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate();</span><br><span class="line">        initPush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">void</span> <span class="function"><span class="title">initPush</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        UMConfigure.init(<span class="built_in">this</span>, UMENG_APPKEY, UMENG_APPCHANNEL, UMConfigure.DEVICE_TYPE_PHONE, UMENG_APPSECRET);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取推送代理，这个代理可以帮我们去执行诸如点击事件，样式不同的通知栏等操作</span></span><br><span class="line">        PushAgent pushAgent = PushAgent.getInstance(<span class="built_in">this</span>);</span><br><span class="line">        pushAgent.register(<span class="keyword">new</span> <span class="function"><span class="title">IUmengRegisterCallback</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">onSuccess</span>(<span class="params"><span class="built_in">String</span> s</span>)</span> &#123;</span><br><span class="line">                <span class="comment">//注册成功</span></span><br><span class="line">                Log.e(<span class="string">&quot;NPL&quot;</span>, <span class="string">&quot;deviceToken=&quot;</span> + s);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">onFailure</span>(<span class="params"><span class="built_in">String</span> s, <span class="built_in">String</span> s1</span>)</span> &#123;</span><br><span class="line">                <span class="comment">//注册失败</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里注册成功之后，一般会想我们自己的后台发送一个deviceToken，这样方便以后发送推送消息是由后台控制的。例如给某个特定用的用户推送消息。</p><p>之后还有一个操作，就是帮助Umeng后台统计日活情况的主要依据，一定要加上。Activity中所有的都要添加，建议直接在BaseActivity中的oncreate方法中实现。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">PushAgent</span>.</span></span>get<span class="constructor">Instance(<span class="params">context</span>)</span>.on<span class="constructor">AppStart()</span>;</span><br></pre></td></tr></table></figure><p>到这里基本的推送就完成了，下面来尝试推送一个新消息到特定的手机。<br>这里的操作可以直接参考官方的，官方的截图和各种步骤提示已经非常清楚了，这里就不在一一赘述。</p><h2 id="高级功能"><a href="#高级功能" class="headerlink" title="高级功能"></a>高级功能</h2><p>Umeng推送高级功能实现了自定义通知栏，自定义显示通知的动作等，这里的高级功能只适应于Android4.0以上版本，除此之后，可能由于不同的手机会出现不同的效果，如ROM定制型较强的小米，华为手机，部分效果无法显示。这里官方也提供了一个<a href="https://github.com/umeng/MultiFunctionAndroidDemo.git">demo</a>。</p><h3 id="自定义图标和自定义标题栏声音"><a href="#自定义图标和自定义标题栏声音" class="headerlink" title="自定义图标和自定义标题栏声音"></a>自定义图标和自定义标题栏声音</h3><p>在drawable目录下放置两张图片，分别命名为umeng_push_notification_default_large_icon和umeng_push_notification_default_small_icon，那么在Umeng推送中，就会使用提供的图标，如果没有，则使用应用默认图标。</p><blockquote><p>小米手机暂时无法使用自定义图标</p></blockquote><p>在res/raw目录下添加资源文件，并且命名为umeng_push_notification_default_sound。如果没有，则使用系统的通知声音。</p><blockquote><p>若需要在线配置声音，则需先将与配置的声音文件放置在res/raw下，然后自发送后台指定声音的id，即R.raw.[sound]里的sound；</p></blockquote><blockquote><p>自定义通知栏声音仅在Android 8.0以下机型生效，如需适配Android 8.0及以上版本，请参考自定义通知栏样式，重写getNotification方法，设置声音。</p></blockquote><h3 id="自定义通知栏是否显示"><a href="#自定义通知栏是否显示" class="headerlink" title="自定义通知栏是否显示"></a>自定义通知栏是否显示</h3><p>有时候会有这样的需求，如果当前应用出去前台展示，则不用显示通知栏推送，只有当应用处于后台时，才需要在通知栏显示，那么这是用就可使用下面的代码</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mPushAgent.set<span class="constructor">NotificaitonOnForeground(<span class="params">false</span>)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>这个设置只能在执行完注册(regist)方法之后，才能调用</p></blockquote><h3 id="自定义通知栏样式"><a href="#自定义通知栏样式" class="headerlink" title="自定义通知栏样式"></a>自定义通知栏样式</h3><p>UmengMessageHandler类负责处理消息，包括通知和自定义消息。我们可以通过getNotification函数设置不同的通知栏样式。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="built_in">void</span> <span class="function"><span class="title">initPush</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        UMConfigure.init(<span class="built_in">this</span>, UMENG_APPKEY, UMENG_APPCHANNEL, UMConfigure.DEVICE_TYPE_PHONE, UMENG_APPSECRET);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取推送代理，这个代理可以帮我们去执行诸如点击事件，样式不同的通知栏等操作</span></span><br><span class="line">        PushAgent pushAgent = PushAgent.getInstance(<span class="built_in">this</span>);</span><br><span class="line">        pushAgent.register(<span class="keyword">new</span> <span class="function"><span class="title">IUmengRegisterCallback</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">onSuccess</span>(<span class="params"><span class="built_in">String</span> s</span>)</span> &#123;</span><br><span class="line">                <span class="comment">//注册成功</span></span><br><span class="line">                Log.e(<span class="string">&quot;NPL&quot;</span>, <span class="string">&quot;deviceToken=&quot;</span> + s);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">onFailure</span>(<span class="params"><span class="built_in">String</span> s, <span class="built_in">String</span> s1</span>)</span> &#123;</span><br><span class="line">                <span class="comment">//注册失败</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        pushAgent.setNotificaitonOnForeground(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        UmengMessageHandler umengMessageHandler = <span class="keyword">new</span> <span class="function"><span class="title">UmengMessageHandler</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Notification <span class="function"><span class="title">getNotification</span>(<span class="params">Context context, UMessage uMessage</span>)</span> &#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * context:上下文</span></span><br><span class="line"><span class="comment">                 * uMessage:表示当前传递过来的消息，在消息中，我们通过变量builder_id判断使用哪种样式</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">switch</span> (uMessage.builder_id) &#123;</span><br><span class="line">                    <span class="keyword">case</span> UMENG_NOTIFICATION_NORMAL:</span><br><span class="line">                        <span class="comment">//创建通知栏对象</span></span><br><span class="line">                        Notification.Builder builder = <span class="keyword">new</span> Notification.Builder(context);</span><br><span class="line">                        RemoteViews remoteView = <span class="keyword">new</span> RemoteViews(context.getPackageName(), R.layout.view_notification_normal);</span><br><span class="line">                        remoteView.setTextViewText(R.id.notification_title, uMessage.title);</span><br><span class="line">                        remoteView.setTextViewText(R.id.notification_text, uMessage.text);</span><br><span class="line">                        remoteView.setImageViewBitmap(R.id.notification_large_icon,</span><br><span class="line">                                getLargeIcon(context, uMessage));</span><br><span class="line">                        remoteView.setImageViewResource(R.id.notification_small_icon,</span><br><span class="line">                                getSmallIconId(context, uMessage));</span><br><span class="line">                        builder.setContent(remoteView)</span><br><span class="line">                                .setSmallIcon(getSmallIconId(context, uMessage))</span><br><span class="line">                                .setTicker(uMessage.ticker)</span><br><span class="line">                                .setAutoCancel(<span class="literal">true</span>);</span><br><span class="line">                        <span class="keyword">return</span> builder.getNotification();</span><br><span class="line">                    <span class="keyword">case</span> UMENG_NOTIFICATION_LARGE:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">case</span> UMENG_NOTIFICATION_SMALL:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="built_in">super</span>.getNotification(context, uMessage);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        pushAgent.setMessageHandler(umengMessageHandler);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在测试时，发送的消息需要在下面的截图中添加相应的类型：</p><p><img src="/assets/push/push01.png" alt="自定义通知栏样式"></p><h3 id="自定义通知栏打开动作"><a href="#自定义通知栏打开动作" class="headerlink" title="自定义通知栏打开动作"></a>自定义通知栏打开动作</h3><p>我们通过解析UMessage中custome字段的内容，可以实现自定义通知栏打开动作。当我们需要执行自定义动作时，需要重写dealWithCustomAction方法。在自定义动作的时候，一般是通过传递不同的数据，来实现动态判断执行哪种动作的。<br>在传递数据时，通过如下的内容实现：<br><img src="/assets/push/push02.png" alt="自定义通知栏打开动作"><br>这里我们传递了三个参数，分别是type，url，innerUrl。那么我们就通过type类型来判断跳转不同的页面，然后在通过url，判断跳转的子页面，通过innerUrl来判断跳转到H5页面。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="built_in">void</span> <span class="function"><span class="title">initPush</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        UMConfigure.init(<span class="built_in">this</span>, UMENG_APPKEY, UMENG_APPCHANNEL, UMConfigure.DEVICE_TYPE_PHONE, UMENG_APPSECRET);</span><br><span class="line">        <span class="comment">//获取推送代理，这个代理可以帮我们去执行诸如点击事件，样式不同的通知栏等操作</span></span><br><span class="line">        PushAgent pushAgent = PushAgent.getInstance(<span class="built_in">this</span>);</span><br><span class="line">        pushAgent.register(<span class="keyword">new</span> <span class="function"><span class="title">IUmengRegisterCallback</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">onSuccess</span>(<span class="params"><span class="built_in">String</span> s</span>)</span> &#123;</span><br><span class="line">                <span class="comment">//注册成功</span></span><br><span class="line">                Log.e(<span class="string">&quot;NPL&quot;</span>, <span class="string">&quot;deviceToken=&quot;</span> + s);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">onFailure</span>(<span class="params"><span class="built_in">String</span> s, <span class="built_in">String</span> s1</span>)</span> &#123;</span><br><span class="line">                <span class="comment">//注册失败</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        pushAgent.setNotificaitonOnForeground(<span class="literal">true</span>);</span><br><span class="line">        UmengMessageHandler umengMessageHandler = <span class="keyword">new</span> <span class="function"><span class="title">UmengMessageHandler</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Notification <span class="function"><span class="title">getNotification</span>(<span class="params">Context context, UMessage uMessage</span>)</span> &#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * context:上下文</span></span><br><span class="line"><span class="comment">                 * uMessage:表示当前传递过来的消息，在消息中，我们通过变量builder_id判断使用哪种样式</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">switch</span> (uMessage.builder_id) &#123;</span><br><span class="line">                    <span class="keyword">case</span> UMENG_NOTIFICATION_NORMAL:</span><br><span class="line">                        <span class="comment">//创建通知栏对象</span></span><br><span class="line">                        Notification.Builder builder = <span class="keyword">new</span> Notification.Builder(context);</span><br><span class="line">                        RemoteViews remoteView = <span class="keyword">new</span> RemoteViews(context.getPackageName(), R.layout.view_notification_normal);</span><br><span class="line">                        remoteView.setTextViewText(R.id.notification_title, uMessage.title);</span><br><span class="line">                        remoteView.setTextViewText(R.id.notification_text, uMessage.text);</span><br><span class="line">                        remoteView.setImageViewBitmap(R.id.notification_large_icon,</span><br><span class="line">                                getLargeIcon(context, uMessage));</span><br><span class="line">                        remoteView.setImageViewResource(R.id.notification_small_icon,</span><br><span class="line">                                getSmallIconId(context, uMessage));</span><br><span class="line">                        builder.setContent(remoteView)</span><br><span class="line">                                .setSmallIcon(getSmallIconId(context, uMessage))</span><br><span class="line">                                .setTicker(uMessage.ticker)</span><br><span class="line">                                .setAutoCancel(<span class="literal">true</span>);</span><br><span class="line">                        <span class="keyword">return</span> builder.getNotification();</span><br><span class="line">                    <span class="keyword">case</span> UMENG_NOTIFICATION_LARGE:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">case</span> UMENG_NOTIFICATION_SMALL:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="built_in">super</span>.getNotification(context, uMessage);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        pushAgent.setMessageHandler(umengMessageHandler);</span><br><span class="line">        UmengNotificationClickHandler umengNotificationClickHandler = <span class="keyword">new</span> <span class="function"><span class="title">UmengNotificationClickHandler</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">dealWithCustomAction</span>(<span class="params">Context context, UMessage uMessage</span>)</span> &#123;</span><br><span class="line">                <span class="comment">//这里需要解析uMessage，然后通过custome属性执行不同的操作</span></span><br><span class="line">                <span class="keyword">if</span> (uMessage == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                HashMap&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; hm = (HashMap&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt;) uMessage.extra;</span><br><span class="line">                <span class="built_in">String</span> <span class="keyword">type</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="built_in">String</span> url = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="built_in">String</span> innerUrl = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span> (hm != <span class="literal">null</span> &amp;&amp; hm.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (hm.containsKey(<span class="string">&quot;type&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">type</span> = hm.get(<span class="string">&quot;type&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hm.containsKey(<span class="string">&quot;url&quot;</span>)) &#123;</span><br><span class="line">                        url = hm.get(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hm.containsKey(<span class="string">&quot;innerUrl&quot;</span>)) &#123;</span><br><span class="line">                        innerUrl = hm.get(<span class="string">&quot;innerUrl&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">type</span>.equalsIgnoreCase(<span class="string">&quot;login&quot;</span>))&#123;</span><br><span class="line">                    <span class="comment">//跳转到登录页面</span></span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">type</span>.equalsIgnoreCase(<span class="string">&quot;regist&quot;</span>))&#123;</span><br><span class="line">                    <span class="comment">//跳转到注册页面</span></span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">type</span>.equalsIgnoreCase(<span class="string">&quot;im&quot;</span>))&#123;</span><br><span class="line">                    <span class="comment">//跳转到聊天页面</span></span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//跳转到web页面</span></span><br><span class="line">                    <span class="keyword">if</span>(TextUtils.isEmpty(innerUrl))&#123;</span><br><span class="line">                        innerUrl = <span class="string">&quot;http://www.baidu.com&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        pushAgent.setNotificationClickHandler(umengMessageHandler);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>其实在UmengNotificationClickHandler中，除了上面的方法之外，还有别的方法可以完成通知栏的点击操作，如launchApp，openUrl，openActivity，dealWithCustomAction等，这几个方法代表了点击通知栏之后不同的操作，但是都会传递UMessage对象，所以所能执行到的效果类似，就不一一演示了。</p></blockquote><h3 id="自定义消息-透传消息"><a href="#自定义消息-透传消息" class="headerlink" title="自定义消息(透传消息)"></a>自定义消息(透传消息)</h3><p>透传消息不是通知，也就不会在通知栏上显示，友盟会将透传消息传递给SDK，之后透传消息需要展示的样式和执行的操作，完全由代码决定。<br><img src="/assets/push/push03.png" alt="透传消息"><br>自定义消息可以用于应用内部或者特殊的逻辑。如我们需要推送的内容不是在通知栏显示，而是以一个弹窗的样式展示，则可以通过自定义消息。<br>想要实现对自定义消息的处理，需要在UmengMessageHandler中重写dealWithCustomMessage方法。这个方法就是当发送自定义消息时，由SDK触发的。透传消息的自定义内容是放在UMessage对象中的custome参数中的，返回的数据是一个String类型，通过解析String内容，获取自定义消息。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="built_in">void</span> <span class="function"><span class="title">initPush</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        UMConfigure.init(<span class="built_in">this</span>, UMENG_APPKEY, UMENG_APPCHANNEL, UMConfigure.DEVICE_TYPE_PHONE, UMENG_APPSECRET);</span><br><span class="line">        <span class="comment">//获取推送代理，这个代理可以帮我们去执行诸如点击事件，样式不同的通知栏等操作</span></span><br><span class="line">        PushAgent pushAgent = PushAgent.getInstance(<span class="built_in">this</span>);</span><br><span class="line">        pushAgent.register(<span class="keyword">new</span> <span class="function"><span class="title">IUmengRegisterCallback</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">onSuccess</span>(<span class="params"><span class="built_in">String</span> s</span>)</span> &#123;</span><br><span class="line">                <span class="comment">//注册成功</span></span><br><span class="line">                Log.e(<span class="string">&quot;NPL&quot;</span>, <span class="string">&quot;deviceToken=&quot;</span> + s);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">onFailure</span>(<span class="params"><span class="built_in">String</span> s, <span class="built_in">String</span> s1</span>)</span> &#123;</span><br><span class="line">                <span class="comment">//注册失败</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        pushAgent.setNotificaitonOnForeground(<span class="literal">true</span>);</span><br><span class="line">        UmengMessageHandler umengMessageHandler = <span class="keyword">new</span> <span class="function"><span class="title">UmengMessageHandler</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Notification <span class="function"><span class="title">getNotification</span>(<span class="params">Context context, UMessage uMessage</span>)</span> &#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * context:上下文</span></span><br><span class="line"><span class="comment">                 * uMessage:表示当前传递过来的消息，在消息中，我们通过变量builder_id判断使用哪种样式</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">switch</span> (uMessage.builder_id) &#123;</span><br><span class="line">                    <span class="keyword">case</span> UMENG_NOTIFICATION_NORMAL:</span><br><span class="line">                        <span class="comment">//创建通知栏对象</span></span><br><span class="line">                        Notification.Builder builder = <span class="keyword">new</span> Notification.Builder(context);</span><br><span class="line">                        RemoteViews remoteView = <span class="keyword">new</span> RemoteViews(context.getPackageName(), R.layout.view_notification_normal);</span><br><span class="line">                        remoteView.setTextViewText(R.id.notification_title, uMessage.title);</span><br><span class="line">                        remoteView.setTextViewText(R.id.notification_text, uMessage.text);</span><br><span class="line">                        remoteView.setImageViewBitmap(R.id.notification_large_icon,</span><br><span class="line">                                getLargeIcon(context, uMessage));</span><br><span class="line">                        remoteView.setImageViewResource(R.id.notification_small_icon,</span><br><span class="line">                                getSmallIconId(context, uMessage));</span><br><span class="line">                        builder.setContent(remoteView)</span><br><span class="line">                                .setSmallIcon(getSmallIconId(context, uMessage))</span><br><span class="line">                                .setTicker(uMessage.ticker)</span><br><span class="line">                                .setAutoCancel(<span class="literal">true</span>);</span><br><span class="line">                        <span class="keyword">return</span> builder.getNotification();</span><br><span class="line">                    <span class="keyword">case</span> UMENG_NOTIFICATION_LARGE:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">case</span> UMENG_NOTIFICATION_SMALL:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="built_in">super</span>.getNotification(context, uMessage);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">dealWithCustomMessage</span>(<span class="params">final Context context, final UMessage uMessage</span>)</span> &#123;</span><br><span class="line">                <span class="comment">//自定义消息的内容是放在uMessage中的custome参数中的</span></span><br><span class="line">                <span class="keyword">if</span> (uMessage == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">String</span> custome = uMessage.custom;</span><br><span class="line">                <span class="keyword">if</span> (TextUtils.isEmpty(custome)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                mHandler.post(<span class="keyword">new</span> <span class="function"><span class="title">Runnable</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                        <span class="comment">// 对于自定义消息，PushSDK默认只统计送达。若开发者需要统计点击和忽略，则需手动调用统计方法。</span></span><br><span class="line">                        <span class="built_in">boolean</span> isClickOrDismissed = <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">if</span> (isClickOrDismissed) &#123;</span><br><span class="line">                            <span class="comment">//自定义消息的点击统计</span></span><br><span class="line">                            UTrack.getInstance(getApplicationContext()).trackMsgClick(uMessage);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">//自定义消息的忽略统计</span></span><br><span class="line">                            UTrack.getInstance(getApplicationContext()).trackMsgDismissed(uMessage);</span><br><span class="line">                        &#125;</span><br><span class="line">                        Toast.makeText(context, uMessage.custom, Toast.LENGTH_LONG).show();</span><br><span class="line">                        <span class="comment">//一般需要将custome转换成Json数据，然后通过Json数据中的内容，判断需要执行的操作</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        pushAgent.setMessageHandler(umengMessageHandler);</span><br><span class="line">        UmengNotificationClickHandler umengNotificationClickHandler = <span class="keyword">new</span> <span class="function"><span class="title">UmengNotificationClickHandler</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">dealWithCustomAction</span>(<span class="params">Context context, UMessage uMessage</span>)</span> &#123;</span><br><span class="line">                <span class="comment">//这里需要解析uMessage，然后通过custome属性执行不同的操作</span></span><br><span class="line">                <span class="keyword">if</span> (uMessage == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                HashMap&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; hm = (HashMap&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt;) uMessage.extra;</span><br><span class="line">                <span class="built_in">String</span> <span class="keyword">type</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="built_in">String</span> url = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="built_in">String</span> innerUrl = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span> (hm != <span class="literal">null</span> &amp;&amp; hm.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (hm.containsKey(<span class="string">&quot;type&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">type</span> = hm.get(<span class="string">&quot;type&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hm.containsKey(<span class="string">&quot;url&quot;</span>)) &#123;</span><br><span class="line">                        url = hm.get(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hm.containsKey(<span class="string">&quot;innerUrl&quot;</span>)) &#123;</span><br><span class="line">                        innerUrl = hm.get(<span class="string">&quot;innerUrl&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">type</span>.equalsIgnoreCase(<span class="string">&quot;login&quot;</span>)) &#123;</span><br><span class="line">                    <span class="comment">//跳转到登录页面</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">type</span>.equalsIgnoreCase(<span class="string">&quot;regist&quot;</span>)) &#123;</span><br><span class="line">                    <span class="comment">//跳转到注册页面</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">type</span>.equalsIgnoreCase(<span class="string">&quot;im&quot;</span>)) &#123;</span><br><span class="line">                    <span class="comment">//跳转到聊天页面</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//跳转到web页面</span></span><br><span class="line">                    <span class="keyword">if</span> (TextUtils.isEmpty(innerUrl)) &#123;</span><br><span class="line">                        innerUrl = <span class="string">&quot;http://www.baidu.com&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        pushAgent.setNotificationClickHandler(umengMessageHandler);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="标签-amp-别名"><a href="#标签-amp-别名" class="headerlink" title="标签&amp;别名"></a>标签&amp;别名</h3><p>我们可以这样理解，如果我们想给一群特定的人推送消息，这一群人可以是会员，或者被系统拉黑的用户等等，而其他的用户是接收不到这个推送消息的。为了简化这样的流程，引入了标签的概念。<br>别名是我们可一个特定的某一个用户推送消息。例如一个用户的好友将他删除了，我们可以通过发送推送，告诉被删除者，你的好友将你删除了。<br>在代码中，我们通过addTags和addAlias来实现添加标签和别名。<br>标签：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加标签，将tag1,tag2添加到当前设备中，一般情况下，我们会有一些判断，然后再为不同的用户添加不同的tag</span></span><br><span class="line">        pushAgent.getTagManager().addTags(<span class="keyword">new</span> TagManager.TCallBack() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">onMessage</span>(<span class="params"><span class="built_in">boolean</span> b, ITagManager.Result result</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;tag1&quot;</span>, <span class="string">&quot;tag2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除标签，将tag1，tag2从当前设备中删除</span></span><br><span class="line">        pushAgent.getTagManager().deleteTags(<span class="keyword">new</span> TagManager.TCallBack() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">onMessage</span>(<span class="params"><span class="built_in">boolean</span> b, ITagManager.Result result</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;tag1&quot;</span>, <span class="string">&quot;tag2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取服务器端所有的标签</span></span><br><span class="line">        pushAgent.getTagManager().getTags(<span class="keyword">new</span> TagManager.TagListCallBack() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">onMessage</span>(<span class="params"><span class="built_in">boolean</span> b, List&lt;<span class="built_in">String</span>&gt; list</span>)</span> &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>别名：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增加别名，将某一类型的别名绑定至某一设备，老的绑定设备信息依然保留，别名和deviceToken的映射关系是一对多</span></span><br><span class="line">pushAgent.addAlias(<span class="string">&quot;alias1&quot;</span>, <span class="string">&quot;type1&quot;</span>, <span class="keyword">new</span> UTrack.ICallBack() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">onMessage</span>(<span class="params"><span class="built_in">boolean</span> b, <span class="built_in">String</span> s</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//移除别名</span></span><br><span class="line">pushAgent.deleteAlias(<span class="string">&quot;alias1&quot;</span>, <span class="string">&quot;type1&quot;</span>, <span class="keyword">new</span> UTrack.ICallBack() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">onMessage</span>(<span class="params"><span class="built_in">boolean</span> b, <span class="built_in">String</span> s</span>)</span> &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>设置别名之前，需要先进行注册并且获取到deviceToken。</p></blockquote><h3 id="插屏消息"><a href="#插屏消息" class="headerlink" title="插屏消息"></a>插屏消息</h3><p>这个类型其实我们在平时也很常见，具体的例子，如图显示(盗图狂魔上线)<br><img src="/assets/push/push04.png" alt="插屏消息"><br>使用demo</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">InAppMessageManager</span>.</span></span>get<span class="constructor">Instance(<span class="params">this</span>)</span>.show<span class="constructor">CardMessage(<span class="params">this</span>, <span class="params">this</span>.<span class="params">getClass</span>()</span>.get<span class="constructor">SimpleName()</span>, <span class="keyword">new</span> <span class="constructor">IUmengInAppMsgCloseCallback()</span> &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void on<span class="constructor">Close()</span> &#123;</span><br><span class="line">                <span class="comment">//差评消息关闭时调用该方法</span></span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">Log</span>.</span></span>e(<span class="string">&quot;NPL&quot;</span>,<span class="string">&quot;关闭了插屏消息&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><blockquote><p>InAppMessageManager.getInstance(Context context).showCardMessage(Activity activity, String label, IUmengInAppMsgCloseCallback callback);<br>注意</p><ol><li>label ：表示当前插屏消息的标识</li><li>客户端先调用showCardMessage，将label发送给服务端，之后U-Push后台展示位置才会出现可选label</li><li>插屏消息的图片会执行缓存，但有新消息来时，旧消息的缓存会被删除</li></ol></blockquote><p>同时我们可以自定义插屏消息的样式，需要在添加布局文件umeng_custom_card_message.xml。使用的模板如下，里面除了一个ImageView和两个button不能改变之外，其他的均可以改变</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;#33000000&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@color/white&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_margin</span>=<span class="string">&quot;60dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_margin</span>=<span class="string">&quot;20dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/umeng_card_message_image&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:scaleType</span>=<span class="string">&quot;centerCrop&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/umeng_card_message_ok&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_below</span>=<span class="string">&quot;@id/umeng_card_message_image&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;20dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;确定&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/umeng_card_message_close&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_gravity</span>=<span class="string">&quot;top|right&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;关闭&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="检查集成配置文件"><a href="#检查集成配置文件" class="headerlink" title="检查集成配置文件"></a>检查集成配置文件</h3><p>为了便于开发者更好的集成配置文件，我们提供了对于AndroidManifest配置文件的检查工具，可以自行检查开发者的配置问题。SDK默认是不检查集成配置文件的</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mPushAgent.set<span class="constructor">PushCheck(<span class="params">true</span>)</span>;</span><br></pre></td></tr></table></figure><h3 id="关闭推送"><a href="#关闭推送" class="headerlink" title="关闭推送"></a>关闭推送</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">mPushAgent</span><span class="selector-class">.disable</span>(new IUmengCallback() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Override</span></span><br><span class="line">    public void onSuccess() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Override</span></span><br><span class="line">    public void onFailure(String s, String s1) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在调用关闭推送之后，想要再次打开推送，则使用下面的代码</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">mPushAgent</span><span class="selector-class">.enable</span>(new IUmengCallback() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Override</span></span><br><span class="line">    public void onSuccess() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Override</span></span><br><span class="line">    public void onFailure(String s, String s1) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="常见问题汇总"><a href="#常见问题汇总" class="headerlink" title="常见问题汇总"></a>常见问题汇总</h2><ol><li>集成推送之后，小米手机会报一个错误，错误截图如下：<br><img src="/assets/push/push05.png" alt="常见错误问题1"><br>解决方法：<br>在app项目的manifest文件中加入tools:replace=”android:allowBackup”标签<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;com.example.push.umeng.umengomnipushdemo&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:replace</span>=<span class="string">&quot;android:allowBackup&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;.App&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@mipmap/ic_launcher&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">&quot;@mipmap/ic_launcher_round&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">&quot;@style/AppTheme&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>对于从老版本升级上来的Umeng推送，之前的Appkey等信息是在清单配置文件中设置的 ，如下所示<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--友盟正式AppKey--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;UMENG_APPKEY&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:value</span>=<span class="string">&quot;xxxxxxxxxxxxxxxxxxxxxx&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--友盟正式渠道--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;UMENG_CHANNEL&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:value</span>=<span class="string">&quot;ipush&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--正式推送SECRET--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;UMENG_MESSAGE_SECRET&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:value</span>=<span class="string">&quot;xxxxxxxxxxxxxxxxxxxxxx&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>在新版本中，就算在Manifest文件中设置了AppKey等信息，同样要执行UMConfigure.init方法。</li></ol><h1 id="小米"><a href="#小米" class="headerlink" title="小米"></a>小米</h1><p>小米推送主要是用来适配小米手机的。所以，在做的时候，一般会判断当前手机是否是小米手机，如果是小米手机，则去使用小米推送，注册小米推送，如果不是，则默认使用Umeng推送。<br>在集成小米推送之前，需要先注册小米开发者账号，具体的步骤，这里不再叙述，看<a href="https://dev.mi.com/console/doc/detail?pId=848">注册为开发者</a></p><h2 id="小米推送"><a href="#小米推送" class="headerlink" title="小米推送"></a>小米推送</h2><p>小米推送同时支持Android和iOS两大移动平台，推送稳定。。。算了，我真的编不下去了，想看的，去<a href="https://dev.mi.com/console/appservice/push.html">官网</a>看看他们的文档吧。</p><h2 id="小米推送集成"><a href="#小米推送集成" class="headerlink" title="小米推送集成"></a>小米推送集成</h2><p>对于这个官方有文档，写的还是比较清晰的，<a href="https://dev.mi.com/console/doc/detail?pId=100">官方文档</a>。</p><h3 id="下载小米推送SDK"><a href="#下载小米推送SDK" class="headerlink" title="下载小米推送SDK"></a>下载小米推送SDK</h3><p>小米提供的都是jar的方式，暂时不支持gradle的方式，所以直接去下面的路径中下载相应的jar包。<a href="http://dev.xiaomi.com/mipush/downpage/">下载路径</a>。当前小米推送的最新版本是3.6.12。下载的SDK中不仅包括jar包，同时还包括demo。将demo导入到AndroidStudio中，更改部分配置既可运行。</p><h3 id="小米推送注册"><a href="#小米推送注册" class="headerlink" title="小米推送注册"></a>小米推送注册</h3><p>小米推送注册需要放在Application中去执行，在执行之前，最好先判断当前手机是否是小米手机，判断当前手机是否是小米手机，代码如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">Build</span>.</span><span class="module"><span class="identifier">MANUFACTURER</span>.</span></span>equals<span class="constructor">IgnoreCase(<span class="string">&quot;xiaomi&quot;</span>)</span>)&#123;</span><br><span class="line">           init<span class="constructor">MiPush()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是小米手机，则需要执行如下代码：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 初始化小米推送</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   protected void init<span class="constructor">MiPush()</span> &#123;</span><br><span class="line">       <span class="comment">//在此处注册小米推送之后，需要由MiMessageReceiver去实现注册之后的回调</span></span><br><span class="line">       <span class="module-access"><span class="module"><span class="identifier">MiPushClient</span>.</span></span>register<span class="constructor">Push(<span class="params">this</span>, MIPUSH_APPID, MIPUSH_APPKEY)</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>在这里注册完小米推送之后，需要创建一个新的类来处理注册之后的回调，处理接收消息的回调，点击通知栏消息的回调等。在执行之前，需要先在Manifest文件中添加部分代码，具体如下所示：</p><ol><li>添加权限<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-sdk</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:minSdkVersion</span>=<span class="string">&quot;8&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:targetSdkVersion</span>=<span class="string">&quot;26&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_WIFI_STATE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_PHONE_STATE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.GET_TASKS&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- the following 2 com.xiaomi.mipushdemo should be changed to your package name --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">permission</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;com.paulniu.mypush.permission.MIPUSH_RECEIVE&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:protectionLevel</span>=<span class="string">&quot;signature&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;com.paulniu.mypush.permission.MIPUSH_RECEIVE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.VIBRATE&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：<br>这里需要做一些修改，需要将</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android:name=&quot;com.paulniu.mypush.permission.MIPUSH_RECEIVE&quot;</span><br><span class="line">android:protectionLevel=&quot;signature&quot; /&gt;</span><br></pre></td></tr></table></figure>中的包名改成自己的包名，需要将uses-permission android:name=”com.paulniu.mypush.permission.MIPUSH_RECEIVE” /&gt;改成自己的包名</li><li>添加小米推送系统广播接收器和服务<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--小米推送开始--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">service</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;com.xiaomi.push.service.XMJobService&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:enabled</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:permission</span>=<span class="string">&quot;android.permission.BIND_JOB_SERVICE&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:process</span>=<span class="string">&quot;:pushservice&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">service</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;com.xiaomi.push.service.XMPushService&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:enabled</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:process</span>=<span class="string">&quot;:pushservice&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">service</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;com.xiaomi.mipush.sdk.PushMessageHandler&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:enabled</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">service</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;com.xiaomi.mipush.sdk.MessageHandleService&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:enabled</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">receiver</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;com.xiaomi.push.service.receivers.NetworkStatusReceiver&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">receiver</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;com.xiaomi.push.service.receivers.PingReceiver&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:process</span>=<span class="string">&quot;:pushservice&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;com.xiaomi.push.PING_TIMER&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--小米推送结束--&gt;</span></span><br></pre></td></tr></table></figure>这部分内容是固定的，直接复制使用即可</li><li>创建一个新的类IMiPushMessageReceiver，并且让这个类集成PushMessageReceiver，小米推送注册，推送接收，推送点击都是在这个接收器中实现，接收器在Manifest文件中声明如下：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--自定义MessageReceiver--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">receiver</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;com.paulniu.mypush.IMiPushMessageReceiver&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;com.xiaomi.mipush.RECEIVE_MESSAGE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;com.xiaomi.mipush.MESSAGE_ARRIVED&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;com.xiaomi.mipush.ERROR&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="小米推送实现"><a href="#小米推送实现" class="headerlink" title="小米推送实现"></a>小米推送实现</h3><p>这里需要在IMiPushMessageReceiver类中重写多个方法，具体使用看代码:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> IMiPushMessageReceiver extends PushMessageReceiver &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1.PushMessageReceiver是一个抽象类，通过集成该类，实现小米推送注册之后的回调</span></span><br><span class="line"><span class="comment">     * 2.需要将IMIPushMessageReceiver注册到Manifest文件中</span></span><br><span class="line"><span class="comment">     * 3.通过onReceivePassThroughMessage方法处理服务器向客户端发送的透传消息</span></span><br><span class="line"><span class="comment">     * 4.通过onNotificationMessageClicked方法服务器向客户端发送通知消息，该回调方法会在用户点击通知之后触发</span></span><br><span class="line"><span class="comment">     * 5.通过onNotificationMessageArrived方法服务器向客户端发送通知消息，该回调方法会在通知消息到达客户端之后触发。另外应用在前台时不展示通知也在该方法中调用</span></span><br><span class="line"><span class="comment">     * 6.通过onCommandResult方法来接收客户端向服务器发送命令后的响应结果</span></span><br><span class="line"><span class="comment">     * 7.通过onReceiveRegisterResult方法接收客户端向服务器注册推送后响应的结果</span></span><br><span class="line"><span class="comment">     * 8.当前所有的操作都没有运行在UI线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    public String regId = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户端注册推送之后的回调</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param context</span></span><br><span class="line"><span class="comment">     * @param miPushCommandMessage</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    public void on<span class="constructor">ReceiveRegisterResult(Context <span class="params">context</span>, MiPushCommandMessage <span class="params">miPushCommandMessage</span>)</span> &#123;</span><br><span class="line">        List&lt;String&gt; arguments = miPushCommandMessage.get<span class="constructor">CommandArguments()</span>;</span><br><span class="line">        String cmdArg = ((arguments != null<span class="operator"> &amp;&amp; </span>arguments.size<span class="literal">()</span> &gt; <span class="number">0</span>)) ? arguments.get(<span class="number">0</span>) : <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">//注册成功</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">MiPushClient</span>.</span><span class="module"><span class="identifier">COMMAND_REGISTER</span>.</span></span>equals(miPushCommandMessage.get<span class="constructor">Command()</span>)<span class="operator"> &amp;&amp; </span>ErrorCode.SUCCESS<span class="operator"> == </span>miPushCommandMessage.get<span class="constructor">ResultCode()</span><span class="operator"> &amp;&amp; </span>!<span class="module-access"><span class="module"><span class="identifier">TextUtils</span>.</span></span>is<span class="constructor">Empty(<span class="params">cmdArg</span>)</span>) &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">Log</span>.</span></span>e(<span class="string">&quot;NPL&quot;</span>, <span class="string">&quot;小米推送注册成功，regId=&quot;</span> + regId);</span><br><span class="line">            regId = <span class="module-access"><span class="module"><span class="identifier">MiPushClient</span>.</span></span>get<span class="constructor">RegId(App.<span class="params">getContext</span>()</span>);</span><br><span class="line">            Message msg = <span class="module-access"><span class="module"><span class="identifier">Message</span>.</span></span>obtain<span class="literal">()</span>;</span><br><span class="line">            msg.obj = regId;</span><br><span class="line">            msg.what = <span class="number">1</span>;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">App</span>.</span></span>mHandler.send<span class="constructor">Message(<span class="params">msg</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//注册失败</span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">Log</span>.</span></span>e(<span class="string">&quot;NPL&quot;</span>, <span class="string">&quot;小米推送注册失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户端接收到推送之后触发，包括如果当前应用处于前台，则可以不用在通知栏展示</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param context</span></span><br><span class="line"><span class="comment">     * @param miPushMessage</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    public void on<span class="constructor">NotificationMessageArrived(Context <span class="params">context</span>, MiPushMessage <span class="params">miPushMessage</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//判断应用是否处于前台，如果处于前台，则可以显示弹窗，如果不在前台，在通知栏展示</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            super.on<span class="constructor">NotificationMessageArrived(<span class="params">context</span>, <span class="params">miPushMessage</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 点击通知栏的推送</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param context</span></span><br><span class="line"><span class="comment">     * @param miPushMessage</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    public void on<span class="constructor">NotificationMessageClicked(Context <span class="params">context</span>, MiPushMessage <span class="params">miPushMessage</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//如果当前推送的消息为null，则不要执行任何操作</span></span><br><span class="line">        <span class="keyword">if</span> (miPushMessage<span class="operator"> == </span>null<span class="operator"> || </span>miPushMessage.get<span class="constructor">Extra()</span><span class="operator"> == </span>null<span class="operator"> || </span>miPushMessage.get<span class="constructor">Extra()</span>.size<span class="literal">()</span> &lt;= <span class="number">0</span><span class="operator"> || </span><span class="module-access"><span class="module"><span class="identifier">TextUtils</span>.</span></span>is<span class="constructor">Empty(<span class="params">miPushMessage</span>.<span class="params">getTitle</span>()</span>)) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        String content = miPushMessage.get<span class="constructor">Content()</span>;</span><br><span class="line">        HashMap&lt;String, String&gt; hm = (HashMap&lt;String, String&gt;) miPushMessage.get<span class="constructor">Extra()</span>;</span><br><span class="line">        <span class="comment">//根据传递过来的数据，可以执行不同的操作</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户端接收到透传消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param context</span></span><br><span class="line"><span class="comment">     * @param miPushMessage</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    public void on<span class="constructor">ReceivePassThroughMessage(Context <span class="params">context</span>, MiPushMessage <span class="params">miPushMessage</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (miPushMessage<span class="operator"> == </span>null<span class="operator"> || </span><span class="module-access"><span class="module"><span class="identifier">TextUtils</span>.</span></span>is<span class="constructor">Empty(<span class="params">miPushMessage</span>.<span class="params">getContent</span>()</span>)) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        String content = miPushMessage.get<span class="constructor">Content()</span>;</span><br><span class="line">        <span class="comment">//通常需要将content转换成Json数据，然后在根据Json数据执行不同的操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样既完成了小米推送的集成。</p><p>Oppo推送服务，也是在Oppo手机中使用的比较多。而且现在Oppo和Vivo两款手机最早提出美颜功能，所以这两款手机在市场上的占有率还是比较高的。<br>Oppo推送目前已经开发注册，Vivo目前只对部分应用开发了推送服务功能。所以目前部分应用无法使用vivo推送的暂时不要着急，后面都会有的。</p><h1 id="OPPO推送"><a href="#OPPO推送" class="headerlink" title="OPPO推送"></a>OPPO推送</h1><p>首先还是先去Oppo开放平台注册自己的账号和添加应用，然后获取AppKey和AppId等信息，这些操作就不再一一叙述，具体查看<a href="https://open.oppomobile.com/">官网</a><br>这里同时将Oppo平台使用指南的官方地址写出来，其实就是如何使用控制台，后面会针对几个特殊的内容，比如传递自定义数据等截图具体分析。<a href="https://open.oppomobile.com/wiki/doc#id=10198">使用指南</a></p><h2 id="OPPO推送SDK下载"><a href="#OPPO推送SDK下载" class="headerlink" title="OPPO推送SDK下载"></a>OPPO推送SDK下载</h2><p>Oppo为我们提供了<a href="https://open.oppomobile.com/wiki/doc#id=10201">下载地址</a>，其中还包括一个官方提供的demo，不过这个demo我没有仔细看过。希望以后有时间可以将demo仔细的看一遍</p><h2 id="OPPO推送集成"><a href="#OPPO推送集成" class="headerlink" title="OPPO推送集成"></a>OPPO推送集成</h2><p>将下载的SDK中Oppo推送的jar包拷贝出来，直接放在libs文件夹中。<br>在执行Oppo推送之前，最好先判断当手机是否是Oppo手机，判断使用下面的内容</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(android.os.<span class="module-access"><span class="module"><span class="identifier">Build</span>.</span><span class="module"><span class="identifier">BRAND</span>.</span></span><span class="keyword">to</span><span class="constructor">LowerCase()</span>.contains(<span class="string">&quot;oppo&quot;</span>))&#123;</span><br><span class="line">init<span class="constructor">OppoPush()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在Application中执行Oppo推送初始化</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化OPPO推送</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">protected void init<span class="constructor">OppoPush()</span> &#123;</span><br><span class="line">    <span class="comment">//在执行Oppo推送注册之前，需要先判断当前平台是否支持Oppo推送</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">PushManager</span>.</span></span>is<span class="constructor">SupportPush(<span class="params">this</span>)</span>) &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">PushManager</span>.</span></span>get<span class="constructor">Instance()</span>.register(this, OPPO_APPID, OPPO_APPKEY, <span class="keyword">new</span> <span class="constructor">PushAdapter()</span> &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void on<span class="constructor">Register(<span class="params">int</span> <span class="params">i</span>, String <span class="params">s</span>)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (i<span class="operator"> == </span>ErrorCode.SUCCESS) &#123;</span><br><span class="line">                    <span class="comment">//注册成功</span></span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">Log</span>.</span></span>e(<span class="string">&quot;NPL&quot;</span>, <span class="string">&quot;注册成功，registerId=&quot;</span> + s);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//注册失败</span></span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">Log</span>.</span></span>e(<span class="string">&quot;NPL&quot;</span>, <span class="string">&quot;注册失败&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里基本的操作已经完成了，当通过Oppo控制台推送一些通知时，可以通过点击启动App。但是如果我们想要传递的内容不同而执行不同的操作，例如可以打开web页面，可以跳转到不同的Activity，那么这是我们需要另外一Activity。这个Activity没有实际的含义，只是起到一个承接的作用，即当点击通知时，获取传递的数据，然后根据不同的数据跳转到不同的页面。<br>需要在Manifest文件中添加这个Activity的声明，具体声明代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:name</span>=<span class="string">&quot;.OPPOPushMessageActivity&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:configChanges</span>=<span class="string">&quot;keyboardHidden|orientation&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:launchMode</span>=<span class="string">&quot;singleTask&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:screenOrientation</span>=<span class="string">&quot;portrait&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:theme</span>=<span class="string">&quot;@style/AppTheme&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;com.paulniu.mypush.oppopush&quot;</span> /&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>其中的action android:name=”com.paulniu.mypush.oppopush” /&gt;是当我们发送应用内页时的标识</p></blockquote><p>如图所示：<br><img src="/assets/push/push06.png" alt="在这里插入图片描述"><br> 2019年2月15日15:10:13 OPPO官网对这个地方的样式做了调整<br> 1.如果传递的是Intent Action ，如图<br><img src="/assets/push/push07.png" alt="在这里插入图片描述"><br>则在使用的时候需要在Manifest文件中设置如图<br><img src="/assets/push/push08.png" alt="在这里插入图片描述"><br>2.如果使用的是Activity，如图<br> <img src="/assets/push/push09.png" alt="在这里插入图片描述"><br> 这个就不多说了<br> 3.如果使用的是Scheme,如图<br> <img src="/assets/push/push10.png" alt="在这里插入图片描述"><br> 那么在Manifest文件中使用的应该是如下所示</p><p><img src="/assets/push/push11.png" alt="在这里插入图片描述"></p><p>并且当我们选择插入的键值，就需要在客户端获取到并且解析。那么就需要在OPPOPushMessageActivity中解析。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class OPPOPushMessageActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> type = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> url = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> innerUrl = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="comment">// 取参数值</span></span><br><span class="line">        <span class="keyword">if</span> (getIntent().getExtras() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 取参数值</span></span><br><span class="line">            Bundle bundle = getIntent().getExtras();</span><br><span class="line">            Set&lt;<span class="keyword">String</span>&gt; <span class="built_in">set</span> = bundle.keySet();</span><br><span class="line">            <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; hm = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">set</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">String</span> <span class="built_in">key</span> : <span class="built_in">set</span>) &#123;</span><br><span class="line">                    hm.put(<span class="built_in">key</span>, bundle.getString(<span class="built_in">key</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Log.e(<span class="string">&quot;NPL&quot;</span>, <span class="string">&quot;hm的值是：&quot;</span> + hm.toString());</span><br><span class="line">            <span class="keyword">if</span> (hm.<span class="built_in">size</span>() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//解析当前的HashMap对象，可以获取具体的数据</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">set</span>.contains(<span class="string">&quot;type&quot;</span>)) &#123;</span><br><span class="line">                    type = hm.<span class="built_in">get</span>(<span class="string">&quot;type&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">set</span>.contains(<span class="string">&quot;url&quot;</span>)) &#123;</span><br><span class="line">                    url = hm.<span class="built_in">get</span>(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">set</span>.contains(<span class="string">&quot;innerUrl&quot;</span>)) &#123;</span><br><span class="line">                    innerUrl = hm.<span class="built_in">get</span>(<span class="string">&quot;innerUrl&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//根据当前type类型去执行不同的操作</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="vivo推送"><a href="#vivo推送" class="headerlink" title="vivo推送"></a>vivo推送</h1><p>vivo推送官网地址如下： <a href="https://dev.vivo.com.cn/home">https://dev.vivo.com.cn/home</a><br>由于vivo推送目前还没有全面开发，所以这里使用的测试版本<br>对于vivo的推送平台的使用，这里贴出官网地址：<a href="https://dev.vivo.com.cn/documentCenter/doc/151">vivo推送平台使用</a><br>vivo推送SDK下载：<a href="https://swsdl.vivo.com.cn/appstore/developer/uploadfile/20181119/20181119180214292.zip">下载地址</a> 这里面包括API文档，demo，SDK等内容</p><blockquote><p>该说不说，还是vivo提供的文档最好，各种清晰，方便操作，对于我这样的小白很适用</p></blockquote><h2 id="vivo推送集成"><a href="#vivo推送集成" class="headerlink" title="vivo推送集成"></a>vivo推送集成</h2><h3 id="SDK"><a href="#SDK" class="headerlink" title="SDK"></a>SDK</h3><p>首先将SDK拷贝出来放到libs文件夹中，然后重新编译</p><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p>在Manifest文件中对于Vivo推送需要添加部分权限和声明<br>权限：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--vivo推送所需要的权限--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>声明：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--vivo推送开始--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--vivo推送配置项--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:name</span>=<span class="string">&quot;com.vivo.push.api_key&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:value</span>=<span class="string">&quot;xxxxxxxxxxxxx&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:name</span>=<span class="string">&quot;com.vivo.push.app_id&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:value</span>=<span class="string">&quot;xxxxxxx&quot;</span> /&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--推送服务需要配置的 service、activity--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">service</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:name</span>=<span class="string">&quot;com.vivo.push.sdk.service.CommandClientService&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:name</span>=<span class="string">&quot;com.vivo.push.sdk.LinkProxyClientActivity&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:exported</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:screenOrientation</span>=<span class="string">&quot;portrait&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:theme</span>=<span class="string">&quot;@android:style/Theme.Translucent.NoTitleBar&quot;</span> /&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--vivo推送结束--&gt;</span></span><br></pre></td></tr></table></figure><p>之后需要在Application中执行Vivo推送的注册</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 初始化vivo推送</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   protected void init<span class="constructor">VivoPush()</span> &#123;</span><br><span class="line">       <span class="comment">//初始化vivo推送</span></span><br><span class="line">       <span class="module-access"><span class="module"><span class="identifier">PushClient</span>.</span></span>get<span class="constructor">Instance(<span class="params">this</span>)</span>.initialize<span class="literal">()</span>;</span><br><span class="line">       <span class="comment">//并且打开推送服务</span></span><br><span class="line">       <span class="module-access"><span class="module"><span class="identifier">PushClient</span>.</span></span>get<span class="constructor">Instance(<span class="params">this</span>)</span>.turn<span class="constructor">OnPush(<span class="params">new</span> IPushActionListener()</span> &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void on<span class="constructor">StateChanged(<span class="params">int</span> <span class="params">i</span>)</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (i<span class="operator"> == </span><span class="number">0</span>) &#123;</span><br><span class="line">                   <span class="module-access"><span class="module"><span class="identifier">Log</span>.</span></span>e(<span class="string">&quot;NPL&quot;</span>, <span class="string">&quot;打开推送服务成功&quot;</span>);</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="module-access"><span class="module"><span class="identifier">Log</span>.</span></span>e(<span class="string">&quot;NPL&quot;</span>, <span class="string">&quot;打开推送服务失败&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这样就完成了基本操作。但如果需要相应点击事件，则需要创建一个广播接收器，并在里面实现相应的方法<br>广播接收器的注册：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">&quot;.IVivoPushMessageReceiver&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 接收push消息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;com.vivo.pushclient.action.RECEIVE&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure><p>广播接收器的代码实现：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> IVivoPushMessageReceiver extends OpenClientPushMessageReceiver &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void on<span class="constructor">NotificationMessageClicked(Context <span class="params">context</span>, UPSNotificationMessage <span class="params">upsNotificationMessage</span>)</span> &#123;</span><br><span class="line">        long msgId;</span><br><span class="line">        String customeContent = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (upsNotificationMessage != null) &#123;</span><br><span class="line">            msgId = upsNotificationMessage.get<span class="constructor">MsgId()</span>;</span><br><span class="line">            customeContent = upsNotificationMessage.get<span class="constructor">SkipContent()</span>;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">Log</span>.</span></span>e(<span class="string">&quot;NPL&quot;</span>, <span class="string">&quot;获取通知内容如下:msgId = &quot;</span> + msgId + <span class="string">&quot;;customeContent=&quot;</span> + customeContent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void on<span class="constructor">ReceiveRegId(Context <span class="params">context</span>, String <span class="params">s</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">TextUtils</span>.</span></span>is<span class="constructor">Empty(<span class="params">s</span>)</span>) &#123;</span><br><span class="line">            <span class="comment">//获取regId失败</span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">Log</span>.</span></span>e(<span class="string">&quot;NPL&quot;</span>, <span class="string">&quot;获取RegId失败&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">Log</span>.</span></span>e(<span class="string">&quot;NPL&quot;</span>, <span class="string">&quot;获取RegId成功，regid = &quot;</span> + s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就实现了vivo的推送。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;目前所在的公司让我把之前项目中的推送重新整理一下。因为现在的需求是在应用被后台杀死的情况下，依然可以推送消息，那么只是单一的使用一个推送工具是无法实现的，比如友盟。那么就需要同时集成Umeng，华为，小米，Oppo等手机厂商提供的PushSDK。这本来是简简单单的一件事，突然之后，工作量无形之后增大。不过好在经过一段时间的尝试，终于集成成功，今天把这个历程记录下来，方面以后查看。&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://www.paulniu.com/tags/android/"/>
    
    <category term="推送" scheme="http://www.paulniu.com/tags/%E6%8E%A8%E9%80%81/"/>
    
  </entry>
  
  <entry>
    <title>ios-sqlite3数据库操作</title>
    <link href="http://www.paulniu.com/2018/05/18/ios-sqlite3/"/>
    <id>http://www.paulniu.com/2018/05/18/ios-sqlite3/</id>
    <published>2018-05-18T08:30:23.000Z</published>
    <updated>2021-06-21T09:33:56.094Z</updated>
    
    <content type="html"><![CDATA[<p>介绍</p><span id="more"></span><p>sqlite是纯C语言中底层的数据库，在OC和Swift中都是经常使用的数据库，在开发中，可以使用代码创建数据库，可以使用图形化界面创建数据库。例如SQLiteManager、SQLiteStudio等</p><h1 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h1><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>OpaquePointer: *db</td><td>数据库句柄，跟文件句柄FIFL类似，这里是sqlite3指针</td></tr><tr><td>sqlite3_stmt: *stmt</td><td>相当于ODBC的Command对象，用于保存编译好的SQL语句</td></tr><tr><td>sqlite3_open()</td><td>打开数据库，没有数据库时创建</td></tr><tr><td>sqlite3_exec()</td><td>执行非查询的SQL语句</td></tr><tr><td>sqlite3_step()</td><td>在调用sqlite3_prepare后，使用这个函数在记录集中移动</td></tr><tr><td>sqlite3_close()</td><td>关闭数据库文件</td></tr><tr><td>sqlite3_column_text()</td><td>取text类型的数据</td></tr><tr><td>sqlite3_column_blob()</td><td>取blob类型的数据</td></tr><tr><td>sqlite3_column_int()</td><td>取int类型的数据</td></tr></tbody></table><h1 id="引入Sqlite"><a href="#引入Sqlite" class="headerlink" title="引入Sqlite"></a>引入Sqlite</h1><p>引入Sqlite数据库的方式，网上有很多，我这里就不在赘述了</p><h1 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h1><p>数据库连接操作(包括数据库的创建，表的创建，表的查询，修改，删除等操作)</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQLiteConnect</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> db :<span class="type">OpaquePointer</span>? <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">let</span> sqlitePath :<span class="type">String</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">init?</span>(<span class="params">path</span> :<span class="type">String</span>)</span> &#123;</span><br><span class="line">        sqlitePath <span class="operator">=</span> path</span><br><span class="line">        db <span class="operator">=</span> <span class="keyword">self</span>.openDatabase(sqlitePath)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> db <span class="operator">==</span> <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 連結資料庫 connect database</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">openDatabase</span>(<span class="keyword">_</span> <span class="params">path</span> :<span class="type">String</span>)</span> -&gt; <span class="type">OpaquePointer</span>? &#123;</span><br><span class="line">        <span class="keyword">var</span> connectdb: <span class="type">OpaquePointer</span>? <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">        <span class="keyword">if</span> sqlite3_open(path, <span class="operator">&amp;</span>connectdb) <span class="operator">==</span> <span class="type">SQLITE_OK</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Successfully opened database <span class="subst">\(path)</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> connectdb<span class="operator">!</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Unable to open database.&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 建立資料表 create table</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">createTable</span>(<span class="keyword">_</span> <span class="params">tableName</span> :<span class="type">String</span>, <span class="params">columnsInfo</span> :[<span class="type">String</span>])</span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> sql <span class="operator">=</span> <span class="string">&quot;create table if not exists <span class="subst">\(tableName)</span> &quot;</span></span><br><span class="line">            <span class="operator">+</span> <span class="string">&quot;(<span class="subst">\(columnsInfo.joined(separator: <span class="string">&quot;,&quot;</span>))</span>)&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> sqlite3_exec(<span class="keyword">self</span>.db, sql.cString(using: <span class="type">String</span>.<span class="type">Encoding</span>.utf8), <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">nil</span>) <span class="operator">==</span> <span class="type">SQLITE_OK</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 新增資料</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">insert</span>(<span class="keyword">_</span> <span class="params">tableName</span> :<span class="type">String</span>, <span class="params">rowInfo</span> :[<span class="params">String</span>:<span class="type">String</span>])</span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> statement :<span class="type">OpaquePointer</span>? <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">        <span class="keyword">let</span> sql <span class="operator">=</span> <span class="string">&quot;insert into <span class="subst">\(tableName)</span> &quot;</span></span><br><span class="line">            <span class="operator">+</span> <span class="string">&quot;(<span class="subst">\(rowInfo.keys.joined(separator: <span class="string">&quot;,&quot;</span>))</span>) &quot;</span></span><br><span class="line">            <span class="operator">+</span> <span class="string">&quot;values (<span class="subst">\(rowInfo.values.joined(separator: <span class="string">&quot;,&quot;</span>))</span>)&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> sqlite3_prepare_v2(<span class="keyword">self</span>.db, sql.cString(using: <span class="type">String</span>.<span class="type">Encoding</span>.utf8), <span class="operator">-</span><span class="number">1</span>, <span class="operator">&amp;</span>statement, <span class="literal">nil</span>) <span class="operator">==</span> <span class="type">SQLITE_OK</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> sqlite3_step(statement) <span class="operator">==</span> <span class="type">SQLITE_DONE</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            sqlite3_finalize(statement)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 讀取資料</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fetch</span>(<span class="keyword">_</span> <span class="params">tableName</span> :<span class="type">String</span>, <span class="params">cond</span> :<span class="type">String</span>?, <span class="params">order</span> :<span class="type">String</span>?)</span> -&gt; <span class="type">OpaquePointer</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> statement :<span class="type">OpaquePointer</span>? <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">        <span class="keyword">var</span> sql <span class="operator">=</span> <span class="string">&quot;select * from <span class="subst">\(tableName)</span>&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> condition <span class="operator">=</span> cond &#123;</span><br><span class="line">            sql <span class="operator">+=</span> <span class="string">&quot; where <span class="subst">\(condition)</span>&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> orderBy <span class="operator">=</span> order &#123;</span><br><span class="line">            sql <span class="operator">+=</span> <span class="string">&quot; order by <span class="subst">\(orderBy)</span>&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        sqlite3_prepare_v2(<span class="keyword">self</span>.db, sql.cString(using: <span class="type">String</span>.<span class="type">Encoding</span>.utf8), <span class="operator">-</span><span class="number">1</span>, <span class="operator">&amp;</span>statement, <span class="literal">nil</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> statement<span class="operator">!</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 更新資料</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">update</span>(<span class="keyword">_</span> <span class="params">tableName</span> :<span class="type">String</span>, <span class="params">cond</span> :<span class="type">String</span>?, <span class="params">rowInfo</span> :[<span class="params">String</span>:<span class="type">String</span>])</span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> statement :<span class="type">OpaquePointer</span>? <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">        <span class="keyword">var</span> sql <span class="operator">=</span> <span class="string">&quot;update <span class="subst">\(tableName)</span> set &quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// row info</span></span><br><span class="line">        <span class="keyword">var</span> info :[<span class="type">String</span>] <span class="operator">=</span> []</span><br><span class="line">        <span class="keyword">for</span> (k, v) <span class="keyword">in</span> rowInfo &#123;</span><br><span class="line">            info.append(<span class="string">&quot;<span class="subst">\(k)</span> = <span class="subst">\(v)</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        sql <span class="operator">+=</span> info.joined(separator: <span class="string">&quot;,&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// condition</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> condition <span class="operator">=</span> cond &#123;</span><br><span class="line">            sql <span class="operator">+=</span> <span class="string">&quot; where <span class="subst">\(condition)</span>&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> sqlite3_prepare_v2(<span class="keyword">self</span>.db, sql.cString(using: <span class="type">String</span>.<span class="type">Encoding</span>.utf8), <span class="operator">-</span><span class="number">1</span>, <span class="operator">&amp;</span>statement, <span class="literal">nil</span>) <span class="operator">==</span> <span class="type">SQLITE_OK</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> sqlite3_step(statement) <span class="operator">==</span> <span class="type">SQLITE_DONE</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            sqlite3_finalize(statement)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 刪除資料</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">delete</span>(<span class="keyword">_</span> <span class="params">tableName</span> :<span class="type">String</span>, <span class="params">cond</span> :<span class="type">String</span>?)</span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> statement :<span class="type">OpaquePointer</span>? <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">        <span class="keyword">var</span> sql <span class="operator">=</span> <span class="string">&quot;delete from <span class="subst">\(tableName)</span>&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// condition</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> condition <span class="operator">=</span> cond &#123;</span><br><span class="line">            sql <span class="operator">+=</span> <span class="string">&quot; where <span class="subst">\(condition)</span>&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> sqlite3_prepare_v2(<span class="keyword">self</span>.db, sql.cString(using: <span class="type">String</span>.<span class="type">Encoding</span>.utf8), <span class="operator">-</span><span class="number">1</span>, <span class="operator">&amp;</span>statement, <span class="literal">nil</span>) <span class="operator">==</span> <span class="type">SQLITE_OK</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> sqlite3_step(statement) <span class="operator">==</span> <span class="type">SQLITE_DONE</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            sqlite3_finalize(statement)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db :<span class="type">SQLiteConnect</span>?</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 資料庫檔案的路徑</span></span><br><span class="line">        <span class="keyword">let</span> urls <span class="operator">=</span> <span class="type">FileManager</span>.default.urls(for: .documentDirectory, in: .userDomainMask)</span><br><span class="line">        <span class="keyword">let</span> sqlitePath <span class="operator">=</span> urls[urls.count<span class="operator">-</span><span class="number">1</span>].absoluteString <span class="operator">+</span> <span class="string">&quot;sqlite3.db&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 印出儲存檔案的位置</span></span><br><span class="line">        <span class="built_in">print</span>(sqlitePath)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// SQLite 資料庫</span></span><br><span class="line">        db <span class="operator">=</span> <span class="type">SQLiteConnect</span>(path: sqlitePath)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> mydb <span class="operator">=</span> db &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// create table</span></span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> mydb.createTable(<span class="string">&quot;students&quot;</span>, columnsInfo: [</span><br><span class="line">                <span class="string">&quot;id integer primary key autoincrement&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name text&quot;</span>,</span><br><span class="line">                <span class="string">&quot;height double&quot;</span>])</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// insert</span></span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> mydb.insert(<span class="string">&quot;students&quot;</span>, rowInfo: [<span class="string">&quot;name&quot;</span>:<span class="string">&quot;&#x27;大強&#x27;&quot;</span>,<span class="string">&quot;height&quot;</span>:<span class="string">&quot;178.2&quot;</span>])</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// select</span></span><br><span class="line">            <span class="keyword">let</span> statement <span class="operator">=</span> mydb.fetch(<span class="string">&quot;students&quot;</span>, cond: <span class="string">&quot;1 == 1&quot;</span>, order: <span class="literal">nil</span>)</span><br><span class="line">            <span class="keyword">while</span> sqlite3_step(statement) <span class="operator">==</span> <span class="type">SQLITE_ROW</span>&#123;</span><br><span class="line">                <span class="keyword">let</span> id <span class="operator">=</span> sqlite3_column_int(statement, <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">let</span> name <span class="operator">=</span> <span class="type">String</span>(cString: sqlite3_column_text(statement, <span class="number">1</span>))</span><br><span class="line">                <span class="keyword">let</span> height <span class="operator">=</span> sqlite3_column_double(statement, <span class="number">2</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(id)</span>. <span class="subst">\(name)</span> 身高： <span class="subst">\(height)</span>&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            sqlite3_finalize(statement)</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// update</span></span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> mydb.update(<span class="string">&quot;students&quot;</span>, cond: <span class="string">&quot;id = 1&quot;</span>, rowInfo: [<span class="string">&quot;name&quot;</span>:<span class="string">&quot;&#x27;小強&#x27;&quot;</span>,<span class="string">&quot;height&quot;</span>:<span class="string">&quot;176.8&quot;</span>])</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// delete</span></span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> mydb.delete(<span class="string">&quot;students&quot;</span>, cond: <span class="string">&quot;id = 5&quot;</span>)</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.cnblogs.com/XYQ-208910/p/6421840.html">ios sqlite3的使用</a><br><a href="https://itisjoe.gitbooks.io/swiftgo/content/database/sqlite.html">Swift起步走</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;介绍&lt;/p&gt;</summary>
    
    
    
    
    <category term="-ios" scheme="http://www.paulniu.com/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>ios-打开microsoft文档App</title>
    <link href="http://www.paulniu.com/2018/05/18/ios-microsoft/"/>
    <id>http://www.paulniu.com/2018/05/18/ios-microsoft/</id>
    <published>2018-05-18T06:31:44.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为从广州来到了北京，换了工作，所以现在公司要求做的东西跟之前不太一样。做的一款办公软件，这里面就包括对微软doc文档，ppt文档，xls文档。Android端的我已经做了一个版本，然后是非常简单的打开，没有编辑功能。现在我要做的就是IOS版本。所有的东西都是自己从0开始的，记录下来，方便自己，也给后来者一些提示。</p><span id="more"></span><h1 id="Office文件的IOS-UTI支持"><a href="#Office文件的IOS-UTI支持" class="headerlink" title="Office文件的IOS-UTI支持"></a>Office文件的IOS-UTI支持</h1><table><thead><tr><th>文件格式</th><th align="center">UTI type</th></tr></thead><tbody><tr><td>doc</td><td align="center">com.microsoft.word.doc</td></tr><tr><td>docx</td><td align="center">org.openxmlformats.wordprocessingml.document</td></tr><tr><td>ppt</td><td align="center">com.microsoft.powerpoint.ppt</td></tr><tr><td>pptx</td><td align="center">org.openxmlformats.presentationml.presentation</td></tr><tr><td>xls</td><td align="center">com.microsoft.excel.xls</td></tr><tr><td>xlsx</td><td align="center">org.openxmlformats.spreadsheetml.sheet</td></tr><tr><td>pdf</td><td align="center">com.adobe.pdf</td></tr></tbody></table><p>如果需要适配以上的文件类型，可以直接将下面的代码复制到info.plist文件中的dict标签中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleDocumentTypes<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleTypeName<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>OFFICE Document<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>LSHandlerRank<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>Owner<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>LSItemContentTypes<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.microsoft.word.doc<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.microsoft.powerpoint.ppt<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.microsoft.excel.xls<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.adobe.pdf<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>org.openxmlformats.wordprocessingml.document<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>org.openxmlformats.presentationml.presentation<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>org.openxmlformats.spreadsheetml.sheet<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>org.oasis-open.opendocument.text<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://developer.apple.com/library/content/qa/qa1587/_index.html">参考网站</a></p><h1 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h1><p>其他的应用(如QQ，微信等)分享过来的文件，在自己的应用中打开，这时候有一个跳转的过程，那么当跳转到第二个页面的时候，我们需要让他可以以一种打开新文件的方式展示<br>具体实现代码<br>在AppDelegate.swift文件中，重写application方法，这里注意是使用的是</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span>(<span class="keyword">_</span> <span class="params">app</span>: <span class="type">UIApplication</span>, <span class="params">open</span> <span class="params">url</span>: <span class="type">URL</span>, <span class="params">options</span>: [<span class="params">UIApplicationOpenURLOptionsKey</span> : <span class="keyword">Any</span>] <span class="operator">=</span> [:])</span> -&gt; <span class="type">Bool</span> </span><br></pre></td></tr></table></figure><p>全局代码</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span>(<span class="keyword">_</span> <span class="params">app</span>: <span class="type">UIApplication</span>, <span class="params">open</span> <span class="params">url</span>: <span class="type">URL</span>, <span class="params">options</span>: [<span class="params">UIApplicationOpenURLOptionsKey</span> : <span class="keyword">Any</span>] <span class="operator">=</span> [:])</span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;文件路径是 <span class="subst">\(url)</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">let</span> vc: <span class="type">DocumentViewController</span> <span class="operator">=</span> <span class="type">DocumentViewController</span>(filePath: url)</span><br><span class="line">        <span class="comment">//跳转到打开文件的页面</span></span><br><span class="line">        <span class="type">UIViewController</span>.currentViewController()<span class="operator">?</span>.navigationController<span class="operator">?</span>.pushViewController(vc, animated: <span class="literal">true</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>扩展方法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取当期页面的presentview</span></span><br><span class="line">extension UIViewController &#123;</span><br><span class="line">    <span class="keyword">class</span> func current<span class="constructor">ViewController(<span class="params">base</span>: UIViewController? = UIApplication.<span class="params">shared</span>.<span class="params">keyWindow</span>?.<span class="params">rootViewController</span>)</span> -&gt; UIViewController? &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> nav = base <span class="keyword">as</span>? UINavigationController &#123;</span><br><span class="line">            return current<span class="constructor">ViewController(<span class="params">base</span>: <span class="params">nav</span>.<span class="params">visibleViewController</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> tab = base <span class="keyword">as</span>? UITabBarController &#123;</span><br><span class="line">            return current<span class="constructor">ViewController(<span class="params">base</span>: <span class="params">tab</span>.<span class="params">selectedViewController</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> presented = base?.presentedViewController &#123;</span><br><span class="line">            return current<span class="constructor">ViewController(<span class="params">base</span>: <span class="params">presented</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">        return base</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;因为从广州来到了北京，换了工作，所以现在公司要求做的东西跟之前不太一样。做的一款办公软件，这里面就包括对微软doc文档，ppt文档，xls文档。Android端的我已经做了一个版本，然后是非常简单的打开，没有编辑功能。现在我要做的就是IOS版本。所有的东西都是自己从0开始的，记录下来，方便自己，也给后来者一些提示。&lt;/p&gt;</summary>
    
    
    
    
    <category term="swift" scheme="http://www.paulniu.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>ios文件操作</title>
    <link href="http://www.paulniu.com/2018/05/16/ios-file-operation/"/>
    <id>http://www.paulniu.com/2018/05/16/ios-file-operation/</id>
    <published>2018-05-16T01:15:30.000Z</published>
    <updated>2020-11-27T06:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>文件操作</p><span id="more"></span><h1 id="遍历某个文件夹的文件"><a href="#遍历某个文件夹的文件" class="headerlink" title="遍历某个文件夹的文件"></a>遍历某个文件夹的文件</h1><h2 id="获取当前路径"><a href="#获取当前路径" class="headerlink" title="获取当前路径"></a>获取当前路径</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let manager = FileManager<span class="selector-class">.default</span></span><br><span class="line">let urlForDocument = manager<span class="selector-class">.urls</span>(<span class="keyword">for</span>: <span class="selector-class">.documentDirectory</span>, <span class="keyword">in</span>:.userDomainMask)</span><br><span class="line">let url = urlForDocument<span class="selector-attr">[0]</span> as URL</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(url)</span></span></span><br></pre></td></tr></table></figure><p>结果：<br><img src="/assets/ios_file/if_01.png" alt="获取当前路径"></p><h2 id="对指定路径进行浅搜索，返回指定路径下的文件，子目录和符号链接的列表"><a href="#对指定路径进行浅搜索，返回指定路径下的文件，子目录和符号链接的列表" class="headerlink" title="对指定路径进行浅搜索，返回指定路径下的文件，子目录和符号链接的列表"></a>对指定路径进行浅搜索，返回指定路径下的文件，子目录和符号链接的列表</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> contentsOfPath = <span class="keyword">try</span>? manager.contents<span class="constructor">OfDirectory(<span class="params">atPath</span>: <span class="params">url</span>.<span class="params">path</span>)</span></span><br><span class="line">print(<span class="string">&quot;contentsOfPath: \(contentsOfPath)&quot;</span>)</span><br></pre></td></tr></table></figure><p>有另外一种写法</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> contentsOfURL = <span class="keyword">try</span>? manager.contentsOfDirectory(<span class="keyword">a</span><span class="variable">t:</span> url,</span><br><span class="line">                        includingPropertiesForKey<span class="variable">s:</span> nil, option<span class="variable">s:</span> .skipsHiddenFiles)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&quot;contentsOfURL: \(contentsOfURL)&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/assets/ios_file/if_02.png" alt="浅遍历"></p><h2 id="深度遍历，会递归遍历子文件夹和子文件-但不会递归符号链接"><a href="#深度遍历，会递归遍历子文件夹和子文件-但不会递归符号链接" class="headerlink" title="深度遍历，会递归遍历子文件夹和子文件(但不会递归符号链接)"></a>深度遍历，会递归遍历子文件夹和子文件(但不会递归符号链接)</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let enumeratorAtPath = manager<span class="selector-class">.enumerator</span>(atPath: url.path)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;enumeratorAtPath: \(enumeratorAtPath?.allObjects)&quot;</span>)</span></span></span><br></pre></td></tr></table></figure><p><img src="/assets/ios_file/if_03.png" alt="深遍历"><br>深度遍历，会递归遍历子文件夹（但不会递归符号链接）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let enumeratorAtURL = manager<span class="selector-class">.enumerator</span>(at: url, includingPropertiesForKeys: nil,</span><br><span class="line">                                         options: <span class="selector-class">.skipsHiddenFiles</span>, errorHandler:nil)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;enumeratorAtURL: \(enumeratorAtURL?.allObjects)&quot;</span>)</span></span></span><br></pre></td></tr></table></figure><p><img src="/assets/ios_file/if_04.png" alt="深遍历获取全路径"></p><h2 id="深度遍历，会递归遍历子文件夹（包括符号链接，所以要求性能的话用enumeratorAtPath）"><a href="#深度遍历，会递归遍历子文件夹（包括符号链接，所以要求性能的话用enumeratorAtPath）" class="headerlink" title="深度遍历，会递归遍历子文件夹（包括符号链接，所以要求性能的话用enumeratorAtPath）"></a>深度遍历，会递归遍历子文件夹（包括符号链接，所以要求性能的话用enumeratorAtPath）</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let subPaths = manager<span class="selector-class">.subpaths</span>(atPath: url.path)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;subPaths: \(subPaths)&quot;</span>)</span></span></span><br></pre></td></tr></table></figure><p><img src="/assets/ios_file/if_05.png" alt="深度遍历"></p><h1 id="判断文件或者文件夹是否存在"><a href="#判断文件或者文件夹是否存在" class="headerlink" title="判断文件或者文件夹是否存在"></a>判断文件或者文件夹是否存在</h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fileManager = <span class="module-access"><span class="module"><span class="identifier">FileManager</span>.</span></span>default</span><br><span class="line"><span class="keyword">let</span> filePath:String = <span class="constructor">NSHomeDirectory()</span> + <span class="string">&quot;/Documents/hangge.txt&quot;</span></span><br><span class="line"><span class="keyword">let</span> exist = fileManager.file<span class="constructor">Exists(<span class="params">atPath</span>: <span class="params">filePath</span>)</span></span><br></pre></td></tr></table></figure><p><img src="/assets/iof_file/if_06.png" alt="判断文件或者文件夹是否存在"></p><h1 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myDirectory:<span class="type">String</span> <span class="operator">=</span> <span class="type">NSHomeDirectory</span>() <span class="operator">+</span> <span class="string">&quot;/Documents/myFolder/Files&quot;</span></span><br><span class="line"><span class="keyword">let</span> fileManager <span class="operator">=</span> <span class="type">FileManager</span>.default</span><br><span class="line"> </span><br><span class="line"><span class="comment">//withIntermediateDirectories为ture表示路径中间如果有不存在的文件夹都会创建</span></span><br><span class="line"><span class="keyword">try!</span> fileManager.createDirectory(atPath: myDirectory,</span><br><span class="line">                        withIntermediateDirectories: <span class="literal">true</span>, attributes: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><p><img src="/assets/ios_file/if_07.png" alt="创建文件夹"><br>可以看到创建之后的数组中已经有了新的文件夹<br>第二种方法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createFolder</span>(<span class="params">name</span>:<span class="type">String</span>,<span class="params">baseUrl</span>:<span class="type">NSURL</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> manager <span class="operator">=</span> <span class="type">FileManager</span>.default</span><br><span class="line">    <span class="keyword">let</span> folder <span class="operator">=</span> baseUrl.appendingPathComponent(name, isDirectory: <span class="literal">true</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;文件夹: <span class="subst">\(folder)</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">let</span> exist <span class="operator">=</span> manager.fileExists(atPath: folder<span class="operator">!</span>.path)</span><br><span class="line">    <span class="keyword">if</span> <span class="operator">!</span>exist &#123;</span><br><span class="line">        <span class="keyword">try!</span> manager.createDirectory(at: folder<span class="operator">!</span>, withIntermediateDirectories: <span class="literal">true</span>,</span><br><span class="line">                                     attributes: <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">     </span><br><span class="line"><span class="comment">//在文档目录下新建folder目录</span></span><br><span class="line"><span class="keyword">let</span> manager <span class="operator">=</span> <span class="type">FileManager</span>.default</span><br><span class="line"><span class="keyword">let</span> urlForDocument <span class="operator">=</span> manager.urls(for: .documentDirectory, in: .userDomainMask)</span><br><span class="line"><span class="keyword">let</span> url <span class="operator">=</span> urlForDocument[<span class="number">0</span>] <span class="keyword">as</span> <span class="type">NSURL</span></span><br><span class="line">createFolder(name: <span class="string">&quot;folder&quot;</span>, baseUrl: url)</span><br></pre></td></tr></table></figure><h1 id="将对象写入文件"><a href="#将对象写入文件" class="headerlink" title="将对象写入文件"></a>将对象写入文件</h1><p>可以通过write(to:)方法，可以创建文件并将对象写入，对象包括String，NSString，UIImage，NSArray，NSDictionary等</p><h2 id="把String保存到文件"><a href="#把String保存到文件" class="headerlink" title="把String保存到文件"></a>把String保存到文件</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> filePath:String = <span class="constructor">NSHomeDirectory()</span>+<span class="string">&quot;/Documents/password.txt&quot;</span></span><br><span class="line">       <span class="keyword">let</span> msg = <span class="string">&quot;我是测试内容，就问你怕不怕&quot;</span></span><br><span class="line">       <span class="keyword">try</span>! msg.write(toFile: filePath, atomically: <span class="literal">true</span>, encoding: <span class="module-access"><span class="module"><span class="identifier">String</span>.</span><span class="module"><span class="identifier">Encoding</span>.</span></span>utf8)</span><br></pre></td></tr></table></figure><p><img src="/assets/ios_file/if_08.png" alt="把String保存到文件覆盖的形式"></p><h2 id="把图片保存到路径下"><a href="#把图片保存到路径下" class="headerlink" title="把图片保存到路径下"></a>把图片保存到路径下</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> filePath = <span class="constructor">NSHomeDirectory()</span> + <span class="string">&quot;/Documents/hangge.png&quot;</span></span><br><span class="line"><span class="keyword">let</span> image = <span class="constructor">UIImage(<span class="params">named</span>: <span class="string">&quot;apple.png&quot;</span>)</span></span><br><span class="line"><span class="keyword">let</span> data:Data = <span class="constructor">UIImagePNGRepresentation(<span class="params">image</span>!)</span>!</span><br><span class="line"><span class="keyword">try</span>? data.write(<span class="keyword">to</span>: <span class="constructor">URL(<span class="params">fileURLWithPath</span>: <span class="params">filePath</span>)</span>)</span><br></pre></td></tr></table></figure><p>这个实验之后是可以的，但是这个图片比较难搞定，所以暂时先不贴出来了</p><h3 id="把NSArray写在文件路径下"><a href="#把NSArray写在文件路径下" class="headerlink" title="把NSArray写在文件路径下"></a>把NSArray写在文件路径下</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">array</span> = <span class="constructor">NSArray(<span class="params">objects</span>: <span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>,<span class="string">&quot;ccc&quot;</span>)</span></span><br><span class="line"><span class="keyword">let</span> filePath:String = <span class="constructor">NSHomeDirectory()</span> + <span class="string">&quot;/Documents/array.plist&quot;</span></span><br><span class="line"><span class="built_in">array</span>.write(toFile: filePath, atomically: <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p><img src="/assets/ios_file/if_09.png" alt="把NSArray写在文件中"></p><h3 id="把NSDirectionary保存到文件中"><a href="#把NSDirectionary保存到文件中" class="headerlink" title="把NSDirectionary保存到文件中"></a>把NSDirectionary保存到文件中</h3><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dictionary:<span class="attr">NSDictionary</span> = [<span class="string">&quot;Gold&quot;</span>: <span class="string">&quot;1st Place&quot;</span>, <span class="string">&quot;Silver&quot;</span>: <span class="string">&quot;2nd Place&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> filePath:<span class="attr">String</span> = NSHomeDirectory() + <span class="string">&quot;/Documents/dictionary.plist&quot;</span></span><br><span class="line">dictionary.write(toFile: filePath, atomically: <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p><img src="/assets/ios_file/if_10.png" alt="把NSDirectionary保存到文件中"></p><h1 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//在文档目录下新建test.txt文件</span></span><br><span class="line">        <span class="keyword">let</span> manager = <span class="module-access"><span class="module"><span class="identifier">FileManager</span>.</span></span>default</span><br><span class="line">        <span class="keyword">let</span> urlForDocument = manager.urls( <span class="keyword">for</span>: .documentDirectory,</span><br><span class="line">                                           <span class="keyword">in</span>:.userDomainMask)</span><br><span class="line">        <span class="keyword">let</span> url = urlForDocument<span class="literal">[<span class="number">0</span>]</span></span><br><span class="line">        create<span class="constructor">File(<span class="params">name</span>:<span class="string">&quot;test.txt&quot;</span>, <span class="params">fileBaseUrl</span>: <span class="params">url</span>)</span></span><br><span class="line"><span class="comment">//创建文件的方法</span></span><br><span class="line">func create<span class="constructor">File(<span class="params">name</span>:String, <span class="params">fileBaseUrl</span>:URL)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> manager = <span class="module-access"><span class="module"><span class="identifier">FileManager</span>.</span></span>default</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> file = fileBaseUrl.appending<span class="constructor">PathComponent(<span class="params">name</span>)</span></span><br><span class="line">        print(<span class="string">&quot;文件: \(file)&quot;</span>)</span><br><span class="line">        <span class="keyword">let</span> exist = manager.file<span class="constructor">Exists(<span class="params">atPath</span>: <span class="params">file</span>.<span class="params">path</span>)</span></span><br><span class="line">        <span class="keyword">if</span> !exist &#123;</span><br><span class="line">            <span class="keyword">let</span> data = <span class="constructor">Data(<span class="params">base64Encoded</span>:<span class="string">&quot;aGVsbG8gd29ybGQ=&quot;</span> ,<span class="params">options</span>:.<span class="params">ignoreUnknownCharacters</span>)</span></span><br><span class="line">            <span class="keyword">let</span> createSuccess = manager.create<span class="constructor">File(<span class="params">atPath</span>: <span class="params">file</span>.<span class="params">path</span>,<span class="params">contents</span>:<span class="params">data</span>,<span class="params">attributes</span>:<span class="params">nil</span>)</span></span><br><span class="line">            print(<span class="string">&quot;文件创建结果: \(createSuccess)&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/assets/ios_file/if_11.png" alt="创建文件"></p><h1 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fileManager = <span class="module-access"><span class="module"><span class="identifier">FileManager</span>.</span></span>default</span><br><span class="line"><span class="keyword">let</span> homeDirectory = <span class="constructor">NSHomeDirectory()</span></span><br><span class="line"><span class="keyword">let</span> srcUrl = homeDirectory + <span class="string">&quot;/Documents/hangge.txt&quot;</span></span><br><span class="line"><span class="keyword">let</span> toUrl = homeDirectory + <span class="string">&quot;/Documents/copyed.txt&quot;</span></span><br><span class="line"><span class="keyword">try</span>! fileManager.copy<span class="constructor">Item(<span class="params">atPath</span>: <span class="params">srcUrl</span>, <span class="params">toPath</span>: <span class="params">toUrl</span>)</span></span><br></pre></td></tr></table></figure><p><img src="/assets/ios_file/if_12/png" alt="复制文件"><br>另一种方法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定位到用户文档目录</span></span><br><span class="line"><span class="keyword">let</span> manager = <span class="module-access"><span class="module"><span class="identifier">FileManager</span>.</span></span>default</span><br><span class="line"><span class="keyword">let</span> urlForDocument = manager.urls( <span class="keyword">for</span>:.documentDirectory, <span class="keyword">in</span>:.userDomainMask)</span><br><span class="line"><span class="keyword">let</span> url = urlForDocument<span class="literal">[<span class="number">0</span>]</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 将test.txt文件拷贝到文档目录根目录下的copyed.txt文件</span></span><br><span class="line"><span class="keyword">let</span> srcUrl = url.appending<span class="constructor">PathComponent(<span class="string">&quot;test.txt&quot;</span>)</span></span><br><span class="line"><span class="keyword">let</span> toUrl = url.appending<span class="constructor">PathComponent(<span class="string">&quot;copyed.txt&quot;</span>)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">try</span>! manager.copy<span class="constructor">Item(<span class="params">at</span>: <span class="params">srcUrl</span>, <span class="params">to</span>: <span class="params">toUrl</span>)</span></span><br></pre></td></tr></table></figure><h1 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fileManager = <span class="module-access"><span class="module"><span class="identifier">FileManager</span>.</span></span>default</span><br><span class="line"><span class="keyword">let</span> homeDirectory = <span class="constructor">NSHomeDirectory()</span></span><br><span class="line"><span class="keyword">let</span> srcUrl = homeDirectory + <span class="string">&quot;/Documents/hangge.txt&quot;</span></span><br><span class="line"><span class="keyword">let</span> toUrl = homeDirectory + <span class="string">&quot;/Documents/moved/hangge.txt&quot;</span></span><br><span class="line"><span class="keyword">try</span>! fileManager.move<span class="constructor">Item(<span class="params">atPath</span>: <span class="params">srcUrl</span>, <span class="params">toPath</span>: <span class="params">toUrl</span>)</span></span><br></pre></td></tr></table></figure><p>另外一种方法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定位到用户文档目录</span></span><br><span class="line"><span class="keyword">let</span> manager = <span class="module-access"><span class="module"><span class="identifier">FileManager</span>.</span></span>default</span><br><span class="line"><span class="keyword">let</span> urlForDocument = manager.urls( <span class="keyword">for</span>: .documentDirectory, <span class="keyword">in</span>:.userDomainMask)</span><br><span class="line"><span class="keyword">let</span> url = urlForDocument<span class="literal">[<span class="number">0</span>]</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> srcUrl = url.appending<span class="constructor">PathComponent(<span class="string">&quot;test.txt&quot;</span>)</span></span><br><span class="line"><span class="keyword">let</span> toUrl = url.appending<span class="constructor">PathComponent(<span class="string">&quot;copyed.txt&quot;</span>)</span></span><br><span class="line"><span class="comment">// 移动srcUrl中的文件（test.txt）到toUrl中（copyed.txt）</span></span><br><span class="line"><span class="keyword">try</span>! manager.move<span class="constructor">Item(<span class="params">at</span>: <span class="params">srcUrl</span>, <span class="params">to</span>: <span class="params">toUrl</span>)</span></span><br></pre></td></tr></table></figure><h1 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fileManager = <span class="module-access"><span class="module"><span class="identifier">FileManager</span>.</span></span>default</span><br><span class="line"><span class="keyword">let</span> homeDirectory = <span class="constructor">NSHomeDirectory()</span></span><br><span class="line"><span class="keyword">let</span> srcUrl = homeDirectory + <span class="string">&quot;/Documents/hangge.txt&quot;</span></span><br><span class="line"><span class="keyword">try</span>! fileManager.remove<span class="constructor">Item(<span class="params">atPath</span>: <span class="params">srcUrl</span>)</span></span><br></pre></td></tr></table></figure><p>另一种方法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定位到用户文档目录</span></span><br><span class="line"><span class="keyword">let</span> manager = <span class="module-access"><span class="module"><span class="identifier">FileManager</span>.</span></span>default</span><br><span class="line"><span class="keyword">let</span> urlForDocument = manager.urls(<span class="keyword">for</span>: .documentDirectory, <span class="keyword">in</span>:.userDomainMask)</span><br><span class="line"><span class="keyword">let</span> url = urlForDocument<span class="literal">[<span class="number">0</span>]</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> toUrl = url.appending<span class="constructor">PathComponent(<span class="string">&quot;copyed.txt&quot;</span>)</span></span><br><span class="line"><span class="comment">// 删除文档根目录下的toUrl路径的文件（copyed.txt文件）</span></span><br><span class="line"><span class="keyword">try</span>! manager.remove<span class="constructor">Item(<span class="params">at</span>: <span class="params">toUrl</span>)</span></span><br></pre></td></tr></table></figure><h1 id="删除目录下所有的文件"><a href="#删除目录下所有的文件" class="headerlink" title="删除目录下所有的文件"></a>删除目录下所有的文件</h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fileManager = <span class="module-access"><span class="module"><span class="identifier">FileManager</span>.</span></span>default</span><br><span class="line"><span class="keyword">let</span> myDirectory = <span class="constructor">NSHomeDirectory()</span> + <span class="string">&quot;/Documents/Files&quot;</span></span><br><span class="line"><span class="keyword">let</span> fileArray = fileManager.subpaths(atPath: myDirectory)</span><br><span class="line"><span class="keyword">for</span> fn <span class="keyword">in</span> fileArray!&#123;</span><br><span class="line">    <span class="keyword">try</span>! fileManager.remove<span class="constructor">Item(<span class="params">atPath</span>: <span class="params">myDirectory</span> + <span class="string">&quot;/\(fn)&quot;</span>)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除目录后，再创建该目录</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fileManager <span class="operator">=</span> <span class="type">FileManager</span>.default</span><br><span class="line"><span class="keyword">let</span> myDirectory <span class="operator">=</span> <span class="type">NSHomeDirectory</span>() <span class="operator">+</span> <span class="string">&quot;/Documents/Files&quot;</span></span><br><span class="line"><span class="keyword">try!</span> fileManager.removeItem(atPath: myDirectory)</span><br><span class="line"><span class="keyword">try!</span> fileManager.createDirectory(atPath: myDirectory, withIntermediateDirectories: <span class="literal">true</span>,</span><br><span class="line">                                 attributes: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><h1 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> manager = <span class="module-access"><span class="module"><span class="identifier">FileManager</span>.</span></span>default</span><br><span class="line"><span class="keyword">let</span> urlsForDocDirectory = manager.urls(<span class="keyword">for</span>: .documentDirectory, <span class="keyword">in</span>:.userDomainMask)</span><br><span class="line"><span class="keyword">let</span> docPath = urlsForDocDirectory<span class="literal">[<span class="number">0</span>]</span></span><br><span class="line"><span class="keyword">let</span> file = docPath.appending<span class="constructor">PathComponent(<span class="string">&quot;test.txt&quot;</span>)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//方法1</span></span><br><span class="line"><span class="keyword">let</span> readHandler = <span class="keyword">try</span>! <span class="constructor">FileHandle(<span class="params">forReadingFrom</span>:<span class="params">file</span>)</span></span><br><span class="line"><span class="keyword">let</span> data = readHandler.read<span class="constructor">DataToEndOfFile()</span></span><br><span class="line"><span class="keyword">let</span> readString = <span class="constructor">String(<span class="params">data</span>: <span class="params">data</span>, <span class="params">encoding</span>: String.Encoding.<span class="params">utf8</span>)</span></span><br><span class="line">print(<span class="string">&quot;文件内容: \(readString)&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">//方法2</span></span><br><span class="line"><span class="keyword">let</span> data2 = manager.contents(atPath: file.path)</span><br><span class="line"><span class="keyword">let</span> readString2 = <span class="constructor">String(<span class="params">data</span>: <span class="params">data2</span>!, <span class="params">encoding</span>: String.Encoding.<span class="params">utf8</span>)</span></span><br><span class="line">print(<span class="string">&quot;文件内容: \(readString2)&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/assets/ios_file/if_13.png" alt="读取文件"></p><h1 id="在任意位置写入数据"><a href="#在任意位置写入数据" class="headerlink" title="在任意位置写入数据"></a>在任意位置写入数据</h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> manager = <span class="module-access"><span class="module"><span class="identifier">FileManager</span>.</span></span>default</span><br><span class="line"><span class="keyword">let</span> urlsForDocDirectory = manager.urls(<span class="keyword">for</span>:.documentDirectory, <span class="keyword">in</span>:.userDomainMask)</span><br><span class="line"><span class="keyword">let</span> docPath = urlsForDocDirectory<span class="literal">[<span class="number">0</span>]</span></span><br><span class="line"><span class="keyword">let</span> file = docPath.appending<span class="constructor">PathComponent(<span class="string">&quot;test.txt&quot;</span>)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="built_in">string</span> = <span class="string">&quot;添加一些文字到文件末尾&quot;</span></span><br><span class="line"><span class="keyword">let</span> appendedData = <span class="built_in">string</span>.data(using: <span class="module-access"><span class="module"><span class="identifier">String</span>.</span><span class="module"><span class="identifier">Encoding</span>.</span></span>utf8, allowLossyConversion: <span class="literal">true</span>)</span><br><span class="line"><span class="keyword">let</span> writeHandler = <span class="keyword">try</span>? <span class="constructor">FileHandle(<span class="params">forWritingTo</span>:<span class="params">file</span>)</span></span><br><span class="line">writeHandler!.seek<span class="constructor">ToEndOfFile()</span></span><br><span class="line">writeHandler!.write(appendedData!)</span><br></pre></td></tr></table></figure><p><img src="/assets/ios_file/if_14.png" alt="在任意位置写入数据"></p><h1 id="文件权限判断"><a href="#文件权限判断" class="headerlink" title="文件权限判断"></a>文件权限判断</h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> manager = <span class="module-access"><span class="module"><span class="identifier">FileManager</span>.</span></span>default</span><br><span class="line"><span class="keyword">let</span> urlForDocument = manager.urls(<span class="keyword">for</span>: .documentDirectory, <span class="keyword">in</span>:.userDomainMask)</span><br><span class="line"><span class="keyword">let</span> docPath = urlForDocument<span class="literal">[<span class="number">0</span>]</span></span><br><span class="line"><span class="keyword">let</span> file = docPath.appending<span class="constructor">PathComponent(<span class="string">&quot;test.txt&quot;</span>)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> readable = manager.is<span class="constructor">ReadableFile(<span class="params">atPath</span>: <span class="params">file</span>.<span class="params">path</span>)</span></span><br><span class="line">print(<span class="string">&quot;可读: \(readable)&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> writeable = manager.is<span class="constructor">WritableFile(<span class="params">atPath</span>: <span class="params">file</span>.<span class="params">path</span>)</span></span><br><span class="line">print(<span class="string">&quot;可写: \(writeable)&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> executable = manager.is<span class="constructor">ExecutableFile(<span class="params">atPath</span>: <span class="params">file</span>.<span class="params">path</span>)</span></span><br><span class="line">print(<span class="string">&quot;可执行: \(executable)&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> deleteable = manager.is<span class="constructor">DeletableFile(<span class="params">atPath</span>: <span class="params">file</span>.<span class="params">path</span>)</span></span><br><span class="line">print(<span class="string">&quot;可删除: \(deleteable)&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/assets/ios_file/if_15.png" alt="文件权限判断"></p><h1 id="获取文件属性（创建时间，修改时间，文件大小，文件类型等信息"><a href="#获取文件属性（创建时间，修改时间，文件大小，文件类型等信息" class="headerlink" title="获取文件属性（创建时间，修改时间，文件大小，文件类型等信息"></a>获取文件属性（创建时间，修改时间，文件大小，文件类型等信息</h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> manager = <span class="module-access"><span class="module"><span class="identifier">FileManager</span>.</span></span>default</span><br><span class="line"><span class="keyword">let</span> urlForDocument = manager.urls(<span class="keyword">for</span>: .documentDirectory, <span class="keyword">in</span>:.userDomainMask)</span><br><span class="line"><span class="keyword">let</span> docPath = urlForDocument<span class="literal">[<span class="number">0</span>]</span></span><br><span class="line"><span class="keyword">let</span> file = docPath.appending<span class="constructor">PathComponent(<span class="string">&quot;test.txt&quot;</span>)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> attributes = <span class="keyword">try</span>? manager.attributes<span class="constructor">OfItem(<span class="params">atPath</span>: <span class="params">file</span>.<span class="params">path</span>)</span> <span class="comment">//结果为Dictionary类型</span></span><br><span class="line">print(<span class="string">&quot;attributes: \(attributes!)&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/assets/ios_file/if_16.png" alt="获取文件属性"><br>感觉内容太多，不清晰，我们可以拆分一下</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">print</span>(<span class="string">&quot;创建时间：\(attributes![FileAttributeKey.creationDate]!)&quot;</span>)</span></span><br><span class="line">        <span class="function"><span class="title">print</span>(<span class="string">&quot;修改时间：\(attributes![FileAttributeKey.modificationDate]!)&quot;</span>)</span></span><br><span class="line">        <span class="function"><span class="title">print</span>(<span class="string">&quot;文件大小：\(attributes![FileAttributeKey.size]!)&quot;</span>)</span></span><br></pre></td></tr></table></figure><p><img src="/assets/ios_file/if_17.png" alt="文件属性"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;文件操作&lt;/p&gt;</summary>
    
    
    
    
    <category term="ios" scheme="http://www.paulniu.com/tags/ios/"/>
    
  </entry>
  
</feed>
